
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08009938  08009938  00019938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a43c  0800a43c  000202f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a444  0800a444  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0800a44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051d8  200002f4  0800a740  000202f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054cc  0800a740  000254cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c510  00000000  00000000  00020367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000329a  00000000  00000000  0002c877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0002fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b25  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160c8  00000000  00000000  0003155d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f16e  00000000  00000000  00047625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075b20  00000000  00000000  00056793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  000cc2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f4 	.word	0x200002f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009920 	.word	0x08009920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f8 	.word	0x200002f8
 80001dc:	08009920 	.word	0x08009920

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	332c      	adds	r3, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001026:	f44f 7240 	mov.w	r2, #768	; 0x300
 800102a:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	40d3      	lsrs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	211f      	movs	r1, #31
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 011f 	and.w	r1, r3, #31
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08d      	sub	sp, #52	; 0x34
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	330c      	adds	r3, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	617a      	str	r2, [r7, #20]
  return result;
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	40d3      	lsrs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010e0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010e4:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	61f9      	str	r1, [r7, #28]
  return result;
 80010ee:	69f9      	ldr	r1, [r7, #28]
 80010f0:	fab1 f181 	clz	r1, r1
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	40cb      	lsrs	r3, r1
 80010f8:	2107      	movs	r1, #7
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001108:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001110:	fa91 f1a1 	rbit	r1, r1
 8001114:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001118:	fab1 f181 	clz	r1, r1
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	40cb      	lsrs	r3, r1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800112c:	bf00      	nop
 800112e:	3734      	adds	r7, #52	; 0x34
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_RCC_HSI_IsReady+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 0203 	bic.w	r2, r3, #3
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023800 	.word	0x40023800

08001258 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LL_RCC_GetSysClkSource+0x18>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800

0800129c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ac:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800

08001318 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <LL_RCC_PLL_IsReady+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001374:	4013      	ands	r3, r2
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	430a      	orrs	r2, r1
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	4904      	ldr	r1, [pc, #16]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800
 80013a8:	ffbf8000 	.word	0xffbf8000

080013ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800

0800140c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3302      	adds	r3, #2
 800144e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	43db      	mvns	r3, r3
 8001458:	ea02 0103 	and.w	r1, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	60bb      	str	r3, [r7, #8]
  return result;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	fa03 f202 	lsl.w	r2, r3, r2
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	430a      	orrs	r2, r1
 8001482:	3302      	adds	r3, #2
 8001484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40013800 	.word	0x40013800

08001498 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0207 	bic.w	r2, r3, #7
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_FLASH_GetLatency+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80014ec:	4904      	ldr	r1, [pc, #16]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40007000 	.word	0x40007000

08001504 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0210 	bic.w	r2, r3, #16
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0208 	bic.w	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	f023 0307 	bic.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	615a      	str	r2, [r3, #20]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	613b      	str	r3, [r7, #16]
  return result;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2103      	movs	r1, #3
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	61bb      	str	r3, [r7, #24]
  return result;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b089      	sub	sp, #36	; 0x24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	613b      	str	r3, [r7, #16]
  return result;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2103      	movs	r1, #3
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	401a      	ands	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	61bb      	str	r3, [r7, #24]
  return result;
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001752:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001756:	f7ff fe59 	bl	800140c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800175a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800175e:	f7ff fe3d 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001762:	2007      	movs	r0, #7
 8001764:	f7ff fba6 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001768:	f000 f818 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176c:	f000 fb26 	bl	8001dbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001770:	f000 f862 	bl	8001838 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001774:	f000 f8de 	bl	8001934 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001778:	f000 f99e 	bl	8001ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800177c:	f000 f9d4 	bl	8001b28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001780:	f000 fa12 	bl	8001ba8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001784:	f000 fa50 	bl	8001c28 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001788:	f000 fac8 	bl	8001d1c <MX_USART2_UART_Init>
  MX_TIM9_Init();
 800178c:	f000 fa8c 	bl	8001ca8 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001790:	f000 f93e 	bl	8001a10 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001794:	f003 ffdc 	bl	8005750 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001798:	e7fe      	b.n	8001798 <main+0x4a>
	...

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f7ff fe79 	bl	8001498 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80017a6:	bf00      	nop
 80017a8:	f7ff fe8a 	bl	80014c0 <LL_FLASH_GetLatency>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d1fa      	bne.n	80017a8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80017b2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80017b6:	f7ff fe91 	bl	80014dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80017ba:	2010      	movs	r0, #16
 80017bc:	f7ff fd22 	bl	8001204 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80017c0:	f7ff fcfe 	bl	80011c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017c4:	bf00      	nop
 80017c6:	f7ff fd0b 	bl	80011e0 <LL_RCC_HSI_IsReady>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d1fa      	bne.n	80017c6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 80017d0:	2300      	movs	r3, #0
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	2108      	movs	r1, #8
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fdc2 	bl	8001360 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80017dc:	f7ff fd9c 	bl	8001318 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80017e0:	bf00      	nop
 80017e2:	f7ff fda9 	bl	8001338 <LL_RCC_PLL_IsReady>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d1fa      	bne.n	80017e2 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80017ec:	bf00      	nop
 80017ee:	f7ff fe89 	bl	8001504 <LL_PWR_IsActiveFlag_VOS>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0fa      	beq.n	80017ee <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fd3b 	bl	8001274 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80017fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001802:	f7ff fd4b 	bl	800129c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fd5c 	bl	80012c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800180c:	2002      	movs	r0, #2
 800180e:	f7ff fd0f 	bl	8001230 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001812:	bf00      	nop
 8001814:	f7ff fd20 	bl	8001258 <LL_RCC_GetSysClkSource>
 8001818:	4603      	mov	r3, r0
 800181a:	2b08      	cmp	r3, #8
 800181c:	d1fa      	bne.n	8001814 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <SystemClock_Config+0x98>)
 8001820:	f002 fad6 	bl	8003dd0 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <SystemClock_Config+0x98>)
 8001826:	f002 fae1 	bl	8003dec <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fd5e 	bl	80012ec <LL_RCC_SetTIMPrescaler>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	05f5e100 	.word	0x05f5e100

08001838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800183e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800186e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001872:	f7ff fdcb 	bl	800140c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fd98 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800187c:	2002      	movs	r0, #2
 800187e:	f7ff fd95 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_ADC1_Init+0xe8>)
 8001894:	f001 fb98 	bl	8002fc8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin|LL_GPIO_PIN_1;
 8001898:	2303      	movs	r3, #3
 800189a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800189c:	2303      	movs	r3, #3
 800189e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	481e      	ldr	r0, [pc, #120]	; (8001924 <MX_ADC1_Init+0xec>)
 80018aa:	f001 fb8d 	bl	8002fc8 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80018ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018be:	4619      	mov	r1, r3
 80018c0:	4819      	ldr	r0, [pc, #100]	; (8001928 <MX_ADC1_Init+0xf0>)
 80018c2:	f001 f8f7 	bl	8002ab4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_ADC1_Init+0xf0>)
 80018e2:	f001 f913 	bl	8002b0c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80018e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <MX_ADC1_Init+0xf0>)
 80018ec:	f7ff fbc5 	bl	800107a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_ADC1_Init+0xf4>)
 80018fe:	f001 f8bb 	bl	8002a78 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <MX_ADC1_Init+0xf8>)
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_ADC1_Init+0xf0>)
 800190a:	f7ff fb80 	bl	800100e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_15CYCLES);
 800190e:	2201      	movs	r2, #1
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <MX_ADC1_Init+0xf8>)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_ADC1_Init+0xf0>)
 8001914:	f7ff fbc4 	bl	80010a0 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3740      	adds	r7, #64	; 0x40
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40012000 	.word	0x40012000
 800192c:	40012300 	.word	0x40012300
 8001930:	03200006 	.word	0x03200006

08001934 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	2220      	movs	r2, #32
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f005 feb2 	bl	80076ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001958:	2004      	movs	r0, #4
 800195a:	f7ff fd27 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fd24 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001968:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800196a:	2302      	movs	r3, #2
 800196c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001972:	2301      	movs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001976:	2301      	movs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800197a:	2304      	movs	r3, #4
 800197c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	481f      	ldr	r0, [pc, #124]	; (8001a00 <MX_I2C3_Init+0xcc>)
 8001984:	f001 fb20 	bl	8002fc8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800198e:	2302      	movs	r3, #2
 8001990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800199a:	2301      	movs	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800199e:	2304      	movs	r3, #4
 80019a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4817      	ldr	r0, [pc, #92]	; (8001a04 <MX_I2C3_Init+0xd0>)
 80019a8:	f001 fb0e 	bl	8002fc8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80019ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019b0:	f7ff fd14 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <MX_I2C3_Init+0xd4>)
 80019b6:	f7ff fbf2 	bl	800119e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 80019ba:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_I2C3_Init+0xd4>)
 80019bc:	f7ff fbcc 	bl	8001158 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 80019c0:	4811      	ldr	r0, [pc, #68]	; (8001a08 <MX_I2C3_Init+0xd4>)
 80019c2:	f7ff fbb9 	bl	8001138 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_I2C3_Init+0xd8>)
 80019cc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_I2C3_Init+0xd4>)
 80019ea:	f001 fc6d 	bl	80032c8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_I2C3_Init+0xd4>)
 80019f2:	f7ff fbc1 	bl	8001178 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3738      	adds	r7, #56	; 0x38
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40005c00 	.word	0x40005c00
 8001a0c:	000186a0 	.word	0x000186a0

08001a10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	; 0x40
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	2228      	movs	r2, #40	; 0x28
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 fe44 	bl	80076ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a38:	f7ff fcd0 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f7ff fcb5 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001a42:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <MX_SPI2_Init+0xa0>)
 8001a62:	f001 fab1 	bl	8002fc8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a6e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a9a:	f001 fdac 	bl	80035f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001aa2:	f7ff fd43 	bl	800152c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3740      	adds	r7, #64	; 0x40
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40003800 	.word	0x40003800

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fc85 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001ad2:	2363      	movs	r3, #99	; 0x63
 8001ad4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ade:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aec:	f001 fe10 	bl	8003710 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001af0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001af4:	f7ff fd50 	bl	8001598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001af8:	2100      	movs	r1, #0
 8001afa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001afe:	f7ff fd5b 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001b02:	2108      	movs	r1, #8
 8001b04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b08:	f7ff fd23 	bl	8001552 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b12:	f7ff fd66 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001b16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b1a:	f7ff fd75 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fc4d 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b42:	f7ff f9db 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa2b 	bl	8000fa8 <NVIC_EncodePriority>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	201d      	movs	r0, #29
 8001b58:	f7ff f9fc 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001b5c:	201d      	movs	r0, #29
 8001b5e:	f7ff f9db 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001b62:	2363      	movs	r3, #99	; 0x63
 8001b64:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <MX_TIM3_Init+0x7c>)
 8001b7a:	f001 fdc9 	bl	8003710 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_TIM3_Init+0x7c>)
 8001b80:	f7ff fcfa 	bl	8001578 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b84:	2100      	movs	r1, #0
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <MX_TIM3_Init+0x7c>)
 8001b88:	f7ff fd16 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_TIM3_Init+0x7c>)
 8001b90:	f7ff fd27 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <MX_TIM3_Init+0x7c>)
 8001b96:	f7ff fd37 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40000400 	.word	0x40000400

08001ba8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001bbc:	2004      	movs	r0, #4
 8001bbe:	f7ff fc0d 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bc2:	f7ff f99b 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f9eb 	bl	8000fa8 <NVIC_EncodePriority>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	201e      	movs	r0, #30
 8001bd8:	f7ff f9bc 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001bdc:	201e      	movs	r0, #30
 8001bde:	f7ff f99b 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001be2:	2363      	movs	r3, #99	; 0x63
 8001be4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <MX_TIM4_Init+0x7c>)
 8001bfa:	f001 fd89 	bl	8003710 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <MX_TIM4_Init+0x7c>)
 8001c00:	f7ff fcba 	bl	8001578 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c04:	2100      	movs	r1, #0
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM4_Init+0x7c>)
 8001c08:	f7ff fcd6 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM4_Init+0x7c>)
 8001c10:	f7ff fce7 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM4_Init+0x7c>)
 8001c16:	f7ff fcf7 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8001c3c:	2008      	movs	r0, #8
 8001c3e:	f7ff fbcd 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 8001c42:	f7ff f95b 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2202      	movs	r2, #2
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f9ab 	bl	8000fa8 <NVIC_EncodePriority>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4619      	mov	r1, r3
 8001c56:	2032      	movs	r0, #50	; 0x32
 8001c58:	f7ff f97c 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f7ff f95b 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 8001c6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c6e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <MX_TIM5_Init+0x7c>)
 8001c7a:	f001 fd49 	bl	8003710 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <MX_TIM5_Init+0x7c>)
 8001c80:	f7ff fc8a 	bl	8001598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c84:	2100      	movs	r1, #0
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM5_Init+0x7c>)
 8001c88:	f7ff fc96 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_TIM5_Init+0x7c>)
 8001c90:	f7ff fca7 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM5_Init+0x7c>)
 8001c96:	f7ff fcb7 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40000c00 	.word	0x40000c00

08001ca8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8001cbc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cc0:	f7ff fba4 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8001cc4:	f7ff f91a 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f96a 	bl	8000fa8 <NVIC_EncodePriority>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	2018      	movs	r0, #24
 8001cda:	f7ff f93b 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cde:	2018      	movs	r0, #24
 8001ce0:	f7ff f91a 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8001cec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001cf0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4807      	ldr	r0, [pc, #28]	; (8001d18 <MX_TIM9_Init+0x70>)
 8001cfc:	f001 fd08 	bl	8003710 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_TIM9_Init+0x70>)
 8001d02:	f7ff fc49 	bl	8001598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d06:	2100      	movs	r1, #0
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <MX_TIM9_Init+0x70>)
 8001d0a:	f7ff fc55 	bl	80015b8 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40014000 	.word	0x40014000

08001d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001d46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d4a:	f7ff fb47 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff fb2c 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d54:	230c      	movs	r3, #12
 8001d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <MX_USART2_UART_Init+0x98>)
 8001d72:	f001 f929 	bl	8002fc8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001d76:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d7a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d88:	230c      	movs	r3, #12
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_USART2_UART_Init+0x9c>)
 8001d9c:	f001 ff9a 	bl	8003cd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USART2_UART_Init+0x9c>)
 8001da2:	f7ff fc51 	bl	8001648 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_USART2_UART_Init+0x9c>)
 8001da8:	f7ff fc3e 	bl	8001628 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40004400 	.word	0x40004400

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001dc2:	f107 0318 	add.w	r3, r7, #24
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	611a      	str	r2, [r3, #16]
 8001dda:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ddc:	2004      	movs	r0, #4
 8001dde:	f7ff fae5 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001de2:	2080      	movs	r0, #128	; 0x80
 8001de4:	f7ff fae2 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fadf 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dee:	2002      	movs	r0, #2
 8001df0:	f7ff fadc 	bl	80013ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001df4:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001df8:	4842      	ldr	r0, [pc, #264]	; (8001f04 <MX_GPIO_Init+0x148>)
 8001dfa:	f7ff fc99 	bl	8001730 <LL_GPIO_ResetOutputPin>
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8001dfe:	2130      	movs	r1, #48	; 0x30
 8001e00:	4841      	ldr	r0, [pc, #260]	; (8001f08 <MX_GPIO_Init+0x14c>)
 8001e02:	f7ff fc95 	bl	8001730 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin
 8001e06:	f247 3104 	movw	r1, #29444	; 0x7304
 8001e0a:	4840      	ldr	r0, [pc, #256]	; (8001f0c <MX_GPIO_Init+0x150>)
 8001e0c:	f7ff fc90 	bl	8001730 <LL_GPIO_ResetOutputPin>
                          |Motor_L2_Pin|Motor_R2_Pin);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001e10:	493f      	ldr	r1, [pc, #252]	; (8001f10 <MX_GPIO_Init+0x154>)
 8001e12:	2002      	movs	r0, #2
 8001e14:	f7ff fb12 	bl	800143c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e26:	2302      	movs	r3, #2
 8001e28:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e2a:	f107 0318 	add.w	r3, r7, #24
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 ff46 	bl	8002cc0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3a:	4832      	ldr	r0, [pc, #200]	; (8001f04 <MX_GPIO_Init+0x148>)
 8001e3c:	f7ff fc49 	bl	80016d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e46:	482f      	ldr	r0, [pc, #188]	; (8001f04 <MX_GPIO_Init+0x148>)
 8001e48:	f7ff fc14 	bl	8001674 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001e4c:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001e50:	603b      	str	r3, [r7, #0]
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e52:	2301      	movs	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e62:	463b      	mov	r3, r7
 8001e64:	4619      	mov	r1, r3
 8001e66:	4827      	ldr	r0, [pc, #156]	; (8001f04 <MX_GPIO_Init+0x148>)
 8001e68:	f001 f8ae 	bl	8002fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e70:	2301      	movs	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4820      	ldr	r0, [pc, #128]	; (8001f08 <MX_GPIO_Init+0x14c>)
 8001e86:	f001 f89f 	bl	8002fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4819      	ldr	r0, [pc, #100]	; (8001f08 <MX_GPIO_Init+0x14c>)
 8001ea4:	f001 f890 	bl	8002fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eac:	2301      	movs	r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <MX_GPIO_Init+0x150>)
 8001ec2:	f001 f881 	bl	8002fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin|Motor_L2_Pin
 8001ec6:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8001eca:	603b      	str	r3, [r7, #0]
                          |Motor_R2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <MX_GPIO_Init+0x150>)
 8001ee2:	f001 f871 	bl	8002fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWL_Pin|SWR_Pin;
 8001ee6:	2330      	movs	r3, #48	; 0x30
 8001ee8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_GPIO_Init+0x150>)
 8001ef8:	f001 f866 	bl	8002fc8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	00f00003 	.word	0x00f00003

08001f14 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	b29b      	uxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f06f 0202 	mvn.w	r2, #2
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_TIM_SetAutoReload>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f06f 0201 	mvn.w	r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Sensor_ADC_Read>:





__STATIC_INLINE uint16_t	Sensor_ADC_Read() {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
	static uint16_t adcValue = 0;


	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <Sensor_ADC_Read+0x44>)
 8001fd2:	f7ff ffcf 	bl	8001f74 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <Sensor_ADC_Read+0x44>)
 8001fd8:	f7ff ff9c 	bl	8001f14 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8001fdc:	bf00      	nop
 8001fde:	480b      	ldr	r0, [pc, #44]	; (800200c <Sensor_ADC_Read+0x44>)
 8001fe0:	f7ff ffb5 	bl	8001f4e <LL_ADC_IsActiveFlag_EOCS>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f9      	beq.n	8001fde <Sensor_ADC_Read+0x16>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <Sensor_ADC_Read+0x44>)
 8001fec:	f7ff ffa2 	bl	8001f34 <LL_ADC_REG_ReadConversionData12>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <Sensor_ADC_Read+0x48>)
 8001ff6:	801a      	strh	r2, [r3, #0]
	LL_ADC_ClearFlag_EOCS(ADC1);
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <Sensor_ADC_Read+0x44>)
 8001ffa:	f7ff ffbb 	bl	8001f74 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffe:	b662      	cpsie	i
}
 8002000:	bf00      	nop
	__enable_irq();
	return adcValue;
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <Sensor_ADC_Read+0x48>)
 8002004:	881b      	ldrh	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40012000 	.word	0x40012000
 8002010:	20000328 	.word	0x20000328

08002014 <Make_Sensor_Raw_Vals>:


// rawValue 계산
__STATIC_INLINE void		Make_Sensor_Raw_Vals(uint8_t idx) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]

	static uint8_t	midian[3] = { 0, };

	GPIOC->ODR = (GPIOC->ODR & ~0x07) | (idx) | 0x08;
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <Make_Sensor_Raw_Vals+0x120>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4313      	orrs	r3, r2
 800202a:	4a42      	ldr	r2, [pc, #264]	; (8002134 <Make_Sensor_Raw_Vals+0x120>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6153      	str	r3, [r2, #20]
	// ADC 읽기
	midian[0] = Sensor_ADC_Read() >> 4;
 8002032:	f7ff ffc9 	bl	8001fc8 <Sensor_ADC_Read>
 8002036:	4603      	mov	r3, r0
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	b29b      	uxth	r3, r3
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002040:	701a      	strb	r2, [r3, #0]
	midian[1] = Sensor_ADC_Read() >> 4;
 8002042:	f7ff ffc1 	bl	8001fc8 <Sensor_ADC_Read>
 8002046:	4603      	mov	r3, r0
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	b29b      	uxth	r3, r3
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002050:	705a      	strb	r2, [r3, #1]
	midian[2] = Sensor_ADC_Read() >> 4;
 8002052:	f7ff ffb9 	bl	8001fc8 <Sensor_ADC_Read>
 8002056:	4603      	mov	r3, r0
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	b29b      	uxth	r3, r3
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002060:	709a      	strb	r2, [r3, #2]

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <Make_Sensor_Raw_Vals+0x120>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4a33      	ldr	r2, [pc, #204]	; (8002134 <Make_Sensor_Raw_Vals+0x120>)
 8002068:	f023 0308 	bic.w	r3, r3, #8
 800206c:	6153      	str	r3, [r2, #20]
	// 0000 {1}(XXX) == 0000 {LED}(다음 번 i)
//	GPIOC->ODR = (GPIOC->ODR & ~0x07) | ( (sensorReadIdx + 1) & 0x07 ) | 0x08;


	// 중앙값을 sensorRawVals[i]에 저장
	if (midian[0] > midian[1]) {
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	429a      	cmp	r2, r3
 8002078:	d917      	bls.n	80020aa <Make_Sensor_Raw_Vals+0x96>
		SWAP(midian[0], midian[1]);
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	4053      	eors	r3, r2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 800208c:	785a      	ldrb	r2, [r3, #1]
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	4053      	eors	r3, r2
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002098:	705a      	strb	r2, [r3, #1]
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	4053      	eors	r3, r2
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020a8:	701a      	strb	r2, [r3, #0]
	}
	if (midian[1] > midian[2]) {
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020ac:	785a      	ldrb	r2, [r3, #1]
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020b0:	789b      	ldrb	r3, [r3, #2]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d917      	bls.n	80020e6 <Make_Sensor_Raw_Vals+0xd2>
		SWAP(midian[1], midian[2]);
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020b8:	785a      	ldrb	r2, [r3, #1]
 80020ba:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020bc:	789b      	ldrb	r3, [r3, #2]
 80020be:	4053      	eors	r3, r2
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020c4:	705a      	strb	r2, [r3, #1]
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020c8:	789a      	ldrb	r2, [r3, #2]
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	4053      	eors	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020d4:	709a      	strb	r2, [r3, #2]
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020d8:	785a      	ldrb	r2, [r3, #1]
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020dc:	789b      	ldrb	r3, [r3, #2]
 80020de:	4053      	eors	r3, r2
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020e4:	705a      	strb	r2, [r3, #1]
	}
	if (midian[0] > midian[1]) {
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d917      	bls.n	8002122 <Make_Sensor_Raw_Vals+0x10e>
		SWAP(midian[0], midian[1]);
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	4053      	eors	r3, r2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002104:	785a      	ldrb	r2, [r3, #1]
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4053      	eors	r3, r2
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002110:	705a      	strb	r2, [r3, #1]
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	4053      	eors	r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002120:	701a      	strb	r2, [r3, #0]
	}
	sensorRawVals[idx] =  midian[1];
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <Make_Sensor_Raw_Vals+0x124>)
 8002126:	7851      	ldrb	r1, [r2, #1]
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <Make_Sensor_Raw_Vals+0x128>)
 800212a:	54d1      	strb	r1, [r2, r3]
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020800 	.word	0x40020800
 8002138:	20000324 	.word	0x20000324
 800213c:	20005364 	.word	0x20005364

08002140 <Make_Sensor_Norm_Vals>:



// normalized value 계산
__STATIC_INLINE void		Make_Sensor_Norm_Vals(uint8_t idx) {
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
		else if (sensorRawVals[i] > whiteMaxs[i])
			sensorNormVals[i] = 255;
		else
			sensorNormVals[i] = (255 * (sensorRawVals[i] - blackMaxs[i]) / (whiteMaxs[i] - blackMax[i]));
	 */
	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <Make_Sensor_Norm_Vals+0x88>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <Make_Sensor_Norm_Vals+0x8c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	1aca      	subs	r2, r1, r3
 800215e:	4613      	mov	r3, r2
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	491a      	ldr	r1, [pc, #104]	; (80021d0 <Make_Sensor_Norm_Vals+0x90>)
 8002168:	5c8a      	ldrb	r2, [r1, r2]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	fb93 f3f2 	sdiv	r3, r3, r2
		& ((sensorRawVals[idx] < blackMaxs[idx]) - 0x01) ) \
 8002170:	b25b      	sxtb	r3, r3
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	4914      	ldr	r1, [pc, #80]	; (80021c8 <Make_Sensor_Norm_Vals+0x88>)
 8002176:	5c8a      	ldrb	r2, [r1, r2]
 8002178:	b2d1      	uxtb	r1, r2
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	4813      	ldr	r0, [pc, #76]	; (80021cc <Make_Sensor_Norm_Vals+0x8c>)
 800217e:	5c82      	ldrb	r2, [r0, r2]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4291      	cmp	r1, r2
 8002184:	d201      	bcs.n	800218a <Make_Sensor_Norm_Vals+0x4a>
 8002186:	2200      	movs	r2, #0
 8002188:	e001      	b.n	800218e <Make_Sensor_Norm_Vals+0x4e>
 800218a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800218e:	4013      	ands	r3, r2
 8002190:	b25b      	sxtb	r3, r3
		| ((sensorRawVals[idx] < whiteMaxs[idx]) - 0x01);
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <Make_Sensor_Norm_Vals+0x88>)
 8002196:	5c8a      	ldrb	r2, [r1, r2]
 8002198:	b2d1      	uxtb	r1, r2
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <Make_Sensor_Norm_Vals+0x94>)
 800219e:	5c82      	ldrb	r2, [r0, r2]
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	4291      	cmp	r1, r2
 80021a4:	d201      	bcs.n	80021aa <Make_Sensor_Norm_Vals+0x6a>
 80021a6:	2200      	movs	r2, #0
 80021a8:	e001      	b.n	80021ae <Make_Sensor_Norm_Vals+0x6e>
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b25a      	sxtb	r2, r3
	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 80021b2:	79fb      	ldrb	r3, [r7, #7]
		| ((sensorRawVals[idx] < whiteMaxs[idx]) - 0x01);
 80021b4:	b2d1      	uxtb	r1, r2
	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <Make_Sensor_Norm_Vals+0x98>)
 80021b8:	54d1      	strb	r1, [r2, r3]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20005364 	.word	0x20005364
 80021cc:	20005374 	.word	0x20005374
 80021d0:	20000118 	.word	0x20000118
 80021d4:	20000120 	.word	0x20000120
 80021d8:	2000536c 	.word	0x2000536c

080021dc <Make_Sensor_State>:




// sensor state 계산
__STATIC_INLINE void		Make_Sensor_State(uint8_t idx) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]

	//state = ( state & ~(0x01 << idx) ) | ( (sensorNormVals[idx] > threshold) << idx );
	if (sensorNormVals[idx] > threshold) {
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <Make_Sensor_State+0x68>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <Make_Sensor_State+0x6c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d90e      	bls.n	8002216 <Make_Sensor_State+0x3a>
		state |= 0x01 << idx;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	b25a      	sxtb	r2, r3
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <Make_Sensor_State+0x70>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b25b      	sxtb	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b25b      	sxtb	r3, r3
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <Make_Sensor_State+0x70>)
 8002212:	701a      	strb	r2, [r3, #0]
	}
	else {
		state &= ~(0x01 << idx);
	}
}
 8002214:	e00f      	b.n	8002236 <Make_Sensor_State+0x5a>
		state &= ~(0x01 << idx);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2201      	movs	r2, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	b25b      	sxtb	r3, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	b25a      	sxtb	r2, r3
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <Make_Sensor_State+0x70>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	b25b      	sxtb	r3, r3
 800222c:	4013      	ands	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <Make_Sensor_State+0x70>)
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000536c 	.word	0x2000536c
 8002248:	20000128 	.word	0x20000128
 800224c:	2000537c 	.word	0x2000537c

08002250 <Sensor_TIM5_IRQ>:





__STATIC_INLINE void		Sensor_TIM5_IRQ() {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

	static uint8_t	sensorReadIdx = 0;


	Make_Sensor_Raw_Vals(sensorReadIdx);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <Sensor_TIM5_IRQ+0x38>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fedb 	bl	8002014 <Make_Sensor_Raw_Vals>

	Make_Sensor_Norm_Vals(sensorReadIdx);
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <Sensor_TIM5_IRQ+0x38>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff6c 	bl	8002140 <Make_Sensor_Norm_Vals>

	Make_Sensor_State(sensorReadIdx);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <Sensor_TIM5_IRQ+0x38>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ffb5 	bl	80021dc <Make_Sensor_State>


	sensorReadIdx = (sensorReadIdx + 1) & 0x07;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <Sensor_TIM5_IRQ+0x38>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <Sensor_TIM5_IRQ+0x38>)
 8002282:	701a      	strb	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000322 	.word	0x20000322

0800228c <Window_Position_Val>:
#include "sensor.h"



// 이전 주기에서 읽은 센서 위치에서 4개만 선별
__STATIC_INLINE int32_t	Window_Position_Val() {
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	static int32_t	positionSum = 0;
	static int32_t	sensorNormValsSum = 1;
	static int32_t	getPositionCoef[8] = { -14000, -10000, -6000, -2000, 2000, 6000, 10000, 14000 };


	positionIdxMax = 5;
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <Window_Position_Val+0xe0>)
 8002292:	2205      	movs	r2, #5
 8002294:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 2;
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <Window_Position_Val+0xe4>)
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]

	// positionVal이 -2000보다 작거나 2000 보다 클 때
	if (ABS(positionVal) > 2000) {
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <Window_Position_Val+0xe8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da09      	bge.n	80022b8 <Window_Position_Val+0x2c>
 80022a4:	4b33      	ldr	r3, [pc, #204]	; (8002374 <Window_Position_Val+0xe8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f46f 62fa 	mvn.w	r2, #2000	; 0x7d0
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bfd4      	ite	le
 80022b0:	2301      	movle	r3, #1
 80022b2:	2300      	movgt	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e007      	b.n	80022c8 <Window_Position_Val+0x3c>
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <Window_Position_Val+0xe8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022c0:	bfcc      	ite	gt
 80022c2:	2301      	movgt	r3, #1
 80022c4:	2300      	movle	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d010      	beq.n	80022ee <Window_Position_Val+0x62>

		// positionVal이 -2000보다 작을 때
		if (positionVal < 0) {
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <Window_Position_Val+0xe8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da06      	bge.n	80022e2 <Window_Position_Val+0x56>
			positionIdxMax = 4;
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <Window_Position_Val+0xe0>)
 80022d6:	2204      	movs	r2, #4
 80022d8:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 1;
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <Window_Position_Val+0xe4>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e005      	b.n	80022ee <Window_Position_Val+0x62>
		}
		// positionVal이 2000보다 클 때
		else {
			positionIdxMax = 6;
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <Window_Position_Val+0xe0>)
 80022e4:	2206      	movs	r2, #6
 80022e6:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 3;
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <Window_Position_Val+0xe4>)
 80022ea:	2203      	movs	r2, #3
 80022ec:	701a      	strb	r2, [r3, #0]
		}
	}


	positionSum = 0;
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <Window_Position_Val+0xec>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <Window_Position_Val+0xf0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]


	do {

		// 중간에 센서 인터럽트가 있다면 값이 바뀔 수 있음으로 별도의 변수에 저장
		sensorNormVal = sensorNormVals[positionIdxMin];
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <Window_Position_Val+0xe4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <Window_Position_Val+0xf4>)
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <Window_Position_Val+0xf8>)
 800230a:	601a      	str	r2, [r3, #0]

		positionSum += getPositionCoef[positionIdxMin] * sensorNormVal;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <Window_Position_Val+0xe4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <Window_Position_Val+0xfc>)
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <Window_Position_Val+0xf8>)
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fb03 f202 	mul.w	r2, r3, r2
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <Window_Position_Val+0xec>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4413      	add	r3, r2
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <Window_Position_Val+0xec>)
 8002328:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVal;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <Window_Position_Val+0xf0>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <Window_Position_Val+0xf8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <Window_Position_Val+0xf0>)
 8002336:	6013      	str	r3, [r2, #0]

		positionIdxMin++;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <Window_Position_Val+0xe4>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <Window_Position_Val+0xe4>)
 8002342:	701a      	strb	r2, [r3, #0]

	} while (positionIdxMin != positionIdxMax + 1);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <Window_Position_Val+0xe4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <Window_Position_Val+0xe0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	429a      	cmp	r2, r3
 8002352:	d1d2      	bne.n	80022fa <Window_Position_Val+0x6e>


	// positionValBuffer 값 return
	//divide by zero 방지하기 위해 sensorNormValsSum + 1로 나눔
	return positionSum / (sensorNormValsSum + 1);
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <Window_Position_Val+0xec>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <Window_Position_Val+0xf0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	20000000 	.word	0x20000000
 8002370:	20000001 	.word	0x20000001
 8002374:	200014ac 	.word	0x200014ac
 8002378:	20000314 	.word	0x20000314
 800237c:	20000004 	.word	0x20000004
 8002380:	2000536c 	.word	0x2000536c
 8002384:	20000318 	.word	0x20000318
 8002388:	20000008 	.word	0x20000008

0800238c <Update_Position_Val>:
}




__STATIC_INLINE void	Update_Position_Val() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0

	positionVal = Window_Position_Val();//Stabilize_Position_Val(positionValBuffer);
 8002390:	f7ff ff7c 	bl	800228c <Window_Position_Val>
 8002394:	4603      	mov	r3, r0
 8002396:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <Update_Position_Val+0x14>)
 8002398:	6013      	str	r3, [r2, #0]

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200014ac 	.word	0x200014ac

080023a4 <Motor_L_Speed_Control>:





__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 80023ae:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80023d8 <Motor_L_Speed_Control+0x34>
 80023b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c6:	ee17 1a90 	vmov	r1, s15
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <Motor_L_Speed_Control+0x38>)
 80023cc:	f7ff fde0 	bl	8001f90 <LL_TIM_SetAutoReload>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	43e3c062 	.word	0x43e3c062
 80023dc:	40000400 	.word	0x40000400

080023e0 <Motor_R_Speed_Control>:


__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 80023ea:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002414 <Motor_R_Speed_Control+0x34>
 80023ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80023f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002402:	ee17 1a90 	vmov	r1, s15
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <Motor_R_Speed_Control+0x38>)
 8002408:	f7ff fdc2 	bl	8001f90 <LL_TIM_SetAutoReload>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	43e3c062 	.word	0x43e3c062
 8002418:	40000800 	.word	0x40000800

0800241c <Drive_Speed_Cntl>:




__STATIC_INLINE void	Drive_Speed_Cntl() {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	static float	finalSpeed;

	// 포지션 값에 따른 감속
	finalSpeed = currentSpeed * (1 - ABS(positionVal) / curveDecelCoef);
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <Drive_Speed_Cntl+0xa4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da04      	bge.n	8002432 <Drive_Speed_Cntl+0x16>
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <Drive_Speed_Cntl+0xa4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	425b      	negs	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	e002      	b.n	8002438 <Drive_Speed_Cntl+0x1c>
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <Drive_Speed_Cntl+0xa4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <Drive_Speed_Cntl+0xa8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	f1c3 0301 	rsb	r3, r3, #1
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <Drive_Speed_Cntl+0xac>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <Drive_Speed_Cntl+0xb0>)
 8002458:	edc3 7a00 	vstr	s15, [r3]

	//position 값에 따른 좌우 모터 속도 조정
	Motor_L_Speed_Control( finalSpeed * (1 + positionCoef * positionVal) );
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <Drive_Speed_Cntl+0xa4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <Drive_Speed_Cntl+0xb4>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <Drive_Speed_Cntl+0xb0>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	eeb0 0a67 	vmov.f32	s0, s15
 8002488:	f7ff ff8c 	bl	80023a4 <Motor_L_Speed_Control>
	Motor_R_Speed_Control( finalSpeed * (1 - positionCoef * positionVal) );
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <Drive_Speed_Cntl+0xa4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <Drive_Speed_Cntl+0xb4>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <Drive_Speed_Cntl+0xb0>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	f7ff ff92 	bl	80023e0 <Motor_R_Speed_Control>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200014ac 	.word	0x200014ac
 80024c4:	20000054 	.word	0x20000054
 80024c8:	2000004c 	.word	0x2000004c
 80024cc:	2000031c 	.word	0x2000031c
 80024d0:	2000003c 	.word	0x2000003c

080024d4 <Drive_TIM9_IRQ>:




// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

	// 가속도 조절
	if (targetSpeed > currentSpeed) {
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <Drive_TIM9_IRQ+0xb4>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	4b2b      	ldr	r3, [pc, #172]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd1e      	ble.n	800252c <Drive_TIM9_IRQ+0x58>
		currentSpeed += accele / 2000;
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <Drive_TIM9_IRQ+0xbc>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002594 <Drive_TIM9_IRQ+0xc0>
 80024f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002508:	edc3 7a00 	vstr	s15, [r3]
		if (targetSpeed < currentSpeed) {
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <Drive_TIM9_IRQ+0xb4>)
 800250e:	ed93 7a00 	vldr	s14, [r3]
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d522      	bpl.n	8002568 <Drive_TIM9_IRQ+0x94>
			currentSpeed = targetSpeed;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <Drive_TIM9_IRQ+0xb4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a19      	ldr	r2, [pc, #100]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <Drive_TIM9_IRQ+0x94>
		}
	}
	else {
		currentSpeed -= decele / 2000;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <Drive_TIM9_IRQ+0xc4>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002594 <Drive_TIM9_IRQ+0xc0>
 8002536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
		if (targetSpeed > currentSpeed) {
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <Drive_TIM9_IRQ+0xb4>)
 800254c:	ed93 7a00 	vldr	s14, [r3]
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	dd03      	ble.n	8002568 <Drive_TIM9_IRQ+0x94>
			currentSpeed = targetSpeed;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <Drive_TIM9_IRQ+0xb4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a09      	ldr	r2, [pc, #36]	; (800258c <Drive_TIM9_IRQ+0xb8>)
 8002566:	6013      	str	r3, [r2, #0]
		}
	}

	// positionVal 값 업데이트
	Update_Position_Val();
 8002568:	f7ff ff10 	bl	800238c <Update_Position_Val>

	// 속도 컨트롤
	Drive_Speed_Cntl();
 800256c:	f7ff ff56 	bl	800241c <Drive_Speed_Cntl>

	// lineOut 판단 시간 업데이트
	if (driveState == DRIVE_DECISION_LINE_OUT)
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <Drive_TIM9_IRQ+0xc8>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b04      	cmp	r3, #4
 8002578:	d104      	bne.n	8002584 <Drive_TIM9_IRQ+0xb0>
		curTime++;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <Drive_TIM9_IRQ+0xcc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <Drive_TIM9_IRQ+0xcc>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000048 	.word	0x20000048
 800258c:	2000004c 	.word	0x2000004c
 8002590:	20000040 	.word	0x20000040
 8002594:	44fa0000 	.word	0x44fa0000
 8002598:	20000044 	.word	0x20000044
 800259c:	2000533c 	.word	0x2000533c
 80025a0:	200014b8 	.word	0x200014b8

080025a4 <Custom_GPIO_Set_t>:
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}

static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	d002      	beq.n	80025ce <Custom_GPIO_Set_t+0x2a>
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025cc:	e000      	b.n	80025d0 <Custom_GPIO_Set_t+0x2c>
 80025ce:	2200      	movs	r2, #0
 80025d0:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80025d6:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80025d8:	615a      	str	r2, [r3, #20]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <Motor_L_TIM3_IRQ>:





__STATIC_INLINE void	Motor_L_TIM3_IRQ() {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	static uint8_t phaseL  = 0;


	// motorL phase 잡기
	Custom_GPIO_Set_t(motorL + 0, (phases[7 - phaseL] >> 0) & 0x01);
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f1c3 0307 	rsb	r3, r3, #7
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <Motor_L_TIM3_IRQ+0x9c>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	4619      	mov	r1, r3
 8002600:	4821      	ldr	r0, [pc, #132]	; (8002688 <Motor_L_TIM3_IRQ+0xa0>)
 8002602:	f7ff ffcf 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, (phases[7 - phaseL] >> 1) & 0x01);
 8002606:	4821      	ldr	r0, [pc, #132]	; (800268c <Motor_L_TIM3_IRQ+0xa4>)
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f1c3 0307 	rsb	r3, r3, #7
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <Motor_L_TIM3_IRQ+0x9c>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	4619      	mov	r1, r3
 8002620:	f7ff ffc0 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, (phases[7 - phaseL] >> 2) & 0x01);
 8002624:	481a      	ldr	r0, [pc, #104]	; (8002690 <Motor_L_TIM3_IRQ+0xa8>)
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <Motor_L_TIM3_IRQ+0x9c>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	4619      	mov	r1, r3
 800263e:	f7ff ffb1 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, (phases[7 - phaseL] >> 3) & 0x01);
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <Motor_L_TIM3_IRQ+0xac>)
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f1c3 0307 	rsb	r3, r3, #7
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <Motor_L_TIM3_IRQ+0x9c>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	4619      	mov	r1, r3
 800265c:	f7ff ffa2 	bl	80025a4 <Custom_GPIO_Set_t>

	phaseL = (phaseL + 1) & 0x07;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <Motor_L_TIM3_IRQ+0x98>)
 8002670:	701a      	strb	r2, [r3, #0]


	// tick 값 증가
	curTick++;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <Motor_L_TIM3_IRQ+0xb0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <Motor_L_TIM3_IRQ+0xb0>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000320 	.word	0x20000320
 8002684:	20000110 	.word	0x20000110
 8002688:	200000d0 	.word	0x200000d0
 800268c:	200000d8 	.word	0x200000d8
 8002690:	200000e0 	.word	0x200000e0
 8002694:	200000e8 	.word	0x200000e8
 8002698:	200014b4 	.word	0x200014b4

0800269c <Motor_R_TIM4_IRQ>:





__STATIC_INLINE void	Motor_R_TIM4_IRQ() {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	static uint8_t phaseR  = 0;


	// motorR phase 잡기
	Custom_GPIO_Set_t(motorR + 0, (phases[phaseR] >> 0) & 0x01);
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <Motor_R_TIM4_IRQ+0x90>)
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	4619      	mov	r1, r3
 80026b2:	481f      	ldr	r0, [pc, #124]	; (8002730 <Motor_R_TIM4_IRQ+0x94>)
 80026b4:	f7ff ff76 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, (phases[phaseR] >> 1) & 0x01);
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <Motor_R_TIM4_IRQ+0x98>)
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <Motor_R_TIM4_IRQ+0x90>)
 80026c2:	5c5b      	ldrb	r3, [r3, r1]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7ff ff67 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, (phases[phaseR] >> 2) & 0x01);
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <Motor_R_TIM4_IRQ+0x9c>)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <Motor_R_TIM4_IRQ+0x90>)
 80026e0:	5c5b      	ldrb	r3, [r3, r1]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f7ff ff58 	bl	80025a4 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, (phases[phaseR] >> 3) & 0x01);
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <Motor_R_TIM4_IRQ+0xa0>)
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <Motor_R_TIM4_IRQ+0x90>)
 80026fe:	5c5b      	ldrb	r3, [r3, r1]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7ff ff49 	bl	80025a4 <Custom_GPIO_Set_t>

	phaseR = (phaseR + 1) & 0x07;
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <Motor_R_TIM4_IRQ+0x8c>)
 8002722:	701a      	strb	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000321 	.word	0x20000321
 800272c:	20000110 	.word	0x20000110
 8002730:	200000f0 	.word	0x200000f0
 8002734:	200000f8 	.word	0x200000f8
 8002738:	20000100 	.word	0x20000100
 800273c:	20000108 	.word	0x20000108

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002744:	e7fe      	b.n	8002744 <NMI_Handler+0x4>

08002746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <HardFault_Handler+0x4>

0800274c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <MemManage_Handler+0x4>

08002752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <UsageFault_Handler+0x4>

0800275e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Handler+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <SysTick_Handler+0x18>)
 8002794:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	20000310 	.word	0x20000310

080027a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  Drive_TIM9_IRQ();
 80027a8:	f7ff fe94 	bl	80024d4 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM9);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80027ae:	f7ff fbfd 	bl	8001fac <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40014000 	.word	0x40014000

080027bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Motor_L_TIM3_IRQ();
 80027c0:	f7ff ff12 	bl	80025e8 <Motor_L_TIM3_IRQ>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM3);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM3_IRQHandler+0x14>)
 80027c6:	f7ff fbf1 	bl	8001fac <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000400 	.word	0x40000400

080027d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  Motor_R_TIM4_IRQ();
 80027d8:	f7ff ff60 	bl	800269c <Motor_R_TIM4_IRQ>
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <TIM4_IRQHandler+0x14>)
 80027de:	f7ff fbe5 	bl	8001fac <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM4_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40000800 	.word	0x40000800

080027ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  Sensor_TIM5_IRQ();
 80027f0:	f7ff fd2e 	bl	8002250 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM5);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM5_IRQHandler+0x14>)
 80027f6:	f7ff fbd9 	bl	8001fac <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40000c00 	.word	0x40000c00

08002804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	return 1;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_kill>:

int _kill(int pid, int sig)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800281e:	f004 ff51 	bl	80076c4 <__errno>
 8002822:	4603      	mov	r3, r0
 8002824:	2216      	movs	r2, #22
 8002826:	601a      	str	r2, [r3, #0]
	return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_exit>:

void _exit (int status)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800283c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ffe7 	bl	8002814 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002846:	e7fe      	b.n	8002846 <_exit+0x12>

08002848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e00a      	b.n	8002870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285a:	f3af 8000 	nop.w
 800285e:	4601      	mov	r1, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	b2ca      	uxtb	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf0      	blt.n	800285a <_read+0x12>
	}

return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e009      	b.n	80028a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 ff3f 	bl	8005720 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf1      	blt.n	8002894 <_write+0x12>
	}
	return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_close>:

int _close(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_isatty>:

int _isatty(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return 1;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f004 feb6 	bl	80076c4 <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	220c      	movs	r2, #12
 800295c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20020000 	.word	0x20020000
 8002984:	00000400 	.word	0x00000400
 8002988:	2000032c 	.word	0x2000032c
 800298c:	200054d0 	.word	0x200054d0

08002990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <SystemInit+0x20>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <SystemInit+0x20>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ba:	490e      	ldr	r1, [pc, #56]	; (80029f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d0:	4c0b      	ldr	r4, [pc, #44]	; (8002a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029de:	f7ff ffd7 	bl	8002990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f004 fe75 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e6:	f7fe feb2 	bl	800174e <main>
  bx  lr    
 80029ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 80029f8:	0800a44c 	.word	0x0800a44c
  ldr r2, =_sbss
 80029fc:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8002a00:	200054cc 	.word	0x200054cc

08002a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC_IRQHandler>

08002a06 <LL_ADC_SetCommonClock>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	605a      	str	r2, [r3, #4]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_REG_SetSequencerLength>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_IsEnabled>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002a86:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <LL_ADC_CommonInit+0x38>)
 8002a88:	f7ff ffe3 	bl	8002a52 <LL_ADC_IsEnabled>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ffb4 	bl	8002a06 <LL_ADC_SetCommonClock>
 8002a9e:	e001      	b.n	8002aa4 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40012000 	.word	0x40012000

08002ab4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffc5 	bl	8002a52 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d117      	bne.n	8002afe <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	6811      	ldr	r1, [r2, #0]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	6892      	ldr	r2, [r2, #8]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e001      	b.n	8002b02 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff99 	bl	8002a52 <LL_ADC_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d12b      	bne.n	8002b7e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e005      	b.n	8002b4e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <LL_ADC_REG_Init+0x80>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	4311      	orrs	r1, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	6912      	ldr	r2, [r2, #16]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff58 	bl	8002a2c <LL_ADC_REG_SetSequencerLength>
 8002b7c:	e001      	b.n	8002b82 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	c0fffcfd 	.word	0xc0fffcfd

08002b90 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40013c00 	.word	0x40013c00

08002bdc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40013c00 	.word	0x40013c00

08002c00 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4904      	ldr	r1, [pc, #16]	; (8002c48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4904      	ldr	r1, [pc, #16]	; (8002c70 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]

}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4904      	ldr	r1, [pc, #16]	; (8002c94 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4904      	ldr	r1, [pc, #16]	; (8002cbc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	791b      	ldrb	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d065      	beq.n	8002da0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d06b      	beq.n	8002db4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d01c      	beq.n	8002d1e <LL_EXTI_Init+0x5e>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	dc25      	bgt.n	8002d34 <LL_EXTI_Init+0x74>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <LL_EXTI_Init+0x32>
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d00b      	beq.n	8002d08 <LL_EXTI_Init+0x48>
 8002cf0:	e020      	b.n	8002d34 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff82 	bl	8002c00 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff45 	bl	8002b90 <LL_EXTI_EnableIT_0_31>
          break;
 8002d06:	e018      	b.n	8002d3a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff51 	bl	8002bb4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff60 	bl	8002bdc <LL_EXTI_EnableEvent_0_31>
          break;
 8002d1c:	e00d      	b.n	8002d3a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff34 	bl	8002b90 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff55 	bl	8002bdc <LL_EXTI_EnableEvent_0_31>
          break;
 8002d32:	e002      	b.n	8002d3a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
          break;
 8002d38:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	799b      	ldrb	r3, [r3, #6]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d038      	beq.n	8002db4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	799b      	ldrb	r3, [r3, #6]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d01c      	beq.n	8002d84 <LL_EXTI_Init+0xc4>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	dc25      	bgt.n	8002d9a <LL_EXTI_Init+0xda>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d002      	beq.n	8002d58 <LL_EXTI_Init+0x98>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d00b      	beq.n	8002d6e <LL_EXTI_Init+0xae>
 8002d56:	e020      	b.n	8002d9a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff9b 	bl	8002c98 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff5e 	bl	8002c28 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d6c:	e022      	b.n	8002db4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff6a 	bl	8002c4c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff79 	bl	8002c74 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d82:	e017      	b.n	8002db4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff4d 	bl	8002c28 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff6e 	bl	8002c74 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d98:	e00c      	b.n	8002db4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
            break;
 8002d9e:	e009      	b.n	8002db4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff05 	bl	8002bb4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff26 	bl	8002c00 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <LL_GPIO_SetPinMode>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b089      	sub	sp, #36	; 0x24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	613b      	str	r3, [r7, #16]
  return result;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2103      	movs	r1, #3
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3724      	adds	r7, #36	; 0x24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_GPIO_SetPinOutputType>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_GPIO_SetPinSpeed>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	613b      	str	r3, [r7, #16]
  return result;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2103      	movs	r1, #3
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	61bb      	str	r3, [r7, #24]
  return result;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_GPIO_SetPinPull>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b089      	sub	sp, #36	; 0x24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	613b      	str	r3, [r7, #16]
  return result;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3724      	adds	r7, #36	; 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_GPIO_SetAFPin_0_7>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	613b      	str	r3, [r7, #16]
  return result;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	210f      	movs	r1, #15
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	61bb      	str	r3, [r7, #24]
  return result;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_GPIO_SetAFPin_8_15>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b089      	sub	sp, #36	; 0x24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	613b      	str	r3, [r7, #16]
  return result;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	210f      	movs	r1, #15
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	61bb      	str	r3, [r7, #24]
  return result;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002fbc:	bf00      	nop
 8002fbe:	3724      	adds	r7, #36	; 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	613b      	str	r3, [r7, #16]
  return result;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ff2:	e050      	b.n	8003096 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d042      	beq.n	8003090 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d003      	beq.n	800301a <LL_GPIO_Init+0x52>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d10d      	bne.n	8003036 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	461a      	mov	r2, r3
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff12 	bl	8002e4c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	461a      	mov	r2, r3
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fef3 	bl	8002e1c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	461a      	mov	r2, r3
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff33 	bl	8002eaa <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11a      	bne.n	8003082 <LL_GPIO_Init+0xba>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	60bb      	str	r3, [r7, #8]
  return result;
 8003058:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b07      	cmp	r3, #7
 8003062:	d807      	bhi.n	8003074 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	461a      	mov	r2, r3
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff4b 	bl	8002f08 <LL_GPIO_SetAFPin_0_7>
 8003072:	e006      	b.n	8003082 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	461a      	mov	r2, r3
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff72 	bl	8002f66 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	461a      	mov	r2, r3
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fe97 	bl	8002dbe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1a7      	bne.n	8002ff4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <LL_I2C_Enable>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_I2C_Disable>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0201 	bic.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_I2C_ConfigFilters>:
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f023 021f 	bic.w	r2, r3, #31
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	430b      	orrs	r3, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_I2C_SetOwnAddress1>:
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800312e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	430a      	orrs	r2, r1
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4a42      	ldr	r2, [pc, #264]	; (8003270 <LL_I2C_ConfigSpeed+0x124>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9b      	lsrs	r3, r3, #18
 800316c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	493a      	ldr	r1, [pc, #232]	; (8003274 <LL_I2C_ConfigSpeed+0x128>)
 800318a:	428b      	cmp	r3, r1
 800318c:	d802      	bhi.n	8003194 <LL_I2C_ConfigSpeed+0x48>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3301      	adds	r3, #1
 8003192:	e009      	b.n	80031a8 <LL_I2C_ConfigSpeed+0x5c>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4936      	ldr	r1, [pc, #216]	; (8003278 <LL_I2C_ConfigSpeed+0x12c>)
 80031a0:	fba1 1303 	umull	r1, r3, r1, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <LL_I2C_ConfigSpeed+0x128>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d939      	bls.n	800322a <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d117      	bne.n	80031ec <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e4:	e01d      	b.n	8003222 <LL_I2C_ConfigSpeed+0xd6>
 80031e6:	f248 0301 	movw	r3, #32769	; 0x8001
 80031ea:	e01a      	b.n	8003222 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321c:	e001      	b.n	8003222 <LL_I2C_ConfigSpeed+0xd6>
 800321e:	f248 0301 	movw	r3, #32769	; 0x8001
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e011      	b.n	800324e <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003238:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	e000      	b.n	800324c <LL_I2C_ConfigSpeed+0x100>
 800324a:	2304      	movs	r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	431bde83 	.word	0x431bde83
 8003274:	000186a0 	.word	0x000186a0
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 021a 	bic.w	r2, r3, #26
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fefb 	bl	80030ce <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f89d 	bl	800341c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68d9      	ldr	r1, [r3, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	461a      	mov	r2, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fefe 	bl	80030ee <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80032f2:	6939      	ldr	r1, [r7, #16]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff25 	bl	800314c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6959      	ldr	r1, [r3, #20]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	461a      	mov	r2, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff04 	bl	800311a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffaf 	bl	800327c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fec5 	bl	80030ae <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ffb9 	bl	80032a2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <LL_RCC_GetSysClkSource>:
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <LL_RCC_GetSysClkSource+0x18>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <LL_RCC_GetAHBPrescaler>:
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <LL_RCC_GetAHBPrescaler+0x18>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <LL_RCC_GetAPB1Prescaler>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <LL_RCC_GetAPB1Prescaler+0x18>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <LL_RCC_GetAPB2Prescaler>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800

080033ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <LL_RCC_PLL_GetN+0x18>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40023800 	.word	0x40023800

080033e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <LL_RCC_PLL_GetP+0x18>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <LL_RCC_PLL_GetDivider+0x18>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003424:	f000 f820 	bl	8003468 <RCC_GetSystemClockFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f840 	bl	80034b8 <RCC_GetHCLKClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f84e 	bl	80034e4 <RCC_GetPCLK1ClockFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f85a 	bl	800350c <RCC_GetPCLK2ClockFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60da      	str	r2, [r3, #12]
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003472:	f7ff ff63 	bl	800333c <LL_RCC_GetSysClkSource>
 8003476:	4603      	mov	r3, r0
 8003478:	2b08      	cmp	r3, #8
 800347a:	d00c      	beq.n	8003496 <RCC_GetSystemClockFreq+0x2e>
 800347c:	2b08      	cmp	r3, #8
 800347e:	d80f      	bhi.n	80034a0 <RCC_GetSystemClockFreq+0x38>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <RCC_GetSystemClockFreq+0x22>
 8003484:	2b04      	cmp	r3, #4
 8003486:	d003      	beq.n	8003490 <RCC_GetSystemClockFreq+0x28>
 8003488:	e00a      	b.n	80034a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <RCC_GetSystemClockFreq+0x48>)
 800348c:	607b      	str	r3, [r7, #4]
      break;
 800348e:	e00a      	b.n	80034a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <RCC_GetSystemClockFreq+0x4c>)
 8003492:	607b      	str	r3, [r7, #4]
      break;
 8003494:	e007      	b.n	80034a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003496:	2008      	movs	r0, #8
 8003498:	f000 f84c 	bl	8003534 <RCC_PLL_GetFreqDomain_SYS>
 800349c:	6078      	str	r0, [r7, #4]
      break;
 800349e:	e002      	b.n	80034a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <RCC_GetSystemClockFreq+0x48>)
 80034a2:	607b      	str	r3, [r7, #4]
      break;
 80034a4:	bf00      	nop
  }

  return frequency;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034c0:	f7ff ff4a 	bl	8003358 <LL_RCC_GetAHBPrescaler>
 80034c4:	4603      	mov	r3, r0
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <RCC_GetHCLKClockFreq+0x28>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	40d3      	lsrs	r3, r2
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	08009e34 	.word	0x08009e34

080034e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034ec:	f7ff ff42 	bl	8003374 <LL_RCC_GetAPB1Prescaler>
 80034f0:	4603      	mov	r3, r0
 80034f2:	0a9b      	lsrs	r3, r3, #10
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <RCC_GetPCLK1ClockFreq+0x24>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	40d3      	lsrs	r3, r2
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	08009e44 	.word	0x08009e44

0800350c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003514:	f7ff ff3c 	bl	8003390 <LL_RCC_GetAPB2Prescaler>
 8003518:	4603      	mov	r3, r0
 800351a:	0b5b      	lsrs	r3, r3, #13
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <RCC_GetPCLK2ClockFreq+0x24>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	40d3      	lsrs	r3, r2
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	08009e44 	.word	0x08009e44

08003534 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003548:	f7ff ff30 	bl	80033ac <LL_RCC_PLL_GetMainSource>
 800354c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d003      	beq.n	8003564 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800355c:	e005      	b.n	800356a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003560:	617b      	str	r3, [r7, #20]
      break;
 8003562:	e005      	b.n	8003570 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003566:	617b      	str	r3, [r7, #20]
      break;
 8003568:	e002      	b.n	8003570 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800356c:	617b      	str	r3, [r7, #20]
      break;
 800356e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d113      	bne.n	800359e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003576:	f7ff ff43 	bl	8003400 <LL_RCC_PLL_GetDivider>
 800357a:	4602      	mov	r2, r0
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003582:	f7ff ff21 	bl	80033c8 <LL_RCC_PLL_GetN>
 8003586:	4603      	mov	r3, r0
 8003588:	fb03 f404 	mul.w	r4, r3, r4
 800358c:	f7ff ff2a 	bl	80033e4 <LL_RCC_PLL_GetP>
 8003590:	4603      	mov	r3, r0
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	3301      	adds	r3, #1
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb4 f3f3 	udiv	r3, r4, r3
 800359c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800359e:	693b      	ldr	r3, [r7, #16]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <LL_SPI_IsEnabled>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d101      	bne.n	80035c8 <LL_SPI_IsEnabled+0x18>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <LL_SPI_IsEnabled+0x1a>
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffd3 	bl	80035b0 <LL_SPI_IsEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d139      	bne.n	8003684 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003618:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	6811      	ldr	r1, [r2, #0]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	6852      	ldr	r2, [r2, #4]
 8003624:	4311      	orrs	r1, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	4311      	orrs	r1, r2
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	4311      	orrs	r1, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	6912      	ldr	r2, [r2, #16]
 8003636:	4311      	orrs	r1, r2
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	6952      	ldr	r2, [r2, #20]
 800363c:	4311      	orrs	r1, r2
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6992      	ldr	r2, [r2, #24]
 8003642:	4311      	orrs	r1, r2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	69d2      	ldr	r2, [r2, #28]
 8003648:	4311      	orrs	r1, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6a12      	ldr	r2, [r2, #32]
 800364e:	430a      	orrs	r2, r1
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0204 	bic.w	r2, r3, #4
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003672:	d105      	bne.n	8003680 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffab 	bl	80035d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	61da      	str	r2, [r3, #28]
  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <LL_TIM_SetPrescaler>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_TIM_SetAutoReload>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_TIM_SetRepetitionCounter>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <LL_TIM_Init+0xd8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <LL_TIM_Init+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d00b      	beq.n	8003748 <LL_TIM_Init+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a2e      	ldr	r2, [pc, #184]	; (80037ec <LL_TIM_Init+0xdc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <LL_TIM_Init+0x38>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <LL_TIM_Init+0xe0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <LL_TIM_Init+0x38>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <LL_TIM_Init+0xe4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d106      	bne.n	8003756 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <LL_TIM_Init+0xd8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01b      	beq.n	8003796 <LL_TIM_Init+0x86>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d017      	beq.n	8003796 <LL_TIM_Init+0x86>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a20      	ldr	r2, [pc, #128]	; (80037ec <LL_TIM_Init+0xdc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <LL_TIM_Init+0x86>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <LL_TIM_Init+0xe0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00f      	beq.n	8003796 <LL_TIM_Init+0x86>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <LL_TIM_Init+0xe4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00b      	beq.n	8003796 <LL_TIM_Init+0x86>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <LL_TIM_Init+0xe8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <LL_TIM_Init+0x86>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <LL_TIM_Init+0xec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <LL_TIM_Init+0x86>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <LL_TIM_Init+0xf0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d106      	bne.n	80037a4 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff80 	bl	80036b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff6c 	bl	800369a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <LL_TIM_Init+0xd8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d105      	bne.n	80037d6 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff7e 	bl	80036d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ff89 	bl	80036ee <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <LL_USART_IsEnabled>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_USART_SetStopBitsLength>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_USART_SetHWFlowCtrl>:
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	615a      	str	r2, [r3, #20]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_USART_SetBaudRate>:
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b0c0      	sub	sp, #256	; 0x100
 800387e:	af00      	add	r7, sp, #0
 8003880:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003884:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003888:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800388c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003898:	f040 810c 	bne.w	8003ab4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800389c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038ae:	4622      	mov	r2, r4
 80038b0:	462b      	mov	r3, r5
 80038b2:	1891      	adds	r1, r2, r2
 80038b4:	6639      	str	r1, [r7, #96]	; 0x60
 80038b6:	415b      	adcs	r3, r3
 80038b8:	667b      	str	r3, [r7, #100]	; 0x64
 80038ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038be:	4621      	mov	r1, r4
 80038c0:	eb12 0801 	adds.w	r8, r2, r1
 80038c4:	4629      	mov	r1, r5
 80038c6:	eb43 0901 	adc.w	r9, r3, r1
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038de:	4690      	mov	r8, r2
 80038e0:	4699      	mov	r9, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	eb18 0303 	adds.w	r3, r8, r3
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ec:	462b      	mov	r3, r5
 80038ee:	eb49 0303 	adc.w	r3, r9, r3
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80038fa:	2200      	movs	r2, #0
 80038fc:	469a      	mov	sl, r3
 80038fe:	4693      	mov	fp, r2
 8003900:	eb1a 030a 	adds.w	r3, sl, sl
 8003904:	65bb      	str	r3, [r7, #88]	; 0x58
 8003906:	eb4b 030b 	adc.w	r3, fp, fp
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003914:	f7fd f950 	bl	8000bb8 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4b64      	ldr	r3, [pc, #400]	; (8003ab0 <LL_USART_SetBaudRate+0x238>)
 800391e:	fba3 2302 	umull	r2, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	b29b      	uxth	r3, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	b29c      	uxth	r4, r3
 800392a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003934:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003938:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	6539      	str	r1, [r7, #80]	; 0x50
 8003944:	415b      	adcs	r3, r3
 8003946:	657b      	str	r3, [r7, #84]	; 0x54
 8003948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	64b9      	str	r1, [r7, #72]	; 0x48
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800398c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003996:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800399a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800399e:	460b      	mov	r3, r1
 80039a0:	18db      	adds	r3, r3, r3
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40
 80039a4:	4613      	mov	r3, r2
 80039a6:	eb42 0303 	adc.w	r3, r2, r3
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
 80039ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039b0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80039b4:	f7fd f900 	bl	8000bb8 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <LL_USART_SetBaudRate+0x238>)
 80039c0:	fba3 2301 	umull	r2, r3, r3, r1
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2264      	movs	r2, #100	; 0x64
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	1acb      	subs	r3, r1, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <LL_USART_SetBaudRate+0x238>)
 80039d6:	fba3 2302 	umull	r2, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	b29b      	uxth	r3, r3
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4423      	add	r3, r4
 80039ea:	b29c      	uxth	r4, r3
 80039ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039fa:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80039fe:	4642      	mov	r2, r8
 8003a00:	464b      	mov	r3, r9
 8003a02:	1891      	adds	r1, r2, r2
 8003a04:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a06:	415b      	adcs	r3, r3
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a0e:	4641      	mov	r1, r8
 8003a10:	1851      	adds	r1, r2, r1
 8003a12:	6339      	str	r1, [r7, #48]	; 0x30
 8003a14:	4649      	mov	r1, r9
 8003a16:	414b      	adcs	r3, r1
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a26:	4659      	mov	r1, fp
 8003a28:	00cb      	lsls	r3, r1, #3
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a30:	4651      	mov	r1, sl
 8003a32:	00ca      	lsls	r2, r1, #3
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a42:	464b      	mov	r3, r9
 8003a44:	460a      	mov	r2, r1
 8003a46:	eb42 0303 	adc.w	r3, r2, r3
 8003a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a58:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003a5c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a72:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003a76:	f7fd f89f 	bl	8000bb8 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <LL_USART_SetBaudRate+0x238>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	; 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <LL_USART_SetBaudRate+0x238>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4423      	add	r3, r4
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	e108      	b.n	8003cc2 <LL_USART_SetBaudRate+0x44a>
 8003ab0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003ab4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003abe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ac2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	464b      	mov	r3, r9
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	6239      	str	r1, [r7, #32]
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	1854      	adds	r4, r2, r1
 8003ada:	4649      	mov	r1, r9
 8003adc:	eb43 0501 	adc.w	r5, r3, r1
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	00eb      	lsls	r3, r5, #3
 8003aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aee:	00e2      	lsls	r2, r4, #3
 8003af0:	4614      	mov	r4, r2
 8003af2:	461d      	mov	r5, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	18e3      	adds	r3, r4, r3
 8003af8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003afc:	464b      	mov	r3, r9
 8003afe:	eb45 0303 	adc.w	r3, r5, r3
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003b20:	4629      	mov	r1, r5
 8003b22:	008b      	lsls	r3, r1, #2
 8003b24:	4621      	mov	r1, r4
 8003b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	008a      	lsls	r2, r1, #2
 8003b2e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003b32:	f7fd f841 	bl	8000bb8 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <LL_USART_SetBaudRate+0x458>)
 8003b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	b29c      	uxth	r4, r3
 8003b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b56:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	61b9      	str	r1, [r7, #24]
 8003b62:	415b      	adcs	r3, r3
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	1851      	adds	r1, r2, r1
 8003b6e:	6139      	str	r1, [r7, #16]
 8003b70:	4649      	mov	r1, r9
 8003b72:	414b      	adcs	r3, r1
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b82:	4659      	mov	r1, fp
 8003b84:	00cb      	lsls	r3, r1, #3
 8003b86:	4651      	mov	r1, sl
 8003b88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	00ca      	lsls	r2, r1, #3
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	4603      	mov	r3, r0
 8003b96:	4642      	mov	r2, r8
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	eb42 0303 	adc.w	r3, r2, r3
 8003ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003bd6:	f7fc ffef 	bl	8000bb8 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <LL_USART_SetBaudRate+0x458>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	; 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	; 0x32
 8003bf4:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <LL_USART_SetBaudRate+0x458>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4423      	add	r3, r4
 8003c06:	b29c      	uxth	r4, r3
 8003c08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c10:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c12:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c16:	4642      	mov	r2, r8
 8003c18:	464b      	mov	r3, r9
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c26:	4641      	mov	r1, r8
 8003c28:	1851      	adds	r1, r2, r1
 8003c2a:	6039      	str	r1, [r7, #0]
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	414b      	adcs	r3, r1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c3e:	4659      	mov	r1, fp
 8003c40:	00cb      	lsls	r3, r1, #3
 8003c42:	4651      	mov	r1, sl
 8003c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c48:	4651      	mov	r1, sl
 8003c4a:	00ca      	lsls	r2, r1, #3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	4642      	mov	r2, r8
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	673b      	str	r3, [r7, #112]	; 0x70
 8003c58:	464b      	mov	r3, r9
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	eb42 0303 	adc.w	r3, r2, r3
 8003c60:	677b      	str	r3, [r7, #116]	; 0x74
 8003c62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c66:	2200      	movs	r2, #0
 8003c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003c78:	4649      	mov	r1, r9
 8003c7a:	008b      	lsls	r3, r1, #2
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c82:	4641      	mov	r1, r8
 8003c84:	008a      	lsls	r2, r1, #2
 8003c86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c8a:	f7fc ff95 	bl	8000bb8 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <LL_USART_SetBaudRate+0x458>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	; 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	3332      	adds	r3, #50	; 0x32
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <LL_USART_SetBaudRate+0x458>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4423      	add	r3, r4
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	bf00      	nop
 8003cc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cce:	bf00      	nop
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fd8c 	bl	8003804 <LL_USART_IsEnabled>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d149      	bne.n	8003d86 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cfa:	f023 030c 	bic.w	r3, r3, #12
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	6851      	ldr	r1, [r2, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	4311      	orrs	r1, r2
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	6912      	ldr	r2, [r2, #16]
 8003d0c:	4311      	orrs	r1, r2
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	6992      	ldr	r2, [r2, #24]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fd83 	bl	800382c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fd90 	bl	8003852 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fb70 	bl	800341c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <LL_USART_Init+0xbc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d102      	bne.n	8003d4a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e00c      	b.n	8003d64 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <LL_USART_Init+0xc0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d102      	bne.n	8003d58 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	e005      	b.n	8003d64 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <LL_USART_Init+0xc4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003d72:	2300      	movs	r3, #0
 8003d74:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fd79 	bl	8003878 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40004400 	.word	0x40004400
 8003d98:	40011400 	.word	0x40011400

08003d9c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <LL_InitTick+0x30>)
 8003db0:	3b01      	subs	r3, #1
 8003db2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <LL_InitTick+0x30>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <LL_InitTick+0x30>)
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ffdd 	bl	8003d9c <LL_InitTick>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <LL_SetSystemCoreClock+0x1c>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6013      	str	r3, [r2, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000028 	.word	0x20000028

08003e0c <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	_file = file;
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <__Custom_Exception_Set_Message+0x2c>)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6013      	str	r3, [r2, #0]
	_line = line;
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <__Custom_Exception_Set_Message+0x30>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6013      	str	r3, [r2, #0]
	_message = message;
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <__Custom_Exception_Set_Message+0x34>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000330 	.word	0x20000330
 8003e3c:	20000334 	.word	0x20000334
 8003e40:	20000338 	.word	0x20000338

08003e44 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8003e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <Custom_FileSystem_Load+0x18>)
 8003e4e:	f000 f851 	bl	8003ef4 <Custom_Flash_Read>
	filesystemLoaded = true;
 8003e52:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <Custom_FileSystem_Load+0x1c>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000033c 	.word	0x2000033c
 8003e60:	2000133d 	.word	0x2000133d

08003e64 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <Custom_Flash_Check_Error+0x78>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d006      	beq.n	8003e88 <Custom_Flash_Check_Error+0x24>
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <Custom_Flash_Check_Error+0x7c>)
 8003e7c:	2113      	movs	r1, #19
 8003e7e:	4819      	ldr	r0, [pc, #100]	; (8003ee4 <Custom_Flash_Check_Error+0x80>)
 8003e80:	f7ff ffc4 	bl	8003e0c <__Custom_Exception_Set_Message>
 8003e84:	2300      	movs	r3, #0
 8003e86:	e024      	b.n	8003ed2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <Custom_Flash_Check_Error+0x3c>
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <Custom_Flash_Check_Error+0x84>)
 8003e94:	2114      	movs	r1, #20
 8003e96:	4813      	ldr	r0, [pc, #76]	; (8003ee4 <Custom_Flash_Check_Error+0x80>)
 8003e98:	f7ff ffb8 	bl	8003e0c <__Custom_Exception_Set_Message>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e018      	b.n	8003ed2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <Custom_Flash_Check_Error+0x54>
 8003eaa:	4a10      	ldr	r2, [pc, #64]	; (8003eec <Custom_Flash_Check_Error+0x88>)
 8003eac:	2115      	movs	r1, #21
 8003eae:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <Custom_Flash_Check_Error+0x80>)
 8003eb0:	f7ff ffac 	bl	8003e0c <__Custom_Exception_Set_Message>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e00c      	b.n	8003ed2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <Custom_Flash_Check_Error+0x6c>
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <Custom_Flash_Check_Error+0x8c>)
 8003ec4:	2116      	movs	r1, #22
 8003ec6:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <Custom_Flash_Check_Error+0x80>)
 8003ec8:	f7ff ffa0 	bl	8003e0c <__Custom_Exception_Set_Message>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <Custom_Flash_Check_Error+0x6e>

	return true;
 8003ed0:	2301      	movs	r3, #1
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023c00 	.word	0x40023c00
 8003ee0:	08009938 	.word	0x08009938
 8003ee4:	08009954 	.word	0x08009954
 8003ee8:	0800997c 	.word	0x0800997c
 8003eec:	0800999c 	.word	0x0800999c
 8003ef0:	080099bc 	.word	0x080099bc

08003ef4 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d306      	bcc.n	8003f14 <Custom_Flash_Read+0x20>
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <Custom_Flash_Read+0x5c>)
 8003f08:	211d      	movs	r1, #29
 8003f0a:	4812      	ldr	r0, [pc, #72]	; (8003f54 <Custom_Flash_Read+0x60>)
 8003f0c:	f7ff ff7e 	bl	8003e0c <__Custom_Exception_Set_Message>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e019      	b.n	8003f48 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e00f      	b.n	8003f3a <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003f20:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003f24:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	440b      	add	r3, r1
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d8eb      	bhi.n	8003f1a <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8003f42:	f7ff ff8f 	bl	8003e64 <Custom_Flash_Check_Error>
 8003f46:	4603      	mov	r3, r0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	080099d4 	.word	0x080099d4
 8003f54:	08009954 	.word	0x08009954

08003f58 <LL_SPI_Enable>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_SPI_SetTransferDirection>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d101      	bne.n	8003fb6 <LL_SPI_IsActiveFlag_TXE+0x18>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d101      	bne.n	8003fdc <LL_SPI_IsActiveFlag_BSY+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_SPI_IsActiveFlag_BSY+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <Custom_GPIO_Set>:
		uint32_t value) {
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <Custom_GPIO_Set+0x22>
 800402a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800402e:	e000      	b.n	8004032 <Custom_GPIO_Set+0x24>
 8004030:	2100      	movs	r1, #0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	400b      	ands	r3, r1
 8004036:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	615a      	str	r2, [r3, #20]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8004052:	bf00      	nop
 8004054:	480b      	ldr	r0, [pc, #44]	; (8004084 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004056:	f7ff ffa2 	bl	8003f9e <LL_SPI_IsActiveFlag_TXE>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f9      	beq.n	8004054 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4619      	mov	r1, r3
 8004064:	4807      	ldr	r0, [pc, #28]	; (8004084 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004066:	f7ff ffc0 	bl	8003fea <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 800406a:	bf00      	nop
 800406c:	4805      	ldr	r0, [pc, #20]	; (8004084 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800406e:	f7ff ffa9 	bl	8003fc4 <LL_SPI_IsActiveFlag_BSY>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f9      	bne.n	800406c <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40003800 	.word	0x40003800

08004088 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 8004092:	2200      	movs	r2, #0
 8004094:	2110      	movs	r1, #16
 8004096:	4811      	ldr	r0, [pc, #68]	; (80040dc <Custom_OLED_Write_Command+0x54>)
 8004098:	f7ff ffb9 	bl	800400e <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 800409c:	2200      	movs	r2, #0
 800409e:	2104      	movs	r1, #4
 80040a0:	480f      	ldr	r0, [pc, #60]	; (80040e0 <Custom_OLED_Write_Command+0x58>)
 80040a2:	f7ff ffb4 	bl	800400e <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e009      	b.n	80040c0 <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ffc7 	bl	8004048 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d8f1      	bhi.n	80040ac <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 80040c8:	2201      	movs	r2, #1
 80040ca:	2104      	movs	r1, #4
 80040cc:	4804      	ldr	r0, [pc, #16]	; (80040e0 <Custom_OLED_Write_Command+0x58>)
 80040ce:	f7ff ff9e 	bl	800400e <Custom_GPIO_Set>
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400

080040e4 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 80040ee:	2201      	movs	r2, #1
 80040f0:	2110      	movs	r1, #16
 80040f2:	4817      	ldr	r0, [pc, #92]	; (8004150 <Custom_OLED_Write_Data+0x6c>)
 80040f4:	f7ff ff8b 	bl	800400e <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2104      	movs	r1, #4
 80040fc:	4815      	ldr	r0, [pc, #84]	; (8004154 <Custom_OLED_Write_Data+0x70>)
 80040fe:	f7ff ff86 	bl	800400e <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e016      	b.n	8004136 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	b29b      	uxth	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff95 	bl	8004048 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff8c 	bl	8004048 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d8e4      	bhi.n	8004108 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 800413e:	2201      	movs	r2, #1
 8004140:	2104      	movs	r1, #4
 8004142:	4804      	ldr	r0, [pc, #16]	; (8004154 <Custom_OLED_Write_Data+0x70>)
 8004144:	f7ff ff63 	bl	800400e <Custom_GPIO_Set>
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400

08004158 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	4623      	mov	r3, r4
 8004168:	71fb      	strb	r3, [r7, #7]
 800416a:	4603      	mov	r3, r0
 800416c:	71bb      	strb	r3, [r7, #6]
 800416e:	460b      	mov	r3, r1
 8004170:	717b      	strb	r3, [r7, #5]
 8004172:	4613      	mov	r3, r2
 8004174:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8004176:	2315      	movs	r3, #21
 8004178:	723b      	strb	r3, [r7, #8]
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	727b      	strb	r3, [r7, #9]
 800417e:	797b      	ldrb	r3, [r7, #5]
 8004180:	72bb      	strb	r3, [r7, #10]
 8004182:	2375      	movs	r3, #117	; 0x75
 8004184:	72fb      	strb	r3, [r7, #11]
 8004186:	79bb      	ldrb	r3, [r7, #6]
 8004188:	733b      	strb	r3, [r7, #12]
 800418a:	793b      	ldrb	r3, [r7, #4]
 800418c:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	2106      	movs	r1, #6
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff77 	bl	8004088 <Custom_OLED_Write_Command>
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}

080041a2 <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 80041a8:	2300      	movs	r3, #0
 80041aa:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 80041ac:	233f      	movs	r3, #63	; 0x3f
 80041ae:	225f      	movs	r2, #95	; 0x5f
 80041b0:	2100      	movs	r1, #0
 80041b2:	2000      	movs	r0, #0
 80041b4:	f7ff ffd0 	bl	8004158 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80041b8:	2300      	movs	r3, #0
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e007      	b.n	80041ce <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 80041be:	1cbb      	adds	r3, r7, #2
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ff8e 	bl	80040e4 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3301      	adds	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80041d4:	dbf3      	blt.n	80041be <Custom_OLED_Clear+0x1c>
    }
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <Custom_OLED_Init>:

void Custom_OLED_Init() {
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 80041e6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <Custom_OLED_Init+0x44>)
 80041ec:	f7ff fec4 	bl	8003f78 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <Custom_OLED_Init+0x44>)
 80041f2:	f7ff feb1 	bl	8003f58 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <Custom_OLED_Init+0x48>)
 80041f8:	463c      	mov	r4, r7
 80041fa:	461d      	mov	r5, r3
 80041fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004208:	6020      	str	r0, [r4, #0]
 800420a:	3404      	adds	r4, #4
 800420c:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 800420e:	463b      	mov	r3, r7
 8004210:	2125      	movs	r1, #37	; 0x25
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff38 	bl	8004088 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8004218:	f7ff ffc3 	bl	80041a2 <Custom_OLED_Clear>
}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bdb0      	pop	{r4, r5, r7, pc}
 8004224:	40003800 	.word	0x40003800
 8004228:	08009a1c 	.word	0x08009a1c

0800422c <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	4604      	mov	r4, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	71fb      	strb	r3, [r7, #7]
 800423e:	4603      	mov	r3, r0
 8004240:	80bb      	strh	r3, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	71bb      	strb	r3, [r7, #6]
 8004246:	4613      	mov	r3, r2
 8004248:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 800424a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800424e:	461a      	mov	r2, r3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4413      	add	r3, r2
 8004254:	b2da      	uxtb	r2, r3
 8004256:	79bb      	ldrb	r3, [r7, #6]
 8004258:	4413      	add	r3, r2
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 8004260:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	4413      	add	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b5f      	cmp	r3, #95	; 0x5f
 8004276:	d802      	bhi.n	800427e <Custom_OLED_Putchar+0x52>
 8004278:	7bbb      	ldrb	r3, [r7, #14]
 800427a:	2b3f      	cmp	r3, #63	; 0x3f
 800427c:	d902      	bls.n	8004284 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004282:	e06a      	b.n	800435a <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	78f9      	ldrb	r1, [r7, #3]
 800428a:	79b8      	ldrb	r0, [r7, #6]
 800428c:	f7ff ff64 	bl	8004158 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 8004290:	79fa      	ldrb	r2, [r7, #7]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	4a32      	ldr	r2, [pc, #200]	; (8004364 <Custom_OLED_Putchar+0x138>)
 800429a:	4413      	add	r3, r2
 800429c:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e048      	b.n	8004336 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e03f      	b.n	800432a <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e034      	b.n	800431a <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e029      	b.n	800430a <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4413      	add	r3, r2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	fa42 f303 	asr.w	r3, r2, r3
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <Custom_OLED_Putchar+0xa6>
 80042ce:	88b8      	ldrh	r0, [r7, #4]
 80042d0:	e000      	b.n	80042d4 <Custom_OLED_Putchar+0xa8>
 80042d2:	2000      	movs	r0, #0
 80042d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042d8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	fb02 f101 	mul.w	r1, r2, r1
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	440a      	add	r2, r1
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	00da      	lsls	r2, r3, #3
 80042ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	441a      	add	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <Custom_OLED_Putchar+0x13c>)
 80042fe:	4601      	mov	r1, r0
 8004300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	dbd0      	blt.n	80042b6 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3301      	adds	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	dbc5      	blt.n	80042b0 <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	3301      	adds	r3, #1
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b07      	cmp	r3, #7
 800432e:	ddbc      	ble.n	80042aa <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b04      	cmp	r3, #4
 800433a:	ddb3      	ble.n	80042a4 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 800433c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004340:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004344:	fb03 f202 	mul.w	r2, r3, r2
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4619      	mov	r1, r3
 8004352:	4805      	ldr	r0, [pc, #20]	; (8004368 <Custom_OLED_Putchar+0x13c>)
 8004354:	f7ff fec6 	bl	80040e4 <Custom_OLED_Write_Data>
	return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	bf00      	nop
 8004364:	08009e4c 	.word	0x08009e4c
 8004368:	20001340 	.word	0x20001340

0800436c <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 800436c:	b40f      	push	{r0, r1, r2, r3}
 800436e:	b590      	push	{r4, r7, lr}
 8004370:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8004374:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 8004382:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8004386:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800438a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800438e:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8004390:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004394:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8004398:	f107 0008 	add.w	r0, r7, #8
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80043a2:	f003 f979 	bl	8007698 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80043ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043b0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80043ba:	e226      	b.n	800480a <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80043bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80043c0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80043c4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b2f      	cmp	r3, #47	; 0x2f
 80043ce:	f040 81f7 	bne.w	80047c0 <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 80043d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80043d6:	3301      	adds	r3, #1
 80043d8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80043dc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 80043e6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80043ea:	2b2f      	cmp	r3, #47	; 0x2f
 80043ec:	d105      	bne.n	80043fa <Custom_OLED_Printf+0x8e>
				cursor += 1;
 80043ee:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80043f2:	3301      	adds	r3, #1
 80043f4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80043f8:	e1e2      	b.n	80047c0 <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 80043fa:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80043fe:	3b23      	subs	r3, #35	; 0x23
 8004400:	2b56      	cmp	r3, #86	; 0x56
 8004402:	f200 81d7 	bhi.w	80047b4 <Custom_OLED_Printf+0x448>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <Custom_OLED_Printf+0xa0>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004625 	.word	0x08004625
 8004410:	080047b5 	.word	0x080047b5
 8004414:	080047b5 	.word	0x080047b5
 8004418:	080047b5 	.word	0x080047b5
 800441c:	080047b5 	.word	0x080047b5
 8004420:	080047b5 	.word	0x080047b5
 8004424:	080047b5 	.word	0x080047b5
 8004428:	080047b5 	.word	0x080047b5
 800442c:	080047b5 	.word	0x080047b5
 8004430:	080047b5 	.word	0x080047b5
 8004434:	080047b5 	.word	0x080047b5
 8004438:	080047b5 	.word	0x080047b5
 800443c:	080047b5 	.word	0x080047b5
 8004440:	08004569 	.word	0x08004569
 8004444:	08004569 	.word	0x08004569
 8004448:	08004569 	.word	0x08004569
 800444c:	08004569 	.word	0x08004569
 8004450:	08004569 	.word	0x08004569
 8004454:	08004569 	.word	0x08004569
 8004458:	08004569 	.word	0x08004569
 800445c:	080047b5 	.word	0x080047b5
 8004460:	080047b5 	.word	0x080047b5
 8004464:	080047b5 	.word	0x080047b5
 8004468:	080047b5 	.word	0x080047b5
 800446c:	080047b5 	.word	0x080047b5
 8004470:	080047b5 	.word	0x080047b5
 8004474:	080047b5 	.word	0x080047b5
 8004478:	080047b5 	.word	0x080047b5
 800447c:	080047b5 	.word	0x080047b5
 8004480:	080047b5 	.word	0x080047b5
 8004484:	08004615 	.word	0x08004615
 8004488:	080047b5 	.word	0x080047b5
 800448c:	080047b5 	.word	0x080047b5
 8004490:	080047b5 	.word	0x080047b5
 8004494:	080047b5 	.word	0x080047b5
 8004498:	080047b5 	.word	0x080047b5
 800449c:	080047b5 	.word	0x080047b5
 80044a0:	080047b5 	.word	0x080047b5
 80044a4:	080047b5 	.word	0x080047b5
 80044a8:	080047b5 	.word	0x080047b5
 80044ac:	08004603 	.word	0x08004603
 80044b0:	080047b5 	.word	0x080047b5
 80044b4:	080047b5 	.word	0x080047b5
 80044b8:	080047b5 	.word	0x080047b5
 80044bc:	080047b5 	.word	0x080047b5
 80044c0:	080047b5 	.word	0x080047b5
 80044c4:	080047b5 	.word	0x080047b5
 80044c8:	080047b5 	.word	0x080047b5
 80044cc:	080047b5 	.word	0x080047b5
 80044d0:	080047b5 	.word	0x080047b5
 80044d4:	080047b5 	.word	0x080047b5
 80044d8:	080047b5 	.word	0x080047b5
 80044dc:	080047b5 	.word	0x080047b5
 80044e0:	080047b5 	.word	0x080047b5
 80044e4:	080047b5 	.word	0x080047b5
 80044e8:	080047b5 	.word	0x080047b5
 80044ec:	080047b5 	.word	0x080047b5
 80044f0:	080047b5 	.word	0x080047b5
 80044f4:	080047b5 	.word	0x080047b5
 80044f8:	080047b5 	.word	0x080047b5
 80044fc:	080047b5 	.word	0x080047b5
 8004500:	080047b5 	.word	0x080047b5
 8004504:	0800461d 	.word	0x0800461d
 8004508:	080045a1 	.word	0x080045a1
 800450c:	080045b3 	.word	0x080045b3
 8004510:	080047b5 	.word	0x080047b5
 8004514:	080047b5 	.word	0x080047b5
 8004518:	080047b5 	.word	0x080047b5
 800451c:	08004597 	.word	0x08004597
 8004520:	080047b5 	.word	0x080047b5
 8004524:	080047b5 	.word	0x080047b5
 8004528:	080047b5 	.word	0x080047b5
 800452c:	0800460d 	.word	0x0800460d
 8004530:	080045d1 	.word	0x080045d1
 8004534:	080045bd 	.word	0x080045bd
 8004538:	080047b5 	.word	0x080047b5
 800453c:	080045c7 	.word	0x080045c7
 8004540:	080045f9 	.word	0x080045f9
 8004544:	080047b5 	.word	0x080047b5
 8004548:	0800458d 	.word	0x0800458d
 800454c:	080045e5 	.word	0x080045e5
 8004550:	080045db 	.word	0x080045db
 8004554:	080047b5 	.word	0x080047b5
 8004558:	080045ef 	.word	0x080045ef
 800455c:	08004583 	.word	0x08004583
 8004560:	080047b5 	.word	0x080047b5
 8004564:	080045a9 	.word	0x080045a9
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 800456e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8004572:	3b30      	subs	r3, #48	; 0x30
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	00d2      	lsls	r2, r2, #3
 800457a:	4413      	add	r3, r2
 800457c:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 8004580:	e118      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 8004582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004586:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800458a:	e113      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 800458c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004590:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004594:	e10e      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8004596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800459a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800459e:	e109      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 80045a0:	231f      	movs	r3, #31
 80045a2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045a6:	e105      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80045a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045ac:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045b0:	e100      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80045b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80045b6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045ba:	e0fb      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80045bc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045c0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045c4:	e0f6      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 80045c6:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 80045ca:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045ce:	e0f1      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 80045d0:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80045d4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045d8:	e0ec      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 80045da:	f240 73ef 	movw	r3, #2031	; 0x7ef
 80045de:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045e2:	e0e7      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 80045e4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80045e8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045ec:	e0e2      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 80045ee:	f647 031f 	movw	r3, #30751	; 0x781f
 80045f2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80045f6:	e0dd      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 80045f8:	f64f 030f 	movw	r3, #63503	; 0xf80f
 80045fc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004600:	e0d8      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 8004602:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004606:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800460a:	e0d3      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 800460c:	2300      	movs	r3, #0
 800460e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004612:	e0cf      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8004614:	2302      	movs	r3, #2
 8004616:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800461a:	e0cb      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8004622:	e0c7      	b.n	80047b4 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004630:	e099      	b.n	8004766 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 8004632:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004636:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800463a:	4413      	add	r3, r2
 800463c:	3302      	adds	r3, #2
 800463e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004642:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d924      	bls.n	8004696 <Custom_OLED_Printf+0x32a>
 800464c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004650:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004654:	4413      	add	r3, r2
 8004656:	3302      	adds	r3, #2
 8004658:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800465c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004660:	5cd3      	ldrb	r3, [r2, r3]
 8004662:	2b46      	cmp	r3, #70	; 0x46
 8004664:	d817      	bhi.n	8004696 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 8004666:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8004670:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004674:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004678:	4413      	add	r3, r2
 800467a:	3302      	adds	r3, #2
 800467c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004680:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	461a      	mov	r2, r3
 8004688:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800468c:	4413      	add	r3, r2
 800468e:	3b37      	subs	r3, #55	; 0x37
 8004690:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004694:	e062      	b.n	800475c <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 8004696:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800469a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800469e:	4413      	add	r3, r2
 80046a0:	3302      	adds	r3, #2
 80046a2:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80046a6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d924      	bls.n	80046fa <Custom_OLED_Printf+0x38e>
 80046b0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80046b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046b8:	4413      	add	r3, r2
 80046ba:	3302      	adds	r3, #2
 80046bc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80046c0:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	2b66      	cmp	r3, #102	; 0x66
 80046c8:	d817      	bhi.n	80046fa <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 80046ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 80046d4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80046d8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046dc:	4413      	add	r3, r2
 80046de:	3302      	adds	r3, #2
 80046e0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80046e4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80046f0:	4413      	add	r3, r2
 80046f2:	3b57      	subs	r3, #87	; 0x57
 80046f4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80046f8:	e030      	b.n	800475c <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 80046fa:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80046fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004702:	4413      	add	r3, r2
 8004704:	3302      	adds	r3, #2
 8004706:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800470a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	2b2f      	cmp	r3, #47	; 0x2f
 8004712:	d923      	bls.n	800475c <Custom_OLED_Printf+0x3f0>
 8004714:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004718:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800471c:	4413      	add	r3, r2
 800471e:	3302      	adds	r3, #2
 8004720:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004724:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	2b39      	cmp	r3, #57	; 0x39
 800472c:	d816      	bhi.n	800475c <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 800472e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8004738:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800473c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004740:	4413      	add	r3, r2
 8004742:	3302      	adds	r3, #2
 8004744:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004748:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	461a      	mov	r2, r3
 8004750:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004754:	4413      	add	r3, r2
 8004756:	3b30      	subs	r3, #48	; 0x30
 8004758:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 800475c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004760:	3301      	adds	r3, #1
 8004762:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004766:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800476a:	2b05      	cmp	r3, #5
 800476c:	f67f af61 	bls.w	8004632 <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 8004770:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	b29a      	uxth	r2, r3
 8004782:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	b29b      	uxth	r3, r3
 800478a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800478e:	b29b      	uxth	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	b29a      	uxth	r2, r3
 8004794:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	b29b      	uxth	r3, r3
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 80047a8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047ac:	3306      	adds	r3, #6
 80047ae:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80047b2:	bf00      	nop
				}

				cursor += 2;
 80047b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047b8:	3302      	adds	r3, #2
 80047ba:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80047be:	e024      	b.n	800480a <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80047c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80047c4:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80047c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047cc:	4413      	add	r3, r2
 80047ce:	7818      	ldrb	r0, [r3, #0]
 80047d0:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 80047d4:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80047d8:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 80047dc:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4623      	mov	r3, r4
 80047e4:	f7ff fd22 	bl	800422c <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 80047e8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80047ec:	461a      	mov	r2, r3
 80047ee:	0052      	lsls	r2, r2, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80047fa:	4413      	add	r3, r2
 80047fc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 8004800:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004804:	3301      	adds	r3, #1
 8004806:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 800480a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800480e:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8004812:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f47f adce 	bne.w	80043bc <Custom_OLED_Printf+0x50>
	}
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800482e:	b004      	add	sp, #16
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <LL_GPIO_ReadInputPort>:
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	return uwTick;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <Custom_Delay_Get_SysTick+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000310 	.word	0x20000310

08004864 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 8004882:	f7ff ffe3 	bl	800484c <Custom_Delay_Get_SysTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	741a      	strb	r2, [r3, #16]
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ffc3 	bl	8004834 <LL_GPIO_ReadInputPort>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 80048c4:	f7ff ffc2 	bl	800484c <Custom_Delay_Get_SysTick>
 80048c8:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7c1b      	ldrb	r3, [r3, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	d873      	bhi.n	80049bc <Custom_Switch_State_Machine+0x120>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <Custom_Switch_State_Machine+0x40>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	08004911 	.word	0x08004911
 80048e4:	080049bd 	.word	0x080049bd
 80048e8:	08004947 	.word	0x08004947
 80048ec:	080049bd 	.word	0x080049bd
 80048f0:	080049bd 	.word	0x080049bd
 80048f4:	080049bd 	.word	0x080049bd
 80048f8:	08004991 	.word	0x08004991

		case LONG_OFF:
			if (currentPushed) {
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d05b      	beq.n	80049ba <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2250      	movs	r2, #80	; 0x50
 800490c:	609a      	str	r2, [r3, #8]
			}
			break;
 800490e:	e054      	b.n	80049ba <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	1acb      	subs	r3, r1, r3
 800491c:	429a      	cmp	r2, r3
 800491e:	d808      	bhi.n	8004932 <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2204      	movs	r2, #4
 8004928:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004930:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1acb      	subs	r3, r1, r3
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]
			break;
 8004944:	e03a      	b.n	80049bc <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	f083 0301 	eor.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2208      	movs	r2, #8
 8004956:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2250      	movs	r2, #80	; 0x50
 800495c:	609a      	str	r2, [r3, #8]
				break;
 800495e:	e02d      	b.n	80049bc <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	1acb      	subs	r3, r1, r3
 800496c:	429a      	cmp	r2, r3
 800496e:	d805      	bhi.n	800497c <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800497a:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68d9      	ldr	r1, [r3, #12]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	1acb      	subs	r3, r1, r3
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
			break;
 800498e:	e015      	b.n	80049bc <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	429a      	cmp	r2, r3
 800499e:	d802      	bhi.n	80049a6 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68d9      	ldr	r1, [r3, #12]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1acb      	subs	r3, r1, r3
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	609a      	str	r2, [r3, #8]
			break;
 80049b8:	e000      	b.n	80049bc <Custom_Switch_State_Machine+0x120>
			break;
 80049ba:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2;
	if (!isInitialized) {
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <Custom_Switch_Read+0xb8>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f083 0301 	eor.w	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <Custom_Switch_Read+0x2e>
		isInitialized = true;
 80049e0:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <Custom_Switch_Read+0xb8>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 80049e6:	2210      	movs	r2, #16
 80049e8:	4927      	ldr	r1, [pc, #156]	; (8004a88 <Custom_Switch_Read+0xbc>)
 80049ea:	4828      	ldr	r0, [pc, #160]	; (8004a8c <Custom_Switch_Read+0xc0>)
 80049ec:	f7ff ff3a 	bl	8004864 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 80049f0:	2220      	movs	r2, #32
 80049f2:	4925      	ldr	r1, [pc, #148]	; (8004a88 <Custom_Switch_Read+0xbc>)
 80049f4:	4826      	ldr	r0, [pc, #152]	; (8004a90 <Custom_Switch_Read+0xc4>)
 80049f6:	f7ff ff35 	bl	8004864 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 80049fa:	4824      	ldr	r0, [pc, #144]	; (8004a8c <Custom_Switch_Read+0xc0>)
 80049fc:	f7ff ff4e 	bl	800489c <Custom_Switch_State_Machine>
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8004a04:	4822      	ldr	r0, [pc, #136]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a06:	f7ff ff49 	bl	800489c <Custom_Switch_State_Machine>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71bb      	strb	r3, [r7, #6]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if ((sw1.state & SHORT_ON) && sw2PushEvent) {
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <Custom_Switch_Read+0xc0>)
 8004a10:	7c1b      	ldrb	r3, [r3, #16]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <Custom_Switch_Read+0x68>
 8004a1a:	79bb      	ldrb	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <Custom_Switch_Read+0x68>
		sw1PushEvent = true;
 8004a20:	2301      	movs	r3, #1
 8004a22:	71fb      	strb	r3, [r7, #7]
		sw1.state = sw2.state;
 8004a24:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a26:	7c1a      	ldrb	r2, [r3, #16]
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <Custom_Switch_Read+0xc0>)
 8004a2a:	741a      	strb	r2, [r3, #16]
		sw1.timer = sw2.timer;
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <Custom_Switch_Read+0xc0>)
 8004a32:	6093      	str	r3, [r2, #8]
	}
	if ((sw2.state & SHORT_ON) && sw1PushEvent) {
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a36:	7c1b      	ldrb	r3, [r3, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <Custom_Switch_Read+0x8e>
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <Custom_Switch_Read+0x8e>
		sw2PushEvent = true;
 8004a46:	2301      	movs	r3, #1
 8004a48:	71bb      	strb	r3, [r7, #6]
		sw2.state = sw1.state;
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <Custom_Switch_Read+0xc0>)
 8004a4c:	7c1a      	ldrb	r2, [r3, #16]
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a50:	741a      	strb	r2, [r3, #16]
		sw2.timer = sw1.timer;
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <Custom_Switch_Read+0xc0>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <Custom_Switch_Read+0xc4>)
 8004a58:	6093      	str	r3, [r2, #8]
	}

	uint8_t buttonPushEvent = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	717b      	strb	r3, [r7, #5]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <Custom_Switch_Read+0xa0>
 8004a64:	797b      	ldrb	r3, [r7, #5]
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	717b      	strb	r3, [r7, #5]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8004a6c:	79bb      	ldrb	r3, [r7, #6]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <Custom_Switch_Read+0xae>
 8004a72:	797b      	ldrb	r3, [r7, #5]
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	717b      	strb	r3, [r7, #5]

	return buttonPushEvent;
 8004a7a:	797b      	ldrb	r3, [r7, #5]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20001480 	.word	0x20001480
 8004a88:	40020400 	.word	0x40020400
 8004a8c:	20001484 	.word	0x20001484
 8004a90:	20001498 	.word	0x20001498

08004a94 <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting(uint8_t driveIdx) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]

	Pre_Drive_Var_Adjust();
 8004a9e:	f000 f809 	bl	8004ab4 <Pre_Drive_Var_Adjust>
	Pre_Drive_Var_Init(driveIdx);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f9b9 	bl	8004e1c <Pre_Drive_Var_Init>

}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <Pre_Drive_Var_Adjust>:



// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust() {
 8004ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab6:	b0b9      	sub	sp, #228	; 0xe4
 8004ab8:	af06      	add	r7, sp, #24
	uint8_t	sw = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5



	t_driveMenu_Int		intValues[] = {
 8004ac0:	4bce      	ldr	r3, [pc, #824]	; (8004dfc <Pre_Drive_Var_Adjust+0x348>)
 8004ac2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			{ "threshold",		&threshold,			5 },
			{ "curveDecelCoef",	&curveDecelCoef,	1000 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4



	t_driveMenu_Float	floatValues[] = {
 8004ade:	4ac8      	ldr	r2, [pc, #800]	; (8004e00 <Pre_Drive_Var_Adjust+0x34c>)
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	2290      	movs	r2, #144	; 0x90
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f002 fe18 	bl	800771c <memcpy>
			{ "boostSpeed",		&boostSpeed_init,	0.1 },
			{ "accele",			&accele_init,		0.1 },
			{ "decele",			&decele_init,		0.1 },
			{ "positionCoef",	&positionCoef,		0.00001 },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8004aec:	2306      	movs	r3, #6
 8004aee:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3



	for (uint8_t i = 0; i < intValCnt; i++) {
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8004af8:	e0e5      	b.n	8004cc6 <Pre_Drive_Var_Adjust+0x212>

		Custom_OLED_Clear();
 8004afa:	f7ff fb52 	bl	80041a2 <Custom_OLED_Clear>

		if (intValues[i].val == &threshold) {
 8004afe:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	33c8      	adds	r3, #200	; 0xc8
 8004b0c:	443b      	add	r3, r7
 8004b0e:	3b28      	subs	r3, #40	; 0x28
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4abc      	ldr	r2, [pc, #752]	; (8004e04 <Pre_Drive_Var_Adjust+0x350>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	f040 80b8 	bne.w	8004c8a <Pre_Drive_Var_Adjust+0x1d6>
			Sensor_Start();
 8004b1a:	f001 ff87 	bl	8006a2c <Sensor_Start>
		}

		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004b1e:	e0b4      	b.n	8004c8a <Pre_Drive_Var_Adjust+0x1d6>

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/0%s", intValues[i].valName);
 8004b20:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004b24:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	440b      	add	r3, r1
 8004b32:	4619      	mov	r1, r3
 8004b34:	48b4      	ldr	r0, [pc, #720]	; (8004e08 <Pre_Drive_Var_Adjust+0x354>)
 8004b36:	f7ff fc19 	bl	800436c <Custom_OLED_Printf>
			Custom_OLED_Printf("/1%5d", *(intValues[i].val));
 8004b3a:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	33c8      	adds	r3, #200	; 0xc8
 8004b48:	443b      	add	r3, r7
 8004b4a:	3b28      	subs	r3, #40	; 0x28
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4619      	mov	r1, r3
 8004b52:	48ae      	ldr	r0, [pc, #696]	; (8004e0c <Pre_Drive_Var_Adjust+0x358>)
 8004b54:	f7ff fc0a 	bl	800436c <Custom_OLED_Printf>

			if (intValues[i].val == &threshold) {
 8004b58:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	33c8      	adds	r3, #200	; 0xc8
 8004b66:	443b      	add	r3, r7
 8004b68:	3b28      	subs	r3, #40	; 0x28
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4aa5      	ldr	r2, [pc, #660]	; (8004e04 <Pre_Drive_Var_Adjust+0x350>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d140      	bne.n	8004bf4 <Pre_Drive_Var_Adjust+0x140>
				Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
					(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8004b72:	4ba7      	ldr	r3, [pc, #668]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
				Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004b78:	f003 0501 	and.w	r5, r3, #1
 8004b7c:	4ba4      	ldr	r3, [pc, #656]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0601 	and.w	r6, r3, #1
 8004b8a:	4ba1      	ldr	r3, [pc, #644]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 0c01 	and.w	ip, r3, #1
 8004b98:	4b9d      	ldr	r3, [pc, #628]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	4a9a      	ldr	r2, [pc, #616]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	0912      	lsrs	r2, r2, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	f002 0201 	and.w	r2, r2, #1
 8004bb4:	4996      	ldr	r1, [pc, #600]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004bb6:	7809      	ldrb	r1, [r1, #0]
 8004bb8:	b2c9      	uxtb	r1, r1
 8004bba:	0949      	lsrs	r1, r1, #5
 8004bbc:	b2c9      	uxtb	r1, r1
 8004bbe:	f001 0101 	and.w	r1, r1, #1
 8004bc2:	4893      	ldr	r0, [pc, #588]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004bc4:	7800      	ldrb	r0, [r0, #0]
 8004bc6:	b2c0      	uxtb	r0, r0
 8004bc8:	0980      	lsrs	r0, r0, #6
 8004bca:	b2c0      	uxtb	r0, r0
 8004bcc:	f000 0001 	and.w	r0, r0, #1
 8004bd0:	4c8f      	ldr	r4, [pc, #572]	; (8004e10 <Pre_Drive_Var_Adjust+0x35c>)
 8004bd2:	7824      	ldrb	r4, [r4, #0]
 8004bd4:	b2e4      	uxtb	r4, r4
 8004bd6:	09e4      	lsrs	r4, r4, #7
 8004bd8:	b2e4      	uxtb	r4, r4
 8004bda:	f004 0401 	and.w	r4, r4, #1
 8004bde:	9404      	str	r4, [sp, #16]
 8004be0:	9003      	str	r0, [sp, #12]
 8004be2:	9102      	str	r1, [sp, #8]
 8004be4:	9201      	str	r2, [sp, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4663      	mov	r3, ip
 8004bea:	4632      	mov	r2, r6
 8004bec:	4629      	mov	r1, r5
 8004bee:	4889      	ldr	r0, [pc, #548]	; (8004e14 <Pre_Drive_Var_Adjust+0x360>)
 8004bf0:	f7ff fbbc 	bl	800436c <Custom_OLED_Printf>
					(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8004bf4:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d121      	bne.n	8004c40 <Pre_Drive_Var_Adjust+0x18c>
				*(intValues[i].val) -= intValues[i].changeVal;
 8004bfc:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	33c8      	adds	r3, #200	; 0xc8
 8004c0a:	443b      	add	r3, r7
 8004c0c:	3b24      	subs	r3, #36	; 0x24
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	33c8      	adds	r3, #200	; 0xc8
 8004c1e:	443b      	add	r3, r7
 8004c20:	3b28      	subs	r3, #40	; 0x28
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	33c8      	adds	r3, #200	; 0xc8
 8004c34:	443b      	add	r3, r7
 8004c36:	3b28      	subs	r3, #40	; 0x28
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1a42      	subs	r2, r0, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e024      	b.n	8004c8a <Pre_Drive_Var_Adjust+0x1d6>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8004c40:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d120      	bne.n	8004c8a <Pre_Drive_Var_Adjust+0x1d6>
				*(intValues[i].val) += intValues[i].changeVal;
 8004c48:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	33c8      	adds	r3, #200	; 0xc8
 8004c56:	443b      	add	r3, r7
 8004c58:	3b24      	subs	r3, #36	; 0x24
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	33c8      	adds	r3, #200	; 0xc8
 8004c6a:	443b      	add	r3, r7
 8004c6c:	3b28      	subs	r3, #40	; 0x28
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	33c8      	adds	r3, #200	; 0xc8
 8004c80:	443b      	add	r3, r7
 8004c82:	3b28      	subs	r3, #40	; 0x28
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	1842      	adds	r2, r0, r1
 8004c88:	601a      	str	r2, [r3, #0]
		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004c8a:	f7ff fe9f 	bl	80049cc <Custom_Switch_Read>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8004c94:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	f47f af41 	bne.w	8004b20 <Pre_Drive_Var_Adjust+0x6c>
			}
		}

		if (intValues[i].val == &threshold) {
 8004c9e:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	33c8      	adds	r3, #200	; 0xc8
 8004cac:	443b      	add	r3, r7
 8004cae:	3b28      	subs	r3, #40	; 0x28
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a54      	ldr	r2, [pc, #336]	; (8004e04 <Pre_Drive_Var_Adjust+0x350>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d101      	bne.n	8004cbc <Pre_Drive_Var_Adjust+0x208>
			Sensor_Stop();
 8004cb8:	f001 fed0 	bl	8006a5c <Sensor_Stop>
	for (uint8_t i = 0; i < intValCnt; i++) {
 8004cbc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8004cc6:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8004cca:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	f4ff af13 	bcc.w	8004afa <Pre_Drive_Var_Adjust+0x46>
		}
	}



	for (uint8_t i = 0; i < floatValCnt; i++) {
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8004cda:	e082      	b.n	8004de2 <Pre_Drive_Var_Adjust+0x32e>
		Custom_OLED_Clear();
 8004cdc:	f7ff fa61 	bl	80041a2 <Custom_OLED_Clear>
		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004ce0:	e071      	b.n	8004dc6 <Pre_Drive_Var_Adjust+0x312>

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/0%s", floatValues[i].valName);
 8004ce2:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	440b      	add	r3, r1
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4844      	ldr	r0, [pc, #272]	; (8004e08 <Pre_Drive_Var_Adjust+0x354>)
 8004cf6:	f7ff fb39 	bl	800436c <Custom_OLED_Printf>
			Custom_OLED_Printf("/1%5f", *(floatValues[i].val));
 8004cfa:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004cfe:	4613      	mov	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	4413      	add	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	33c8      	adds	r3, #200	; 0xc8
 8004d08:	443b      	add	r3, r7
 8004d0a:	3bb8      	subs	r3, #184	; 0xb8
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fc21 	bl	8000558 <__aeabi_f2d>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	483f      	ldr	r0, [pc, #252]	; (8004e18 <Pre_Drive_Var_Adjust+0x364>)
 8004d1c:	f7ff fb26 	bl	800436c <Custom_OLED_Printf>

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8004d20:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d125      	bne.n	8004d74 <Pre_Drive_Var_Adjust+0x2c0>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 8004d28:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	33c8      	adds	r3, #200	; 0xc8
 8004d36:	443b      	add	r3, r7
 8004d38:	3bb4      	subs	r3, #180	; 0xb4
 8004d3a:	edd3 7a00 	vldr	s15, [r3]
 8004d3e:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	33c8      	adds	r3, #200	; 0xc8
 8004d4c:	443b      	add	r3, r7
 8004d4e:	3bb8      	subs	r3, #184	; 0xb8
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	ed93 7a00 	vldr	s14, [r3]
 8004d56:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	33c8      	adds	r3, #200	; 0xc8
 8004d64:	443b      	add	r3, r7
 8004d66:	3bb8      	subs	r3, #184	; 0xb8
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6e:	edc3 7a00 	vstr	s15, [r3]
 8004d72:	e028      	b.n	8004dc6 <Pre_Drive_Var_Adjust+0x312>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8004d74:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d124      	bne.n	8004dc6 <Pre_Drive_Var_Adjust+0x312>
				*(floatValues[i].val) += floatValues[i].changeVal;
 8004d7c:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	33c8      	adds	r3, #200	; 0xc8
 8004d8a:	443b      	add	r3, r7
 8004d8c:	3bb4      	subs	r3, #180	; 0xb4
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	33c8      	adds	r3, #200	; 0xc8
 8004da0:	443b      	add	r3, r7
 8004da2:	3bb8      	subs	r3, #184	; 0xb8
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	33c8      	adds	r3, #200	; 0xc8
 8004db8:	443b      	add	r3, r7
 8004dba:	3bb8      	subs	r3, #184	; 0xb8
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc2:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004dc6:	f7ff fe01 	bl	80049cc <Custom_Switch_Read>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8004dd0:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d184      	bne.n	8004ce2 <Pre_Drive_Var_Adjust+0x22e>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 8004dd8:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8004de2:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8004de6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004dea:	429a      	cmp	r2, r3
 8004dec:	f4ff af76 	bcc.w	8004cdc <Pre_Drive_Var_Adjust+0x228>
			}
		}
	}

	Custom_OLED_Clear();
 8004df0:	f7ff f9d7 	bl	80041a2 <Custom_OLED_Clear>
}
 8004df4:	bf00      	nop
 8004df6:	37cc      	adds	r7, #204	; 0xcc
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfc:	08009a88 	.word	0x08009a88
 8004e00:	08009ab8 	.word	0x08009ab8
 8004e04:	20000128 	.word	0x20000128
 8004e08:	08009a44 	.word	0x08009a44
 8004e0c:	08009a4c 	.word	0x08009a4c
 8004e10:	2000537c 	.word	0x2000537c
 8004e14:	08009a54 	.word	0x08009a54
 8004e18:	08009a80 	.word	0x08009a80

08004e1c <Pre_Drive_Var_Init>:


// 주행 전 초기값 대입
static void Pre_Drive_Var_Init(uint8_t driveIdx) {
 8004e1c:	b490      	push	{r4, r7}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]


	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 8004e26:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <Pre_Drive_Var_Init+0xe8>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	accele = accele_init;
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <Pre_Drive_Var_Init+0xec>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a36      	ldr	r2, [pc, #216]	; (8004f0c <Pre_Drive_Var_Init+0xf0>)
 8004e32:	6013      	str	r3, [r2, #0]
	decele = decele_init;
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <Pre_Drive_Var_Init+0xf4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a36      	ldr	r2, [pc, #216]	; (8004f14 <Pre_Drive_Var_Init+0xf8>)
 8004e3a:	6013      	str	r3, [r2, #0]

	targetSpeed = targetSpeed_init;
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <Pre_Drive_Var_Init+0xfc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <Pre_Drive_Var_Init+0x100>)
 8004e42:	6013      	str	r3, [r2, #0]
	currentSpeed = MIN_SPEED;
 8004e44:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <Pre_Drive_Var_Init+0x104>)
 8004e46:	4a37      	ldr	r2, [pc, #220]	; (8004f24 <Pre_Drive_Var_Init+0x108>)
 8004e48:	601a      	str	r2, [r3, #0]
	boostSpeed = boostSpeed_init;
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <Pre_Drive_Var_Init+0x10c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <Pre_Drive_Var_Init+0x110>)
 8004e50:	6013      	str	r3, [r2, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <Pre_Drive_Var_Init+0x114>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 8004e58:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <Pre_Drive_Var_Init+0x118>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick = 0;
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <Pre_Drive_Var_Init+0x11c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

	// 500us 단위의 타이머 업데이트
	curTime = 0;
 8004e64:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <Pre_Drive_Var_Init+0x120>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

	// driveData에 접근하는 포인터 0번 인덱스로 초기화
	driveDataPtr = driveData + 0;
 8004e6a:	4b35      	ldr	r3, [pc, #212]	; (8004f40 <Pre_Drive_Var_Init+0x124>)
 8004e6c:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004e6e:	601a      	str	r2, [r3, #0]

	// state machine 의 상태 업데이트
	driveState = DRIVE_STATE_IDLE;
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <Pre_Drive_Var_Init+0x12c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]

	// 부스트 컨트롤 상태 업데이트
	boostCntl = BOOST_CNTL_IDLE;
 8004e76:	4b35      	ldr	r3, [pc, #212]	; (8004f4c <Pre_Drive_Var_Init+0x130>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 8004e7c:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <Pre_Drive_Var_Init+0x134>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	801a      	strh	r2, [r3, #0]


	// 1차 주행에서만 초기화할 변수
	if (driveIdx == FIRST_DRIVE) {
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d121      	bne.n	8004ecc <Pre_Drive_Var_Init+0xb0>

		// driveData 값 초기화
		for (uint16_t i = 0; i < MAX_MARKER_CNT; i++) {
 8004e88:	2300      	movs	r3, #0
 8004e8a:	83fb      	strh	r3, [r7, #30]
 8004e8c:	e013      	b.n	8004eb6 <Pre_Drive_Var_Init+0x9a>
			t_driveData temp = T_DRIVE_DATA_INIT;
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	60da      	str	r2, [r3, #12]

			driveData[i] = temp;
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	461c      	mov	r4, r3
 8004ea6:	f107 030c 	add.w	r3, r7, #12
 8004eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (uint16_t i = 0; i < MAX_MARKER_CNT; i++) {
 8004eb0:	8bfb      	ldrh	r3, [r7, #30]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	83fb      	strh	r3, [r7, #30]
 8004eb6:	8bfb      	ldrh	r3, [r7, #30]
 8004eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ebc:	d3e7      	bcc.n	8004e8e <Pre_Drive_Var_Init+0x72>
		}

		// driveData의 0번째 값 초기화 (0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠)
		driveData[0].markState = MARK_STRAIGHT;
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	711a      	strb	r2, [r3, #4]
		driveData[0].isExist = CUSTOM_TRUE;
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	719a      	strb	r2, [r3, #6]
		}

		// driveData의 0번째 isReadAllMark 값 정상으로 변경
		driveData[0].isReadAllMark = CUSTOM_TRUE;
	}
}
 8004eca:	e016      	b.n	8004efa <Pre_Drive_Var_Init+0xde>
	else if (driveIdx == SECOND_DRIVE) {
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d113      	bne.n	8004efa <Pre_Drive_Var_Init+0xde>
		for (uint16_t i = 1; i < MAX_MARKER_CNT; i++) {
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	83bb      	strh	r3, [r7, #28]
 8004ed6:	e009      	b.n	8004eec <Pre_Drive_Var_Init+0xd0>
			driveData[i].isReadAllMark = CUSTOM_FALSE;
 8004ed8:	8bbb      	ldrh	r3, [r7, #28]
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 1; i < MAX_MARKER_CNT; i++) {
 8004ee6:	8bbb      	ldrh	r3, [r7, #28]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	83bb      	strh	r3, [r7, #28]
 8004eec:	8bbb      	ldrh	r3, [r7, #28]
 8004eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef2:	d3f1      	bcc.n	8004ed8 <Pre_Drive_Var_Init+0xbc>
		driveData[0].isReadAllMark = CUSTOM_TRUE;
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <Pre_Drive_Var_Init+0x128>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	731a      	strb	r2, [r3, #12]
}
 8004efa:	bf00      	nop
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc90      	pop	{r4, r7}
 8004f02:	4770      	bx	lr
 8004f04:	200014ac 	.word	0x200014ac
 8004f08:	2000002c 	.word	0x2000002c
 8004f0c:	20000040 	.word	0x20000040
 8004f10:	20000030 	.word	0x20000030
 8004f14:	20000044 	.word	0x20000044
 8004f18:	20000034 	.word	0x20000034
 8004f1c:	20000048 	.word	0x20000048
 8004f20:	2000004c 	.word	0x2000004c
 8004f24:	3c23d70a 	.word	0x3c23d70a
 8004f28:	20000038 	.word	0x20000038
 8004f2c:	20000050 	.word	0x20000050
 8004f30:	200014b0 	.word	0x200014b0
 8004f34:	200014b1 	.word	0x200014b1
 8004f38:	200014b4 	.word	0x200014b4
 8004f3c:	200014b8 	.word	0x200014b8
 8004f40:	20000058 	.word	0x20000058
 8004f44:	200014bc 	.word	0x200014bc
 8004f48:	2000533c 	.word	0x2000533c
 8004f4c:	2000533d 	.word	0x2000533d
 8004f50:	2000533e 	.word	0x2000533e

08004f54 <After_Drive_Setting>:





void After_Drive_Setting(uint8_t driveIdx) {
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]

	// 1차 주행
	if (driveIdx == FIRST_DRIVE) {
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d12c      	bne.n	8004fbe <After_Drive_Setting+0x6a>

		for (volatile t_driveData *p = driveData + 1; p->isExist == CUSTOM_TRUE; p += 1) {
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <After_Drive_Setting+0x78>)
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e024      	b.n	8004fb4 <After_Drive_Setting+0x60>

			// 직선일 경우
			if (p->markState == MARK_STRAIGHT) {
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	791b      	ldrb	r3, [r3, #4]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11c      	bne.n	8004fae <After_Drive_Setting+0x5a>

				// MIN_BOOST_METER  * TICK_PER_M 이상 이동한 경우에 INSTRUCT_BOOST로 업데이트
				if ( p->tickCnt - (p-1)->tickCnt > MIN_BOOST_METER * TICK_PER_M ) {
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b10      	subs	r3, #16
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f88:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004fd0 <After_Drive_Setting+0x7c>
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	dd08      	ble.n	8004fa8 <After_Drive_Setting+0x54>
					p->boostTick = p->tickCnt - (p-1)->tickCnt;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b10      	subs	r3, #16
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1ad2      	subs	r2, r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	e002      	b.n	8004fae <After_Drive_Setting+0x5a>
				}
				else {
					p->boostTick = 0;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
		for (volatile t_driveData *p = driveData + 1; p->isExist == CUSTOM_TRUE; p += 1) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3310      	adds	r3, #16
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	799b      	ldrb	r3, [r3, #6]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d0d5      	beq.n	8004f6a <After_Drive_Setting+0x16>

	// 2차 주행
	else if (driveIdx == SECOND_DRIVE) {

	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200014cc 	.word	0x200014cc
 8004fd0:	44db8635 	.word	0x44db8635

08004fd4 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8004fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8004fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8004ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8005006:	bf00      	nop
 8005008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d1f8      	bne.n	8005008 <Custom_Delay_us+0x34>
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ffcc 	bl	8004fd4 <Custom_Delay_us>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	ed87 0a01 	vstr	s0, [r7, #4]
 800504e:	edc7 0a00 	vstr	s1, [r7]
	targetSpeed = pinSpeed;
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <Drive_Fit_In+0xbc>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - currentSpeed) * (pinSpeed + currentSpeed) / (2 * s) );
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <Drive_Fit_In+0xc0>)
 800505a:	edd3 7a00 	vldr	s15, [r3]
 800505e:	ed97 7a00 	vldr	s14, [r7]
 8005062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <Drive_Fit_In+0xc0>)
 8005068:	edd3 6a00 	vldr	s13, [r3]
 800506c:	edd7 7a00 	vldr	s15, [r7]
 8005070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005074:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005078:	edd7 7a01 	vldr	s15, [r7, #4]
 800507c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d518      	bpl.n	80050c0 <Drive_Fit_In+0x7c>
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <Drive_Fit_In+0xc0>)
 8005090:	edd3 7a00 	vldr	s15, [r3]
 8005094:	ed97 7a00 	vldr	s14, [r7]
 8005098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <Drive_Fit_In+0xc0>)
 800509e:	edd3 6a00 	vldr	s13, [r3]
 80050a2:	edd7 7a00 	vldr	s15, [r7]
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80050ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80050b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ba:	eef1 7a67 	vneg.f32	s15, s15
 80050be:	e015      	b.n	80050ec <Drive_Fit_In+0xa8>
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <Drive_Fit_In+0xc0>)
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	ed97 7a00 	vldr	s14, [r7]
 80050ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <Drive_Fit_In+0xc0>)
 80050d0:	edd3 6a00 	vldr	s13, [r3]
 80050d4:	edd7 7a00 	vldr	s15, [r7]
 80050d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80050e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80050e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <Drive_Fit_In+0xc4>)
 80050ee:	edc3 7a00 	vstr	s15, [r3]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000048 	.word	0x20000048
 8005104:	2000004c 	.word	0x2000004c
 8005108:	20000044 	.word	0x20000044

0800510c <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End() {
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	static uint8_t exitEcho;

	exitEcho = EXIT_ECHO_IDLE;
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <Is_Drive_End+0x6c>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]

	// endMark || lineOut
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <Is_Drive_End+0x70>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d804      	bhi.n	800512a <Is_Drive_End+0x1e>
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <Is_Drive_End+0x74>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b05      	cmp	r3, #5
 8005128:	d122      	bne.n	8005170 <Is_Drive_End+0x64>

		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <Is_Drive_End+0x78>)
 800512c:	edd3 7a00 	vldr	s15, [r3]
 8005130:	eddf 0a15 	vldr	s1, [pc, #84]	; 8005188 <Is_Drive_End+0x7c>
 8005134:	eeb0 0a67 	vmov.f32	s0, s15
 8005138:	f7ff ff84 	bl	8005044 <Drive_Fit_In>

		while (currentSpeed > DRIVE_END_DELAY_SPEED) {
 800513c:	bf00      	nop
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <Is_Drive_End+0x80>)
 8005140:	edd3 7a00 	vldr	s15, [r3]
 8005144:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005190 <Is_Drive_End+0x84>
 8005148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	dcf5      	bgt.n	800513e <Is_Drive_End+0x32>
			//Drive_Speed_Cntl();
		}

		Custom_Delay_ms(DRIVE_END_DELAY_TIME);
 8005152:	2096      	movs	r0, #150	; 0x96
 8005154:	f7ff ff66 	bl	8005024 <Custom_Delay_ms>

		if (endMarkCnt >= 2) {
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <Is_Drive_End+0x70>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d903      	bls.n	800516a <Is_Drive_End+0x5e>

			exitEcho = EXIT_ECHO_END_MARK;
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <Is_Drive_End+0x6c>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e002      	b.n	8005170 <Is_Drive_End+0x64>
		}
		else {

			exitEcho = EXIT_ECHO_LINE_OUT;
 800516a:	4b03      	ldr	r3, [pc, #12]	; (8005178 <Is_Drive_End+0x6c>)
 800516c:	2202      	movs	r2, #2
 800516e:	701a      	strb	r2, [r3, #0]
		}
	}

	return exitEcho;
 8005170:	4b01      	ldr	r3, [pc, #4]	; (8005178 <Is_Drive_End+0x6c>)
 8005172:	781b      	ldrb	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20005348 	.word	0x20005348
 800517c:	200014b0 	.word	0x200014b0
 8005180:	200014b1 	.word	0x200014b1
 8005184:	2000005c 	.word	0x2000005c
 8005188:	3c23d70a 	.word	0x3c23d70a
 800518c:	2000004c 	.word	0x2000004c
 8005190:	3e99999a 	.word	0x3e99999a

08005194 <Get_Line_Sensor_Cnt>:




// line sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Line_Sensor_Cnt() {
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b16      	ldr	r3, [pc, #88]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 80051e0:	4413      	add	r3, r2
 80051e2:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <Get_Line_Sensor_Cnt+0x84>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	4413      	add	r3, r2
 800520a:	b2db      	uxtb	r3, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	2000537c 	.word	0x2000537c

0800521c <Get_Marker_Sensor_Cnt>:


// marker sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Marker_Sensor_Cnt() {
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
	return ((state >> 7) & 0x01) + ((state >> 0) & 0x01);
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <Get_Marker_Sensor_Cnt+0x30>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	09db      	lsrs	r3, r3, #7
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <Get_Marker_Sensor_Cnt+0x30>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	4413      	add	r3, r2
 800523e:	b2db      	uxtb	r3, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	2000537c 	.word	0x2000537c

08005250 <Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Decision(uint8_t sensorStateSum) {
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]


	// cross
	if (sensorStateSum == 0xff) {
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	2bff      	cmp	r3, #255	; 0xff
 800525e:	d103      	bne.n	8005268 <Decision+0x18>

		markState = MARK_CROSS;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <Decision+0x88>)
 8005262:	2204      	movs	r2, #4
 8005264:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 8005266:	e031      	b.n	80052cc <Decision+0x7c>
	else if ( (sensorStateSum & 0x81) == 0x81 ) {
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	f003 0381 	and.w	r3, r3, #129	; 0x81
 800526e:	2b81      	cmp	r3, #129	; 0x81
 8005270:	d10a      	bne.n	8005288 <Decision+0x38>
		markState = MARK_END;
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <Decision+0x88>)
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
		endMarkCnt++;
 8005278:	4b18      	ldr	r3, [pc, #96]	; (80052dc <Decision+0x8c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <Decision+0x8c>)
 8005284:	701a      	strb	r2, [r3, #0]
}
 8005286:	e021      	b.n	80052cc <Decision+0x7c>
	else if ( (sensorStateSum & 0x01) == 0x01 ) {
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <Decision+0x5c>
		if (markState == MARK_CURVE_L) {
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <Decision+0x88>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d103      	bne.n	80052a4 <Decision+0x54>
			markState = MARK_STRAIGHT;
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <Decision+0x88>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
}
 80052a2:	e013      	b.n	80052cc <Decision+0x7c>
			markState = MARK_CURVE_L;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <Decision+0x88>)
 80052a6:	2203      	movs	r2, #3
 80052a8:	701a      	strb	r2, [r3, #0]
}
 80052aa:	e00f      	b.n	80052cc <Decision+0x7c>
	else if ( (sensorStateSum & 0x80) == 0x80 ) {
 80052ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da0b      	bge.n	80052cc <Decision+0x7c>
		if (markState == MARK_CURVE_R) {
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <Decision+0x88>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d103      	bne.n	80052c6 <Decision+0x76>
			markState = MARK_STRAIGHT;
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <Decision+0x88>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	e002      	b.n	80052cc <Decision+0x7c>
			markState = MARK_CURVE_R;
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <Decision+0x88>)
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	200014b1 	.word	0x200014b1
 80052dc:	200014b0 	.word	0x200014b0

080052e0 <Drive_State_Machine>:





__STATIC_INLINE void	Drive_State_Machine() {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
	//센서 값 누적
	static uint8_t	sensorStateSum;
	static uint32_t	lineOutStartTime;


	switch (driveState) {
 80052e4:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <Drive_State_Machine+0x110>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d87e      	bhi.n	80053ec <Drive_State_Machine+0x10c>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <Drive_State_Machine+0x14>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005309 	.word	0x08005309
 80052f8:	08005353 	.word	0x08005353
 80052fc:	0800537f 	.word	0x0800537f
 8005300:	080053a3 	.word	0x080053a3
 8005304:	080053b5 	.word	0x080053b5

		case DRIVE_STATE_IDLE :

			// 라인 센서 4개 이상 인식
			if (Get_Line_Sensor_Cnt() >= 4) {
 8005308:	f7ff ff44 	bl	8005194 <Get_Line_Sensor_Cnt>
 800530c:	4603      	mov	r3, r0
 800530e:	2b03      	cmp	r3, #3
 8005310:	d906      	bls.n	8005320 <Drive_State_Machine+0x40>

				sensorStateSum = 0x00;
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <Drive_State_Machine+0x114>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_CROSS;
 8005318:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <Drive_State_Machine+0x110>)
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]

				lineOutStartTime = curTime;
				driveState = DRIVE_DECISION_LINE_OUT;
			}

			break;
 800531e:	e05e      	b.n	80053de <Drive_State_Machine+0xfe>
			else if (Get_Marker_Sensor_Cnt() != 0) {
 8005320:	f7ff ff7c 	bl	800521c <Get_Marker_Sensor_Cnt>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <Drive_State_Machine+0x58>
				sensorStateSum = 0x00;
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <Drive_State_Machine+0x114>)
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_MARKER;
 8005330:	4b2f      	ldr	r3, [pc, #188]	; (80053f0 <Drive_State_Machine+0x110>)
 8005332:	2202      	movs	r2, #2
 8005334:	701a      	strb	r2, [r3, #0]
			break;
 8005336:	e052      	b.n	80053de <Drive_State_Machine+0xfe>
			else if (state == 0x00) {
 8005338:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <Drive_State_Machine+0x118>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d14d      	bne.n	80053de <Drive_State_Machine+0xfe>
				lineOutStartTime = curTime;
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <Drive_State_Machine+0x11c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2e      	ldr	r2, [pc, #184]	; (8005400 <Drive_State_Machine+0x120>)
 8005348:	6013      	str	r3, [r2, #0]
				driveState = DRIVE_DECISION_LINE_OUT;
 800534a:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <Drive_State_Machine+0x110>)
 800534c:	2204      	movs	r2, #4
 800534e:	701a      	strb	r2, [r3, #0]
			break;
 8005350:	e045      	b.n	80053de <Drive_State_Machine+0xfe>


		case DRIVE_STATE_CROSS:

			// accum
			sensorStateSum |= state;
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <Drive_State_Machine+0x118>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <Drive_State_Machine+0x114>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <Drive_State_Machine+0x114>)
 8005362:	701a      	strb	r2, [r3, #0]

			// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
			if (sensorStateSum == 0xff && Get_Marker_Sensor_Cnt() == 0) {
 8005364:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <Drive_State_Machine+0x114>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2bff      	cmp	r3, #255	; 0xff
 800536a:	d13a      	bne.n	80053e2 <Drive_State_Machine+0x102>
 800536c:	f7ff ff56 	bl	800521c <Get_Marker_Sensor_Cnt>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d135      	bne.n	80053e2 <Drive_State_Machine+0x102>
				driveState = DRIVE_STATE_DECISION;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <Drive_State_Machine+0x110>)
 8005378:	2203      	movs	r2, #3
 800537a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800537c:	e031      	b.n	80053e2 <Drive_State_Machine+0x102>


		case DRIVE_STATE_MARKER :

			// accum
			sensorStateSum |= state;
 800537e:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <Drive_State_Machine+0x118>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <Drive_State_Machine+0x114>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	4313      	orrs	r3, r2
 800538a:	b2da      	uxtb	r2, r3
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <Drive_State_Machine+0x114>)
 800538e:	701a      	strb	r2, [r3, #0]

			// 마커 센서가 0개 일 때
			if (Get_Marker_Sensor_Cnt() == 0) {
 8005390:	f7ff ff44 	bl	800521c <Get_Marker_Sensor_Cnt>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d125      	bne.n	80053e6 <Drive_State_Machine+0x106>
				driveState = DRIVE_STATE_DECISION;
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <Drive_State_Machine+0x110>)
 800539c:	2203      	movs	r2, #3
 800539e:	701a      	strb	r2, [r3, #0]
			}

			break;
 80053a0:	e021      	b.n	80053e6 <Drive_State_Machine+0x106>


		case DRIVE_STATE_DECISION :

			Decision(sensorStateSum);
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <Drive_State_Machine+0x114>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff52 	bl	8005250 <Decision>
			driveState = DRIVE_STATE_IDLE;
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <Drive_State_Machine+0x110>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]

			break;
 80053b2:	e01b      	b.n	80053ec <Drive_State_Machine+0x10c>


		case DRIVE_DECISION_LINE_OUT :

			if (state != 0x00) {
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <Drive_State_Machine+0x118>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <Drive_State_Machine+0xe6>

				driveState = DRIVE_STATE_IDLE;
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <Drive_State_Machine+0x110>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
			else if (curTime > lineOutStartTime + 400) {

				markState = MARK_LINE_OUT;
			}

			break ;
 80053c4:	e011      	b.n	80053ea <Drive_State_Machine+0x10a>
			else if (curTime > lineOutStartTime + 400) {
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <Drive_State_Machine+0x120>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <Drive_State_Machine+0x11c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d209      	bcs.n	80053ea <Drive_State_Machine+0x10a>
				markState = MARK_LINE_OUT;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <Drive_State_Machine+0x124>)
 80053d8:	2205      	movs	r2, #5
 80053da:	701a      	strb	r2, [r3, #0]
			break ;
 80053dc:	e005      	b.n	80053ea <Drive_State_Machine+0x10a>
			break;
 80053de:	bf00      	nop
 80053e0:	e004      	b.n	80053ec <Drive_State_Machine+0x10c>
			break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <Drive_State_Machine+0x10c>
			break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <Drive_State_Machine+0x10c>
			break ;
 80053ea:	bf00      	nop

	}
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000533c 	.word	0x2000533c
 80053f4:	20005340 	.word	0x20005340
 80053f8:	2000537c 	.word	0x2000537c
 80053fc:	200014b8 	.word	0x200014b8
 8005400:	20005344 	.word	0x20005344
 8005404:	200014b1 	.word	0x200014b1

08005408 <First_Drive>:




//1차 주행
void First_Drive() {
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	uint8_t	exitEcho = EXIT_ECHO_IDLE;
 800540e:	2300      	movs	r3, #0
 8005410:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8005412:	f7fe fec6 	bl	80041a2 <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting(FIRST_DRIVE);
 8005416:	2000      	movs	r0, #0
 8005418:	f7ff fb3c 	bl	8004a94 <Pre_Drive_Setting>

	Sensor_Start();
 800541c:	f001 fb06 	bl	8006a2c <Sensor_Start>
	Motor_Start();
 8005420:	f000 fee4 	bl	80061ec <Motor_Start>
	Speed_Control_Start();
 8005424:	f000 ff0e 	bl	8006244 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 8005428:	f7ff ff5a 	bl	80052e0 <Drive_State_Machine>
		First_Drive_Ctrl();
 800542c:	f000 f81a 	bl	8005464 <First_Drive_Ctrl>
		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 8005430:	f7ff fe6c 	bl	800510c <Is_Drive_End>
 8005434:	4603      	mov	r3, r0
 8005436:	71fb      	strb	r3, [r7, #7]
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d100      	bne.n	8005440 <First_Drive+0x38>
		Drive_State_Machine();
 800543e:	e7f3      	b.n	8005428 <First_Drive+0x20>
			break;
 8005440:	bf00      	nop
		}
	}

	Motor_Stop();
 8005442:	f000 fee7 	bl	8006214 <Motor_Stop>
	Speed_Control_Stop();
 8005446:	f000 ff09 	bl	800625c <Speed_Control_Stop>
	Sensor_Stop();
 800544a:	f001 fb07 	bl	8006a5c <Sensor_Stop>


	After_Drive_Setting(FIRST_DRIVE);
 800544e:	2000      	movs	r0, #0
 8005450:	f7ff fd80 	bl	8004f54 <After_Drive_Setting>
	First_Drive_Data(exitEcho);
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f85c 	bl	8005514 <First_Drive_Data>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <First_Drive_Ctrl>:





__STATIC_INLINE void	First_Drive_Ctrl() {
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataPtr->markState) {
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <First_Drive_Ctrl+0x50>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <First_Drive_Ctrl+0x54>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	429a      	cmp	r2, r3
 8005478:	d019      	beq.n	80054ae <First_Drive_Ctrl+0x4a>

		// 크로스가 아닐 경우
		if (markState != MARK_CROSS) {
 800547a:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <First_Drive_Ctrl+0x54>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b04      	cmp	r3, #4
 8005482:	d00a      	beq.n	800549a <First_Drive_Ctrl+0x36>

			// driveData 값 업데이트
			Set_First_Drive_Data();
 8005484:	f000 f81c 	bl	80054c0 <Set_First_Drive_Data>

			// end mark는 한번만 기록하고 바로 직진 상태로 바꿈
			if (markState == MARK_END) {
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <First_Drive_Ctrl+0x54>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10d      	bne.n	80054ae <First_Drive_Ctrl+0x4a>
				markState = MARK_STRAIGHT;
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <First_Drive_Ctrl+0x54>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]

			// 크로스는 한번만 기록하고 바로 직진 상태로 바꿈
			markState = MARK_STRAIGHT;
		}
	}
}
 8005498:	e009      	b.n	80054ae <First_Drive_Ctrl+0x4a>
			crossCnt += 1;
 800549a:	4b08      	ldr	r3, [pc, #32]	; (80054bc <First_Drive_Ctrl+0x58>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3301      	adds	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <First_Drive_Ctrl+0x58>)
 80054a6:	801a      	strh	r2, [r3, #0]
			markState = MARK_STRAIGHT;
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <First_Drive_Ctrl+0x54>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000058 	.word	0x20000058
 80054b8:	200014b1 	.word	0x200014b1
 80054bc:	2000533e 	.word	0x2000533e

080054c0 <Set_First_Drive_Data>:



__STATIC_INLINE void	Set_First_Drive_Data() {
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

	// 모터의 tick 값을 현재 인덱스의 구조체에 저장 (종료 시점을 저장 함)
	driveDataPtr->tickCnt = curTick;
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <Set_First_Drive_Data+0x48>)
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	601a      	str	r2, [r3, #0]

	// 종료시점에서 크로스를 읽은 총 개수를 저장
	driveDataPtr->crossCnt = crossCnt;
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <Set_First_Drive_Data+0x4c>)
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	715a      	strb	r2, [r3, #5]

	// drivePtr 값 인덱스 증가
	driveDataPtr += 1;
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3310      	adds	r3, #16
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054e4:	6013      	str	r3, [r2, #0]

	// 증가된 구조체의 인덱스에 markState 저장
	driveDataPtr->markState = markState;
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <Set_First_Drive_Data+0x50>)
 80054ec:	7812      	ldrb	r2, [r2, #0]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	711a      	strb	r2, [r3, #4]

	// 증가된 인덱스의 구조체의 값이 존재함을 저장
	driveDataPtr->isExist = CUSTOM_TRUE;
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <Set_First_Drive_Data+0x44>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	719a      	strb	r2, [r3, #6]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000058 	.word	0x20000058
 8005508:	200014b4 	.word	0x200014b4
 800550c:	2000533e 	.word	0x2000533e
 8005510:	200014b1 	.word	0x200014b1

08005514 <First_Drive_Data>:





static void First_Drive_Data(uint8_t exitEcho) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
	uint16_t markCnt_L = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	82fb      	strh	r3, [r7, #22]
	uint16_t markCnt_R = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	82bb      	strh	r3, [r7, #20]
	uint16_t markCnt_End = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	827b      	strh	r3, [r7, #18]
	uint16_t markCnt_Cross = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	817b      	strh	r3, [r7, #10]


	for (volatile t_driveData *ptr = (driveData + 0); ptr->isExist == CUSTOM_TRUE; ptr += 1) {
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <First_Drive_Data+0xf0>)
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e030      	b.n	8005596 <First_Drive_Data+0x82>

		// 현재상태가 좌측 곡선인 경우
		if (ptr->markState == MARK_CURVE_L) {
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b03      	cmp	r3, #3
 800553c:	d10d      	bne.n	800555a <First_Drive_Data+0x46>

			// 다음 상태가 우측 곡선이었을 경우 == 연속 커브
			if ((ptr + 1)->markState == MARK_CURVE_R) {
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3310      	adds	r3, #16
 8005542:	791b      	ldrb	r3, [r3, #4]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d103      	bne.n	8005552 <First_Drive_Data+0x3e>
				markCnt_L += 1;
 800554a:	8afb      	ldrh	r3, [r7, #22]
 800554c:	3301      	adds	r3, #1
 800554e:	82fb      	strh	r3, [r7, #22]
 8005550:	e01e      	b.n	8005590 <First_Drive_Data+0x7c>
			}
			else {
				markCnt_L += 2;
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	3302      	adds	r3, #2
 8005556:	82fb      	strh	r3, [r7, #22]
 8005558:	e01a      	b.n	8005590 <First_Drive_Data+0x7c>
			}
		}

		// 현재상태가 우측 곡선인 경우
		else if (ptr->markState == MARK_CURVE_R) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	791b      	ldrb	r3, [r3, #4]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d10d      	bne.n	8005580 <First_Drive_Data+0x6c>
			// 다음 상태가 좌측 곡선이었을 경우 == 연속 커브
			if ((ptr + 1)->markState == MARK_CURVE_L) {
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3310      	adds	r3, #16
 8005568:	791b      	ldrb	r3, [r3, #4]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b03      	cmp	r3, #3
 800556e:	d103      	bne.n	8005578 <First_Drive_Data+0x64>
				markCnt_R += 1;
 8005570:	8abb      	ldrh	r3, [r7, #20]
 8005572:	3301      	adds	r3, #1
 8005574:	82bb      	strh	r3, [r7, #20]
 8005576:	e00b      	b.n	8005590 <First_Drive_Data+0x7c>
			}
			else {
				markCnt_R += 2;
 8005578:	8abb      	ldrh	r3, [r7, #20]
 800557a:	3302      	adds	r3, #2
 800557c:	82bb      	strh	r3, [r7, #20]
 800557e:	e007      	b.n	8005590 <First_Drive_Data+0x7c>
			}
		}

		// 엔드마크
		else if (ptr->markState == MARK_END) {
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d102      	bne.n	8005590 <First_Drive_Data+0x7c>
			markCnt_End += 2;
 800558a:	8a7b      	ldrh	r3, [r7, #18]
 800558c:	3302      	adds	r3, #2
 800558e:	827b      	strh	r3, [r7, #18]
	for (volatile t_driveData *ptr = (driveData + 0); ptr->isExist == CUSTOM_TRUE; ptr += 1) {
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3310      	adds	r3, #16
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	799b      	ldrb	r3, [r3, #6]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d0c9      	beq.n	8005534 <First_Drive_Data+0x20>
		}
	}

	// 크로스
	markCnt_Cross = crossCnt;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <First_Drive_Data+0xf4>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	817b      	strh	r3, [r7, #10]


	// OLED에 exitEcho 변수명 변수값 출력
	Custom_OLED_Clear();
 80055a6:	f7fe fdfc 	bl	80041a2 <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d103      	bne.n	80055b8 <First_Drive_Data+0xa4>
		Custom_OLED_Printf("/0end mark");
 80055b0:	4816      	ldr	r0, [pc, #88]	; (800560c <First_Drive_Data+0xf8>)
 80055b2:	f7fe fedb 	bl	800436c <Custom_OLED_Printf>
 80055b6:	e005      	b.n	80055c4 <First_Drive_Data+0xb0>
	}
	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d102      	bne.n	80055c4 <First_Drive_Data+0xb0>
		Custom_OLED_Printf("/0line out");
 80055be:	4814      	ldr	r0, [pc, #80]	; (8005610 <First_Drive_Data+0xfc>)
 80055c0:	f7fe fed4 	bl	800436c <Custom_OLED_Printf>
	}

	Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 80055c4:	8afb      	ldrh	r3, [r7, #22]
 80055c6:	4619      	mov	r1, r3
 80055c8:	4812      	ldr	r0, [pc, #72]	; (8005614 <First_Drive_Data+0x100>)
 80055ca:	f7fe fecf 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 80055ce:	8abb      	ldrh	r3, [r7, #20]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4811      	ldr	r0, [pc, #68]	; (8005618 <First_Drive_Data+0x104>)
 80055d4:	f7fe feca 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/3cross:    %d", markCnt_Cross);
 80055d8:	897b      	ldrh	r3, [r7, #10]
 80055da:	4619      	mov	r1, r3
 80055dc:	480f      	ldr	r0, [pc, #60]	; (800561c <First_Drive_Data+0x108>)
 80055de:	f7fe fec5 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/4end mark: %d", markCnt_End);
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	4619      	mov	r1, r3
 80055e6:	480e      	ldr	r0, [pc, #56]	; (8005620 <First_Drive_Data+0x10c>)
 80055e8:	f7fe fec0 	bl	800436c <Custom_OLED_Printf>

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 80055ec:	bf00      	nop
 80055ee:	f7ff f9ed 	bl	80049cc <Custom_Switch_Read>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d1fa      	bne.n	80055ee <First_Drive_Data+0xda>

	Custom_OLED_Clear();
 80055f8:	f7fe fdd3 	bl	80041a2 <Custom_OLED_Clear>
}
 80055fc:	bf00      	nop
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	200014bc 	.word	0x200014bc
 8005608:	2000533e 	.word	0x2000533e
 800560c:	08009b48 	.word	0x08009b48
 8005610:	08009b54 	.word	0x08009b54
 8005614:	08009b60 	.word	0x08009b60
 8005618:	08009b70 	.word	0x08009b70
 800561c:	08009b80 	.word	0x08009b80
 8005620:	08009b90 	.word	0x08009b90

08005624 <LL_USART_Enable>:
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60da      	str	r2, [r3, #12]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800569a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80056aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80056ba:	bf00      	nop
 80056bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d1f8      	bne.n	80056bc <Custom_Delay_us+0x34>
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ffcc 	bl	8005688 <Custom_Delay_us>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
	uwTick = 0;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <Custom_Delay_Init_SysTick+0x20>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <Custom_Delay_Init_SysTick+0x24>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a05      	ldr	r2, [pc, #20]	; (800571c <Custom_Delay_Init_SysTick+0x24>)
 8005708:	f043 0307 	orr.w	r3, r3, #7
 800570c:	6013      	str	r3, [r2, #0]
}
 800570e:	bf00      	nop
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000310 	.word	0x20000310
 800571c:	e000e010 	.word	0xe000e010

08005720 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8005728:	bf00      	nop
 800572a:	4808      	ldr	r0, [pc, #32]	; (800574c <__io_putchar+0x2c>)
 800572c:	f7ff ff8a 	bl	8005644 <LL_USART_IsActiveFlag_TXE>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f9      	beq.n	800572a <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	4619      	mov	r1, r3
 800573c:	4803      	ldr	r0, [pc, #12]	; (800574c <__io_putchar+0x2c>)
 800573e:	f7ff ff94 	bl	800566a <LL_USART_TransmitData8>
	return ch;
 8005742:	687b      	ldr	r3, [r7, #4]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40004400 	.word	0x40004400

08005750 <Init>:



void Init() {
 8005750:	b580      	push	{r7, lr}
 8005752:	b0b4      	sub	sp, #208	; 0xd0
 8005754:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8005756:	4838      	ldr	r0, [pc, #224]	; (8005838 <Init+0xe8>)
 8005758:	f7ff ff64 	bl	8005624 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 800575c:	f7ff ffcc 	bl	80056f8 <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8005760:	f7fe fd3e 	bl	80041e0 <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8005764:	f7fe fb6e 	bl	8003e44 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8005768:	f7fe fd3a 	bl	80041e0 <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 800576c:	4833      	ldr	r0, [pc, #204]	; (800583c <Init+0xec>)
 800576e:	f7fe fdfd 	bl	800436c <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8005772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005776:	f7ff ffaf 	bl	80056d8 <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 800577a:	4a31      	ldr	r2, [pc, #196]	; (8005840 <Init+0xf0>)
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	4611      	mov	r1, r2
 8005780:	22c8      	movs	r2, #200	; 0xc8
 8005782:	4618      	mov	r0, r3
 8005784:	f001 ffca 	bl	800771c <memcpy>
			{ "Test Phase     ", Motor_Test_Phase },
			{ "Test Velocity  ", Motor_Test_Velocity },
			{ "Test Position  ", Drive_Test_Position },
	};

	uint8_t sw = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	uint8_t count = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 8005794:	230a      	movs	r3, #10
 8005796:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd

	Custom_OLED_Clear();
 800579a:	f7fe fd02 	bl	80041a2 <Custom_OLED_Clear>
	while(1) {
		while(CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800579e:	e033      	b.n	8005808 <Init+0xb8>
			Custom_OLED_Printf("%s", menus[count].menuName);
 80057a0:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80057a4:	1d39      	adds	r1, r7, #4
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	4619      	mov	r1, r3
 80057b2:	4824      	ldr	r0, [pc, #144]	; (8005844 <Init+0xf4>)
 80057b4:	f7fe fdda 	bl	800436c <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 80057b8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10f      	bne.n	80057e0 <Init+0x90>
				if (count == 0)
 80057c0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <Init+0x84>
					count = menuCnt - 1;
 80057c8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80057cc:	3b01      	subs	r3, #1
 80057ce:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80057d2:	e019      	b.n	8005808 <Init+0xb8>
				else
					count--;
 80057d4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80057d8:	3b01      	subs	r3, #1
 80057da:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80057de:	e013      	b.n	8005808 <Init+0xb8>
			}
			else if (sw == CUSTOM_SW_2) {
 80057e0:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d10f      	bne.n	8005808 <Init+0xb8>
				if (count == menuCnt - 1)
 80057e8:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80057ec:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80057f0:	3b01      	subs	r3, #1
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d103      	bne.n	80057fe <Init+0xae>
					count = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80057fc:	e004      	b.n	8005808 <Init+0xb8>
				else
					count++;
 80057fe:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005802:	3301      	adds	r3, #1
 8005804:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		while(CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005808:	f7ff f8e0 	bl	80049cc <Custom_Switch_Read>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8005812:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005816:	2b03      	cmp	r3, #3
 8005818:	d1c2      	bne.n	80057a0 <Init+0x50>
			}
		}
		Custom_OLED_Clear();
 800581a:	f7fe fcc2 	bl	80041a2 <Custom_OLED_Clear>
		menus[count].func();
 800581e:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	33d0      	adds	r3, #208	; 0xd0
 800582c:	443b      	add	r3, r7
 800582e:	3bbc      	subs	r3, #188	; 0xbc
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4798      	blx	r3
		while(CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005834:	e7e8      	b.n	8005808 <Init+0xb8>
 8005836:	bf00      	nop
 8005838:	40004400 	.word	0x40004400
 800583c:	08009ba0 	.word	0x08009ba0
 8005840:	08009bb8 	.word	0x08009bb8
 8005844:	08009bb4 	.word	0x08009bb4

08005848 <LL_TIM_SetAutoReload>:
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <Window_Position_Val>:
__STATIC_INLINE int32_t	Window_Position_Val() {
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
	positionIdxMax = 5;
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <Window_Position_Val+0xe0>)
 800586a:	2205      	movs	r2, #5
 800586c:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 2;
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <Window_Position_Val+0xe4>)
 8005870:	2202      	movs	r2, #2
 8005872:	701a      	strb	r2, [r3, #0]
	if (ABS(positionVal) > 2000) {
 8005874:	4b35      	ldr	r3, [pc, #212]	; (800594c <Window_Position_Val+0xe8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	da09      	bge.n	8005890 <Window_Position_Val+0x2c>
 800587c:	4b33      	ldr	r3, [pc, #204]	; (800594c <Window_Position_Val+0xe8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f46f 62fa 	mvn.w	r2, #2000	; 0x7d0
 8005884:	4293      	cmp	r3, r2
 8005886:	bfd4      	ite	le
 8005888:	2301      	movle	r3, #1
 800588a:	2300      	movgt	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e007      	b.n	80058a0 <Window_Position_Val+0x3c>
 8005890:	4b2e      	ldr	r3, [pc, #184]	; (800594c <Window_Position_Val+0xe8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005898:	bfcc      	ite	gt
 800589a:	2301      	movgt	r3, #1
 800589c:	2300      	movle	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <Window_Position_Val+0x62>
		if (positionVal < 0) {
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <Window_Position_Val+0xe8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da06      	bge.n	80058ba <Window_Position_Val+0x56>
			positionIdxMax = 4;
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <Window_Position_Val+0xe0>)
 80058ae:	2204      	movs	r2, #4
 80058b0:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 1;
 80058b2:	4b25      	ldr	r3, [pc, #148]	; (8005948 <Window_Position_Val+0xe4>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e005      	b.n	80058c6 <Window_Position_Val+0x62>
			positionIdxMax = 6;
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <Window_Position_Val+0xe0>)
 80058bc:	2206      	movs	r2, #6
 80058be:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 3;
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <Window_Position_Val+0xe4>)
 80058c2:	2203      	movs	r2, #3
 80058c4:	701a      	strb	r2, [r3, #0]
	positionSum = 0;
 80058c6:	4b22      	ldr	r3, [pc, #136]	; (8005950 <Window_Position_Val+0xec>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <Window_Position_Val+0xf0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
		sensorNormVal = sensorNormVals[positionIdxMin];
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <Window_Position_Val+0xe4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <Window_Position_Val+0xf4>)
 80058da:	5c9b      	ldrb	r3, [r3, r2]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <Window_Position_Val+0xf8>)
 80058e2:	601a      	str	r2, [r3, #0]
		positionSum += getPositionCoef[positionIdxMin] * sensorNormVal;
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <Window_Position_Val+0xe4>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <Window_Position_Val+0xfc>)
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <Window_Position_Val+0xf8>)
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	fb03 f202 	mul.w	r2, r3, r2
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <Window_Position_Val+0xec>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	4a14      	ldr	r2, [pc, #80]	; (8005950 <Window_Position_Val+0xec>)
 8005900:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVal;
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <Window_Position_Val+0xf0>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <Window_Position_Val+0xf8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4413      	add	r3, r2
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <Window_Position_Val+0xf0>)
 800590e:	6013      	str	r3, [r2, #0]
		positionIdxMin++;
 8005910:	4b0d      	ldr	r3, [pc, #52]	; (8005948 <Window_Position_Val+0xe4>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <Window_Position_Val+0xe4>)
 800591a:	701a      	strb	r2, [r3, #0]
	} while (positionIdxMin != positionIdxMax + 1);
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <Window_Position_Val+0xe4>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <Window_Position_Val+0xe0>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	429a      	cmp	r2, r3
 800592a:	d1d2      	bne.n	80058d2 <Window_Position_Val+0x6e>
	return positionSum / (sensorNormValsSum + 1);
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <Window_Position_Val+0xec>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <Window_Position_Val+0xf0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	200000a8 	.word	0x200000a8
 8005948:	200000a9 	.word	0x200000a9
 800594c:	200014ac 	.word	0x200014ac
 8005950:	2000534c 	.word	0x2000534c
 8005954:	200000ac 	.word	0x200000ac
 8005958:	2000536c 	.word	0x2000536c
 800595c:	20005350 	.word	0x20005350
 8005960:	200000b0 	.word	0x200000b0

08005964 <Update_Position_Val>:
__STATIC_INLINE void	Update_Position_Val() {
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
	positionVal = Window_Position_Val();//Stabilize_Position_Val(positionValBuffer);
 8005968:	f7ff ff7c 	bl	8005864 <Window_Position_Val>
 800596c:	4603      	mov	r3, r0
 800596e:	4a02      	ldr	r2, [pc, #8]	; (8005978 <Update_Position_Val+0x14>)
 8005970:	6013      	str	r3, [r2, #0]
}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200014ac 	.word	0x200014ac

0800597c <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800598e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 800599e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80059ae:	bf00      	nop
 80059b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d1f8      	bne.n	80059b0 <Custom_Delay_us+0x34>
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ffcc 	bl	800597c <Custom_Delay_us>
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <Motor_L_Speed_Control>:
__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 80059f6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005a20 <Motor_L_Speed_Control+0x34>
 80059fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80059fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0e:	ee17 1a90 	vmov	r1, s15
 8005a12:	4804      	ldr	r0, [pc, #16]	; (8005a24 <Motor_L_Speed_Control+0x38>)
 8005a14:	f7ff ff18 	bl	8005848 <LL_TIM_SetAutoReload>
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	43e3c062 	.word	0x43e3c062
 8005a24:	40000400 	.word	0x40000400

08005a28 <Motor_R_Speed_Control>:
__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 8005a32:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005a5c <Motor_R_Speed_Control+0x34>
 8005a36:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 1a90 	vmov	r1, s15
 8005a4e:	4804      	ldr	r0, [pc, #16]	; (8005a60 <Motor_R_Speed_Control+0x38>)
 8005a50:	f7ff fefa 	bl	8005848 <LL_TIM_SetAutoReload>
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	43e3c062 	.word	0x43e3c062
 8005a60:	40000800 	.word	0x40000800

08005a64 <Custom_GPIO_Set_t>:
static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d002      	beq.n	8005a8e <Custom_GPIO_Set_t+0x2a>
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a8c:	e000      	b.n	8005a90 <Custom_GPIO_Set_t+0x2c>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8005a96:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8005a98:	615a      	str	r2, [r3, #20]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <Sensor_Test_Raw>:





void Sensor_Test_Raw() {
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af06      	add	r7, sp, #24
	Sensor_Start();
 8005aae:	f000 ffbd 	bl	8006a2c <Sensor_Start>
	Custom_OLED_Clear();
 8005ab2:	f7fe fb76 	bl	80041a2 <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8005ab6:	e029      	b.n	8005b0c <Sensor_Test_Raw+0x64>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005abe:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ac6:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ace:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005ad0:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005ad2:	78db      	ldrb	r3, [r3, #3]
 8005ad4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ad6:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ade:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005ae2:	795b      	ldrb	r3, [r3, #5]
 8005ae4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ae6:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005aea:	799b      	ldrb	r3, [r3, #6]
 8005aec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005aee:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <Sensor_Test_Raw+0x80>)
 8005af2:	79db      	ldrb	r3, [r3, #7]
 8005af4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	9403      	str	r4, [sp, #12]
 8005afa:	9002      	str	r0, [sp, #8]
 8005afc:	9101      	str	r1, [sp, #4]
 8005afe:	9200      	str	r2, [sp, #0]
 8005b00:	4663      	mov	r3, ip
 8005b02:	4632      	mov	r2, r6
 8005b04:	4629      	mov	r1, r5
 8005b06:	4809      	ldr	r0, [pc, #36]	; (8005b2c <Sensor_Test_Raw+0x84>)
 8005b08:	f7fe fc30 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8005b0c:	f7fe ff5e 	bl	80049cc <Custom_Switch_Read>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d1d0      	bne.n	8005ab8 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8005b16:	f7fe fb44 	bl	80041a2 <Custom_OLED_Clear>
	Sensor_Stop();
 8005b1a:	f000 ff9f 	bl	8006a5c <Sensor_Stop>
}
 8005b1e:	bf00      	nop
 8005b20:	3704      	adds	r7, #4
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20005364 	.word	0x20005364
 8005b2c:	08009c80 	.word	0x08009c80

08005b30 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af06      	add	r7, sp, #24
	Sensor_Start();
 8005b36:	f000 ff79 	bl	8006a2c <Sensor_Start>
	Custom_OLED_Clear();
 8005b3a:	f7fe fb32 	bl	80041a2 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8005b3e:	e029      	b.n	8005b94 <Sensor_Test_Normalized+0x64>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b46:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b4e:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005b50:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b52:	789b      	ldrb	r3, [r3, #2]
 8005b54:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b56:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b5e:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b66:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b6a:	795b      	ldrb	r3, [r3, #5]
 8005b6c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b6e:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b72:	799b      	ldrb	r3, [r3, #6]
 8005b74:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b76:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005b78:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <Sensor_Test_Normalized+0x80>)
 8005b7a:	79db      	ldrb	r3, [r3, #7]
 8005b7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	9403      	str	r4, [sp, #12]
 8005b82:	9002      	str	r0, [sp, #8]
 8005b84:	9101      	str	r1, [sp, #4]
 8005b86:	9200      	str	r2, [sp, #0]
 8005b88:	4663      	mov	r3, ip
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4809      	ldr	r0, [pc, #36]	; (8005bb4 <Sensor_Test_Normalized+0x84>)
 8005b90:	f7fe fbec 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8005b94:	f7fe ff1a 	bl	80049cc <Custom_Switch_Read>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d1d0      	bne.n	8005b40 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8005b9e:	f7fe fb00 	bl	80041a2 <Custom_OLED_Clear>
	Sensor_Stop();
 8005ba2:	f000 ff5b 	bl	8006a5c <Sensor_Stop>
}
 8005ba6:	bf00      	nop
 8005ba8:	3704      	adds	r7, #4
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	2000536c 	.word	0x2000536c
 8005bb4:	08009c80 	.word	0x08009c80

08005bb8 <Sensor_Test_State>:





void Sensor_Test_State() {
 8005bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 8005bc2:	f000 ff33 	bl	8006a2c <Sensor_Start>
	Custom_OLED_Clear();
 8005bc6:	f7fe faec 	bl	80041a2 <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005bca:	e05f      	b.n	8005c8c <Sensor_Test_State+0xd4>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8005bcc:	4b37      	ldr	r3, [pc, #220]	; (8005cac <Sensor_Test_State+0xf4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4837      	ldr	r0, [pc, #220]	; (8005cb0 <Sensor_Test_State+0xf8>)
 8005bd4:	f7fe fbca 	bl	800436c <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8005bd8:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005bde:	f003 0501 	and.w	r5, r3, #1
 8005be2:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0601 	and.w	r6, r3, #1
 8005bf0:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 0c01 	and.w	ip, r3, #1
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	0912      	lsrs	r2, r2, #4
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	f002 0201 	and.w	r2, r2, #1
 8005c1a:	4926      	ldr	r1, [pc, #152]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005c1c:	7809      	ldrb	r1, [r1, #0]
 8005c1e:	b2c9      	uxtb	r1, r1
 8005c20:	0949      	lsrs	r1, r1, #5
 8005c22:	b2c9      	uxtb	r1, r1
 8005c24:	f001 0101 	and.w	r1, r1, #1
 8005c28:	4822      	ldr	r0, [pc, #136]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005c2a:	7800      	ldrb	r0, [r0, #0]
 8005c2c:	b2c0      	uxtb	r0, r0
 8005c2e:	0980      	lsrs	r0, r0, #6
 8005c30:	b2c0      	uxtb	r0, r0
 8005c32:	f000 0001 	and.w	r0, r0, #1
 8005c36:	4c1f      	ldr	r4, [pc, #124]	; (8005cb4 <Sensor_Test_State+0xfc>)
 8005c38:	7824      	ldrb	r4, [r4, #0]
 8005c3a:	b2e4      	uxtb	r4, r4
 8005c3c:	09e4      	lsrs	r4, r4, #7
 8005c3e:	b2e4      	uxtb	r4, r4
 8005c40:	f004 0401 	and.w	r4, r4, #1
 8005c44:	9404      	str	r4, [sp, #16]
 8005c46:	9003      	str	r0, [sp, #12]
 8005c48:	9102      	str	r1, [sp, #8]
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	4663      	mov	r3, ip
 8005c50:	4632      	mov	r2, r6
 8005c52:	4629      	mov	r1, r5
 8005c54:	4818      	ldr	r0, [pc, #96]	; (8005cb8 <Sensor_Test_State+0x100>)
 8005c56:	f7fe fb89 	bl	800436c <Custom_OLED_Printf>
			(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);


		if (sw == CUSTOM_SW_1) {
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d109      	bne.n	8005c74 <Sensor_Test_State+0xbc>
			if (threshold > THRESHOLD_MIN) {
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b19      	cmp	r3, #25
 8005c66:	d911      	bls.n	8005c8c <Sensor_Test_State+0xd4>
				threshold -= THRESHOLD_CHANGE_VAL;
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b05      	subs	r3, #5
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e00b      	b.n	8005c8c <Sensor_Test_State+0xd4>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d108      	bne.n	8005c8c <Sensor_Test_State+0xd4>
			if (threshold < THRESHOLD_MAX) {
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b7c      	cmp	r3, #124	; 0x7c
 8005c80:	d804      	bhi.n	8005c8c <Sensor_Test_State+0xd4>
				threshold += THRESHOLD_CHANGE_VAL;
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3305      	adds	r3, #5
 8005c88:	4a08      	ldr	r2, [pc, #32]	; (8005cac <Sensor_Test_State+0xf4>)
 8005c8a:	6013      	str	r3, [r2, #0]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005c8c:	f7fe fe9e 	bl	80049cc <Custom_Switch_Read>
 8005c90:	4603      	mov	r3, r0
 8005c92:	71fb      	strb	r3, [r7, #7]
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d198      	bne.n	8005bcc <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 8005c9a:	f7fe fa82 	bl	80041a2 <Custom_OLED_Clear>
	Sensor_Stop();
 8005c9e:	f000 fedd 	bl	8006a5c <Sensor_Stop>
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000128 	.word	0x20000128
 8005cb0:	08009cac 	.word	0x08009cac
 8005cb4:	2000537c 	.word	0x2000537c
 8005cb8:	08009cc0 	.word	0x08009cc0

08005cbc <Motor_Test_Phase>:





void Motor_Test_Phase() {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	717b      	strb	r3, [r7, #5]
	uint8_t	phaseL = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t	phaseR = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	71bb      	strb	r3, [r7, #6]

	/*
	 * 모터의 각 상을 잠깐씩 잡아본다.
	 * 모터에 무리를 주지 않기 위해 100ms 동안만 상을 잡은 후 바로 놓는다.
	 */
	Custom_OLED_Clear();
 8005cce:	f7fe fa68 	bl	80041a2 <Custom_OLED_Clear>
	Custom_OLED_Printf("/0phaseL: %1x", phaseL);
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	484d      	ldr	r0, [pc, #308]	; (8005e0c <Motor_Test_Phase+0x150>)
 8005cd8:	f7fe fb48 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/1phaseR: %1x", phaseR);
 8005cdc:	79bb      	ldrb	r3, [r7, #6]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	484b      	ldr	r0, [pc, #300]	; (8005e10 <Motor_Test_Phase+0x154>)
 8005ce2:	f7fe fb43 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005ce6:	e082      	b.n	8005dee <Motor_Test_Phase+0x132>

		if (sw == CUSTOM_SW_1) {
 8005ce8:	797b      	ldrb	r3, [r7, #5]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d142      	bne.n	8005d74 <Motor_Test_Phase+0xb8>
			Custom_GPIO_Set_t(motorL + 0, (phases[7 - phaseL] >> 0) & 0x01);
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	f1c3 0307 	rsb	r3, r3, #7
 8005cf4:	4a47      	ldr	r2, [pc, #284]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4846      	ldr	r0, [pc, #280]	; (8005e18 <Motor_Test_Phase+0x15c>)
 8005d00:	f7ff feb0 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 1, (phases[7 - phaseL] >> 1) & 0x01);
 8005d04:	4845      	ldr	r0, [pc, #276]	; (8005e1c <Motor_Test_Phase+0x160>)
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	f1c3 0307 	rsb	r3, r3, #7
 8005d0c:	4a41      	ldr	r2, [pc, #260]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f7ff fea3 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 2, (phases[7 - phaseL] >> 2) & 0x01);
 8005d1e:	4840      	ldr	r0, [pc, #256]	; (8005e20 <Motor_Test_Phase+0x164>)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	f1c3 0307 	rsb	r3, r3, #7
 8005d26:	4a3b      	ldr	r2, [pc, #236]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	4619      	mov	r1, r3
 8005d34:	f7ff fe96 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 3, (phases[7 - phaseL] >> 3) & 0x01);
 8005d38:	483a      	ldr	r0, [pc, #232]	; (8005e24 <Motor_Test_Phase+0x168>)
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	f1c3 0307 	rsb	r3, r3, #7
 8005d40:	4a34      	ldr	r2, [pc, #208]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005d42:	5cd3      	ldrb	r3, [r2, r3]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f7ff fe89 	bl	8005a64 <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 8005d52:	2064      	movs	r0, #100	; 0x64
 8005d54:	f7ff fe3a 	bl	80059cc <Custom_Delay_ms>
			Motor_Power_Off();
 8005d58:	f000 fa0e 	bl	8006178 <Motor_Power_Off>

			Custom_OLED_Printf("/0phaseL: %1x", phaseL);
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	482a      	ldr	r0, [pc, #168]	; (8005e0c <Motor_Test_Phase+0x150>)
 8005d62:	f7fe fb03 	bl	800436c <Custom_OLED_Printf>
			phaseL = (phaseL + 1) & 0x07;
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	71fb      	strb	r3, [r7, #7]
 8005d72:	e03c      	b.n	8005dee <Motor_Test_Phase+0x132>
		}

		else if (sw == CUSTOM_SW_2) {
 8005d74:	797b      	ldrb	r3, [r7, #5]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d139      	bne.n	8005dee <Motor_Test_Phase+0x132>
			Custom_GPIO_Set_t(motorR + 0, (phases[phaseR] >> 0) & 0x01);
 8005d7a:	79bb      	ldrb	r3, [r7, #6]
 8005d7c:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005d7e:	5cd3      	ldrb	r3, [r2, r3]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	4619      	mov	r1, r3
 8005d86:	4828      	ldr	r0, [pc, #160]	; (8005e28 <Motor_Test_Phase+0x16c>)
 8005d88:	f7ff fe6c 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 1, (phases[phaseR] >> 1) & 0x01);
 8005d8c:	4827      	ldr	r0, [pc, #156]	; (8005e2c <Motor_Test_Phase+0x170>)
 8005d8e:	79bb      	ldrb	r3, [r7, #6]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f7ff fe61 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 2, (phases[phaseR] >> 2) & 0x01);
 8005da2:	4823      	ldr	r0, [pc, #140]	; (8005e30 <Motor_Test_Phase+0x174>)
 8005da4:	79bb      	ldrb	r3, [r7, #6]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005da8:	5cd3      	ldrb	r3, [r2, r3]
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	4619      	mov	r1, r3
 8005db4:	f7ff fe56 	bl	8005a64 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 3, (phases[phaseR] >> 3) & 0x01);
 8005db8:	481e      	ldr	r0, [pc, #120]	; (8005e34 <Motor_Test_Phase+0x178>)
 8005dba:	79bb      	ldrb	r3, [r7, #6]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <Motor_Test_Phase+0x158>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7ff fe4b 	bl	8005a64 <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 8005dce:	2064      	movs	r0, #100	; 0x64
 8005dd0:	f7ff fdfc 	bl	80059cc <Custom_Delay_ms>
			Motor_Power_Off();
 8005dd4:	f000 f9d0 	bl	8006178 <Motor_Power_Off>

			Custom_OLED_Printf("/1phaseR: %1x", phaseR);
 8005dd8:	79bb      	ldrb	r3, [r7, #6]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	480c      	ldr	r0, [pc, #48]	; (8005e10 <Motor_Test_Phase+0x154>)
 8005dde:	f7fe fac5 	bl	800436c <Custom_OLED_Printf>
			phaseR = (phaseR + 1) & 0x07;
 8005de2:	79bb      	ldrb	r3, [r7, #6]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	71bb      	strb	r3, [r7, #6]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005dee:	f7fe fded 	bl	80049cc <Custom_Switch_Read>
 8005df2:	4603      	mov	r3, r0
 8005df4:	717b      	strb	r3, [r7, #5]
 8005df6:	797b      	ldrb	r3, [r7, #5]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	f47f af75 	bne.w	8005ce8 <Motor_Test_Phase+0x2c>
		}
	}

	Custom_OLED_Clear();
 8005dfe:	f7fe f9d0 	bl	80041a2 <Custom_OLED_Clear>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08009cec 	.word	0x08009cec
 8005e10:	08009cfc 	.word	0x08009cfc
 8005e14:	20000060 	.word	0x20000060
 8005e18:	20000068 	.word	0x20000068
 8005e1c:	20000070 	.word	0x20000070
 8005e20:	20000078 	.word	0x20000078
 8005e24:	20000080 	.word	0x20000080
 8005e28:	20000088 	.word	0x20000088
 8005e2c:	20000090 	.word	0x20000090
 8005e30:	20000098 	.word	0x20000098
 8005e34:	200000a0 	.word	0x200000a0

08005e38 <Motor_Test_Velocity>:





void Motor_Test_Velocity() {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
	uint8_t		sw = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	72fb      	strb	r3, [r7, #11]
	float		speed = MIN_SPEED;
 8005e42:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <Motor_Test_Velocity+0xc8>)
 8005e44:	60fb      	str	r3, [r7, #12]
	float		maxSpeed = 2.5;
 8005e46:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <Motor_Test_Velocity+0xcc>)
 8005e48:	607b      	str	r3, [r7, #4]
	float		minSpeed = 1.5;
 8005e4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e4e:	603b      	str	r3, [r7, #0]
	/*
	 * 모터 속도를 부드럽게 올렸다가 내리기를 반복한다.
	 */
	accele = ACCELE_INIT;
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005e52:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005e56:	601a      	str	r2, [r3, #0]

	Motor_Start();
 8005e58:	f000 f9c8 	bl	80061ec <Motor_Start>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005e5c:	e043      	b.n	8005ee6 <Motor_Test_Velocity+0xae>
		Motor_L_Speed_Control(speed);
 8005e5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005e62:	f7ff fdc3 	bl	80059ec <Motor_L_Speed_Control>
		Motor_R_Speed_Control(speed);
 8005e66:	ed97 0a03 	vldr	s0, [r7, #12]
 8005e6a:	f7ff fddd 	bl	8005a28 <Motor_R_Speed_Control>
		if ( (speed + accele / 2000 > maxSpeed) || (speed + accele / 2000 < minSpeed) ) {
 8005e6e:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005e70:	edd3 7a00 	vldr	s15, [r3]
 8005e74:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f0c <Motor_Test_Velocity+0xd4>
 8005e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e84:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e90:	d411      	bmi.n	8005eb6 <Motor_Test_Velocity+0x7e>
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005e94:	edd3 7a00 	vldr	s15, [r3]
 8005e98:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005f0c <Motor_Test_Velocity+0xd4>
 8005e9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea8:	ed97 7a00 	vldr	s14, [r7]
 8005eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	dd07      	ble.n	8005ec6 <Motor_Test_Velocity+0x8e>
			accele *= -1;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005eb8:	edd3 7a00 	vldr	s15, [r3]
 8005ebc:	eef1 7a67 	vneg.f32	s15, s15
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005ec2:	edc3 7a00 	vstr	s15, [r3]
		}
		Custom_Delay_ms(1);
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	f7ff fd80 	bl	80059cc <Custom_Delay_ms>
		speed += accele / 2000;
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <Motor_Test_Velocity+0xd0>)
 8005ece:	ed93 7a00 	vldr	s14, [r3]
 8005ed2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005f0c <Motor_Test_Velocity+0xd4>
 8005ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eda:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee2:	edc7 7a03 	vstr	s15, [r7, #12]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005ee6:	f7fe fd71 	bl	80049cc <Custom_Switch_Read>
 8005eea:	4603      	mov	r3, r0
 8005eec:	72fb      	strb	r3, [r7, #11]
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d1b4      	bne.n	8005e5e <Motor_Test_Velocity+0x26>
	}
	Motor_Stop();
 8005ef4:	f000 f98e 	bl	8006214 <Motor_Stop>
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	3c23d70a 	.word	0x3c23d70a
 8005f04:	40200000 	.word	0x40200000
 8005f08:	20000040 	.word	0x20000040
 8005f0c:	44fa0000 	.word	0x44fa0000

08005f10 <Drive_Test_Position>:





void Drive_Test_Position() {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8005f1a:	f7fe f942 	bl	80041a2 <Custom_OLED_Clear>
	Sensor_Start();
 8005f1e:	f000 fd85 	bl	8006a2c <Sensor_Start>

	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005f22:	e037      	b.n	8005f94 <Drive_Test_Position+0x84>
		Update_Position_Val();
 8005f24:	f7ff fd1e 	bl	8005964 <Update_Position_Val>

		Custom_OLED_Printf("/0pos: %10d", positionVal);
 8005f28:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <Drive_Test_Position+0xa4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4822      	ldr	r0, [pc, #136]	; (8005fb8 <Drive_Test_Position+0xa8>)
 8005f30:	f7fe fa1c 	bl	800436c <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL: %5f", (1 + positionVal * positionCoef));
 8005f34:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <Drive_Test_Position+0xa4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f40:	4b1e      	ldr	r3, [pc, #120]	; (8005fbc <Drive_Test_Position+0xac>)
 8005f42:	edd3 7a00 	vldr	s15, [r3]
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f52:	ee17 0a90 	vmov	r0, s15
 8005f56:	f7fa faff 	bl	8000558 <__aeabi_f2d>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4818      	ldr	r0, [pc, #96]	; (8005fc0 <Drive_Test_Position+0xb0>)
 8005f60:	f7fe fa04 	bl	800436c <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR: %5f", (1 - positionVal * positionCoef));
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <Drive_Test_Position+0xa4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f70:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <Drive_Test_Position+0xac>)
 8005f72:	edd3 7a00 	vldr	s15, [r3]
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f82:	ee17 0a90 	vmov	r0, s15
 8005f86:	f7fa fae7 	bl	8000558 <__aeabi_f2d>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	480d      	ldr	r0, [pc, #52]	; (8005fc4 <Drive_Test_Position+0xb4>)
 8005f90:	f7fe f9ec 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005f94:	f7fe fd1a 	bl	80049cc <Custom_Switch_Read>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	71fb      	strb	r3, [r7, #7]
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d1c0      	bne.n	8005f24 <Drive_Test_Position+0x14>
	}

	Sensor_Stop();
 8005fa2:	f000 fd5b 	bl	8006a5c <Sensor_Stop>
	Custom_OLED_Clear();
 8005fa6:	f7fe f8fc 	bl	80041a2 <Custom_OLED_Clear>
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200014ac 	.word	0x200014ac
 8005fb8:	08009d0c 	.word	0x08009d0c
 8005fbc:	2000003c 	.word	0x2000003c
 8005fc0:	08009d18 	.word	0x08009d18
 8005fc4:	08009d28 	.word	0x08009d28

08005fc8 <Drive_Test_First_Data>:





void Drive_Test_First_Data() {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
	uint16_t markCnt_L = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	81fb      	strh	r3, [r7, #14]
	uint16_t markCnt_R = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	81bb      	strh	r3, [r7, #12]
	uint16_t markCnt_End = 2;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	817b      	strh	r3, [r7, #10]
	uint16_t markCnt_Cross = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	807b      	strh	r3, [r7, #2]

	for (volatile t_driveData *ptr = (driveData + 0); ptr->isExist == CUSTOM_TRUE; ptr += 1) {
 8005fde:	4b2f      	ldr	r3, [pc, #188]	; (800609c <Drive_Test_First_Data+0xd4>)
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	e030      	b.n	8006046 <Drive_Test_First_Data+0x7e>

		// 현재상태가 좌측 곡선인 경우
		if (ptr->markState == MARK_CURVE_L) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	791b      	ldrb	r3, [r3, #4]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d10d      	bne.n	800600a <Drive_Test_First_Data+0x42>

			// 다음 상태가 우측 곡선이었을 경우 == 연속 커브
			if ((ptr + 1)->markState == MARK_CURVE_R) {
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3310      	adds	r3, #16
 8005ff2:	791b      	ldrb	r3, [r3, #4]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d103      	bne.n	8006002 <Drive_Test_First_Data+0x3a>
				markCnt_L += 1;
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	81fb      	strh	r3, [r7, #14]
 8006000:	e01e      	b.n	8006040 <Drive_Test_First_Data+0x78>
			}
			else {
				markCnt_L += 2;
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	3302      	adds	r3, #2
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	e01a      	b.n	8006040 <Drive_Test_First_Data+0x78>
			}
		}

		// 현재상태가 우측 곡선인 경우
		else if (ptr->markState == MARK_CURVE_R) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	791b      	ldrb	r3, [r3, #4]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d10d      	bne.n	8006030 <Drive_Test_First_Data+0x68>
			// 다음 상태가 좌측 곡선이었을 경우 == 연속 커브
			if ((ptr + 1)->markState == MARK_CURVE_L) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3310      	adds	r3, #16
 8006018:	791b      	ldrb	r3, [r3, #4]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d103      	bne.n	8006028 <Drive_Test_First_Data+0x60>
				markCnt_R += 1;
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	81bb      	strh	r3, [r7, #12]
 8006026:	e00b      	b.n	8006040 <Drive_Test_First_Data+0x78>
			}
			else {
				markCnt_R += 2;
 8006028:	89bb      	ldrh	r3, [r7, #12]
 800602a:	3302      	adds	r3, #2
 800602c:	81bb      	strh	r3, [r7, #12]
 800602e:	e007      	b.n	8006040 <Drive_Test_First_Data+0x78>
			}
		}

		else if (ptr->markState == MARK_END) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	791b      	ldrb	r3, [r3, #4]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d102      	bne.n	8006040 <Drive_Test_First_Data+0x78>
			markCnt_End += 2;
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	3302      	adds	r3, #2
 800603e:	817b      	strh	r3, [r7, #10]
	for (volatile t_driveData *ptr = (driveData + 0); ptr->isExist == CUSTOM_TRUE; ptr += 1) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3310      	adds	r3, #16
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	799b      	ldrb	r3, [r3, #6]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d0c9      	beq.n	8005fe4 <Drive_Test_First_Data+0x1c>
		}
	}

	// 크로스
	markCnt_Cross = crossCnt;
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <Drive_Test_First_Data+0xd8>)
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	807b      	strh	r3, [r7, #2]


	// OLED에 변수명 변수값 출력
	Custom_OLED_Clear();
 8006056:	f7fe f8a4 	bl	80041a2 <Custom_OLED_Clear>
	Custom_OLED_Printf("/0mark L:   %d", markCnt_L);
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	4619      	mov	r1, r3
 800605e:	4811      	ldr	r0, [pc, #68]	; (80060a4 <Drive_Test_First_Data+0xdc>)
 8006060:	f7fe f984 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/1mark R:   %d", markCnt_R);
 8006064:	89bb      	ldrh	r3, [r7, #12]
 8006066:	4619      	mov	r1, r3
 8006068:	480f      	ldr	r0, [pc, #60]	; (80060a8 <Drive_Test_First_Data+0xe0>)
 800606a:	f7fe f97f 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/2cross:    %d", markCnt_Cross);
 800606e:	887b      	ldrh	r3, [r7, #2]
 8006070:	4619      	mov	r1, r3
 8006072:	480e      	ldr	r0, [pc, #56]	; (80060ac <Drive_Test_First_Data+0xe4>)
 8006074:	f7fe f97a 	bl	800436c <Custom_OLED_Printf>
	Custom_OLED_Printf("/3end mark: %d", markCnt_End);
 8006078:	897b      	ldrh	r3, [r7, #10]
 800607a:	4619      	mov	r1, r3
 800607c:	480c      	ldr	r0, [pc, #48]	; (80060b0 <Drive_Test_First_Data+0xe8>)
 800607e:	f7fe f975 	bl	800436c <Custom_OLED_Printf>

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 8006082:	bf00      	nop
 8006084:	f7fe fca2 	bl	80049cc <Custom_Switch_Read>
 8006088:	4603      	mov	r3, r0
 800608a:	2b03      	cmp	r3, #3
 800608c:	d1fa      	bne.n	8006084 <Drive_Test_First_Data+0xbc>

	Custom_OLED_Clear();
 800608e:	f7fe f888 	bl	80041a2 <Custom_OLED_Clear>
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200014bc 	.word	0x200014bc
 80060a0:	2000533e 	.word	0x2000533e
 80060a4:	08009d98 	.word	0x08009d98
 80060a8:	08009da8 	.word	0x08009da8
 80060ac:	08009db8 	.word	0x08009db8
 80060b0:	08009dc8 	.word	0x08009dc8

080060b4 <LL_TIM_EnableCounter>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f043 0201 	orr.w	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_TIM_DisableCounter>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0201 	bic.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_TIM_EnableIT_UPDATE>:
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f043 0201 	orr.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_TIM_DisableIT_UPDATE>:
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f023 0201 	bic.w	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <Custom_GPIO_Set_t>:
static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	43db      	mvns	r3, r3
 800614a:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	2a00      	cmp	r2, #0
 8006156:	d002      	beq.n	800615e <Custom_GPIO_Set_t+0x2a>
 8006158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800615c:	e000      	b.n	8006160 <Custom_GPIO_Set_t+0x2c>
 800615e:	2200      	movs	r2, #0
 8006160:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8006166:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8006168:	615a      	str	r2, [r3, #20]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <Motor_Power_Off>:





void Motor_Power_Off() {
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
	Custom_GPIO_Set_t(motorL + 0, 0);
 800617c:	2100      	movs	r1, #0
 800617e:	4813      	ldr	r0, [pc, #76]	; (80061cc <Motor_Power_Off+0x54>)
 8006180:	f7ff ffd8 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0);
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <Motor_Power_Off+0x58>)
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ffd3 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0);
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <Motor_Power_Off+0x5c>)
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ffce 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0);
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <Motor_Power_Off+0x60>)
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff ffc9 	bl	8006134 <Custom_GPIO_Set_t>

	Custom_GPIO_Set_t(motorR + 0, 0);
 80061a2:	2100      	movs	r1, #0
 80061a4:	480d      	ldr	r0, [pc, #52]	; (80061dc <Motor_Power_Off+0x64>)
 80061a6:	f7ff ffc5 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0);
 80061aa:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <Motor_Power_Off+0x68>)
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ffc0 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0);
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <Motor_Power_Off+0x6c>)
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ffbb 	bl	8006134 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0);
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <Motor_Power_Off+0x70>)
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff ffb6 	bl	8006134 <Custom_GPIO_Set_t>
}
 80061c8:	bf00      	nop
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200000d0 	.word	0x200000d0
 80061d0:	200000d8 	.word	0x200000d8
 80061d4:	200000e0 	.word	0x200000e0
 80061d8:	200000e8 	.word	0x200000e8
 80061dc:	200000f0 	.word	0x200000f0
 80061e0:	200000f8 	.word	0x200000f8
 80061e4:	20000100 	.word	0x20000100
 80061e8:	20000108 	.word	0x20000108

080061ec <Motor_Start>:





void Motor_Start() {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80061f0:	4806      	ldr	r0, [pc, #24]	; (800620c <Motor_Start+0x20>)
 80061f2:	f7ff ff5f 	bl	80060b4 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80061f6:	4805      	ldr	r0, [pc, #20]	; (800620c <Motor_Start+0x20>)
 80061f8:	f7ff ff7c 	bl	80060f4 <LL_TIM_EnableIT_UPDATE>

	LL_TIM_EnableCounter(TIM4);
 80061fc:	4804      	ldr	r0, [pc, #16]	; (8006210 <Motor_Start+0x24>)
 80061fe:	f7ff ff59 	bl	80060b4 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM4);
 8006202:	4803      	ldr	r0, [pc, #12]	; (8006210 <Motor_Start+0x24>)
 8006204:	f7ff ff76 	bl	80060f4 <LL_TIM_EnableIT_UPDATE>
}
 8006208:	bf00      	nop
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40000400 	.word	0x40000400
 8006210:	40000800 	.word	0x40000800

08006214 <Motor_Stop>:





void Motor_Stop() {
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
	Motor_Power_Off();
 8006218:	f7ff ffae 	bl	8006178 <Motor_Power_Off>

	LL_TIM_DisableIT_UPDATE(TIM3);
 800621c:	4807      	ldr	r0, [pc, #28]	; (800623c <Motor_Stop+0x28>)
 800621e:	f7ff ff79 	bl	8006114 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM3);
 8006222:	4806      	ldr	r0, [pc, #24]	; (800623c <Motor_Stop+0x28>)
 8006224:	f7ff ff56 	bl	80060d4 <LL_TIM_DisableCounter>

	LL_TIM_DisableIT_UPDATE(TIM4);
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <Motor_Stop+0x2c>)
 800622a:	f7ff ff73 	bl	8006114 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM4);
 800622e:	4804      	ldr	r0, [pc, #16]	; (8006240 <Motor_Stop+0x2c>)
 8006230:	f7ff ff50 	bl	80060d4 <LL_TIM_DisableCounter>

	Motor_Power_Off();
 8006234:	f7ff ffa0 	bl	8006178 <Motor_Power_Off>
}
 8006238:	bf00      	nop
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40000400 	.word	0x40000400
 8006240:	40000800 	.word	0x40000800

08006244 <Speed_Control_Start>:




void Speed_Control_Start(){
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8006248:	4803      	ldr	r0, [pc, #12]	; (8006258 <Speed_Control_Start+0x14>)
 800624a:	f7ff ff33 	bl	80060b4 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 800624e:	4802      	ldr	r0, [pc, #8]	; (8006258 <Speed_Control_Start+0x14>)
 8006250:	f7ff ff50 	bl	80060f4 <LL_TIM_EnableIT_UPDATE>
}
 8006254:	bf00      	nop
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40014000 	.word	0x40014000

0800625c <Speed_Control_Stop>:




void Speed_Control_Stop(){
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 8006260:	4803      	ldr	r0, [pc, #12]	; (8006270 <Speed_Control_Stop+0x14>)
 8006262:	f7ff ff57 	bl	8006114 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8006266:	4802      	ldr	r0, [pc, #8]	; (8006270 <Speed_Control_Stop+0x14>)
 8006268:	f7ff ff34 	bl	80060d4 <LL_TIM_DisableCounter>
}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40014000 	.word	0x40014000

08006274 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800627c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3b01      	subs	r3, #1
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80062a6:	bf00      	nop
 80062a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d1f8      	bne.n	80062a8 <Custom_Delay_us+0x34>
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff ffcc 	bl	8006274 <Custom_Delay_us>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <Drive_Fit_In>:
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80062ee:	edc7 0a00 	vstr	s1, [r7]
	targetSpeed = pinSpeed;
 80062f2:	4a2b      	ldr	r2, [pc, #172]	; (80063a0 <Drive_Fit_In+0xbc>)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - currentSpeed) * (pinSpeed + currentSpeed) / (2 * s) );
 80062f8:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <Drive_Fit_In+0xc0>)
 80062fa:	edd3 7a00 	vldr	s15, [r3]
 80062fe:	ed97 7a00 	vldr	s14, [r7]
 8006302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006306:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <Drive_Fit_In+0xc0>)
 8006308:	edd3 6a00 	vldr	s13, [r3]
 800630c:	edd7 7a00 	vldr	s15, [r7]
 8006310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006314:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006318:	edd7 7a01 	vldr	s15, [r7, #4]
 800631c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	d518      	bpl.n	8006360 <Drive_Fit_In+0x7c>
 800632e:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <Drive_Fit_In+0xc0>)
 8006330:	edd3 7a00 	vldr	s15, [r3]
 8006334:	ed97 7a00 	vldr	s14, [r7]
 8006338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <Drive_Fit_In+0xc0>)
 800633e:	edd3 6a00 	vldr	s13, [r3]
 8006342:	edd7 7a00 	vldr	s15, [r7]
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800634e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006352:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635a:	eef1 7a67 	vneg.f32	s15, s15
 800635e:	e015      	b.n	800638c <Drive_Fit_In+0xa8>
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <Drive_Fit_In+0xc0>)
 8006362:	edd3 7a00 	vldr	s15, [r3]
 8006366:	ed97 7a00 	vldr	s14, [r7]
 800636a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <Drive_Fit_In+0xc0>)
 8006370:	edd3 6a00 	vldr	s13, [r3]
 8006374:	edd7 7a00 	vldr	s15, [r7]
 8006378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006380:	edd7 7a01 	vldr	s15, [r7, #4]
 8006384:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <Drive_Fit_In+0xc4>)
 800638e:	edc3 7a00 	vstr	s15, [r3]
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000048 	.word	0x20000048
 80063a4:	2000004c 	.word	0x2000004c
 80063a8:	20000044 	.word	0x20000044

080063ac <Is_Drive_End>:
__STATIC_INLINE uint8_t	Is_Drive_End() {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
	exitEcho = EXIT_ECHO_IDLE;
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <Is_Drive_End+0x6c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <Is_Drive_End+0x70>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d804      	bhi.n	80063ca <Is_Drive_End+0x1e>
 80063c0:	4b17      	ldr	r3, [pc, #92]	; (8006420 <Is_Drive_End+0x74>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d122      	bne.n	8006410 <Is_Drive_End+0x64>
		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <Is_Drive_End+0x78>)
 80063cc:	edd3 7a00 	vldr	s15, [r3]
 80063d0:	eddf 0a15 	vldr	s1, [pc, #84]	; 8006428 <Is_Drive_End+0x7c>
 80063d4:	eeb0 0a67 	vmov.f32	s0, s15
 80063d8:	f7ff ff84 	bl	80062e4 <Drive_Fit_In>
		while (currentSpeed > DRIVE_END_DELAY_SPEED) {
 80063dc:	bf00      	nop
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <Is_Drive_End+0x80>)
 80063e0:	edd3 7a00 	vldr	s15, [r3]
 80063e4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006430 <Is_Drive_End+0x84>
 80063e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f0:	dcf5      	bgt.n	80063de <Is_Drive_End+0x32>
		Custom_Delay_ms(DRIVE_END_DELAY_TIME);
 80063f2:	2096      	movs	r0, #150	; 0x96
 80063f4:	f7ff ff66 	bl	80062c4 <Custom_Delay_ms>
		if (endMarkCnt >= 2) {
 80063f8:	4b08      	ldr	r3, [pc, #32]	; (800641c <Is_Drive_End+0x70>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d903      	bls.n	800640a <Is_Drive_End+0x5e>
			exitEcho = EXIT_ECHO_END_MARK;
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <Is_Drive_End+0x6c>)
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e002      	b.n	8006410 <Is_Drive_End+0x64>
			exitEcho = EXIT_ECHO_LINE_OUT;
 800640a:	4b03      	ldr	r3, [pc, #12]	; (8006418 <Is_Drive_End+0x6c>)
 800640c:	2202      	movs	r2, #2
 800640e:	701a      	strb	r2, [r3, #0]
	return exitEcho;
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <Is_Drive_End+0x6c>)
 8006412:	781b      	ldrb	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20005360 	.word	0x20005360
 800641c:	200014b0 	.word	0x200014b0
 8006420:	200014b1 	.word	0x200014b1
 8006424:	2000005c 	.word	0x2000005c
 8006428:	3c23d70a 	.word	0x3c23d70a
 800642c:	2000004c 	.word	0x2000004c
 8006430:	3e99999a 	.word	0x3e99999a

08006434 <Get_Line_Sensor_Cnt>:
__STATIC_INLINE uint8_t	Get_Line_Sensor_Cnt() {
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8006438:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	099b      	lsrs	r3, r3, #6
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	b2da      	uxtb	r2, r3
 8006448:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4413      	add	r3, r2
 800645a:	b2da      	uxtb	r2, r3
 800645c:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4413      	add	r3, r2
 800646e:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8006480:	4413      	add	r3, r2
 8006482:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4413      	add	r3, r2
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <Get_Line_Sensor_Cnt+0x84>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	b2db      	uxtb	r3, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	2000537c 	.word	0x2000537c

080064bc <Get_Marker_Sensor_Cnt>:
__STATIC_INLINE uint8_t	Get_Marker_Sensor_Cnt() {
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
	return ((state >> 7) & 0x01) + ((state >> 0) & 0x01);
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <Get_Marker_Sensor_Cnt+0x30>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	09db      	lsrs	r3, r3, #7
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <Get_Marker_Sensor_Cnt+0x30>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4413      	add	r3, r2
 80064de:	b2db      	uxtb	r3, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	2000537c 	.word	0x2000537c

080064f0 <Decision>:
__STATIC_INLINE void	Decision(uint8_t sensorStateSum) {
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	71fb      	strb	r3, [r7, #7]
	if (sensorStateSum == 0xff) {
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	2bff      	cmp	r3, #255	; 0xff
 80064fe:	d103      	bne.n	8006508 <Decision+0x18>
		markState = MARK_CROSS;
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <Decision+0x88>)
 8006502:	2204      	movs	r2, #4
 8006504:	701a      	strb	r2, [r3, #0]
}
 8006506:	e031      	b.n	800656c <Decision+0x7c>
	else if ( (sensorStateSum & 0x81) == 0x81 ) {
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	f003 0381 	and.w	r3, r3, #129	; 0x81
 800650e:	2b81      	cmp	r3, #129	; 0x81
 8006510:	d10a      	bne.n	8006528 <Decision+0x38>
		markState = MARK_END;
 8006512:	4b19      	ldr	r3, [pc, #100]	; (8006578 <Decision+0x88>)
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
		endMarkCnt++;
 8006518:	4b18      	ldr	r3, [pc, #96]	; (800657c <Decision+0x8c>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	3301      	adds	r3, #1
 8006520:	b2da      	uxtb	r2, r3
 8006522:	4b16      	ldr	r3, [pc, #88]	; (800657c <Decision+0x8c>)
 8006524:	701a      	strb	r2, [r3, #0]
}
 8006526:	e021      	b.n	800656c <Decision+0x7c>
	else if ( (sensorStateSum & 0x01) == 0x01 ) {
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <Decision+0x5c>
		if (markState == MARK_CURVE_L) {
 8006532:	4b11      	ldr	r3, [pc, #68]	; (8006578 <Decision+0x88>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b03      	cmp	r3, #3
 800653a:	d103      	bne.n	8006544 <Decision+0x54>
			markState = MARK_STRAIGHT;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <Decision+0x88>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
}
 8006542:	e013      	b.n	800656c <Decision+0x7c>
			markState = MARK_CURVE_L;
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <Decision+0x88>)
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]
}
 800654a:	e00f      	b.n	800656c <Decision+0x7c>
	else if ( (sensorStateSum & 0x80) == 0x80 ) {
 800654c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006550:	2b00      	cmp	r3, #0
 8006552:	da0b      	bge.n	800656c <Decision+0x7c>
		if (markState == MARK_CURVE_R) {
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <Decision+0x88>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d103      	bne.n	8006566 <Decision+0x76>
			markState = MARK_STRAIGHT;
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <Decision+0x88>)
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
}
 8006564:	e002      	b.n	800656c <Decision+0x7c>
			markState = MARK_CURVE_R;
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <Decision+0x88>)
 8006568:	2202      	movs	r2, #2
 800656a:	701a      	strb	r2, [r3, #0]
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	200014b1 	.word	0x200014b1
 800657c:	200014b0 	.word	0x200014b0

08006580 <Drive_State_Machine>:
__STATIC_INLINE void	Drive_State_Machine() {
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
	switch (driveState) {
 8006584:	4b42      	ldr	r3, [pc, #264]	; (8006690 <Drive_State_Machine+0x110>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b04      	cmp	r3, #4
 800658c:	d87e      	bhi.n	800668c <Drive_State_Machine+0x10c>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <Drive_State_Machine+0x14>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a9 	.word	0x080065a9
 8006598:	080065f3 	.word	0x080065f3
 800659c:	0800661f 	.word	0x0800661f
 80065a0:	08006643 	.word	0x08006643
 80065a4:	08006655 	.word	0x08006655
			if (Get_Line_Sensor_Cnt() >= 4) {
 80065a8:	f7ff ff44 	bl	8006434 <Get_Line_Sensor_Cnt>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d906      	bls.n	80065c0 <Drive_State_Machine+0x40>
				sensorStateSum = 0x00;
 80065b2:	4b38      	ldr	r3, [pc, #224]	; (8006694 <Drive_State_Machine+0x114>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_CROSS;
 80065b8:	4b35      	ldr	r3, [pc, #212]	; (8006690 <Drive_State_Machine+0x110>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
			break;
 80065be:	e05e      	b.n	800667e <Drive_State_Machine+0xfe>
			else if (Get_Marker_Sensor_Cnt() != 0) {
 80065c0:	f7ff ff7c 	bl	80064bc <Get_Marker_Sensor_Cnt>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <Drive_State_Machine+0x58>
				sensorStateSum = 0x00;
 80065ca:	4b32      	ldr	r3, [pc, #200]	; (8006694 <Drive_State_Machine+0x114>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_MARKER;
 80065d0:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <Drive_State_Machine+0x110>)
 80065d2:	2202      	movs	r2, #2
 80065d4:	701a      	strb	r2, [r3, #0]
			break;
 80065d6:	e052      	b.n	800667e <Drive_State_Machine+0xfe>
			else if (state == 0x00) {
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <Drive_State_Machine+0x118>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d14d      	bne.n	800667e <Drive_State_Machine+0xfe>
				lineOutStartTime = curTime;
 80065e2:	4b2e      	ldr	r3, [pc, #184]	; (800669c <Drive_State_Machine+0x11c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <Drive_State_Machine+0x120>)
 80065e8:	6013      	str	r3, [r2, #0]
				driveState = DRIVE_DECISION_LINE_OUT;
 80065ea:	4b29      	ldr	r3, [pc, #164]	; (8006690 <Drive_State_Machine+0x110>)
 80065ec:	2204      	movs	r2, #4
 80065ee:	701a      	strb	r2, [r3, #0]
			break;
 80065f0:	e045      	b.n	800667e <Drive_State_Machine+0xfe>
			sensorStateSum |= state;
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <Drive_State_Machine+0x118>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <Drive_State_Machine+0x114>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	4b24      	ldr	r3, [pc, #144]	; (8006694 <Drive_State_Machine+0x114>)
 8006602:	701a      	strb	r2, [r3, #0]
			if (sensorStateSum == 0xff && Get_Marker_Sensor_Cnt() == 0) {
 8006604:	4b23      	ldr	r3, [pc, #140]	; (8006694 <Drive_State_Machine+0x114>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2bff      	cmp	r3, #255	; 0xff
 800660a:	d13a      	bne.n	8006682 <Drive_State_Machine+0x102>
 800660c:	f7ff ff56 	bl	80064bc <Get_Marker_Sensor_Cnt>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d135      	bne.n	8006682 <Drive_State_Machine+0x102>
				driveState = DRIVE_STATE_DECISION;
 8006616:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <Drive_State_Machine+0x110>)
 8006618:	2203      	movs	r2, #3
 800661a:	701a      	strb	r2, [r3, #0]
			break;
 800661c:	e031      	b.n	8006682 <Drive_State_Machine+0x102>
			sensorStateSum |= state;
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <Drive_State_Machine+0x118>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <Drive_State_Machine+0x114>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <Drive_State_Machine+0x114>)
 800662e:	701a      	strb	r2, [r3, #0]
			if (Get_Marker_Sensor_Cnt() == 0) {
 8006630:	f7ff ff44 	bl	80064bc <Get_Marker_Sensor_Cnt>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d125      	bne.n	8006686 <Drive_State_Machine+0x106>
				driveState = DRIVE_STATE_DECISION;
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <Drive_State_Machine+0x110>)
 800663c:	2203      	movs	r2, #3
 800663e:	701a      	strb	r2, [r3, #0]
			break;
 8006640:	e021      	b.n	8006686 <Drive_State_Machine+0x106>
			Decision(sensorStateSum);
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <Drive_State_Machine+0x114>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff ff52 	bl	80064f0 <Decision>
			driveState = DRIVE_STATE_IDLE;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <Drive_State_Machine+0x110>)
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
			break;
 8006652:	e01b      	b.n	800668c <Drive_State_Machine+0x10c>
			if (state != 0x00) {
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <Drive_State_Machine+0x118>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <Drive_State_Machine+0xe6>
				driveState = DRIVE_STATE_IDLE;
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <Drive_State_Machine+0x110>)
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
			break ;
 8006664:	e011      	b.n	800668a <Drive_State_Machine+0x10a>
			else if (curTime > lineOutStartTime + 400) {
 8006666:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <Drive_State_Machine+0x120>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <Drive_State_Machine+0x11c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d209      	bcs.n	800668a <Drive_State_Machine+0x10a>
				markState = MARK_LINE_OUT;
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <Drive_State_Machine+0x124>)
 8006678:	2205      	movs	r2, #5
 800667a:	701a      	strb	r2, [r3, #0]
			break ;
 800667c:	e005      	b.n	800668a <Drive_State_Machine+0x10a>
			break;
 800667e:	bf00      	nop
 8006680:	e004      	b.n	800668c <Drive_State_Machine+0x10c>
			break;
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <Drive_State_Machine+0x10c>
			break;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <Drive_State_Machine+0x10c>
			break ;
 800668a:	bf00      	nop
}
 800668c:	bf00      	nop
 800668e:	bd80      	pop	{r7, pc}
 8006690:	2000533c 	.word	0x2000533c
 8006694:	20005354 	.word	0x20005354
 8006698:	2000537c 	.word	0x2000537c
 800669c:	200014b8 	.word	0x200014b8
 80066a0:	20005358 	.word	0x20005358
 80066a4:	200014b1 	.word	0x200014b1

080066a8 <Second_Drive>:




//1차 주행
void Second_Drive() {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	uint8_t	exitEcho = EXIT_ECHO_IDLE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 80066b2:	f7fd fd76 	bl	80041a2 <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting(SECOND_DRIVE);
 80066b6:	2001      	movs	r0, #1
 80066b8:	f7fe f9ec 	bl	8004a94 <Pre_Drive_Setting>

	Sensor_Start();
 80066bc:	f000 f9b6 	bl	8006a2c <Sensor_Start>
	Motor_Start();
 80066c0:	f7ff fd94 	bl	80061ec <Motor_Start>
	Speed_Control_Start();
 80066c4:	f7ff fdbe 	bl	8006244 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 80066c8:	f7ff ff5a 	bl	8006580 <Drive_State_Machine>
		Second_Drive_Ctrl();
 80066cc:	f000 f82e 	bl	800672c <Second_Drive_Ctrl>
		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 80066d0:	f7ff fe6c 	bl	80063ac <Is_Drive_End>
 80066d4:	4603      	mov	r3, r0
 80066d6:	71fb      	strb	r3, [r7, #7]
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d100      	bne.n	80066e0 <Second_Drive+0x38>
		Drive_State_Machine();
 80066de:	e7f3      	b.n	80066c8 <Second_Drive+0x20>
			break;
 80066e0:	bf00      	nop
		}
	}

	Motor_Stop();
 80066e2:	f7ff fd97 	bl	8006214 <Motor_Stop>
	Speed_Control_Stop();
 80066e6:	f7ff fdb9 	bl	800625c <Speed_Control_Stop>
	Sensor_Stop();
 80066ea:	f000 f9b7 	bl	8006a5c <Sensor_Stop>



	Custom_OLED_Clear();
 80066ee:	f7fd fd58 	bl	80041a2 <Custom_OLED_Clear>

	After_Drive_Setting(SECOND_DRIVE);
 80066f2:	2001      	movs	r0, #1
 80066f4:	f7fe fc2e 	bl	8004f54 <After_Drive_Setting>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d103      	bne.n	8006706 <Second_Drive+0x5e>
		Custom_OLED_Printf("/0end mark");
 80066fe:	4809      	ldr	r0, [pc, #36]	; (8006724 <Second_Drive+0x7c>)
 8006700:	f7fd fe34 	bl	800436c <Custom_OLED_Printf>
 8006704:	e002      	b.n	800670c <Second_Drive+0x64>
	}
	else {
		Custom_OLED_Printf("/0line out");
 8006706:	4808      	ldr	r0, [pc, #32]	; (8006728 <Second_Drive+0x80>)
 8006708:	f7fd fe30 	bl	800436c <Custom_OLED_Printf>
	}

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 800670c:	bf00      	nop
 800670e:	f7fe f95d 	bl	80049cc <Custom_Switch_Read>
 8006712:	4603      	mov	r3, r0
 8006714:	2b03      	cmp	r3, #3
 8006716:	d1fa      	bne.n	800670e <Second_Drive+0x66>
	Custom_OLED_Clear();
 8006718:	f7fd fd43 	bl	80041a2 <Custom_OLED_Clear>
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	08009dd8 	.word	0x08009dd8
 8006728:	08009de4 	.word	0x08009de4

0800672c <Second_Drive_Ctrl>:




__STATIC_INLINE void Second_Drive_Ctrl() {
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
	static uint32_t	markStartTick = 0;



	// markState가 변경되었을 경우
	if (markState != driveDataPtr->markState) {
 8006730:	4b54      	ldr	r3, [pc, #336]	; (8006884 <Second_Drive_Ctrl+0x158>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	791b      	ldrb	r3, [r3, #4]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4b53      	ldr	r3, [pc, #332]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	429a      	cmp	r2, r3
 8006740:	d01f      	beq.n	8006782 <Second_Drive_Ctrl+0x56>

		// 크로스가 아닐 경우
		if (markState != MARK_CROSS) {
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b04      	cmp	r3, #4
 800674a:	d00f      	beq.n	800676c <Second_Drive_Ctrl+0x40>

			// 부스트에서 쓰이는 startTick 값 변경
			markStartTick = curTick;
 800674c:	4b4f      	ldr	r3, [pc, #316]	; (800688c <Second_Drive_Ctrl+0x160>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a4f      	ldr	r2, [pc, #316]	; (8006890 <Second_Drive_Ctrl+0x164>)
 8006752:	6013      	str	r3, [r2, #0]

			// driveData 값 업데이트
			Set_Second_Drive_Data();
 8006754:	f000 f8ae 	bl	80068b4 <Set_Second_Drive_Data>

			// end mark는 한번만 기록하고 바로 직진 상태로 바꿈
			if (markState == MARK_END) {
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	f040 808d 	bne.w	800687e <Second_Drive_Ctrl+0x152>
				markState = MARK_STRAIGHT;
 8006764:	4b48      	ldr	r3, [pc, #288]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
					}

					break ;
		}
	}
}
 800676a:	e088      	b.n	800687e <Second_Drive_Ctrl+0x152>
			crossCnt += 1;
 800676c:	4b49      	ldr	r3, [pc, #292]	; (8006894 <Second_Drive_Ctrl+0x168>)
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	3301      	adds	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <Second_Drive_Ctrl+0x168>)
 8006778:	801a      	strh	r2, [r3, #0]
			markState = MARK_STRAIGHT;
 800677a:	4b43      	ldr	r3, [pc, #268]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
}
 8006780:	e07d      	b.n	800687e <Second_Drive_Ctrl+0x152>
		switch (boostCntl) {
 8006782:	4b45      	ldr	r3, [pc, #276]	; (8006898 <Second_Drive_Ctrl+0x16c>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b03      	cmp	r3, #3
 800678a:	d878      	bhi.n	800687e <Second_Drive_Ctrl+0x152>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <Second_Drive_Ctrl+0x68>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067a5 	.word	0x080067a5
 8006798:	080067c9 	.word	0x080067c9
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006853 	.word	0x08006853
					if (driveDataPtr->isReadAllMark == CUSTOM_TRUE) {
 80067a4:	4b37      	ldr	r3, [pc, #220]	; (8006884 <Second_Drive_Ctrl+0x158>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	7b1b      	ldrb	r3, [r3, #12]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d108      	bne.n	80067c2 <Second_Drive_Ctrl+0x96>
						if (driveDataPtr->boostTick > 0) {
 80067b0:	4b34      	ldr	r3, [pc, #208]	; (8006884 <Second_Drive_Ctrl+0x158>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d05e      	beq.n	8006878 <Second_Drive_Ctrl+0x14c>
							boostCntl = BOOST_CNTL_ACCELE;
 80067ba:	4b37      	ldr	r3, [pc, #220]	; (8006898 <Second_Drive_Ctrl+0x16c>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
					break ;
 80067c0:	e05a      	b.n	8006878 <Second_Drive_Ctrl+0x14c>
					else if (markState != MARK_STRAIGHT) {
 80067c2:	4b31      	ldr	r3, [pc, #196]	; (8006888 <Second_Drive_Ctrl+0x15c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
					break ;
 80067c6:	e057      	b.n	8006878 <Second_Drive_Ctrl+0x14c>
					if (curTick > markStartTick + ACCELE_START_TICK) {
 80067c8:	4b30      	ldr	r3, [pc, #192]	; (800688c <Second_Drive_Ctrl+0x160>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067d4:	4b2e      	ldr	r3, [pc, #184]	; (8006890 <Second_Drive_Ctrl+0x164>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800689c <Second_Drive_Ctrl+0x170>
 80067e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f0:	dc00      	bgt.n	80067f4 <Second_Drive_Ctrl+0xc8>
					break;
 80067f2:	e044      	b.n	800687e <Second_Drive_Ctrl+0x152>
						targetSpeed = boostSpeed;
 80067f4:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <Second_Drive_Ctrl+0x174>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <Second_Drive_Ctrl+0x178>)
 80067fa:	6013      	str	r3, [r2, #0]
						boostCntl = BOOST_CNTL_DECELE;
 80067fc:	4b26      	ldr	r3, [pc, #152]	; (8006898 <Second_Drive_Ctrl+0x16c>)
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
					break;
 8006802:	e03c      	b.n	800687e <Second_Drive_Ctrl+0x152>
					if (curTick > markStartTick + driveDataPtr->boostTick - DECELE_START_TICK) {
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <Second_Drive_Ctrl+0x160>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <Second_Drive_Ctrl+0x158>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <Second_Drive_Ctrl+0x164>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4413      	add	r3, r2
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006824:	eddf 6a20 	vldr	s13, [pc, #128]	; 80068a8 <Second_Drive_Ctrl+0x17c>
 8006828:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800682c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006834:	dc00      	bgt.n	8006838 <Second_Drive_Ctrl+0x10c>
					break ;
 8006836:	e022      	b.n	800687e <Second_Drive_Ctrl+0x152>
						Drive_Fit_In( DECELE_LEN_M, targetSpeed_init );
 8006838:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <Second_Drive_Ctrl+0x180>)
 800683a:	edd3 7a00 	vldr	s15, [r3]
 800683e:	eef0 0a67 	vmov.f32	s1, s15
 8006842:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80068b0 <Second_Drive_Ctrl+0x184>
 8006846:	f7ff fd4d 	bl	80062e4 <Drive_Fit_In>
						boostCntl = BOOST_CNTL_END;
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <Second_Drive_Ctrl+0x16c>)
 800684c:	2203      	movs	r2, #3
 800684e:	701a      	strb	r2, [r3, #0]
					break ;
 8006850:	e015      	b.n	800687e <Second_Drive_Ctrl+0x152>
					if ( curTick > markStartTick + driveDataPtr->boostTick || driveDataPtr->boostTick == 0) {
 8006852:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <Second_Drive_Ctrl+0x158>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <Second_Drive_Ctrl+0x164>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	441a      	add	r2, r3
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <Second_Drive_Ctrl+0x160>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d304      	bcc.n	8006870 <Second_Drive_Ctrl+0x144>
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <Second_Drive_Ctrl+0x158>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <Second_Drive_Ctrl+0x150>
						boostCntl = BOOST_CNTL_IDLE;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <Second_Drive_Ctrl+0x16c>)
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
					break ;
 8006876:	e001      	b.n	800687c <Second_Drive_Ctrl+0x150>
					break ;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <Second_Drive_Ctrl+0x152>
					break ;
 800687c:	bf00      	nop
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000058 	.word	0x20000058
 8006888:	200014b1 	.word	0x200014b1
 800688c:	200014b4 	.word	0x200014b4
 8006890:	2000535c 	.word	0x2000535c
 8006894:	2000533e 	.word	0x2000533e
 8006898:	2000533d 	.word	0x2000533d
 800689c:	42db8635 	.word	0x42db8635
 80068a0:	20000050 	.word	0x20000050
 80068a4:	20000048 	.word	0x20000048
 80068a8:	44f6f6fb 	.word	0x44f6f6fb
 80068ac:	20000034 	.word	0x20000034
 80068b0:	3f333333 	.word	0x3f333333

080068b4 <Set_Second_Drive_Data>:





__STATIC_INLINE void Set_Second_Drive_Data() {
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0

	// drivePtr 값 인덱스 증가
	driveDataPtr += 1;
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <Set_Second_Drive_Data+0x40>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3310      	adds	r3, #16
 80068be:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <Set_Second_Drive_Data+0x40>)
 80068c0:	6013      	str	r3, [r2, #0]

	// 이전의 주행에서 마크를 정상적으로 읽었는지 판단
	if ((driveDataPtr - 1)->isReadAllMark == CUSTOM_TRUE) {
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <Set_Second_Drive_Data+0x40>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3b10      	subs	r3, #16
 80068c8:	7b1b      	ldrb	r3, [r3, #12]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10c      	bne.n	80068ea <Set_Second_Drive_Data+0x36>

		// 주행중 markState와 1차 주행에서 저장된 markState가 동일하다면 정상적으로 읽었다고 판단
		if (markState == driveDataPtr->markState) {
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <Set_Second_Drive_Data+0x40>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <Set_Second_Drive_Data+0x44>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	429a      	cmp	r2, r3
 80068e0:	d103      	bne.n	80068ea <Set_Second_Drive_Data+0x36>

			// 마크 인식 정상 여부를 업데이트
			driveDataPtr->isReadAllMark = CUSTOM_TRUE;
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <Set_Second_Drive_Data+0x40>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2201      	movs	r2, #1
 80068e8:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80068ea:	bf00      	nop
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000058 	.word	0x20000058
 80068f8:	200014b1 	.word	0x200014b1

080068fc <LL_ADC_Enable>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <LL_ADC_Disable>:
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f023 0201 	bic.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <LL_TIM_EnableCounter>:
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f043 0201 	orr.w	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <LL_TIM_DisableCounter>:
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f023 0201 	bic.w	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_TIM_EnableIT_UPDATE>:
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_TIM_DisableIT_UPDATE>:
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f023 0201 	bic.w	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80069c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80069ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80069de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80069ee:	bf00      	nop
 80069f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d1f8      	bne.n	80069f0 <Custom_Delay_us+0x34>
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff ffcc 	bl	80069bc <Custom_Delay_us>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <Sensor_Start>:





void Sensor_Start() {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 8006a30:	4808      	ldr	r0, [pc, #32]	; (8006a54 <Sensor_Start+0x28>)
 8006a32:	f7ff ff63 	bl	80068fc <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 8006a36:	200a      	movs	r0, #10
 8006a38:	f7ff ffe8 	bl	8006a0c <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 8006a3c:	4806      	ldr	r0, [pc, #24]	; (8006a58 <Sensor_Start+0x2c>)
 8006a3e:	f7ff ff7d 	bl	800693c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 8006a42:	4805      	ldr	r0, [pc, #20]	; (8006a58 <Sensor_Start+0x2c>)
 8006a44:	f7ff ff9a 	bl	800697c <LL_TIM_EnableIT_UPDATE>

	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 8006a48:	200a      	movs	r0, #10
 8006a4a:	f7ff ffdf 	bl	8006a0c <Custom_Delay_ms>
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40012000 	.word	0x40012000
 8006a58:	40000c00 	.word	0x40000c00

08006a5c <Sensor_Stop>:




void Sensor_Stop() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 8006a60:	4805      	ldr	r0, [pc, #20]	; (8006a78 <Sensor_Stop+0x1c>)
 8006a62:	f7ff ff5b 	bl	800691c <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 8006a66:	4805      	ldr	r0, [pc, #20]	; (8006a7c <Sensor_Stop+0x20>)
 8006a68:	f7ff ff78 	bl	800695c <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 8006a6c:	4803      	ldr	r0, [pc, #12]	; (8006a7c <Sensor_Stop+0x20>)
 8006a6e:	f7ff ff95 	bl	800699c <LL_TIM_DisableIT_UPDATE>
}
 8006a72:	bf00      	nop
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40012000 	.word	0x40012000
 8006a7c:	40000c00 	.word	0x40000c00

08006a80 <Sensor_Calibration>:





void Sensor_Calibration() {
 8006a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	703b      	strb	r3, [r7, #0]

	for (int i = 0; i < 8; i++) {
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e00c      	b.n	8006aaa <Sensor_Calibration+0x2a>
		whiteMaxs[i] = 0;
 8006a90:	4a64      	ldr	r2, [pc, #400]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
		blackMaxs[i] = 0;
 8006a9a:	4a63      	ldr	r2, [pc, #396]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b07      	cmp	r3, #7
 8006aae:	ddef      	ble.n	8006a90 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 8006ab0:	f7ff ffbc 	bl	8006a2c <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 8006ab4:	f7fd fb75 	bl	80041a2 <Custom_OLED_Clear>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006ab8:	e044      	b.n	8006b44 <Sensor_Calibration+0xc4>
		Custom_OLED_Printf("/0Black Max");
 8006aba:	485c      	ldr	r0, [pc, #368]	; (8006c2c <Sensor_Calibration+0x1ac>)
 8006abc:	f7fd fc56 	bl	800436c <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 8; i++) {
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	70fb      	strb	r3, [r7, #3]
 8006ac4:	e011      	b.n	8006aea <Sensor_Calibration+0x6a>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	4a57      	ldr	r2, [pc, #348]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006aca:	5cd3      	ldrb	r3, [r2, r3]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4957      	ldr	r1, [pc, #348]	; (8006c30 <Sensor_Calibration+0x1b0>)
 8006ad2:	5c8a      	ldrb	r2, [r1, r2]
 8006ad4:	703a      	strb	r2, [r7, #0]
 8006ad6:	783a      	ldrb	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d903      	bls.n	8006ae4 <Sensor_Calibration+0x64>
				blackMaxs[i] = tmp;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	4952      	ldr	r1, [pc, #328]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006ae0:	783a      	ldrb	r2, [r7, #0]
 8006ae2:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	70fb      	strb	r3, [r7, #3]
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	2b07      	cmp	r3, #7
 8006aee:	d9ea      	bls.n	8006ac6 <Sensor_Calibration+0x46>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006af0:	4b4d      	ldr	r3, [pc, #308]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006af6:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006af8:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006afe:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006b00:	4b49      	ldr	r3, [pc, #292]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b02:	789b      	ldrb	r3, [r3, #2]
 8006b04:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b06:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006b08:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b0a:	78db      	ldrb	r3, [r3, #3]
 8006b0c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b0e:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006b10:	4b45      	ldr	r3, [pc, #276]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b16:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006b18:	4b43      	ldr	r3, [pc, #268]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b1a:	795b      	ldrb	r3, [r3, #5]
 8006b1c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b1e:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006b20:	4b41      	ldr	r3, [pc, #260]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b22:	799b      	ldrb	r3, [r3, #6]
 8006b24:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b26:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006b28:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006b2a:	79db      	ldrb	r3, [r3, #7]
 8006b2c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	9403      	str	r4, [sp, #12]
 8006b32:	9002      	str	r0, [sp, #8]
 8006b34:	9101      	str	r1, [sp, #4]
 8006b36:	9200      	str	r2, [sp, #0]
 8006b38:	4663      	mov	r3, ip
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	483d      	ldr	r0, [pc, #244]	; (8006c34 <Sensor_Calibration+0x1b4>)
 8006b40:	f7fd fc14 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006b44:	f7fd ff42 	bl	80049cc <Custom_Switch_Read>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d1b5      	bne.n	8006aba <Sensor_Calibration+0x3a>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 8006b4e:	f7fd fb28 	bl	80041a2 <Custom_OLED_Clear>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006b52:	e044      	b.n	8006bde <Sensor_Calibration+0x15e>
		Custom_OLED_Printf("/0White Max");
 8006b54:	4838      	ldr	r0, [pc, #224]	; (8006c38 <Sensor_Calibration+0x1b8>)
 8006b56:	f7fd fc09 	bl	800436c <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 8; i++) {
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	70bb      	strb	r3, [r7, #2]
 8006b5e:	e011      	b.n	8006b84 <Sensor_Calibration+0x104>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8006b60:	78bb      	ldrb	r3, [r7, #2]
 8006b62:	4a30      	ldr	r2, [pc, #192]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006b64:	5cd3      	ldrb	r3, [r2, r3]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	78ba      	ldrb	r2, [r7, #2]
 8006b6a:	4931      	ldr	r1, [pc, #196]	; (8006c30 <Sensor_Calibration+0x1b0>)
 8006b6c:	5c8a      	ldrb	r2, [r1, r2]
 8006b6e:	703a      	strb	r2, [r7, #0]
 8006b70:	783a      	ldrb	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d903      	bls.n	8006b7e <Sensor_Calibration+0xfe>
				whiteMaxs[i] = tmp;
 8006b76:	78bb      	ldrb	r3, [r7, #2]
 8006b78:	492a      	ldr	r1, [pc, #168]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006b7a:	783a      	ldrb	r2, [r7, #0]
 8006b7c:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006b7e:	78bb      	ldrb	r3, [r7, #2]
 8006b80:	3301      	adds	r3, #1
 8006b82:	70bb      	strb	r3, [r7, #2]
 8006b84:	78bb      	ldrb	r3, [r7, #2]
 8006b86:	2b07      	cmp	r3, #7
 8006b88:	d9ea      	bls.n	8006b60 <Sensor_Calibration+0xe0>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006b8a:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b90:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b98:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006b9a:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006b9c:	789b      	ldrb	r3, [r3, #2]
 8006b9e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ba0:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006ba4:	78db      	ldrb	r3, [r3, #3]
 8006ba6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ba8:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006baa:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006bac:	791b      	ldrb	r3, [r3, #4]
 8006bae:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bb0:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006bb4:	795b      	ldrb	r3, [r3, #5]
 8006bb6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bb8:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006bbc:	799b      	ldrb	r3, [r3, #6]
 8006bbe:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bc0:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006bc2:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006bc4:	79db      	ldrb	r3, [r3, #7]
 8006bc6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	9403      	str	r4, [sp, #12]
 8006bcc:	9002      	str	r0, [sp, #8]
 8006bce:	9101      	str	r1, [sp, #4]
 8006bd0:	9200      	str	r2, [sp, #0]
 8006bd2:	4663      	mov	r3, ip
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4816      	ldr	r0, [pc, #88]	; (8006c34 <Sensor_Calibration+0x1b4>)
 8006bda:	f7fd fbc7 	bl	800436c <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006bde:	f7fd fef5 	bl	80049cc <Custom_Switch_Read>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d1b5      	bne.n	8006b54 <Sensor_Calibration+0xd4>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < 8; i++) {
 8006be8:	2300      	movs	r3, #0
 8006bea:	707b      	strb	r3, [r7, #1]
 8006bec:	e00f      	b.n	8006c0e <Sensor_Calibration+0x18e>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 8006bee:	787b      	ldrb	r3, [r7, #1]
 8006bf0:	4a0c      	ldr	r2, [pc, #48]	; (8006c24 <Sensor_Calibration+0x1a4>)
 8006bf2:	5cd3      	ldrb	r3, [r2, r3]
 8006bf4:	b2d9      	uxtb	r1, r3
 8006bf6:	787b      	ldrb	r3, [r7, #1]
 8006bf8:	4a0b      	ldr	r2, [pc, #44]	; (8006c28 <Sensor_Calibration+0x1a8>)
 8006bfa:	5cd3      	ldrb	r3, [r2, r3]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	787b      	ldrb	r3, [r7, #1]
 8006c00:	1a8a      	subs	r2, r1, r2
 8006c02:	b2d1      	uxtb	r1, r2
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <Sensor_Calibration+0x1bc>)
 8006c06:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 8006c08:	787b      	ldrb	r3, [r7, #1]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	707b      	strb	r3, [r7, #1]
 8006c0e:	787b      	ldrb	r3, [r7, #1]
 8006c10:	2b07      	cmp	r3, #7
 8006c12:	d9ec      	bls.n	8006bee <Sensor_Calibration+0x16e>
	}

	Custom_OLED_Clear();
 8006c14:	f7fd fac5 	bl	80041a2 <Custom_OLED_Clear>
	Sensor_Stop();
 8006c18:	f7ff ff20 	bl	8006a5c <Sensor_Stop>
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c24:	20000120 	.word	0x20000120
 8006c28:	20005374 	.word	0x20005374
 8006c2c:	08009df0 	.word	0x08009df0
 8006c30:	20005364 	.word	0x20005364
 8006c34:	08009dfc 	.word	0x08009dfc
 8006c38:	08009e28 	.word	0x08009e28
 8006c3c:	20000118 	.word	0x20000118

08006c40 <__cvt>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	ec55 4b10 	vmov	r4, r5, d0
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	460e      	mov	r6, r1
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	462b      	mov	r3, r5
 8006c50:	bfbb      	ittet	lt
 8006c52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c56:	461d      	movlt	r5, r3
 8006c58:	2300      	movge	r3, #0
 8006c5a:	232d      	movlt	r3, #45	; 0x2d
 8006c5c:	700b      	strb	r3, [r1, #0]
 8006c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c64:	4691      	mov	r9, r2
 8006c66:	f023 0820 	bic.w	r8, r3, #32
 8006c6a:	bfbc      	itt	lt
 8006c6c:	4622      	movlt	r2, r4
 8006c6e:	4614      	movlt	r4, r2
 8006c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c74:	d005      	beq.n	8006c82 <__cvt+0x42>
 8006c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c7a:	d100      	bne.n	8006c7e <__cvt+0x3e>
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	2102      	movs	r1, #2
 8006c80:	e000      	b.n	8006c84 <__cvt+0x44>
 8006c82:	2103      	movs	r1, #3
 8006c84:	ab03      	add	r3, sp, #12
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	ab02      	add	r3, sp, #8
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	ec45 4b10 	vmov	d0, r4, r5
 8006c90:	4653      	mov	r3, sl
 8006c92:	4632      	mov	r2, r6
 8006c94:	f000 fdd8 	bl	8007848 <_dtoa_r>
 8006c98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	d102      	bne.n	8006ca6 <__cvt+0x66>
 8006ca0:	f019 0f01 	tst.w	r9, #1
 8006ca4:	d022      	beq.n	8006cec <__cvt+0xac>
 8006ca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006caa:	eb07 0906 	add.w	r9, r7, r6
 8006cae:	d110      	bne.n	8006cd2 <__cvt+0x92>
 8006cb0:	783b      	ldrb	r3, [r7, #0]
 8006cb2:	2b30      	cmp	r3, #48	; 0x30
 8006cb4:	d10a      	bne.n	8006ccc <__cvt+0x8c>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7f9 ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cc2:	b918      	cbnz	r0, 8006ccc <__cvt+0x8c>
 8006cc4:	f1c6 0601 	rsb	r6, r6, #1
 8006cc8:	f8ca 6000 	str.w	r6, [sl]
 8006ccc:	f8da 3000 	ldr.w	r3, [sl]
 8006cd0:	4499      	add	r9, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cde:	b108      	cbz	r0, 8006ce4 <__cvt+0xa4>
 8006ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ce4:	2230      	movs	r2, #48	; 0x30
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	454b      	cmp	r3, r9
 8006cea:	d307      	bcc.n	8006cfc <__cvt+0xbc>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf0:	1bdb      	subs	r3, r3, r7
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	b004      	add	sp, #16
 8006cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	9103      	str	r1, [sp, #12]
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e7f0      	b.n	8006ce6 <__cvt+0xa6>

08006d04 <__exponent>:
 8006d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d06:	4603      	mov	r3, r0
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	bfb8      	it	lt
 8006d0c:	4249      	neglt	r1, r1
 8006d0e:	f803 2b02 	strb.w	r2, [r3], #2
 8006d12:	bfb4      	ite	lt
 8006d14:	222d      	movlt	r2, #45	; 0x2d
 8006d16:	222b      	movge	r2, #43	; 0x2b
 8006d18:	2909      	cmp	r1, #9
 8006d1a:	7042      	strb	r2, [r0, #1]
 8006d1c:	dd2a      	ble.n	8006d74 <__exponent+0x70>
 8006d1e:	f10d 0207 	add.w	r2, sp, #7
 8006d22:	4617      	mov	r7, r2
 8006d24:	260a      	movs	r6, #10
 8006d26:	4694      	mov	ip, r2
 8006d28:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d2c:	fb06 1415 	mls	r4, r6, r5, r1
 8006d30:	3430      	adds	r4, #48	; 0x30
 8006d32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d36:	460c      	mov	r4, r1
 8006d38:	2c63      	cmp	r4, #99	; 0x63
 8006d3a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006d3e:	4629      	mov	r1, r5
 8006d40:	dcf1      	bgt.n	8006d26 <__exponent+0x22>
 8006d42:	3130      	adds	r1, #48	; 0x30
 8006d44:	f1ac 0402 	sub.w	r4, ip, #2
 8006d48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d4c:	1c41      	adds	r1, r0, #1
 8006d4e:	4622      	mov	r2, r4
 8006d50:	42ba      	cmp	r2, r7
 8006d52:	d30a      	bcc.n	8006d6a <__exponent+0x66>
 8006d54:	f10d 0209 	add.w	r2, sp, #9
 8006d58:	eba2 020c 	sub.w	r2, r2, ip
 8006d5c:	42bc      	cmp	r4, r7
 8006d5e:	bf88      	it	hi
 8006d60:	2200      	movhi	r2, #0
 8006d62:	4413      	add	r3, r2
 8006d64:	1a18      	subs	r0, r3, r0
 8006d66:	b003      	add	sp, #12
 8006d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006d72:	e7ed      	b.n	8006d50 <__exponent+0x4c>
 8006d74:	2330      	movs	r3, #48	; 0x30
 8006d76:	3130      	adds	r1, #48	; 0x30
 8006d78:	7083      	strb	r3, [r0, #2]
 8006d7a:	70c1      	strb	r1, [r0, #3]
 8006d7c:	1d03      	adds	r3, r0, #4
 8006d7e:	e7f1      	b.n	8006d64 <__exponent+0x60>

08006d80 <_printf_float>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	ed2d 8b02 	vpush	{d8}
 8006d88:	b08d      	sub	sp, #52	; 0x34
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d90:	4616      	mov	r6, r2
 8006d92:	461f      	mov	r7, r3
 8006d94:	4605      	mov	r5, r0
 8006d96:	f000 fc91 	bl	80076bc <_localeconv_r>
 8006d9a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d9e:	4650      	mov	r0, sl
 8006da0:	f7f9 fa6e 	bl	8000280 <strlen>
 8006da4:	2300      	movs	r3, #0
 8006da6:	930a      	str	r3, [sp, #40]	; 0x28
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	f8d8 3000 	ldr.w	r3, [r8]
 8006db0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006db4:	3307      	adds	r3, #7
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	f103 0208 	add.w	r2, r3, #8
 8006dbe:	f8c8 2000 	str.w	r2, [r8]
 8006dc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dd0:	ee08 0a10 	vmov	s16, r0
 8006dd4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006dd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ddc:	4b9e      	ldr	r3, [pc, #632]	; (8007058 <_printf_float+0x2d8>)
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de2:	f7f9 feab 	bl	8000b3c <__aeabi_dcmpun>
 8006de6:	bb88      	cbnz	r0, 8006e4c <_printf_float+0xcc>
 8006de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dec:	4b9a      	ldr	r3, [pc, #616]	; (8007058 <_printf_float+0x2d8>)
 8006dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006df2:	f7f9 fe85 	bl	8000b00 <__aeabi_dcmple>
 8006df6:	bb48      	cbnz	r0, 8006e4c <_printf_float+0xcc>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe74 	bl	8000aec <__aeabi_dcmplt>
 8006e04:	b110      	cbz	r0, 8006e0c <_printf_float+0x8c>
 8006e06:	232d      	movs	r3, #45	; 0x2d
 8006e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e0c:	4a93      	ldr	r2, [pc, #588]	; (800705c <_printf_float+0x2dc>)
 8006e0e:	4b94      	ldr	r3, [pc, #592]	; (8007060 <_printf_float+0x2e0>)
 8006e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e14:	bf94      	ite	ls
 8006e16:	4690      	movls	r8, r2
 8006e18:	4698      	movhi	r8, r3
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	9b05      	ldr	r3, [sp, #20]
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	f04f 0900 	mov.w	r9, #0
 8006e2a:	9700      	str	r7, [sp, #0]
 8006e2c:	4633      	mov	r3, r6
 8006e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 f9da 	bl	80071ec <_printf_common>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f040 8090 	bne.w	8006f5e <_printf_float+0x1de>
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e42:	b00d      	add	sp, #52	; 0x34
 8006e44:	ecbd 8b02 	vpop	{d8}
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	4640      	mov	r0, r8
 8006e52:	4649      	mov	r1, r9
 8006e54:	f7f9 fe72 	bl	8000b3c <__aeabi_dcmpun>
 8006e58:	b140      	cbz	r0, 8006e6c <_printf_float+0xec>
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bfbc      	itt	lt
 8006e60:	232d      	movlt	r3, #45	; 0x2d
 8006e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e66:	4a7f      	ldr	r2, [pc, #508]	; (8007064 <_printf_float+0x2e4>)
 8006e68:	4b7f      	ldr	r3, [pc, #508]	; (8007068 <_printf_float+0x2e8>)
 8006e6a:	e7d1      	b.n	8006e10 <_printf_float+0x90>
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e72:	9206      	str	r2, [sp, #24]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	d13f      	bne.n	8006ef8 <_printf_float+0x178>
 8006e78:	2306      	movs	r3, #6
 8006e7a:	6063      	str	r3, [r4, #4]
 8006e7c:	9b05      	ldr	r3, [sp, #20]
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e84:	2300      	movs	r3, #0
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	ab0a      	add	r3, sp, #40	; 0x28
 8006e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e8e:	ab09      	add	r3, sp, #36	; 0x24
 8006e90:	ec49 8b10 	vmov	d0, r8, r9
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f7ff fecf 	bl	8006c40 <__cvt>
 8006ea2:	9b06      	ldr	r3, [sp, #24]
 8006ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea6:	2b47      	cmp	r3, #71	; 0x47
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	d108      	bne.n	8006ebe <_printf_float+0x13e>
 8006eac:	1cc8      	adds	r0, r1, #3
 8006eae:	db02      	blt.n	8006eb6 <_printf_float+0x136>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	4299      	cmp	r1, r3
 8006eb4:	dd41      	ble.n	8006f3a <_printf_float+0x1ba>
 8006eb6:	f1ab 0302 	sub.w	r3, fp, #2
 8006eba:	fa5f fb83 	uxtb.w	fp, r3
 8006ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ec2:	d820      	bhi.n	8006f06 <_printf_float+0x186>
 8006ec4:	3901      	subs	r1, #1
 8006ec6:	465a      	mov	r2, fp
 8006ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8006ece:	f7ff ff19 	bl	8006d04 <__exponent>
 8006ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed4:	1813      	adds	r3, r2, r0
 8006ed6:	2a01      	cmp	r2, #1
 8006ed8:	4681      	mov	r9, r0
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	dc02      	bgt.n	8006ee4 <_printf_float+0x164>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	07d2      	lsls	r2, r2, #31
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_float+0x168>
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d09c      	beq.n	8006e2a <_printf_float+0xaa>
 8006ef0:	232d      	movs	r3, #45	; 0x2d
 8006ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef6:	e798      	b.n	8006e2a <_printf_float+0xaa>
 8006ef8:	9a06      	ldr	r2, [sp, #24]
 8006efa:	2a47      	cmp	r2, #71	; 0x47
 8006efc:	d1be      	bne.n	8006e7c <_printf_float+0xfc>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1bc      	bne.n	8006e7c <_printf_float+0xfc>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7b9      	b.n	8006e7a <_printf_float+0xfa>
 8006f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f0a:	d118      	bne.n	8006f3e <_printf_float+0x1be>
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	dd0b      	ble.n	8006f2a <_printf_float+0x1aa>
 8006f12:	6121      	str	r1, [r4, #16]
 8006f14:	b913      	cbnz	r3, 8006f1c <_printf_float+0x19c>
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	07d0      	lsls	r0, r2, #31
 8006f1a:	d502      	bpl.n	8006f22 <_printf_float+0x1a2>
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	440b      	add	r3, r1
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f24:	f04f 0900 	mov.w	r9, #0
 8006f28:	e7de      	b.n	8006ee8 <_printf_float+0x168>
 8006f2a:	b913      	cbnz	r3, 8006f32 <_printf_float+0x1b2>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	07d2      	lsls	r2, r2, #31
 8006f30:	d501      	bpl.n	8006f36 <_printf_float+0x1b6>
 8006f32:	3302      	adds	r3, #2
 8006f34:	e7f4      	b.n	8006f20 <_printf_float+0x1a0>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e7f2      	b.n	8006f20 <_printf_float+0x1a0>
 8006f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f40:	4299      	cmp	r1, r3
 8006f42:	db05      	blt.n	8006f50 <_printf_float+0x1d0>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	6121      	str	r1, [r4, #16]
 8006f48:	07d8      	lsls	r0, r3, #31
 8006f4a:	d5ea      	bpl.n	8006f22 <_printf_float+0x1a2>
 8006f4c:	1c4b      	adds	r3, r1, #1
 8006f4e:	e7e7      	b.n	8006f20 <_printf_float+0x1a0>
 8006f50:	2900      	cmp	r1, #0
 8006f52:	bfd4      	ite	le
 8006f54:	f1c1 0202 	rsble	r2, r1, #2
 8006f58:	2201      	movgt	r2, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	e7e0      	b.n	8006f20 <_printf_float+0x1a0>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	055a      	lsls	r2, r3, #21
 8006f62:	d407      	bmi.n	8006f74 <_printf_float+0x1f4>
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	4642      	mov	r2, r8
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d12c      	bne.n	8006fcc <_printf_float+0x24c>
 8006f72:	e764      	b.n	8006e3e <_printf_float+0xbe>
 8006f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f78:	f240 80e0 	bls.w	800713c <_printf_float+0x3bc>
 8006f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	f7f9 fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d034      	beq.n	8006ff6 <_printf_float+0x276>
 8006f8c:	4a37      	ldr	r2, [pc, #220]	; (800706c <_printf_float+0x2ec>)
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f af51 	beq.w	8006e3e <_printf_float+0xbe>
 8006f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	db02      	blt.n	8006faa <_printf_float+0x22a>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	07d8      	lsls	r0, r3, #31
 8006fa8:	d510      	bpl.n	8006fcc <_printf_float+0x24c>
 8006faa:	ee18 3a10 	vmov	r3, s16
 8006fae:	4652      	mov	r2, sl
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f af41 	beq.w	8006e3e <_printf_float+0xbe>
 8006fbc:	f04f 0800 	mov.w	r8, #0
 8006fc0:	f104 091a 	add.w	r9, r4, #26
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	dc09      	bgt.n	8006fe0 <_printf_float+0x260>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	079b      	lsls	r3, r3, #30
 8006fd0:	f100 8107 	bmi.w	80071e2 <_printf_float+0x462>
 8006fd4:	68e0      	ldr	r0, [r4, #12]
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	bfb8      	it	lt
 8006fdc:	4618      	movlt	r0, r3
 8006fde:	e730      	b.n	8006e42 <_printf_float+0xc2>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	464a      	mov	r2, r9
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f af27 	beq.w	8006e3e <_printf_float+0xbe>
 8006ff0:	f108 0801 	add.w	r8, r8, #1
 8006ff4:	e7e6      	b.n	8006fc4 <_printf_float+0x244>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dc39      	bgt.n	8007070 <_printf_float+0x2f0>
 8006ffc:	4a1b      	ldr	r2, [pc, #108]	; (800706c <_printf_float+0x2ec>)
 8006ffe:	2301      	movs	r3, #1
 8007000:	4631      	mov	r1, r6
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	f43f af19 	beq.w	8006e3e <_printf_float+0xbe>
 800700c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007010:	4313      	orrs	r3, r2
 8007012:	d102      	bne.n	800701a <_printf_float+0x29a>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07d9      	lsls	r1, r3, #31
 8007018:	d5d8      	bpl.n	8006fcc <_printf_float+0x24c>
 800701a:	ee18 3a10 	vmov	r3, s16
 800701e:	4652      	mov	r2, sl
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f af09 	beq.w	8006e3e <_printf_float+0xbe>
 800702c:	f04f 0900 	mov.w	r9, #0
 8007030:	f104 0a1a 	add.w	sl, r4, #26
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	425b      	negs	r3, r3
 8007038:	454b      	cmp	r3, r9
 800703a:	dc01      	bgt.n	8007040 <_printf_float+0x2c0>
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703e:	e792      	b.n	8006f66 <_printf_float+0x1e6>
 8007040:	2301      	movs	r3, #1
 8007042:	4652      	mov	r2, sl
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f aef7 	beq.w	8006e3e <_printf_float+0xbe>
 8007050:	f109 0901 	add.w	r9, r9, #1
 8007054:	e7ee      	b.n	8007034 <_printf_float+0x2b4>
 8007056:	bf00      	nop
 8007058:	7fefffff 	.word	0x7fefffff
 800705c:	0800a0cc 	.word	0x0800a0cc
 8007060:	0800a0d0 	.word	0x0800a0d0
 8007064:	0800a0d4 	.word	0x0800a0d4
 8007068:	0800a0d8 	.word	0x0800a0d8
 800706c:	0800a0dc 	.word	0x0800a0dc
 8007070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007074:	429a      	cmp	r2, r3
 8007076:	bfa8      	it	ge
 8007078:	461a      	movge	r2, r3
 800707a:	2a00      	cmp	r2, #0
 800707c:	4691      	mov	r9, r2
 800707e:	dc37      	bgt.n	80070f0 <_printf_float+0x370>
 8007080:	f04f 0b00 	mov.w	fp, #0
 8007084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007088:	f104 021a 	add.w	r2, r4, #26
 800708c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800708e:	9305      	str	r3, [sp, #20]
 8007090:	eba3 0309 	sub.w	r3, r3, r9
 8007094:	455b      	cmp	r3, fp
 8007096:	dc33      	bgt.n	8007100 <_printf_float+0x380>
 8007098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800709c:	429a      	cmp	r2, r3
 800709e:	db3b      	blt.n	8007118 <_printf_float+0x398>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	07da      	lsls	r2, r3, #31
 80070a4:	d438      	bmi.n	8007118 <_printf_float+0x398>
 80070a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070aa:	eba2 0903 	sub.w	r9, r2, r3
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	1ad2      	subs	r2, r2, r3
 80070b2:	4591      	cmp	r9, r2
 80070b4:	bfa8      	it	ge
 80070b6:	4691      	movge	r9, r2
 80070b8:	f1b9 0f00 	cmp.w	r9, #0
 80070bc:	dc35      	bgt.n	800712a <_printf_float+0x3aa>
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070c6:	f104 0a1a 	add.w	sl, r4, #26
 80070ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	eba3 0309 	sub.w	r3, r3, r9
 80070d4:	4543      	cmp	r3, r8
 80070d6:	f77f af79 	ble.w	8006fcc <_printf_float+0x24c>
 80070da:	2301      	movs	r3, #1
 80070dc:	4652      	mov	r2, sl
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f aeaa 	beq.w	8006e3e <_printf_float+0xbe>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	e7ec      	b.n	80070ca <_printf_float+0x34a>
 80070f0:	4613      	mov	r3, r2
 80070f2:	4631      	mov	r1, r6
 80070f4:	4642      	mov	r2, r8
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	d1c0      	bne.n	8007080 <_printf_float+0x300>
 80070fe:	e69e      	b.n	8006e3e <_printf_float+0xbe>
 8007100:	2301      	movs	r3, #1
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	9205      	str	r2, [sp, #20]
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f ae97 	beq.w	8006e3e <_printf_float+0xbe>
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	f10b 0b01 	add.w	fp, fp, #1
 8007116:	e7b9      	b.n	800708c <_printf_float+0x30c>
 8007118:	ee18 3a10 	vmov	r3, s16
 800711c:	4652      	mov	r2, sl
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	d1be      	bne.n	80070a6 <_printf_float+0x326>
 8007128:	e689      	b.n	8006e3e <_printf_float+0xbe>
 800712a:	9a05      	ldr	r2, [sp, #20]
 800712c:	464b      	mov	r3, r9
 800712e:	4442      	add	r2, r8
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	d1c1      	bne.n	80070be <_printf_float+0x33e>
 800713a:	e680      	b.n	8006e3e <_printf_float+0xbe>
 800713c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800713e:	2a01      	cmp	r2, #1
 8007140:	dc01      	bgt.n	8007146 <_printf_float+0x3c6>
 8007142:	07db      	lsls	r3, r3, #31
 8007144:	d53a      	bpl.n	80071bc <_printf_float+0x43c>
 8007146:	2301      	movs	r3, #1
 8007148:	4642      	mov	r2, r8
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f ae74 	beq.w	8006e3e <_printf_float+0xbe>
 8007156:	ee18 3a10 	vmov	r3, s16
 800715a:	4652      	mov	r2, sl
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f ae6b 	beq.w	8006e3e <_printf_float+0xbe>
 8007168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007174:	f7f9 fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007178:	b9d8      	cbnz	r0, 80071b2 <_printf_float+0x432>
 800717a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800717e:	f108 0201 	add.w	r2, r8, #1
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	d10e      	bne.n	80071aa <_printf_float+0x42a>
 800718c:	e657      	b.n	8006e3e <_printf_float+0xbe>
 800718e:	2301      	movs	r3, #1
 8007190:	4652      	mov	r2, sl
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f ae50 	beq.w	8006e3e <_printf_float+0xbe>
 800719e:	f108 0801 	add.w	r8, r8, #1
 80071a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a4:	3b01      	subs	r3, #1
 80071a6:	4543      	cmp	r3, r8
 80071a8:	dcf1      	bgt.n	800718e <_printf_float+0x40e>
 80071aa:	464b      	mov	r3, r9
 80071ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071b0:	e6da      	b.n	8006f68 <_printf_float+0x1e8>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	f104 0a1a 	add.w	sl, r4, #26
 80071ba:	e7f2      	b.n	80071a2 <_printf_float+0x422>
 80071bc:	2301      	movs	r3, #1
 80071be:	4642      	mov	r2, r8
 80071c0:	e7df      	b.n	8007182 <_printf_float+0x402>
 80071c2:	2301      	movs	r3, #1
 80071c4:	464a      	mov	r2, r9
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f ae36 	beq.w	8006e3e <_printf_float+0xbe>
 80071d2:	f108 0801 	add.w	r8, r8, #1
 80071d6:	68e3      	ldr	r3, [r4, #12]
 80071d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071da:	1a5b      	subs	r3, r3, r1
 80071dc:	4543      	cmp	r3, r8
 80071de:	dcf0      	bgt.n	80071c2 <_printf_float+0x442>
 80071e0:	e6f8      	b.n	8006fd4 <_printf_float+0x254>
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	f104 0919 	add.w	r9, r4, #25
 80071ea:	e7f4      	b.n	80071d6 <_printf_float+0x456>

080071ec <_printf_common>:
 80071ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	4616      	mov	r6, r2
 80071f2:	4699      	mov	r9, r3
 80071f4:	688a      	ldr	r2, [r1, #8]
 80071f6:	690b      	ldr	r3, [r1, #16]
 80071f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bfb8      	it	lt
 8007200:	4613      	movlt	r3, r2
 8007202:	6033      	str	r3, [r6, #0]
 8007204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007208:	4607      	mov	r7, r0
 800720a:	460c      	mov	r4, r1
 800720c:	b10a      	cbz	r2, 8007212 <_printf_common+0x26>
 800720e:	3301      	adds	r3, #1
 8007210:	6033      	str	r3, [r6, #0]
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	0699      	lsls	r1, r3, #26
 8007216:	bf42      	ittt	mi
 8007218:	6833      	ldrmi	r3, [r6, #0]
 800721a:	3302      	addmi	r3, #2
 800721c:	6033      	strmi	r3, [r6, #0]
 800721e:	6825      	ldr	r5, [r4, #0]
 8007220:	f015 0506 	ands.w	r5, r5, #6
 8007224:	d106      	bne.n	8007234 <_printf_common+0x48>
 8007226:	f104 0a19 	add.w	sl, r4, #25
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	6832      	ldr	r2, [r6, #0]
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	42ab      	cmp	r3, r5
 8007232:	dc26      	bgt.n	8007282 <_printf_common+0x96>
 8007234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007238:	1e13      	subs	r3, r2, #0
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	bf18      	it	ne
 800723e:	2301      	movne	r3, #1
 8007240:	0692      	lsls	r2, r2, #26
 8007242:	d42b      	bmi.n	800729c <_printf_common+0xb0>
 8007244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007248:	4649      	mov	r1, r9
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d01e      	beq.n	8007290 <_printf_common+0xa4>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	6922      	ldr	r2, [r4, #16]
 8007256:	f003 0306 	and.w	r3, r3, #6
 800725a:	2b04      	cmp	r3, #4
 800725c:	bf02      	ittt	eq
 800725e:	68e5      	ldreq	r5, [r4, #12]
 8007260:	6833      	ldreq	r3, [r6, #0]
 8007262:	1aed      	subeq	r5, r5, r3
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	bf0c      	ite	eq
 8007268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800726c:	2500      	movne	r5, #0
 800726e:	4293      	cmp	r3, r2
 8007270:	bfc4      	itt	gt
 8007272:	1a9b      	subgt	r3, r3, r2
 8007274:	18ed      	addgt	r5, r5, r3
 8007276:	2600      	movs	r6, #0
 8007278:	341a      	adds	r4, #26
 800727a:	42b5      	cmp	r5, r6
 800727c:	d11a      	bne.n	80072b4 <_printf_common+0xc8>
 800727e:	2000      	movs	r0, #0
 8007280:	e008      	b.n	8007294 <_printf_common+0xa8>
 8007282:	2301      	movs	r3, #1
 8007284:	4652      	mov	r2, sl
 8007286:	4649      	mov	r1, r9
 8007288:	4638      	mov	r0, r7
 800728a:	47c0      	blx	r8
 800728c:	3001      	adds	r0, #1
 800728e:	d103      	bne.n	8007298 <_printf_common+0xac>
 8007290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007298:	3501      	adds	r5, #1
 800729a:	e7c6      	b.n	800722a <_printf_common+0x3e>
 800729c:	18e1      	adds	r1, r4, r3
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	2030      	movs	r0, #48	; 0x30
 80072a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072a6:	4422      	add	r2, r4
 80072a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b0:	3302      	adds	r3, #2
 80072b2:	e7c7      	b.n	8007244 <_printf_common+0x58>
 80072b4:	2301      	movs	r3, #1
 80072b6:	4622      	mov	r2, r4
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d0e6      	beq.n	8007290 <_printf_common+0xa4>
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7d9      	b.n	800727a <_printf_common+0x8e>
	...

080072c8 <_printf_i>:
 80072c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	7e0f      	ldrb	r7, [r1, #24]
 80072ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d0:	2f78      	cmp	r7, #120	; 0x78
 80072d2:	4691      	mov	r9, r2
 80072d4:	4680      	mov	r8, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	469a      	mov	sl, r3
 80072da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072de:	d807      	bhi.n	80072f0 <_printf_i+0x28>
 80072e0:	2f62      	cmp	r7, #98	; 0x62
 80072e2:	d80a      	bhi.n	80072fa <_printf_i+0x32>
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	f000 80d4 	beq.w	8007492 <_printf_i+0x1ca>
 80072ea:	2f58      	cmp	r7, #88	; 0x58
 80072ec:	f000 80c0 	beq.w	8007470 <_printf_i+0x1a8>
 80072f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072f8:	e03a      	b.n	8007370 <_printf_i+0xa8>
 80072fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072fe:	2b15      	cmp	r3, #21
 8007300:	d8f6      	bhi.n	80072f0 <_printf_i+0x28>
 8007302:	a101      	add	r1, pc, #4	; (adr r1, 8007308 <_printf_i+0x40>)
 8007304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007308:	08007361 	.word	0x08007361
 800730c:	08007375 	.word	0x08007375
 8007310:	080072f1 	.word	0x080072f1
 8007314:	080072f1 	.word	0x080072f1
 8007318:	080072f1 	.word	0x080072f1
 800731c:	080072f1 	.word	0x080072f1
 8007320:	08007375 	.word	0x08007375
 8007324:	080072f1 	.word	0x080072f1
 8007328:	080072f1 	.word	0x080072f1
 800732c:	080072f1 	.word	0x080072f1
 8007330:	080072f1 	.word	0x080072f1
 8007334:	08007479 	.word	0x08007479
 8007338:	080073a1 	.word	0x080073a1
 800733c:	08007433 	.word	0x08007433
 8007340:	080072f1 	.word	0x080072f1
 8007344:	080072f1 	.word	0x080072f1
 8007348:	0800749b 	.word	0x0800749b
 800734c:	080072f1 	.word	0x080072f1
 8007350:	080073a1 	.word	0x080073a1
 8007354:	080072f1 	.word	0x080072f1
 8007358:	080072f1 	.word	0x080072f1
 800735c:	0800743b 	.word	0x0800743b
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	1d1a      	adds	r2, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007370:	2301      	movs	r3, #1
 8007372:	e09f      	b.n	80074b4 <_printf_i+0x1ec>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	0607      	lsls	r7, r0, #24
 800737a:	f103 0104 	add.w	r1, r3, #4
 800737e:	6029      	str	r1, [r5, #0]
 8007380:	d501      	bpl.n	8007386 <_printf_i+0xbe>
 8007382:	681e      	ldr	r6, [r3, #0]
 8007384:	e003      	b.n	800738e <_printf_i+0xc6>
 8007386:	0646      	lsls	r6, r0, #25
 8007388:	d5fb      	bpl.n	8007382 <_printf_i+0xba>
 800738a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800738e:	2e00      	cmp	r6, #0
 8007390:	da03      	bge.n	800739a <_printf_i+0xd2>
 8007392:	232d      	movs	r3, #45	; 0x2d
 8007394:	4276      	negs	r6, r6
 8007396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739a:	485a      	ldr	r0, [pc, #360]	; (8007504 <_printf_i+0x23c>)
 800739c:	230a      	movs	r3, #10
 800739e:	e012      	b.n	80073c6 <_printf_i+0xfe>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	1d19      	adds	r1, r3, #4
 80073a6:	6029      	str	r1, [r5, #0]
 80073a8:	0605      	lsls	r5, r0, #24
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0xe8>
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0xee>
 80073b0:	0641      	lsls	r1, r0, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0xe4>
 80073b4:	881e      	ldrh	r6, [r3, #0]
 80073b6:	4853      	ldr	r0, [pc, #332]	; (8007504 <_printf_i+0x23c>)
 80073b8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ba:	bf0c      	ite	eq
 80073bc:	2308      	moveq	r3, #8
 80073be:	230a      	movne	r3, #10
 80073c0:	2100      	movs	r1, #0
 80073c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073c6:	6865      	ldr	r5, [r4, #4]
 80073c8:	60a5      	str	r5, [r4, #8]
 80073ca:	2d00      	cmp	r5, #0
 80073cc:	bfa2      	ittt	ge
 80073ce:	6821      	ldrge	r1, [r4, #0]
 80073d0:	f021 0104 	bicge.w	r1, r1, #4
 80073d4:	6021      	strge	r1, [r4, #0]
 80073d6:	b90e      	cbnz	r6, 80073dc <_printf_i+0x114>
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d04b      	beq.n	8007474 <_printf_i+0x1ac>
 80073dc:	4615      	mov	r5, r2
 80073de:	fbb6 f1f3 	udiv	r1, r6, r3
 80073e2:	fb03 6711 	mls	r7, r3, r1, r6
 80073e6:	5dc7      	ldrb	r7, [r0, r7]
 80073e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073ec:	4637      	mov	r7, r6
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	460e      	mov	r6, r1
 80073f2:	d9f4      	bls.n	80073de <_printf_i+0x116>
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10b      	bne.n	8007410 <_printf_i+0x148>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07de      	lsls	r6, r3, #31
 80073fc:	d508      	bpl.n	8007410 <_printf_i+0x148>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	4299      	cmp	r1, r3
 8007404:	bfde      	ittt	le
 8007406:	2330      	movle	r3, #48	; 0x30
 8007408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800740c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007410:	1b52      	subs	r2, r2, r5
 8007412:	6122      	str	r2, [r4, #16]
 8007414:	f8cd a000 	str.w	sl, [sp]
 8007418:	464b      	mov	r3, r9
 800741a:	aa03      	add	r2, sp, #12
 800741c:	4621      	mov	r1, r4
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fee4 	bl	80071ec <_printf_common>
 8007424:	3001      	adds	r0, #1
 8007426:	d14a      	bne.n	80074be <_printf_i+0x1f6>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800742c:	b004      	add	sp, #16
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	f043 0320 	orr.w	r3, r3, #32
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	4833      	ldr	r0, [pc, #204]	; (8007508 <_printf_i+0x240>)
 800743c:	2778      	movs	r7, #120	; 0x78
 800743e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	6829      	ldr	r1, [r5, #0]
 8007446:	061f      	lsls	r7, r3, #24
 8007448:	f851 6b04 	ldr.w	r6, [r1], #4
 800744c:	d402      	bmi.n	8007454 <_printf_i+0x18c>
 800744e:	065f      	lsls	r7, r3, #25
 8007450:	bf48      	it	mi
 8007452:	b2b6      	uxthmi	r6, r6
 8007454:	07df      	lsls	r7, r3, #31
 8007456:	bf48      	it	mi
 8007458:	f043 0320 	orrmi.w	r3, r3, #32
 800745c:	6029      	str	r1, [r5, #0]
 800745e:	bf48      	it	mi
 8007460:	6023      	strmi	r3, [r4, #0]
 8007462:	b91e      	cbnz	r6, 800746c <_printf_i+0x1a4>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	f023 0320 	bic.w	r3, r3, #32
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	2310      	movs	r3, #16
 800746e:	e7a7      	b.n	80073c0 <_printf_i+0xf8>
 8007470:	4824      	ldr	r0, [pc, #144]	; (8007504 <_printf_i+0x23c>)
 8007472:	e7e4      	b.n	800743e <_printf_i+0x176>
 8007474:	4615      	mov	r5, r2
 8007476:	e7bd      	b.n	80073f4 <_printf_i+0x12c>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	6826      	ldr	r6, [r4, #0]
 800747c:	6961      	ldr	r1, [r4, #20]
 800747e:	1d18      	adds	r0, r3, #4
 8007480:	6028      	str	r0, [r5, #0]
 8007482:	0635      	lsls	r5, r6, #24
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	d501      	bpl.n	800748c <_printf_i+0x1c4>
 8007488:	6019      	str	r1, [r3, #0]
 800748a:	e002      	b.n	8007492 <_printf_i+0x1ca>
 800748c:	0670      	lsls	r0, r6, #25
 800748e:	d5fb      	bpl.n	8007488 <_printf_i+0x1c0>
 8007490:	8019      	strh	r1, [r3, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	4615      	mov	r5, r2
 8007498:	e7bc      	b.n	8007414 <_printf_i+0x14c>
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	602a      	str	r2, [r5, #0]
 80074a0:	681d      	ldr	r5, [r3, #0]
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	2100      	movs	r1, #0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7f8 fe9a 	bl	80001e0 <memchr>
 80074ac:	b108      	cbz	r0, 80074b2 <_printf_i+0x1ea>
 80074ae:	1b40      	subs	r0, r0, r5
 80074b0:	6060      	str	r0, [r4, #4]
 80074b2:	6863      	ldr	r3, [r4, #4]
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	2300      	movs	r3, #0
 80074b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074bc:	e7aa      	b.n	8007414 <_printf_i+0x14c>
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	462a      	mov	r2, r5
 80074c2:	4649      	mov	r1, r9
 80074c4:	4640      	mov	r0, r8
 80074c6:	47d0      	blx	sl
 80074c8:	3001      	adds	r0, #1
 80074ca:	d0ad      	beq.n	8007428 <_printf_i+0x160>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	079b      	lsls	r3, r3, #30
 80074d0:	d413      	bmi.n	80074fa <_printf_i+0x232>
 80074d2:	68e0      	ldr	r0, [r4, #12]
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	4298      	cmp	r0, r3
 80074d8:	bfb8      	it	lt
 80074da:	4618      	movlt	r0, r3
 80074dc:	e7a6      	b.n	800742c <_printf_i+0x164>
 80074de:	2301      	movs	r3, #1
 80074e0:	4632      	mov	r2, r6
 80074e2:	4649      	mov	r1, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	47d0      	blx	sl
 80074e8:	3001      	adds	r0, #1
 80074ea:	d09d      	beq.n	8007428 <_printf_i+0x160>
 80074ec:	3501      	adds	r5, #1
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	9903      	ldr	r1, [sp, #12]
 80074f2:	1a5b      	subs	r3, r3, r1
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dcf2      	bgt.n	80074de <_printf_i+0x216>
 80074f8:	e7eb      	b.n	80074d2 <_printf_i+0x20a>
 80074fa:	2500      	movs	r5, #0
 80074fc:	f104 0619 	add.w	r6, r4, #25
 8007500:	e7f5      	b.n	80074ee <_printf_i+0x226>
 8007502:	bf00      	nop
 8007504:	0800a0de 	.word	0x0800a0de
 8007508:	0800a0ef 	.word	0x0800a0ef

0800750c <std>:
 800750c:	2300      	movs	r3, #0
 800750e:	b510      	push	{r4, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	e9c0 3300 	strd	r3, r3, [r0]
 8007516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800751a:	6083      	str	r3, [r0, #8]
 800751c:	8181      	strh	r1, [r0, #12]
 800751e:	6643      	str	r3, [r0, #100]	; 0x64
 8007520:	81c2      	strh	r2, [r0, #14]
 8007522:	6183      	str	r3, [r0, #24]
 8007524:	4619      	mov	r1, r3
 8007526:	2208      	movs	r2, #8
 8007528:	305c      	adds	r0, #92	; 0x5c
 800752a:	f000 f8bf 	bl	80076ac <memset>
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x38>)
 8007530:	6263      	str	r3, [r4, #36]	; 0x24
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <std+0x3c>)
 8007534:	62a3      	str	r3, [r4, #40]	; 0x28
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <std+0x40>)
 8007538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <std+0x44>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	6323      	str	r3, [r4, #48]	; 0x30
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	08009099 	.word	0x08009099
 8007548:	080090bb 	.word	0x080090bb
 800754c:	080090f3 	.word	0x080090f3
 8007550:	08009117 	.word	0x08009117

08007554 <stdio_exit_handler>:
 8007554:	4a02      	ldr	r2, [pc, #8]	; (8007560 <stdio_exit_handler+0xc>)
 8007556:	4903      	ldr	r1, [pc, #12]	; (8007564 <stdio_exit_handler+0x10>)
 8007558:	4803      	ldr	r0, [pc, #12]	; (8007568 <stdio_exit_handler+0x14>)
 800755a:	f000 b869 	b.w	8007630 <_fwalk_sglue>
 800755e:	bf00      	nop
 8007560:	2000012c 	.word	0x2000012c
 8007564:	08008939 	.word	0x08008939
 8007568:	20000138 	.word	0x20000138

0800756c <cleanup_stdio>:
 800756c:	6841      	ldr	r1, [r0, #4]
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <cleanup_stdio+0x34>)
 8007570:	4299      	cmp	r1, r3
 8007572:	b510      	push	{r4, lr}
 8007574:	4604      	mov	r4, r0
 8007576:	d001      	beq.n	800757c <cleanup_stdio+0x10>
 8007578:	f001 f9de 	bl	8008938 <_fflush_r>
 800757c:	68a1      	ldr	r1, [r4, #8]
 800757e:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <cleanup_stdio+0x38>)
 8007580:	4299      	cmp	r1, r3
 8007582:	d002      	beq.n	800758a <cleanup_stdio+0x1e>
 8007584:	4620      	mov	r0, r4
 8007586:	f001 f9d7 	bl	8008938 <_fflush_r>
 800758a:	68e1      	ldr	r1, [r4, #12]
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <cleanup_stdio+0x3c>)
 800758e:	4299      	cmp	r1, r3
 8007590:	d004      	beq.n	800759c <cleanup_stdio+0x30>
 8007592:	4620      	mov	r0, r4
 8007594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007598:	f001 b9ce 	b.w	8008938 <_fflush_r>
 800759c:	bd10      	pop	{r4, pc}
 800759e:	bf00      	nop
 80075a0:	20005380 	.word	0x20005380
 80075a4:	200053e8 	.word	0x200053e8
 80075a8:	20005450 	.word	0x20005450

080075ac <global_stdio_init.part.0>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <global_stdio_init.part.0+0x30>)
 80075b0:	4c0b      	ldr	r4, [pc, #44]	; (80075e0 <global_stdio_init.part.0+0x34>)
 80075b2:	4a0c      	ldr	r2, [pc, #48]	; (80075e4 <global_stdio_init.part.0+0x38>)
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	4620      	mov	r0, r4
 80075b8:	2200      	movs	r2, #0
 80075ba:	2104      	movs	r1, #4
 80075bc:	f7ff ffa6 	bl	800750c <std>
 80075c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075c4:	2201      	movs	r2, #1
 80075c6:	2109      	movs	r1, #9
 80075c8:	f7ff ffa0 	bl	800750c <std>
 80075cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80075d0:	2202      	movs	r2, #2
 80075d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d6:	2112      	movs	r1, #18
 80075d8:	f7ff bf98 	b.w	800750c <std>
 80075dc:	200054b8 	.word	0x200054b8
 80075e0:	20005380 	.word	0x20005380
 80075e4:	08007555 	.word	0x08007555

080075e8 <__sfp_lock_acquire>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__sfp_lock_acquire+0x8>)
 80075ea:	f000 b895 	b.w	8007718 <__retarget_lock_acquire_recursive>
 80075ee:	bf00      	nop
 80075f0:	200054bd 	.word	0x200054bd

080075f4 <__sfp_lock_release>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__sfp_lock_release+0x8>)
 80075f6:	f000 b890 	b.w	800771a <__retarget_lock_release_recursive>
 80075fa:	bf00      	nop
 80075fc:	200054bd 	.word	0x200054bd

08007600 <__sinit>:
 8007600:	b510      	push	{r4, lr}
 8007602:	4604      	mov	r4, r0
 8007604:	f7ff fff0 	bl	80075e8 <__sfp_lock_acquire>
 8007608:	6a23      	ldr	r3, [r4, #32]
 800760a:	b11b      	cbz	r3, 8007614 <__sinit+0x14>
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f7ff bff0 	b.w	80075f4 <__sfp_lock_release>
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <__sinit+0x28>)
 8007616:	6223      	str	r3, [r4, #32]
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <__sinit+0x2c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f5      	bne.n	800760c <__sinit+0xc>
 8007620:	f7ff ffc4 	bl	80075ac <global_stdio_init.part.0>
 8007624:	e7f2      	b.n	800760c <__sinit+0xc>
 8007626:	bf00      	nop
 8007628:	0800756d 	.word	0x0800756d
 800762c:	200054b8 	.word	0x200054b8

08007630 <_fwalk_sglue>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	4607      	mov	r7, r0
 8007636:	4688      	mov	r8, r1
 8007638:	4614      	mov	r4, r2
 800763a:	2600      	movs	r6, #0
 800763c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007640:	f1b9 0901 	subs.w	r9, r9, #1
 8007644:	d505      	bpl.n	8007652 <_fwalk_sglue+0x22>
 8007646:	6824      	ldr	r4, [r4, #0]
 8007648:	2c00      	cmp	r4, #0
 800764a:	d1f7      	bne.n	800763c <_fwalk_sglue+0xc>
 800764c:	4630      	mov	r0, r6
 800764e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d907      	bls.n	8007668 <_fwalk_sglue+0x38>
 8007658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800765c:	3301      	adds	r3, #1
 800765e:	d003      	beq.n	8007668 <_fwalk_sglue+0x38>
 8007660:	4629      	mov	r1, r5
 8007662:	4638      	mov	r0, r7
 8007664:	47c0      	blx	r8
 8007666:	4306      	orrs	r6, r0
 8007668:	3568      	adds	r5, #104	; 0x68
 800766a:	e7e9      	b.n	8007640 <_fwalk_sglue+0x10>

0800766c <_vsiprintf_r>:
 800766c:	b500      	push	{lr}
 800766e:	b09b      	sub	sp, #108	; 0x6c
 8007670:	9100      	str	r1, [sp, #0]
 8007672:	9104      	str	r1, [sp, #16]
 8007674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007678:	9105      	str	r1, [sp, #20]
 800767a:	9102      	str	r1, [sp, #8]
 800767c:	4905      	ldr	r1, [pc, #20]	; (8007694 <_vsiprintf_r+0x28>)
 800767e:	9103      	str	r1, [sp, #12]
 8007680:	4669      	mov	r1, sp
 8007682:	f000 ff2d 	bl	80084e0 <_svfiprintf_r>
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	b01b      	add	sp, #108	; 0x6c
 800768e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007692:	bf00      	nop
 8007694:	ffff0208 	.word	0xffff0208

08007698 <vsiprintf>:
 8007698:	4613      	mov	r3, r2
 800769a:	460a      	mov	r2, r1
 800769c:	4601      	mov	r1, r0
 800769e:	4802      	ldr	r0, [pc, #8]	; (80076a8 <vsiprintf+0x10>)
 80076a0:	6800      	ldr	r0, [r0, #0]
 80076a2:	f7ff bfe3 	b.w	800766c <_vsiprintf_r>
 80076a6:	bf00      	nop
 80076a8:	20000184 	.word	0x20000184

080076ac <memset>:
 80076ac:	4402      	add	r2, r0
 80076ae:	4603      	mov	r3, r0
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d100      	bne.n	80076b6 <memset+0xa>
 80076b4:	4770      	bx	lr
 80076b6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ba:	e7f9      	b.n	80076b0 <memset+0x4>

080076bc <_localeconv_r>:
 80076bc:	4800      	ldr	r0, [pc, #0]	; (80076c0 <_localeconv_r+0x4>)
 80076be:	4770      	bx	lr
 80076c0:	20000278 	.word	0x20000278

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000184 	.word	0x20000184

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	; (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	; (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	; (8007714 <__libc_init_array+0x44>)
 80076e4:	f002 f91c 	bl	8009920 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	0800a444 	.word	0x0800a444
 800770c:	0800a444 	.word	0x0800a444
 8007710:	0800a444 	.word	0x0800a444
 8007714:	0800a448 	.word	0x0800a448

08007718 <__retarget_lock_acquire_recursive>:
 8007718:	4770      	bx	lr

0800771a <__retarget_lock_release_recursive>:
 800771a:	4770      	bx	lr

0800771c <memcpy>:
 800771c:	440a      	add	r2, r1
 800771e:	4291      	cmp	r1, r2
 8007720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007724:	d100      	bne.n	8007728 <memcpy+0xc>
 8007726:	4770      	bx	lr
 8007728:	b510      	push	{r4, lr}
 800772a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007732:	4291      	cmp	r1, r2
 8007734:	d1f9      	bne.n	800772a <memcpy+0xe>
 8007736:	bd10      	pop	{r4, pc}

08007738 <quorem>:
 8007738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	690c      	ldr	r4, [r1, #16]
 8007740:	42a3      	cmp	r3, r4
 8007742:	4607      	mov	r7, r0
 8007744:	db7e      	blt.n	8007844 <quorem+0x10c>
 8007746:	3c01      	subs	r4, #1
 8007748:	f101 0814 	add.w	r8, r1, #20
 800774c:	f100 0514 	add.w	r5, r0, #20
 8007750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800775a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800775e:	3301      	adds	r3, #1
 8007760:	429a      	cmp	r2, r3
 8007762:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007766:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776a:	fbb2 f6f3 	udiv	r6, r2, r3
 800776e:	d331      	bcc.n	80077d4 <quorem+0x9c>
 8007770:	f04f 0e00 	mov.w	lr, #0
 8007774:	4640      	mov	r0, r8
 8007776:	46ac      	mov	ip, r5
 8007778:	46f2      	mov	sl, lr
 800777a:	f850 2b04 	ldr.w	r2, [r0], #4
 800777e:	b293      	uxth	r3, r2
 8007780:	fb06 e303 	mla	r3, r6, r3, lr
 8007784:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007788:	0c1a      	lsrs	r2, r3, #16
 800778a:	b29b      	uxth	r3, r3
 800778c:	ebaa 0303 	sub.w	r3, sl, r3
 8007790:	f8dc a000 	ldr.w	sl, [ip]
 8007794:	fa13 f38a 	uxtah	r3, r3, sl
 8007798:	fb06 220e 	mla	r2, r6, lr, r2
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a4:	b292      	uxth	r2, r2
 80077a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80077b2:	4581      	cmp	r9, r0
 80077b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b8:	f84c 3b04 	str.w	r3, [ip], #4
 80077bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c0:	d2db      	bcs.n	800777a <quorem+0x42>
 80077c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c6:	b92b      	cbnz	r3, 80077d4 <quorem+0x9c>
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	3b04      	subs	r3, #4
 80077cc:	429d      	cmp	r5, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	d32c      	bcc.n	800782c <quorem+0xf4>
 80077d2:	613c      	str	r4, [r7, #16]
 80077d4:	4638      	mov	r0, r7
 80077d6:	f001 fb5f 	bl	8008e98 <__mcmp>
 80077da:	2800      	cmp	r0, #0
 80077dc:	db22      	blt.n	8007824 <quorem+0xec>
 80077de:	3601      	adds	r6, #1
 80077e0:	4629      	mov	r1, r5
 80077e2:	2000      	movs	r0, #0
 80077e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e8:	f8d1 c000 	ldr.w	ip, [r1]
 80077ec:	b293      	uxth	r3, r2
 80077ee:	1ac3      	subs	r3, r0, r3
 80077f0:	0c12      	lsrs	r2, r2, #16
 80077f2:	fa13 f38c 	uxtah	r3, r3, ip
 80077f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007804:	45c1      	cmp	r9, r8
 8007806:	f841 3b04 	str.w	r3, [r1], #4
 800780a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800780e:	d2e9      	bcs.n	80077e4 <quorem+0xac>
 8007810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007818:	b922      	cbnz	r2, 8007824 <quorem+0xec>
 800781a:	3b04      	subs	r3, #4
 800781c:	429d      	cmp	r5, r3
 800781e:	461a      	mov	r2, r3
 8007820:	d30a      	bcc.n	8007838 <quorem+0x100>
 8007822:	613c      	str	r4, [r7, #16]
 8007824:	4630      	mov	r0, r6
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	3b04      	subs	r3, #4
 8007830:	2a00      	cmp	r2, #0
 8007832:	d1ce      	bne.n	80077d2 <quorem+0x9a>
 8007834:	3c01      	subs	r4, #1
 8007836:	e7c9      	b.n	80077cc <quorem+0x94>
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	3b04      	subs	r3, #4
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1f0      	bne.n	8007822 <quorem+0xea>
 8007840:	3c01      	subs	r4, #1
 8007842:	e7eb      	b.n	800781c <quorem+0xe4>
 8007844:	2000      	movs	r0, #0
 8007846:	e7ee      	b.n	8007826 <quorem+0xee>

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	ed2d 8b04 	vpush	{d8-d9}
 8007850:	69c5      	ldr	r5, [r0, #28]
 8007852:	b093      	sub	sp, #76	; 0x4c
 8007854:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007858:	ec57 6b10 	vmov	r6, r7, d0
 800785c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007860:	9107      	str	r1, [sp, #28]
 8007862:	4604      	mov	r4, r0
 8007864:	920a      	str	r2, [sp, #40]	; 0x28
 8007866:	930d      	str	r3, [sp, #52]	; 0x34
 8007868:	b975      	cbnz	r5, 8007888 <_dtoa_r+0x40>
 800786a:	2010      	movs	r0, #16
 800786c:	f000 ff36 	bl	80086dc <malloc>
 8007870:	4602      	mov	r2, r0
 8007872:	61e0      	str	r0, [r4, #28]
 8007874:	b920      	cbnz	r0, 8007880 <_dtoa_r+0x38>
 8007876:	4bae      	ldr	r3, [pc, #696]	; (8007b30 <_dtoa_r+0x2e8>)
 8007878:	21ef      	movs	r1, #239	; 0xef
 800787a:	48ae      	ldr	r0, [pc, #696]	; (8007b34 <_dtoa_r+0x2ec>)
 800787c:	f001 fcee 	bl	800925c <__assert_func>
 8007880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007884:	6005      	str	r5, [r0, #0]
 8007886:	60c5      	str	r5, [r0, #12]
 8007888:	69e3      	ldr	r3, [r4, #28]
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	b151      	cbz	r1, 80078a4 <_dtoa_r+0x5c>
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	604a      	str	r2, [r1, #4]
 8007892:	2301      	movs	r3, #1
 8007894:	4093      	lsls	r3, r2
 8007896:	608b      	str	r3, [r1, #8]
 8007898:	4620      	mov	r0, r4
 800789a:	f001 f8c1 	bl	8008a20 <_Bfree>
 800789e:	69e3      	ldr	r3, [r4, #28]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	1e3b      	subs	r3, r7, #0
 80078a6:	bfbb      	ittet	lt
 80078a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	9303      	strlt	r3, [sp, #12]
 80078ae:	2300      	movge	r3, #0
 80078b0:	2201      	movlt	r2, #1
 80078b2:	bfac      	ite	ge
 80078b4:	f8c8 3000 	strge.w	r3, [r8]
 80078b8:	f8c8 2000 	strlt.w	r2, [r8]
 80078bc:	4b9e      	ldr	r3, [pc, #632]	; (8007b38 <_dtoa_r+0x2f0>)
 80078be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078c2:	ea33 0308 	bics.w	r3, r3, r8
 80078c6:	d11b      	bne.n	8007900 <_dtoa_r+0xb8>
 80078c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078d4:	4333      	orrs	r3, r6
 80078d6:	f000 8593 	beq.w	8008400 <_dtoa_r+0xbb8>
 80078da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078dc:	b963      	cbnz	r3, 80078f8 <_dtoa_r+0xb0>
 80078de:	4b97      	ldr	r3, [pc, #604]	; (8007b3c <_dtoa_r+0x2f4>)
 80078e0:	e027      	b.n	8007932 <_dtoa_r+0xea>
 80078e2:	4b97      	ldr	r3, [pc, #604]	; (8007b40 <_dtoa_r+0x2f8>)
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	9800      	ldr	r0, [sp, #0]
 80078ee:	b013      	add	sp, #76	; 0x4c
 80078f0:	ecbd 8b04 	vpop	{d8-d9}
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	4b90      	ldr	r3, [pc, #576]	; (8007b3c <_dtoa_r+0x2f4>)
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	3303      	adds	r3, #3
 80078fe:	e7f3      	b.n	80078e8 <_dtoa_r+0xa0>
 8007900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	ec51 0b17 	vmov	r0, r1, d7
 800790a:	eeb0 8a47 	vmov.f32	s16, s14
 800790e:	eef0 8a67 	vmov.f32	s17, s15
 8007912:	2300      	movs	r3, #0
 8007914:	f7f9 f8e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007918:	4681      	mov	r9, r0
 800791a:	b160      	cbz	r0, 8007936 <_dtoa_r+0xee>
 800791c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800791e:	2301      	movs	r3, #1
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8568 	beq.w	80083fa <_dtoa_r+0xbb2>
 800792a:	4b86      	ldr	r3, [pc, #536]	; (8007b44 <_dtoa_r+0x2fc>)
 800792c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	e7da      	b.n	80078ec <_dtoa_r+0xa4>
 8007936:	aa10      	add	r2, sp, #64	; 0x40
 8007938:	a911      	add	r1, sp, #68	; 0x44
 800793a:	4620      	mov	r0, r4
 800793c:	eeb0 0a48 	vmov.f32	s0, s16
 8007940:	eef0 0a68 	vmov.f32	s1, s17
 8007944:	f001 fb4e 	bl	8008fe4 <__d2b>
 8007948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800794c:	4682      	mov	sl, r0
 800794e:	2d00      	cmp	r5, #0
 8007950:	d07f      	beq.n	8007a52 <_dtoa_r+0x20a>
 8007952:	ee18 3a90 	vmov	r3, s17
 8007956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800795a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800795e:	ec51 0b18 	vmov	r0, r1, d8
 8007962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800796a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800796e:	4619      	mov	r1, r3
 8007970:	2200      	movs	r2, #0
 8007972:	4b75      	ldr	r3, [pc, #468]	; (8007b48 <_dtoa_r+0x300>)
 8007974:	f7f8 fc90 	bl	8000298 <__aeabi_dsub>
 8007978:	a367      	add	r3, pc, #412	; (adr r3, 8007b18 <_dtoa_r+0x2d0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fe43 	bl	8000608 <__aeabi_dmul>
 8007982:	a367      	add	r3, pc, #412	; (adr r3, 8007b20 <_dtoa_r+0x2d8>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc88 	bl	800029c <__adddf3>
 800798c:	4606      	mov	r6, r0
 800798e:	4628      	mov	r0, r5
 8007990:	460f      	mov	r7, r1
 8007992:	f7f8 fdcf 	bl	8000534 <__aeabi_i2d>
 8007996:	a364      	add	r3, pc, #400	; (adr r3, 8007b28 <_dtoa_r+0x2e0>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fe34 	bl	8000608 <__aeabi_dmul>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f8 fc78 	bl	800029c <__adddf3>
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	f7f9 f8da 	bl	8000b68 <__aeabi_d2iz>
 80079b4:	2200      	movs	r2, #0
 80079b6:	4683      	mov	fp, r0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f9 f895 	bl	8000aec <__aeabi_dcmplt>
 80079c2:	b148      	cbz	r0, 80079d8 <_dtoa_r+0x190>
 80079c4:	4658      	mov	r0, fp
 80079c6:	f7f8 fdb5 	bl	8000534 <__aeabi_i2d>
 80079ca:	4632      	mov	r2, r6
 80079cc:	463b      	mov	r3, r7
 80079ce:	f7f9 f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80079d2:	b908      	cbnz	r0, 80079d8 <_dtoa_r+0x190>
 80079d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80079d8:	f1bb 0f16 	cmp.w	fp, #22
 80079dc:	d857      	bhi.n	8007a8e <_dtoa_r+0x246>
 80079de:	4b5b      	ldr	r3, [pc, #364]	; (8007b4c <_dtoa_r+0x304>)
 80079e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	ec51 0b18 	vmov	r0, r1, d8
 80079ec:	f7f9 f87e 	bl	8000aec <__aeabi_dcmplt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d04e      	beq.n	8007a92 <_dtoa_r+0x24a>
 80079f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80079f8:	2300      	movs	r3, #0
 80079fa:	930c      	str	r3, [sp, #48]	; 0x30
 80079fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079fe:	1b5b      	subs	r3, r3, r5
 8007a00:	1e5a      	subs	r2, r3, #1
 8007a02:	bf45      	ittet	mi
 8007a04:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a08:	9305      	strmi	r3, [sp, #20]
 8007a0a:	2300      	movpl	r3, #0
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	9206      	str	r2, [sp, #24]
 8007a10:	bf54      	ite	pl
 8007a12:	9305      	strpl	r3, [sp, #20]
 8007a14:	9306      	strmi	r3, [sp, #24]
 8007a16:	f1bb 0f00 	cmp.w	fp, #0
 8007a1a:	db3c      	blt.n	8007a96 <_dtoa_r+0x24e>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007a22:	445b      	add	r3, fp
 8007a24:	9306      	str	r3, [sp, #24]
 8007a26:	2300      	movs	r3, #0
 8007a28:	9308      	str	r3, [sp, #32]
 8007a2a:	9b07      	ldr	r3, [sp, #28]
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d868      	bhi.n	8007b02 <_dtoa_r+0x2ba>
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	bfc4      	itt	gt
 8007a34:	3b04      	subgt	r3, #4
 8007a36:	9307      	strgt	r3, [sp, #28]
 8007a38:	9b07      	ldr	r3, [sp, #28]
 8007a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007a3e:	bfcc      	ite	gt
 8007a40:	2500      	movgt	r5, #0
 8007a42:	2501      	movle	r5, #1
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	f200 8085 	bhi.w	8007b54 <_dtoa_r+0x30c>
 8007a4a:	e8df f003 	tbb	[pc, r3]
 8007a4e:	3b2e      	.short	0x3b2e
 8007a50:	5839      	.short	0x5839
 8007a52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a56:	441d      	add	r5, r3
 8007a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	bfc1      	itttt	gt
 8007a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a64:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007a6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a70:	bfd6      	itet	le
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a7a:	fa06 f003 	lslle.w	r0, r6, r3
 8007a7e:	f7f8 fd49 	bl	8000514 <__aeabi_ui2d>
 8007a82:	2201      	movs	r2, #1
 8007a84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	920e      	str	r2, [sp, #56]	; 0x38
 8007a8c:	e76f      	b.n	800796e <_dtoa_r+0x126>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b3      	b.n	80079fa <_dtoa_r+0x1b2>
 8007a92:	900c      	str	r0, [sp, #48]	; 0x30
 8007a94:	e7b2      	b.n	80079fc <_dtoa_r+0x1b4>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	eba3 030b 	sub.w	r3, r3, fp
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	f1cb 0300 	rsb	r3, fp, #0
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa8:	e7bf      	b.n	8007a2a <_dtoa_r+0x1e2>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9309      	str	r3, [sp, #36]	; 0x24
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dc52      	bgt.n	8007b5a <_dtoa_r+0x312>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	461a      	mov	r2, r3
 8007abc:	920a      	str	r2, [sp, #40]	; 0x28
 8007abe:	e00b      	b.n	8007ad8 <_dtoa_r+0x290>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7f3      	b.n	8007aac <_dtoa_r+0x264>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	445b      	add	r3, fp
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	bfb8      	it	lt
 8007ad6:	2301      	movlt	r3, #1
 8007ad8:	69e0      	ldr	r0, [r4, #28]
 8007ada:	2100      	movs	r1, #0
 8007adc:	2204      	movs	r2, #4
 8007ade:	f102 0614 	add.w	r6, r2, #20
 8007ae2:	429e      	cmp	r6, r3
 8007ae4:	d93d      	bls.n	8007b62 <_dtoa_r+0x31a>
 8007ae6:	6041      	str	r1, [r0, #4]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 ff59 	bl	80089a0 <_Balloc>
 8007aee:	9000      	str	r0, [sp, #0]
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d139      	bne.n	8007b68 <_dtoa_r+0x320>
 8007af4:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <_dtoa_r+0x308>)
 8007af6:	4602      	mov	r2, r0
 8007af8:	f240 11af 	movw	r1, #431	; 0x1af
 8007afc:	e6bd      	b.n	800787a <_dtoa_r+0x32>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e7e1      	b.n	8007ac6 <_dtoa_r+0x27e>
 8007b02:	2501      	movs	r5, #1
 8007b04:	2300      	movs	r3, #0
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	9509      	str	r5, [sp, #36]	; 0x24
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	2200      	movs	r2, #0
 8007b14:	2312      	movs	r3, #18
 8007b16:	e7d1      	b.n	8007abc <_dtoa_r+0x274>
 8007b18:	636f4361 	.word	0x636f4361
 8007b1c:	3fd287a7 	.word	0x3fd287a7
 8007b20:	8b60c8b3 	.word	0x8b60c8b3
 8007b24:	3fc68a28 	.word	0x3fc68a28
 8007b28:	509f79fb 	.word	0x509f79fb
 8007b2c:	3fd34413 	.word	0x3fd34413
 8007b30:	0800a10d 	.word	0x0800a10d
 8007b34:	0800a124 	.word	0x0800a124
 8007b38:	7ff00000 	.word	0x7ff00000
 8007b3c:	0800a109 	.word	0x0800a109
 8007b40:	0800a100 	.word	0x0800a100
 8007b44:	0800a0dd 	.word	0x0800a0dd
 8007b48:	3ff80000 	.word	0x3ff80000
 8007b4c:	0800a220 	.word	0x0800a220
 8007b50:	0800a17c 	.word	0x0800a17c
 8007b54:	2301      	movs	r3, #1
 8007b56:	9309      	str	r3, [sp, #36]	; 0x24
 8007b58:	e7d7      	b.n	8007b0a <_dtoa_r+0x2c2>
 8007b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	e7ba      	b.n	8007ad8 <_dtoa_r+0x290>
 8007b62:	3101      	adds	r1, #1
 8007b64:	0052      	lsls	r2, r2, #1
 8007b66:	e7ba      	b.n	8007ade <_dtoa_r+0x296>
 8007b68:	69e3      	ldr	r3, [r4, #28]
 8007b6a:	9a00      	ldr	r2, [sp, #0]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	2b0e      	cmp	r3, #14
 8007b72:	f200 80a8 	bhi.w	8007cc6 <_dtoa_r+0x47e>
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f000 80a5 	beq.w	8007cc6 <_dtoa_r+0x47e>
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	dd38      	ble.n	8007bf4 <_dtoa_r+0x3ac>
 8007b82:	4bc0      	ldr	r3, [pc, #768]	; (8007e84 <_dtoa_r+0x63c>)
 8007b84:	f00b 020f 	and.w	r2, fp, #15
 8007b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b98:	d019      	beq.n	8007bce <_dtoa_r+0x386>
 8007b9a:	4bbb      	ldr	r3, [pc, #748]	; (8007e88 <_dtoa_r+0x640>)
 8007b9c:	ec51 0b18 	vmov	r0, r1, d8
 8007ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba4:	f7f8 fe5a 	bl	800085c <__aeabi_ddiv>
 8007ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bac:	f008 080f 	and.w	r8, r8, #15
 8007bb0:	2503      	movs	r5, #3
 8007bb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e88 <_dtoa_r+0x640>
 8007bb6:	f1b8 0f00 	cmp.w	r8, #0
 8007bba:	d10a      	bne.n	8007bd2 <_dtoa_r+0x38a>
 8007bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	f7f8 fe4a 	bl	800085c <__aeabi_ddiv>
 8007bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bcc:	e02b      	b.n	8007c26 <_dtoa_r+0x3de>
 8007bce:	2502      	movs	r5, #2
 8007bd0:	e7ef      	b.n	8007bb2 <_dtoa_r+0x36a>
 8007bd2:	f018 0f01 	tst.w	r8, #1
 8007bd6:	d008      	beq.n	8007bea <_dtoa_r+0x3a2>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007be0:	f7f8 fd12 	bl	8000608 <__aeabi_dmul>
 8007be4:	3501      	adds	r5, #1
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007bee:	f109 0908 	add.w	r9, r9, #8
 8007bf2:	e7e0      	b.n	8007bb6 <_dtoa_r+0x36e>
 8007bf4:	f000 809f 	beq.w	8007d36 <_dtoa_r+0x4ee>
 8007bf8:	f1cb 0600 	rsb	r6, fp, #0
 8007bfc:	4ba1      	ldr	r3, [pc, #644]	; (8007e84 <_dtoa_r+0x63c>)
 8007bfe:	4fa2      	ldr	r7, [pc, #648]	; (8007e88 <_dtoa_r+0x640>)
 8007c00:	f006 020f 	and.w	r2, r6, #15
 8007c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	ec51 0b18 	vmov	r0, r1, d8
 8007c10:	f7f8 fcfa 	bl	8000608 <__aeabi_dmul>
 8007c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c18:	1136      	asrs	r6, r6, #4
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2502      	movs	r5, #2
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d17e      	bne.n	8007d20 <_dtoa_r+0x4d8>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1d0      	bne.n	8007bc8 <_dtoa_r+0x380>
 8007c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8084 	beq.w	8007d3a <_dtoa_r+0x4f2>
 8007c32:	4b96      	ldr	r3, [pc, #600]	; (8007e8c <_dtoa_r+0x644>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	f7f8 ff57 	bl	8000aec <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d07b      	beq.n	8007d3a <_dtoa_r+0x4f2>
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d078      	beq.n	8007d3a <_dtoa_r+0x4f2>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dd39      	ble.n	8007cc2 <_dtoa_r+0x47a>
 8007c4e:	4b90      	ldr	r3, [pc, #576]	; (8007e90 <_dtoa_r+0x648>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fcd7 	bl	8000608 <__aeabi_dmul>
 8007c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c5e:	9e01      	ldr	r6, [sp, #4]
 8007c60:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007c64:	3501      	adds	r5, #1
 8007c66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7f8 fc62 	bl	8000534 <__aeabi_i2d>
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	4b86      	ldr	r3, [pc, #536]	; (8007e94 <_dtoa_r+0x64c>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7f8 fb0e 	bl	800029c <__adddf3>
 8007c80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	d158      	bne.n	8007d40 <_dtoa_r+0x4f8>
 8007c8e:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <_dtoa_r+0x650>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 faff 	bl	8000298 <__aeabi_dsub>
 8007c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	f7f8 ff41 	bl	8000b28 <__aeabi_dcmpgt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f040 8296 	bne.w	80081d8 <_dtoa_r+0x990>
 8007cac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 ff18 	bl	8000aec <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f040 8289 	bne.w	80081d4 <_dtoa_r+0x98c>
 8007cc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f2c0 814e 	blt.w	8007f6a <_dtoa_r+0x722>
 8007cce:	f1bb 0f0e 	cmp.w	fp, #14
 8007cd2:	f300 814a 	bgt.w	8007f6a <_dtoa_r+0x722>
 8007cd6:	4b6b      	ldr	r3, [pc, #428]	; (8007e84 <_dtoa_r+0x63c>)
 8007cd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f280 80dc 	bge.w	8007ea0 <_dtoa_r+0x658>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f300 80d8 	bgt.w	8007ea0 <_dtoa_r+0x658>
 8007cf0:	f040 826f 	bne.w	80081d2 <_dtoa_r+0x98a>
 8007cf4:	4b68      	ldr	r3, [pc, #416]	; (8007e98 <_dtoa_r+0x650>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 fc84 	bl	8000608 <__aeabi_dmul>
 8007d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d04:	f7f8 ff06 	bl	8000b14 <__aeabi_dcmpge>
 8007d08:	9e04      	ldr	r6, [sp, #16]
 8007d0a:	4637      	mov	r7, r6
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f040 8245 	bne.w	800819c <_dtoa_r+0x954>
 8007d12:	9d00      	ldr	r5, [sp, #0]
 8007d14:	2331      	movs	r3, #49	; 0x31
 8007d16:	f805 3b01 	strb.w	r3, [r5], #1
 8007d1a:	f10b 0b01 	add.w	fp, fp, #1
 8007d1e:	e241      	b.n	80081a4 <_dtoa_r+0x95c>
 8007d20:	07f2      	lsls	r2, r6, #31
 8007d22:	d505      	bpl.n	8007d30 <_dtoa_r+0x4e8>
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	f7f8 fc6e 	bl	8000608 <__aeabi_dmul>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	2301      	movs	r3, #1
 8007d30:	1076      	asrs	r6, r6, #1
 8007d32:	3708      	adds	r7, #8
 8007d34:	e773      	b.n	8007c1e <_dtoa_r+0x3d6>
 8007d36:	2502      	movs	r5, #2
 8007d38:	e775      	b.n	8007c26 <_dtoa_r+0x3de>
 8007d3a:	9e04      	ldr	r6, [sp, #16]
 8007d3c:	465f      	mov	r7, fp
 8007d3e:	e792      	b.n	8007c66 <_dtoa_r+0x41e>
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	4b50      	ldr	r3, [pc, #320]	; (8007e84 <_dtoa_r+0x63c>)
 8007d44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d48:	4431      	add	r1, r6
 8007d4a:	9102      	str	r1, [sp, #8]
 8007d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4e:	eeb0 9a47 	vmov.f32	s18, s14
 8007d52:	eef0 9a67 	vmov.f32	s19, s15
 8007d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d044      	beq.n	8007dec <_dtoa_r+0x5a4>
 8007d62:	494e      	ldr	r1, [pc, #312]	; (8007e9c <_dtoa_r+0x654>)
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f8 fd79 	bl	800085c <__aeabi_ddiv>
 8007d6a:	ec53 2b19 	vmov	r2, r3, d9
 8007d6e:	f7f8 fa93 	bl	8000298 <__aeabi_dsub>
 8007d72:	9d00      	ldr	r5, [sp, #0]
 8007d74:	ec41 0b19 	vmov	d9, r0, r1
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7f8 fef4 	bl	8000b68 <__aeabi_d2iz>
 8007d80:	4606      	mov	r6, r0
 8007d82:	f7f8 fbd7 	bl	8000534 <__aeabi_i2d>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fa83 	bl	8000298 <__aeabi_dsub>
 8007d92:	3630      	adds	r6, #48	; 0x30
 8007d94:	f805 6b01 	strb.w	r6, [r5], #1
 8007d98:	ec53 2b19 	vmov	r2, r3, d9
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	f7f8 fea4 	bl	8000aec <__aeabi_dcmplt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d164      	bne.n	8007e72 <_dtoa_r+0x62a>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	4937      	ldr	r1, [pc, #220]	; (8007e8c <_dtoa_r+0x644>)
 8007dae:	2000      	movs	r0, #0
 8007db0:	f7f8 fa72 	bl	8000298 <__aeabi_dsub>
 8007db4:	ec53 2b19 	vmov	r2, r3, d9
 8007db8:	f7f8 fe98 	bl	8000aec <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 80b6 	bne.w	8007f2e <_dtoa_r+0x6e6>
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	f43f af7c 	beq.w	8007cc2 <_dtoa_r+0x47a>
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <_dtoa_r+0x648>)
 8007dcc:	ec51 0b19 	vmov	r0, r1, d9
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f7f8 fc19 	bl	8000608 <__aeabi_dmul>
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <_dtoa_r+0x648>)
 8007dd8:	ec41 0b19 	vmov	d9, r0, r1
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fc11 	bl	8000608 <__aeabi_dmul>
 8007de6:	4680      	mov	r8, r0
 8007de8:	4689      	mov	r9, r1
 8007dea:	e7c5      	b.n	8007d78 <_dtoa_r+0x530>
 8007dec:	ec51 0b17 	vmov	r0, r1, d7
 8007df0:	f7f8 fc0a 	bl	8000608 <__aeabi_dmul>
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	9d00      	ldr	r5, [sp, #0]
 8007df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dfa:	ec41 0b19 	vmov	d9, r0, r1
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	f7f8 feb1 	bl	8000b68 <__aeabi_d2iz>
 8007e06:	4606      	mov	r6, r0
 8007e08:	f7f8 fb94 	bl	8000534 <__aeabi_i2d>
 8007e0c:	3630      	adds	r6, #48	; 0x30
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fa3f 	bl	8000298 <__aeabi_dsub>
 8007e1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	429d      	cmp	r5, r3
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	d124      	bne.n	8007e76 <_dtoa_r+0x62e>
 8007e2c:	4b1b      	ldr	r3, [pc, #108]	; (8007e9c <_dtoa_r+0x654>)
 8007e2e:	ec51 0b19 	vmov	r0, r1, d9
 8007e32:	f7f8 fa33 	bl	800029c <__adddf3>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d173      	bne.n	8007f2e <_dtoa_r+0x6e6>
 8007e46:	ec53 2b19 	vmov	r2, r3, d9
 8007e4a:	4914      	ldr	r1, [pc, #80]	; (8007e9c <_dtoa_r+0x654>)
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f7f8 fa23 	bl	8000298 <__aeabi_dsub>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 fe47 	bl	8000aec <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f af2f 	beq.w	8007cc2 <_dtoa_r+0x47a>
 8007e64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e66:	1e6b      	subs	r3, r5, #1
 8007e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e6e:	2b30      	cmp	r3, #48	; 0x30
 8007e70:	d0f8      	beq.n	8007e64 <_dtoa_r+0x61c>
 8007e72:	46bb      	mov	fp, r7
 8007e74:	e04a      	b.n	8007f0c <_dtoa_r+0x6c4>
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <_dtoa_r+0x648>)
 8007e78:	f7f8 fbc6 	bl	8000608 <__aeabi_dmul>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4689      	mov	r9, r1
 8007e80:	e7bd      	b.n	8007dfe <_dtoa_r+0x5b6>
 8007e82:	bf00      	nop
 8007e84:	0800a220 	.word	0x0800a220
 8007e88:	0800a1f8 	.word	0x0800a1f8
 8007e8c:	3ff00000 	.word	0x3ff00000
 8007e90:	40240000 	.word	0x40240000
 8007e94:	401c0000 	.word	0x401c0000
 8007e98:	40140000 	.word	0x40140000
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ea4:	9d00      	ldr	r5, [sp, #0]
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 fcd5 	bl	800085c <__aeabi_ddiv>
 8007eb2:	f7f8 fe59 	bl	8000b68 <__aeabi_d2iz>
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	f7f8 fb3c 	bl	8000534 <__aeabi_i2d>
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	f7f8 fba2 	bl	8000608 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 f9e4 	bl	8000298 <__aeabi_dsub>
 8007ed0:	9e01      	ldr	r6, [sp, #4]
 8007ed2:	9f04      	ldr	r7, [sp, #16]
 8007ed4:	3630      	adds	r6, #48	; 0x30
 8007ed6:	f805 6b01 	strb.w	r6, [r5], #1
 8007eda:	9e00      	ldr	r6, [sp, #0]
 8007edc:	1bae      	subs	r6, r5, r6
 8007ede:	42b7      	cmp	r7, r6
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	d134      	bne.n	8007f50 <_dtoa_r+0x708>
 8007ee6:	f7f8 f9d9 	bl	800029c <__adddf3>
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	f7f8 fe19 	bl	8000b28 <__aeabi_dcmpgt>
 8007ef6:	b9c8      	cbnz	r0, 8007f2c <_dtoa_r+0x6e4>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 fdea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f04:	b110      	cbz	r0, 8007f0c <_dtoa_r+0x6c4>
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	07db      	lsls	r3, r3, #31
 8007f0a:	d40f      	bmi.n	8007f2c <_dtoa_r+0x6e4>
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fd86 	bl	8008a20 <_Bfree>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f18:	702b      	strb	r3, [r5, #0]
 8007f1a:	f10b 0301 	add.w	r3, fp, #1
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f43f ace2 	beq.w	80078ec <_dtoa_r+0xa4>
 8007f28:	601d      	str	r5, [r3, #0]
 8007f2a:	e4df      	b.n	80078ec <_dtoa_r+0xa4>
 8007f2c:	465f      	mov	r7, fp
 8007f2e:	462b      	mov	r3, r5
 8007f30:	461d      	mov	r5, r3
 8007f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f36:	2a39      	cmp	r2, #57	; 0x39
 8007f38:	d106      	bne.n	8007f48 <_dtoa_r+0x700>
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1f7      	bne.n	8007f30 <_dtoa_r+0x6e8>
 8007f40:	9900      	ldr	r1, [sp, #0]
 8007f42:	2230      	movs	r2, #48	; 0x30
 8007f44:	3701      	adds	r7, #1
 8007f46:	700a      	strb	r2, [r1, #0]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	3201      	adds	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e790      	b.n	8007e72 <_dtoa_r+0x62a>
 8007f50:	4ba3      	ldr	r3, [pc, #652]	; (80081e0 <_dtoa_r+0x998>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f7f8 fb58 	bl	8000608 <__aeabi_dmul>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	f7f8 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d09e      	beq.n	8007ea6 <_dtoa_r+0x65e>
 8007f68:	e7d0      	b.n	8007f0c <_dtoa_r+0x6c4>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	f000 80ca 	beq.w	8008106 <_dtoa_r+0x8be>
 8007f72:	9a07      	ldr	r2, [sp, #28]
 8007f74:	2a01      	cmp	r2, #1
 8007f76:	f300 80ad 	bgt.w	80080d4 <_dtoa_r+0x88c>
 8007f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	f000 80a5 	beq.w	80080cc <_dtoa_r+0x884>
 8007f82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f86:	9e08      	ldr	r6, [sp, #32]
 8007f88:	9d05      	ldr	r5, [sp, #20]
 8007f8a:	9a05      	ldr	r2, [sp, #20]
 8007f8c:	441a      	add	r2, r3
 8007f8e:	9205      	str	r2, [sp, #20]
 8007f90:	9a06      	ldr	r2, [sp, #24]
 8007f92:	2101      	movs	r1, #1
 8007f94:	441a      	add	r2, r3
 8007f96:	4620      	mov	r0, r4
 8007f98:	9206      	str	r2, [sp, #24]
 8007f9a:	f000 fdf7 	bl	8008b8c <__i2b>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	b165      	cbz	r5, 8007fbc <_dtoa_r+0x774>
 8007fa2:	9b06      	ldr	r3, [sp, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd09      	ble.n	8007fbc <_dtoa_r+0x774>
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	9a05      	ldr	r2, [sp, #20]
 8007fac:	bfa8      	it	ge
 8007fae:	462b      	movge	r3, r5
 8007fb0:	1ad2      	subs	r2, r2, r3
 8007fb2:	9205      	str	r2, [sp, #20]
 8007fb4:	9a06      	ldr	r2, [sp, #24]
 8007fb6:	1aed      	subs	r5, r5, r3
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	b1f3      	cbz	r3, 8007ffe <_dtoa_r+0x7b6>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80a3 	beq.w	800810e <_dtoa_r+0x8c6>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	dd10      	ble.n	8007fee <_dtoa_r+0x7a6>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fe9b 	bl	8008d0c <__pow5mult>
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4601      	mov	r1, r0
 8007fda:	4607      	mov	r7, r0
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fdeb 	bl	8008bb8 <__multiply>
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fd1a 	bl	8008a20 <_Bfree>
 8007fec:	46c2      	mov	sl, r8
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	1b9a      	subs	r2, r3, r6
 8007ff2:	d004      	beq.n	8007ffe <_dtoa_r+0x7b6>
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fe88 	bl	8008d0c <__pow5mult>
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	2101      	movs	r1, #1
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fdc3 	bl	8008b8c <__i2b>
 8008006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	4606      	mov	r6, r0
 800800c:	f340 8081 	ble.w	8008112 <_dtoa_r+0x8ca>
 8008010:	461a      	mov	r2, r3
 8008012:	4601      	mov	r1, r0
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fe79 	bl	8008d0c <__pow5mult>
 800801a:	9b07      	ldr	r3, [sp, #28]
 800801c:	2b01      	cmp	r3, #1
 800801e:	4606      	mov	r6, r0
 8008020:	dd7a      	ble.n	8008118 <_dtoa_r+0x8d0>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	6933      	ldr	r3, [r6, #16]
 8008028:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800802c:	6918      	ldr	r0, [r3, #16]
 800802e:	f000 fd5f 	bl	8008af0 <__hi0bits>
 8008032:	f1c0 0020 	rsb	r0, r0, #32
 8008036:	9b06      	ldr	r3, [sp, #24]
 8008038:	4418      	add	r0, r3
 800803a:	f010 001f 	ands.w	r0, r0, #31
 800803e:	f000 8094 	beq.w	800816a <_dtoa_r+0x922>
 8008042:	f1c0 0320 	rsb	r3, r0, #32
 8008046:	2b04      	cmp	r3, #4
 8008048:	f340 8085 	ble.w	8008156 <_dtoa_r+0x90e>
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	f1c0 001c 	rsb	r0, r0, #28
 8008052:	4403      	add	r3, r0
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	4403      	add	r3, r0
 800805a:	4405      	add	r5, r0
 800805c:	9306      	str	r3, [sp, #24]
 800805e:	9b05      	ldr	r3, [sp, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	dd05      	ble.n	8008070 <_dtoa_r+0x828>
 8008064:	4651      	mov	r1, sl
 8008066:	461a      	mov	r2, r3
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fea9 	bl	8008dc0 <__lshift>
 800806e:	4682      	mov	sl, r0
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	dd05      	ble.n	8008082 <_dtoa_r+0x83a>
 8008076:	4631      	mov	r1, r6
 8008078:	461a      	mov	r2, r3
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fea0 	bl	8008dc0 <__lshift>
 8008080:	4606      	mov	r6, r0
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d072      	beq.n	800816e <_dtoa_r+0x926>
 8008088:	4631      	mov	r1, r6
 800808a:	4650      	mov	r0, sl
 800808c:	f000 ff04 	bl	8008e98 <__mcmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	da6c      	bge.n	800816e <_dtoa_r+0x926>
 8008094:	2300      	movs	r3, #0
 8008096:	4651      	mov	r1, sl
 8008098:	220a      	movs	r2, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fce2 	bl	8008a64 <__multadd>
 80080a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80080a6:	4682      	mov	sl, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 81b0 	beq.w	800840e <_dtoa_r+0xbc6>
 80080ae:	2300      	movs	r3, #0
 80080b0:	4639      	mov	r1, r7
 80080b2:	220a      	movs	r2, #10
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fcd5 	bl	8008a64 <__multadd>
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	4607      	mov	r7, r0
 80080c0:	f300 8096 	bgt.w	80081f0 <_dtoa_r+0x9a8>
 80080c4:	9b07      	ldr	r3, [sp, #28]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	dc59      	bgt.n	800817e <_dtoa_r+0x936>
 80080ca:	e091      	b.n	80081f0 <_dtoa_r+0x9a8>
 80080cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080d2:	e758      	b.n	8007f86 <_dtoa_r+0x73e>
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	1e5e      	subs	r6, r3, #1
 80080d8:	9b08      	ldr	r3, [sp, #32]
 80080da:	42b3      	cmp	r3, r6
 80080dc:	bfbf      	itttt	lt
 80080de:	9b08      	ldrlt	r3, [sp, #32]
 80080e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80080e2:	9608      	strlt	r6, [sp, #32]
 80080e4:	1af3      	sublt	r3, r6, r3
 80080e6:	bfb4      	ite	lt
 80080e8:	18d2      	addlt	r2, r2, r3
 80080ea:	1b9e      	subge	r6, r3, r6
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	bfbc      	itt	lt
 80080f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80080f2:	2600      	movlt	r6, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bfb7      	itett	lt
 80080f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80080fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008100:	1a9d      	sublt	r5, r3, r2
 8008102:	2300      	movlt	r3, #0
 8008104:	e741      	b.n	8007f8a <_dtoa_r+0x742>
 8008106:	9e08      	ldr	r6, [sp, #32]
 8008108:	9d05      	ldr	r5, [sp, #20]
 800810a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800810c:	e748      	b.n	8007fa0 <_dtoa_r+0x758>
 800810e:	9a08      	ldr	r2, [sp, #32]
 8008110:	e770      	b.n	8007ff4 <_dtoa_r+0x7ac>
 8008112:	9b07      	ldr	r3, [sp, #28]
 8008114:	2b01      	cmp	r3, #1
 8008116:	dc19      	bgt.n	800814c <_dtoa_r+0x904>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	b9bb      	cbnz	r3, 800814c <_dtoa_r+0x904>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008122:	b99b      	cbnz	r3, 800814c <_dtoa_r+0x904>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	051b      	lsls	r3, r3, #20
 800812e:	b183      	cbz	r3, 8008152 <_dtoa_r+0x90a>
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	3301      	adds	r3, #1
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	3301      	adds	r3, #1
 800813a:	9306      	str	r3, [sp, #24]
 800813c:	f04f 0801 	mov.w	r8, #1
 8008140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008142:	2b00      	cmp	r3, #0
 8008144:	f47f af6f 	bne.w	8008026 <_dtoa_r+0x7de>
 8008148:	2001      	movs	r0, #1
 800814a:	e774      	b.n	8008036 <_dtoa_r+0x7ee>
 800814c:	f04f 0800 	mov.w	r8, #0
 8008150:	e7f6      	b.n	8008140 <_dtoa_r+0x8f8>
 8008152:	4698      	mov	r8, r3
 8008154:	e7f4      	b.n	8008140 <_dtoa_r+0x8f8>
 8008156:	d082      	beq.n	800805e <_dtoa_r+0x816>
 8008158:	9a05      	ldr	r2, [sp, #20]
 800815a:	331c      	adds	r3, #28
 800815c:	441a      	add	r2, r3
 800815e:	9205      	str	r2, [sp, #20]
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	441a      	add	r2, r3
 8008164:	441d      	add	r5, r3
 8008166:	9206      	str	r2, [sp, #24]
 8008168:	e779      	b.n	800805e <_dtoa_r+0x816>
 800816a:	4603      	mov	r3, r0
 800816c:	e7f4      	b.n	8008158 <_dtoa_r+0x910>
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc37      	bgt.n	80081e4 <_dtoa_r+0x99c>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	2b02      	cmp	r3, #2
 8008178:	dd34      	ble.n	80081e4 <_dtoa_r+0x99c>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	b963      	cbnz	r3, 800819c <_dtoa_r+0x954>
 8008182:	4631      	mov	r1, r6
 8008184:	2205      	movs	r2, #5
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fc6c 	bl	8008a64 <__multadd>
 800818c:	4601      	mov	r1, r0
 800818e:	4606      	mov	r6, r0
 8008190:	4650      	mov	r0, sl
 8008192:	f000 fe81 	bl	8008e98 <__mcmp>
 8008196:	2800      	cmp	r0, #0
 8008198:	f73f adbb 	bgt.w	8007d12 <_dtoa_r+0x4ca>
 800819c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819e:	9d00      	ldr	r5, [sp, #0]
 80081a0:	ea6f 0b03 	mvn.w	fp, r3
 80081a4:	f04f 0800 	mov.w	r8, #0
 80081a8:	4631      	mov	r1, r6
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fc38 	bl	8008a20 <_Bfree>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	f43f aeab 	beq.w	8007f0c <_dtoa_r+0x6c4>
 80081b6:	f1b8 0f00 	cmp.w	r8, #0
 80081ba:	d005      	beq.n	80081c8 <_dtoa_r+0x980>
 80081bc:	45b8      	cmp	r8, r7
 80081be:	d003      	beq.n	80081c8 <_dtoa_r+0x980>
 80081c0:	4641      	mov	r1, r8
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fc2c 	bl	8008a20 <_Bfree>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fc28 	bl	8008a20 <_Bfree>
 80081d0:	e69c      	b.n	8007f0c <_dtoa_r+0x6c4>
 80081d2:	2600      	movs	r6, #0
 80081d4:	4637      	mov	r7, r6
 80081d6:	e7e1      	b.n	800819c <_dtoa_r+0x954>
 80081d8:	46bb      	mov	fp, r7
 80081da:	4637      	mov	r7, r6
 80081dc:	e599      	b.n	8007d12 <_dtoa_r+0x4ca>
 80081de:	bf00      	nop
 80081e0:	40240000 	.word	0x40240000
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80c8 	beq.w	800837c <_dtoa_r+0xb34>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	dd05      	ble.n	8008200 <_dtoa_r+0x9b8>
 80081f4:	4639      	mov	r1, r7
 80081f6:	462a      	mov	r2, r5
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fde1 	bl	8008dc0 <__lshift>
 80081fe:	4607      	mov	r7, r0
 8008200:	f1b8 0f00 	cmp.w	r8, #0
 8008204:	d05b      	beq.n	80082be <_dtoa_r+0xa76>
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fbc9 	bl	80089a0 <_Balloc>
 800820e:	4605      	mov	r5, r0
 8008210:	b928      	cbnz	r0, 800821e <_dtoa_r+0x9d6>
 8008212:	4b83      	ldr	r3, [pc, #524]	; (8008420 <_dtoa_r+0xbd8>)
 8008214:	4602      	mov	r2, r0
 8008216:	f240 21ef 	movw	r1, #751	; 0x2ef
 800821a:	f7ff bb2e 	b.w	800787a <_dtoa_r+0x32>
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	3202      	adds	r2, #2
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	f107 010c 	add.w	r1, r7, #12
 8008228:	300c      	adds	r0, #12
 800822a:	f7ff fa77 	bl	800771c <memcpy>
 800822e:	2201      	movs	r2, #1
 8008230:	4629      	mov	r1, r5
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fdc4 	bl	8008dc0 <__lshift>
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008242:	4413      	add	r3, r2
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	9b02      	ldr	r3, [sp, #8]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	46b8      	mov	r8, r7
 800824e:	9306      	str	r3, [sp, #24]
 8008250:	4607      	mov	r7, r0
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	4631      	mov	r1, r6
 8008256:	3b01      	subs	r3, #1
 8008258:	4650      	mov	r0, sl
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	f7ff fa6c 	bl	8007738 <quorem>
 8008260:	4641      	mov	r1, r8
 8008262:	9002      	str	r0, [sp, #8]
 8008264:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008268:	4650      	mov	r0, sl
 800826a:	f000 fe15 	bl	8008e98 <__mcmp>
 800826e:	463a      	mov	r2, r7
 8008270:	9005      	str	r0, [sp, #20]
 8008272:	4631      	mov	r1, r6
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fe2b 	bl	8008ed0 <__mdiff>
 800827a:	68c2      	ldr	r2, [r0, #12]
 800827c:	4605      	mov	r5, r0
 800827e:	bb02      	cbnz	r2, 80082c2 <_dtoa_r+0xa7a>
 8008280:	4601      	mov	r1, r0
 8008282:	4650      	mov	r0, sl
 8008284:	f000 fe08 	bl	8008e98 <__mcmp>
 8008288:	4602      	mov	r2, r0
 800828a:	4629      	mov	r1, r5
 800828c:	4620      	mov	r0, r4
 800828e:	9209      	str	r2, [sp, #36]	; 0x24
 8008290:	f000 fbc6 	bl	8008a20 <_Bfree>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008298:	9d04      	ldr	r5, [sp, #16]
 800829a:	ea43 0102 	orr.w	r1, r3, r2
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	4319      	orrs	r1, r3
 80082a2:	d110      	bne.n	80082c6 <_dtoa_r+0xa7e>
 80082a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082a8:	d029      	beq.n	80082fe <_dtoa_r+0xab6>
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd02      	ble.n	80082b6 <_dtoa_r+0xa6e>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	f883 9000 	strb.w	r9, [r3]
 80082bc:	e774      	b.n	80081a8 <_dtoa_r+0x960>
 80082be:	4638      	mov	r0, r7
 80082c0:	e7ba      	b.n	8008238 <_dtoa_r+0x9f0>
 80082c2:	2201      	movs	r2, #1
 80082c4:	e7e1      	b.n	800828a <_dtoa_r+0xa42>
 80082c6:	9b05      	ldr	r3, [sp, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db04      	blt.n	80082d6 <_dtoa_r+0xa8e>
 80082cc:	9907      	ldr	r1, [sp, #28]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	9906      	ldr	r1, [sp, #24]
 80082d2:	430b      	orrs	r3, r1
 80082d4:	d120      	bne.n	8008318 <_dtoa_r+0xad0>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	dded      	ble.n	80082b6 <_dtoa_r+0xa6e>
 80082da:	4651      	mov	r1, sl
 80082dc:	2201      	movs	r2, #1
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fd6e 	bl	8008dc0 <__lshift>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4682      	mov	sl, r0
 80082e8:	f000 fdd6 	bl	8008e98 <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	dc03      	bgt.n	80082f8 <_dtoa_r+0xab0>
 80082f0:	d1e1      	bne.n	80082b6 <_dtoa_r+0xa6e>
 80082f2:	f019 0f01 	tst.w	r9, #1
 80082f6:	d0de      	beq.n	80082b6 <_dtoa_r+0xa6e>
 80082f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082fc:	d1d8      	bne.n	80082b0 <_dtoa_r+0xa68>
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	2339      	movs	r3, #57	; 0x39
 8008302:	7013      	strb	r3, [r2, #0]
 8008304:	462b      	mov	r3, r5
 8008306:	461d      	mov	r5, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800830e:	2a39      	cmp	r2, #57	; 0x39
 8008310:	d06c      	beq.n	80083ec <_dtoa_r+0xba4>
 8008312:	3201      	adds	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e747      	b.n	80081a8 <_dtoa_r+0x960>
 8008318:	2a00      	cmp	r2, #0
 800831a:	dd07      	ble.n	800832c <_dtoa_r+0xae4>
 800831c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008320:	d0ed      	beq.n	80082fe <_dtoa_r+0xab6>
 8008322:	9a01      	ldr	r2, [sp, #4]
 8008324:	f109 0301 	add.w	r3, r9, #1
 8008328:	7013      	strb	r3, [r2, #0]
 800832a:	e73d      	b.n	80081a8 <_dtoa_r+0x960>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008334:	4293      	cmp	r3, r2
 8008336:	d043      	beq.n	80083c0 <_dtoa_r+0xb78>
 8008338:	4651      	mov	r1, sl
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fb90 	bl	8008a64 <__multadd>
 8008344:	45b8      	cmp	r8, r7
 8008346:	4682      	mov	sl, r0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f04f 020a 	mov.w	r2, #10
 8008350:	4641      	mov	r1, r8
 8008352:	4620      	mov	r0, r4
 8008354:	d107      	bne.n	8008366 <_dtoa_r+0xb1e>
 8008356:	f000 fb85 	bl	8008a64 <__multadd>
 800835a:	4680      	mov	r8, r0
 800835c:	4607      	mov	r7, r0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	e775      	b.n	8008252 <_dtoa_r+0xa0a>
 8008366:	f000 fb7d 	bl	8008a64 <__multadd>
 800836a:	4639      	mov	r1, r7
 800836c:	4680      	mov	r8, r0
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4620      	mov	r0, r4
 8008374:	f000 fb76 	bl	8008a64 <__multadd>
 8008378:	4607      	mov	r7, r0
 800837a:	e7f0      	b.n	800835e <_dtoa_r+0xb16>
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	9d00      	ldr	r5, [sp, #0]
 8008382:	4631      	mov	r1, r6
 8008384:	4650      	mov	r0, sl
 8008386:	f7ff f9d7 	bl	8007738 <quorem>
 800838a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	f805 9b01 	strb.w	r9, [r5], #1
 8008394:	1aea      	subs	r2, r5, r3
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	4293      	cmp	r3, r2
 800839a:	dd07      	ble.n	80083ac <_dtoa_r+0xb64>
 800839c:	4651      	mov	r1, sl
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fb5e 	bl	8008a64 <__multadd>
 80083a8:	4682      	mov	sl, r0
 80083aa:	e7ea      	b.n	8008382 <_dtoa_r+0xb3a>
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfc8      	it	gt
 80083b2:	461d      	movgt	r5, r3
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	bfd8      	it	le
 80083b8:	2501      	movle	r5, #1
 80083ba:	441d      	add	r5, r3
 80083bc:	f04f 0800 	mov.w	r8, #0
 80083c0:	4651      	mov	r1, sl
 80083c2:	2201      	movs	r2, #1
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fcfb 	bl	8008dc0 <__lshift>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4682      	mov	sl, r0
 80083ce:	f000 fd63 	bl	8008e98 <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dc96      	bgt.n	8008304 <_dtoa_r+0xabc>
 80083d6:	d102      	bne.n	80083de <_dtoa_r+0xb96>
 80083d8:	f019 0f01 	tst.w	r9, #1
 80083dc:	d192      	bne.n	8008304 <_dtoa_r+0xabc>
 80083de:	462b      	mov	r3, r5
 80083e0:	461d      	mov	r5, r3
 80083e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083e6:	2a30      	cmp	r2, #48	; 0x30
 80083e8:	d0fa      	beq.n	80083e0 <_dtoa_r+0xb98>
 80083ea:	e6dd      	b.n	80081a8 <_dtoa_r+0x960>
 80083ec:	9a00      	ldr	r2, [sp, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d189      	bne.n	8008306 <_dtoa_r+0xabe>
 80083f2:	f10b 0b01 	add.w	fp, fp, #1
 80083f6:	2331      	movs	r3, #49	; 0x31
 80083f8:	e796      	b.n	8008328 <_dtoa_r+0xae0>
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <_dtoa_r+0xbdc>)
 80083fc:	f7ff ba99 	b.w	8007932 <_dtoa_r+0xea>
 8008400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008402:	2b00      	cmp	r3, #0
 8008404:	f47f aa6d 	bne.w	80078e2 <_dtoa_r+0x9a>
 8008408:	4b07      	ldr	r3, [pc, #28]	; (8008428 <_dtoa_r+0xbe0>)
 800840a:	f7ff ba92 	b.w	8007932 <_dtoa_r+0xea>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dcb5      	bgt.n	8008380 <_dtoa_r+0xb38>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	2b02      	cmp	r3, #2
 8008418:	f73f aeb1 	bgt.w	800817e <_dtoa_r+0x936>
 800841c:	e7b0      	b.n	8008380 <_dtoa_r+0xb38>
 800841e:	bf00      	nop
 8008420:	0800a17c 	.word	0x0800a17c
 8008424:	0800a0dc 	.word	0x0800a0dc
 8008428:	0800a100 	.word	0x0800a100

0800842c <__ssputs_r>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	688e      	ldr	r6, [r1, #8]
 8008432:	461f      	mov	r7, r3
 8008434:	42be      	cmp	r6, r7
 8008436:	680b      	ldr	r3, [r1, #0]
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	d82c      	bhi.n	800849a <__ssputs_r+0x6e>
 8008440:	898a      	ldrh	r2, [r1, #12]
 8008442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008446:	d026      	beq.n	8008496 <__ssputs_r+0x6a>
 8008448:	6965      	ldr	r5, [r4, #20]
 800844a:	6909      	ldr	r1, [r1, #16]
 800844c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008450:	eba3 0901 	sub.w	r9, r3, r1
 8008454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008458:	1c7b      	adds	r3, r7, #1
 800845a:	444b      	add	r3, r9
 800845c:	106d      	asrs	r5, r5, #1
 800845e:	429d      	cmp	r5, r3
 8008460:	bf38      	it	cc
 8008462:	461d      	movcc	r5, r3
 8008464:	0553      	lsls	r3, r2, #21
 8008466:	d527      	bpl.n	80084b8 <__ssputs_r+0x8c>
 8008468:	4629      	mov	r1, r5
 800846a:	f000 f95f 	bl	800872c <_malloc_r>
 800846e:	4606      	mov	r6, r0
 8008470:	b360      	cbz	r0, 80084cc <__ssputs_r+0xa0>
 8008472:	6921      	ldr	r1, [r4, #16]
 8008474:	464a      	mov	r2, r9
 8008476:	f7ff f951 	bl	800771c <memcpy>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	6126      	str	r6, [r4, #16]
 8008488:	6165      	str	r5, [r4, #20]
 800848a:	444e      	add	r6, r9
 800848c:	eba5 0509 	sub.w	r5, r5, r9
 8008490:	6026      	str	r6, [r4, #0]
 8008492:	60a5      	str	r5, [r4, #8]
 8008494:	463e      	mov	r6, r7
 8008496:	42be      	cmp	r6, r7
 8008498:	d900      	bls.n	800849c <__ssputs_r+0x70>
 800849a:	463e      	mov	r6, r7
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	4632      	mov	r2, r6
 80084a0:	4641      	mov	r1, r8
 80084a2:	f000 fe6b 	bl	800917c <memmove>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	1b9b      	subs	r3, r3, r6
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	4433      	add	r3, r6
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	2000      	movs	r0, #0
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	462a      	mov	r2, r5
 80084ba:	f000 fe30 	bl	800911e <_realloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1e0      	bne.n	8008486 <__ssputs_r+0x5a>
 80084c4:	6921      	ldr	r1, [r4, #16]
 80084c6:	4650      	mov	r0, sl
 80084c8:	f000 fefc 	bl	80092c4 <_free_r>
 80084cc:	230c      	movs	r3, #12
 80084ce:	f8ca 3000 	str.w	r3, [sl]
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084de:	e7e9      	b.n	80084b4 <__ssputs_r+0x88>

080084e0 <_svfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4698      	mov	r8, r3
 80084e6:	898b      	ldrh	r3, [r1, #12]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	b09d      	sub	sp, #116	; 0x74
 80084ec:	4607      	mov	r7, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	d50e      	bpl.n	8008512 <_svfiprintf_r+0x32>
 80084f4:	690b      	ldr	r3, [r1, #16]
 80084f6:	b963      	cbnz	r3, 8008512 <_svfiprintf_r+0x32>
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	f000 f917 	bl	800872c <_malloc_r>
 80084fe:	6028      	str	r0, [r5, #0]
 8008500:	6128      	str	r0, [r5, #16]
 8008502:	b920      	cbnz	r0, 800850e <_svfiprintf_r+0x2e>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850c:	e0d0      	b.n	80086b0 <_svfiprintf_r+0x1d0>
 800850e:	2340      	movs	r3, #64	; 0x40
 8008510:	616b      	str	r3, [r5, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	9309      	str	r3, [sp, #36]	; 0x24
 8008516:	2320      	movs	r3, #32
 8008518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086c8 <_svfiprintf_r+0x1e8>
 8008526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852a:	f04f 0901 	mov.w	r9, #1
 800852e:	4623      	mov	r3, r4
 8008530:	469a      	mov	sl, r3
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	b10a      	cbz	r2, 800853c <_svfiprintf_r+0x5c>
 8008538:	2a25      	cmp	r2, #37	; 0x25
 800853a:	d1f9      	bne.n	8008530 <_svfiprintf_r+0x50>
 800853c:	ebba 0b04 	subs.w	fp, sl, r4
 8008540:	d00b      	beq.n	800855a <_svfiprintf_r+0x7a>
 8008542:	465b      	mov	r3, fp
 8008544:	4622      	mov	r2, r4
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff6f 	bl	800842c <__ssputs_r>
 800854e:	3001      	adds	r0, #1
 8008550:	f000 80a9 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008556:	445a      	add	r2, fp
 8008558:	9209      	str	r2, [sp, #36]	; 0x24
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80a1 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008564:	2300      	movs	r3, #0
 8008566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856e:	f10a 0a01 	add.w	sl, sl, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857a:	931a      	str	r3, [sp, #104]	; 0x68
 800857c:	4654      	mov	r4, sl
 800857e:	2205      	movs	r2, #5
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	4850      	ldr	r0, [pc, #320]	; (80086c8 <_svfiprintf_r+0x1e8>)
 8008586:	f7f7 fe2b 	bl	80001e0 <memchr>
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	b9d8      	cbnz	r0, 80085c6 <_svfiprintf_r+0xe6>
 800858e:	06d0      	lsls	r0, r2, #27
 8008590:	bf44      	itt	mi
 8008592:	2320      	movmi	r3, #32
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008598:	0711      	lsls	r1, r2, #28
 800859a:	bf44      	itt	mi
 800859c:	232b      	movmi	r3, #43	; 0x2b
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b2a      	cmp	r3, #42	; 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xf6>
 80085aa:	9a07      	ldr	r2, [sp, #28]
 80085ac:	4654      	mov	r4, sl
 80085ae:	2000      	movs	r0, #0
 80085b0:	f04f 0c0a 	mov.w	ip, #10
 80085b4:	4621      	mov	r1, r4
 80085b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d94d      	bls.n	800865c <_svfiprintf_r+0x17c>
 80085c0:	b1b0      	cbz	r0, 80085f0 <_svfiprintf_r+0x110>
 80085c2:	9207      	str	r2, [sp, #28]
 80085c4:	e014      	b.n	80085f0 <_svfiprintf_r+0x110>
 80085c6:	eba0 0308 	sub.w	r3, r0, r8
 80085ca:	fa09 f303 	lsl.w	r3, r9, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	46a2      	mov	sl, r4
 80085d4:	e7d2      	b.n	800857c <_svfiprintf_r+0x9c>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbb      	ittet	lt
 80085e2:	425b      	neglt	r3, r3
 80085e4:	f042 0202 	orrlt.w	r2, r2, #2
 80085e8:	9307      	strge	r3, [sp, #28]
 80085ea:	9307      	strlt	r3, [sp, #28]
 80085ec:	bfb8      	it	lt
 80085ee:	9204      	strlt	r2, [sp, #16]
 80085f0:	7823      	ldrb	r3, [r4, #0]
 80085f2:	2b2e      	cmp	r3, #46	; 0x2e
 80085f4:	d10c      	bne.n	8008610 <_svfiprintf_r+0x130>
 80085f6:	7863      	ldrb	r3, [r4, #1]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d134      	bne.n	8008666 <_svfiprintf_r+0x186>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9203      	str	r2, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb8      	it	lt
 8008608:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800860c:	3402      	adds	r4, #2
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086d8 <_svfiprintf_r+0x1f8>
 8008614:	7821      	ldrb	r1, [r4, #0]
 8008616:	2203      	movs	r2, #3
 8008618:	4650      	mov	r0, sl
 800861a:	f7f7 fde1 	bl	80001e0 <memchr>
 800861e:	b138      	cbz	r0, 8008630 <_svfiprintf_r+0x150>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	eba0 000a 	sub.w	r0, r0, sl
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	4082      	lsls	r2, r0
 800862a:	4313      	orrs	r3, r2
 800862c:	3401      	adds	r4, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4825      	ldr	r0, [pc, #148]	; (80086cc <_svfiprintf_r+0x1ec>)
 8008636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863a:	2206      	movs	r2, #6
 800863c:	f7f7 fdd0 	bl	80001e0 <memchr>
 8008640:	2800      	cmp	r0, #0
 8008642:	d038      	beq.n	80086b6 <_svfiprintf_r+0x1d6>
 8008644:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <_svfiprintf_r+0x1f0>)
 8008646:	bb1b      	cbnz	r3, 8008690 <_svfiprintf_r+0x1b0>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	3307      	adds	r3, #7
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	4433      	add	r3, r6
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	e768      	b.n	800852e <_svfiprintf_r+0x4e>
 800865c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008660:	460c      	mov	r4, r1
 8008662:	2001      	movs	r0, #1
 8008664:	e7a6      	b.n	80085b4 <_svfiprintf_r+0xd4>
 8008666:	2300      	movs	r3, #0
 8008668:	3401      	adds	r4, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	4619      	mov	r1, r3
 800866e:	f04f 0c0a 	mov.w	ip, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008678:	3a30      	subs	r2, #48	; 0x30
 800867a:	2a09      	cmp	r2, #9
 800867c:	d903      	bls.n	8008686 <_svfiprintf_r+0x1a6>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c6      	beq.n	8008610 <_svfiprintf_r+0x130>
 8008682:	9105      	str	r1, [sp, #20]
 8008684:	e7c4      	b.n	8008610 <_svfiprintf_r+0x130>
 8008686:	fb0c 2101 	mla	r1, ip, r1, r2
 800868a:	4604      	mov	r4, r0
 800868c:	2301      	movs	r3, #1
 800868e:	e7f0      	b.n	8008672 <_svfiprintf_r+0x192>
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	462a      	mov	r2, r5
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <_svfiprintf_r+0x1f4>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4638      	mov	r0, r7
 800869c:	f7fe fb70 	bl	8006d80 <_printf_float>
 80086a0:	1c42      	adds	r2, r0, #1
 80086a2:	4606      	mov	r6, r0
 80086a4:	d1d6      	bne.n	8008654 <_svfiprintf_r+0x174>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	065b      	lsls	r3, r3, #25
 80086aa:	f53f af2d 	bmi.w	8008508 <_svfiprintf_r+0x28>
 80086ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b0:	b01d      	add	sp, #116	; 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_svfiprintf_r+0x1f4>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7fe fe01 	bl	80072c8 <_printf_i>
 80086c6:	e7eb      	b.n	80086a0 <_svfiprintf_r+0x1c0>
 80086c8:	0800a18d 	.word	0x0800a18d
 80086cc:	0800a197 	.word	0x0800a197
 80086d0:	08006d81 	.word	0x08006d81
 80086d4:	0800842d 	.word	0x0800842d
 80086d8:	0800a193 	.word	0x0800a193

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b823 	b.w	800872c <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	20000184 	.word	0x20000184

080086ec <sbrk_aligned>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4e0e      	ldr	r6, [pc, #56]	; (8008728 <sbrk_aligned+0x3c>)
 80086f0:	460c      	mov	r4, r1
 80086f2:	6831      	ldr	r1, [r6, #0]
 80086f4:	4605      	mov	r5, r0
 80086f6:	b911      	cbnz	r1, 80086fe <sbrk_aligned+0x12>
 80086f8:	f000 fd8e 	bl	8009218 <_sbrk_r>
 80086fc:	6030      	str	r0, [r6, #0]
 80086fe:	4621      	mov	r1, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f000 fd89 	bl	8009218 <_sbrk_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d00a      	beq.n	8008720 <sbrk_aligned+0x34>
 800870a:	1cc4      	adds	r4, r0, #3
 800870c:	f024 0403 	bic.w	r4, r4, #3
 8008710:	42a0      	cmp	r0, r4
 8008712:	d007      	beq.n	8008724 <sbrk_aligned+0x38>
 8008714:	1a21      	subs	r1, r4, r0
 8008716:	4628      	mov	r0, r5
 8008718:	f000 fd7e 	bl	8009218 <_sbrk_r>
 800871c:	3001      	adds	r0, #1
 800871e:	d101      	bne.n	8008724 <sbrk_aligned+0x38>
 8008720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008724:	4620      	mov	r0, r4
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	200054c4 	.word	0x200054c4

0800872c <_malloc_r>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	1ccd      	adds	r5, r1, #3
 8008732:	f025 0503 	bic.w	r5, r5, #3
 8008736:	3508      	adds	r5, #8
 8008738:	2d0c      	cmp	r5, #12
 800873a:	bf38      	it	cc
 800873c:	250c      	movcc	r5, #12
 800873e:	2d00      	cmp	r5, #0
 8008740:	4607      	mov	r7, r0
 8008742:	db01      	blt.n	8008748 <_malloc_r+0x1c>
 8008744:	42a9      	cmp	r1, r5
 8008746:	d905      	bls.n	8008754 <_malloc_r+0x28>
 8008748:	230c      	movs	r3, #12
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	2600      	movs	r6, #0
 800874e:	4630      	mov	r0, r6
 8008750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008828 <_malloc_r+0xfc>
 8008758:	f000 f916 	bl	8008988 <__malloc_lock>
 800875c:	f8d8 3000 	ldr.w	r3, [r8]
 8008760:	461c      	mov	r4, r3
 8008762:	bb5c      	cbnz	r4, 80087bc <_malloc_r+0x90>
 8008764:	4629      	mov	r1, r5
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ffc0 	bl	80086ec <sbrk_aligned>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	4604      	mov	r4, r0
 8008770:	d155      	bne.n	800881e <_malloc_r+0xf2>
 8008772:	f8d8 4000 	ldr.w	r4, [r8]
 8008776:	4626      	mov	r6, r4
 8008778:	2e00      	cmp	r6, #0
 800877a:	d145      	bne.n	8008808 <_malloc_r+0xdc>
 800877c:	2c00      	cmp	r4, #0
 800877e:	d048      	beq.n	8008812 <_malloc_r+0xe6>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	4631      	mov	r1, r6
 8008784:	4638      	mov	r0, r7
 8008786:	eb04 0903 	add.w	r9, r4, r3
 800878a:	f000 fd45 	bl	8009218 <_sbrk_r>
 800878e:	4581      	cmp	r9, r0
 8008790:	d13f      	bne.n	8008812 <_malloc_r+0xe6>
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	1a6d      	subs	r5, r5, r1
 8008796:	4629      	mov	r1, r5
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff ffa7 	bl	80086ec <sbrk_aligned>
 800879e:	3001      	adds	r0, #1
 80087a0:	d037      	beq.n	8008812 <_malloc_r+0xe6>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	442b      	add	r3, r5
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d038      	beq.n	8008822 <_malloc_r+0xf6>
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	42a2      	cmp	r2, r4
 80087b4:	d12b      	bne.n	800880e <_malloc_r+0xe2>
 80087b6:	2200      	movs	r2, #0
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	e00f      	b.n	80087dc <_malloc_r+0xb0>
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	1b52      	subs	r2, r2, r5
 80087c0:	d41f      	bmi.n	8008802 <_malloc_r+0xd6>
 80087c2:	2a0b      	cmp	r2, #11
 80087c4:	d917      	bls.n	80087f6 <_malloc_r+0xca>
 80087c6:	1961      	adds	r1, r4, r5
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	6025      	str	r5, [r4, #0]
 80087cc:	bf18      	it	ne
 80087ce:	6059      	strne	r1, [r3, #4]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	bf08      	it	eq
 80087d4:	f8c8 1000 	streq.w	r1, [r8]
 80087d8:	5162      	str	r2, [r4, r5]
 80087da:	604b      	str	r3, [r1, #4]
 80087dc:	4638      	mov	r0, r7
 80087de:	f104 060b 	add.w	r6, r4, #11
 80087e2:	f000 f8d7 	bl	8008994 <__malloc_unlock>
 80087e6:	f026 0607 	bic.w	r6, r6, #7
 80087ea:	1d23      	adds	r3, r4, #4
 80087ec:	1af2      	subs	r2, r6, r3
 80087ee:	d0ae      	beq.n	800874e <_malloc_r+0x22>
 80087f0:	1b9b      	subs	r3, r3, r6
 80087f2:	50a3      	str	r3, [r4, r2]
 80087f4:	e7ab      	b.n	800874e <_malloc_r+0x22>
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	d1dd      	bne.n	80087b8 <_malloc_r+0x8c>
 80087fc:	f8c8 2000 	str.w	r2, [r8]
 8008800:	e7ec      	b.n	80087dc <_malloc_r+0xb0>
 8008802:	4623      	mov	r3, r4
 8008804:	6864      	ldr	r4, [r4, #4]
 8008806:	e7ac      	b.n	8008762 <_malloc_r+0x36>
 8008808:	4634      	mov	r4, r6
 800880a:	6876      	ldr	r6, [r6, #4]
 800880c:	e7b4      	b.n	8008778 <_malloc_r+0x4c>
 800880e:	4613      	mov	r3, r2
 8008810:	e7cc      	b.n	80087ac <_malloc_r+0x80>
 8008812:	230c      	movs	r3, #12
 8008814:	603b      	str	r3, [r7, #0]
 8008816:	4638      	mov	r0, r7
 8008818:	f000 f8bc 	bl	8008994 <__malloc_unlock>
 800881c:	e797      	b.n	800874e <_malloc_r+0x22>
 800881e:	6025      	str	r5, [r4, #0]
 8008820:	e7dc      	b.n	80087dc <_malloc_r+0xb0>
 8008822:	605b      	str	r3, [r3, #4]
 8008824:	deff      	udf	#255	; 0xff
 8008826:	bf00      	nop
 8008828:	200054c0 	.word	0x200054c0

0800882c <__sflush_r>:
 800882c:	898a      	ldrh	r2, [r1, #12]
 800882e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	0710      	lsls	r0, r2, #28
 8008836:	460c      	mov	r4, r1
 8008838:	d458      	bmi.n	80088ec <__sflush_r+0xc0>
 800883a:	684b      	ldr	r3, [r1, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	dc05      	bgt.n	800884c <__sflush_r+0x20>
 8008840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	dc02      	bgt.n	800884c <__sflush_r+0x20>
 8008846:	2000      	movs	r0, #0
 8008848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800884c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800884e:	2e00      	cmp	r6, #0
 8008850:	d0f9      	beq.n	8008846 <__sflush_r+0x1a>
 8008852:	2300      	movs	r3, #0
 8008854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008858:	682f      	ldr	r7, [r5, #0]
 800885a:	6a21      	ldr	r1, [r4, #32]
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	d032      	beq.n	80088c6 <__sflush_r+0x9a>
 8008860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	075a      	lsls	r2, r3, #29
 8008866:	d505      	bpl.n	8008874 <__sflush_r+0x48>
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	1ac0      	subs	r0, r0, r3
 800886c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800886e:	b10b      	cbz	r3, 8008874 <__sflush_r+0x48>
 8008870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008872:	1ac0      	subs	r0, r0, r3
 8008874:	2300      	movs	r3, #0
 8008876:	4602      	mov	r2, r0
 8008878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	4628      	mov	r0, r5
 800887e:	47b0      	blx	r6
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	d106      	bne.n	8008894 <__sflush_r+0x68>
 8008886:	6829      	ldr	r1, [r5, #0]
 8008888:	291d      	cmp	r1, #29
 800888a:	d82b      	bhi.n	80088e4 <__sflush_r+0xb8>
 800888c:	4a29      	ldr	r2, [pc, #164]	; (8008934 <__sflush_r+0x108>)
 800888e:	410a      	asrs	r2, r1
 8008890:	07d6      	lsls	r6, r2, #31
 8008892:	d427      	bmi.n	80088e4 <__sflush_r+0xb8>
 8008894:	2200      	movs	r2, #0
 8008896:	6062      	str	r2, [r4, #4]
 8008898:	04d9      	lsls	r1, r3, #19
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	6022      	str	r2, [r4, #0]
 800889e:	d504      	bpl.n	80088aa <__sflush_r+0x7e>
 80088a0:	1c42      	adds	r2, r0, #1
 80088a2:	d101      	bne.n	80088a8 <__sflush_r+0x7c>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b903      	cbnz	r3, 80088aa <__sflush_r+0x7e>
 80088a8:	6560      	str	r0, [r4, #84]	; 0x54
 80088aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ac:	602f      	str	r7, [r5, #0]
 80088ae:	2900      	cmp	r1, #0
 80088b0:	d0c9      	beq.n	8008846 <__sflush_r+0x1a>
 80088b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088b6:	4299      	cmp	r1, r3
 80088b8:	d002      	beq.n	80088c0 <__sflush_r+0x94>
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 fd02 	bl	80092c4 <_free_r>
 80088c0:	2000      	movs	r0, #0
 80088c2:	6360      	str	r0, [r4, #52]	; 0x34
 80088c4:	e7c0      	b.n	8008848 <__sflush_r+0x1c>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4628      	mov	r0, r5
 80088ca:	47b0      	blx	r6
 80088cc:	1c41      	adds	r1, r0, #1
 80088ce:	d1c8      	bne.n	8008862 <__sflush_r+0x36>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0c5      	beq.n	8008862 <__sflush_r+0x36>
 80088d6:	2b1d      	cmp	r3, #29
 80088d8:	d001      	beq.n	80088de <__sflush_r+0xb2>
 80088da:	2b16      	cmp	r3, #22
 80088dc:	d101      	bne.n	80088e2 <__sflush_r+0xb6>
 80088de:	602f      	str	r7, [r5, #0]
 80088e0:	e7b1      	b.n	8008846 <__sflush_r+0x1a>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	e7ad      	b.n	8008848 <__sflush_r+0x1c>
 80088ec:	690f      	ldr	r7, [r1, #16]
 80088ee:	2f00      	cmp	r7, #0
 80088f0:	d0a9      	beq.n	8008846 <__sflush_r+0x1a>
 80088f2:	0793      	lsls	r3, r2, #30
 80088f4:	680e      	ldr	r6, [r1, #0]
 80088f6:	bf08      	it	eq
 80088f8:	694b      	ldreq	r3, [r1, #20]
 80088fa:	600f      	str	r7, [r1, #0]
 80088fc:	bf18      	it	ne
 80088fe:	2300      	movne	r3, #0
 8008900:	eba6 0807 	sub.w	r8, r6, r7
 8008904:	608b      	str	r3, [r1, #8]
 8008906:	f1b8 0f00 	cmp.w	r8, #0
 800890a:	dd9c      	ble.n	8008846 <__sflush_r+0x1a>
 800890c:	6a21      	ldr	r1, [r4, #32]
 800890e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008910:	4643      	mov	r3, r8
 8008912:	463a      	mov	r2, r7
 8008914:	4628      	mov	r0, r5
 8008916:	47b0      	blx	r6
 8008918:	2800      	cmp	r0, #0
 800891a:	dc06      	bgt.n	800892a <__sflush_r+0xfe>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008928:	e78e      	b.n	8008848 <__sflush_r+0x1c>
 800892a:	4407      	add	r7, r0
 800892c:	eba8 0800 	sub.w	r8, r8, r0
 8008930:	e7e9      	b.n	8008906 <__sflush_r+0xda>
 8008932:	bf00      	nop
 8008934:	dfbffffe 	.word	0xdfbffffe

08008938 <_fflush_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	690b      	ldr	r3, [r1, #16]
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
 8008940:	b913      	cbnz	r3, 8008948 <_fflush_r+0x10>
 8008942:	2500      	movs	r5, #0
 8008944:	4628      	mov	r0, r5
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	b118      	cbz	r0, 8008952 <_fflush_r+0x1a>
 800894a:	6a03      	ldr	r3, [r0, #32]
 800894c:	b90b      	cbnz	r3, 8008952 <_fflush_r+0x1a>
 800894e:	f7fe fe57 	bl	8007600 <__sinit>
 8008952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f3      	beq.n	8008942 <_fflush_r+0xa>
 800895a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800895c:	07d0      	lsls	r0, r2, #31
 800895e:	d404      	bmi.n	800896a <_fflush_r+0x32>
 8008960:	0599      	lsls	r1, r3, #22
 8008962:	d402      	bmi.n	800896a <_fflush_r+0x32>
 8008964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008966:	f7fe fed7 	bl	8007718 <__retarget_lock_acquire_recursive>
 800896a:	4628      	mov	r0, r5
 800896c:	4621      	mov	r1, r4
 800896e:	f7ff ff5d 	bl	800882c <__sflush_r>
 8008972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008974:	07da      	lsls	r2, r3, #31
 8008976:	4605      	mov	r5, r0
 8008978:	d4e4      	bmi.n	8008944 <_fflush_r+0xc>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	059b      	lsls	r3, r3, #22
 800897e:	d4e1      	bmi.n	8008944 <_fflush_r+0xc>
 8008980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008982:	f7fe feca 	bl	800771a <__retarget_lock_release_recursive>
 8008986:	e7dd      	b.n	8008944 <_fflush_r+0xc>

08008988 <__malloc_lock>:
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <__malloc_lock+0x8>)
 800898a:	f7fe bec5 	b.w	8007718 <__retarget_lock_acquire_recursive>
 800898e:	bf00      	nop
 8008990:	200054bc 	.word	0x200054bc

08008994 <__malloc_unlock>:
 8008994:	4801      	ldr	r0, [pc, #4]	; (800899c <__malloc_unlock+0x8>)
 8008996:	f7fe bec0 	b.w	800771a <__retarget_lock_release_recursive>
 800899a:	bf00      	nop
 800899c:	200054bc 	.word	0x200054bc

080089a0 <_Balloc>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	69c6      	ldr	r6, [r0, #28]
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	b976      	cbnz	r6, 80089c8 <_Balloc+0x28>
 80089aa:	2010      	movs	r0, #16
 80089ac:	f7ff fe96 	bl	80086dc <malloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	61e0      	str	r0, [r4, #28]
 80089b4:	b920      	cbnz	r0, 80089c0 <_Balloc+0x20>
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <_Balloc+0x78>)
 80089b8:	4818      	ldr	r0, [pc, #96]	; (8008a1c <_Balloc+0x7c>)
 80089ba:	216b      	movs	r1, #107	; 0x6b
 80089bc:	f000 fc4e 	bl	800925c <__assert_func>
 80089c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c4:	6006      	str	r6, [r0, #0]
 80089c6:	60c6      	str	r6, [r0, #12]
 80089c8:	69e6      	ldr	r6, [r4, #28]
 80089ca:	68f3      	ldr	r3, [r6, #12]
 80089cc:	b183      	cbz	r3, 80089f0 <_Balloc+0x50>
 80089ce:	69e3      	ldr	r3, [r4, #28]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089d6:	b9b8      	cbnz	r0, 8008a08 <_Balloc+0x68>
 80089d8:	2101      	movs	r1, #1
 80089da:	fa01 f605 	lsl.w	r6, r1, r5
 80089de:	1d72      	adds	r2, r6, #5
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fc58 	bl	8009298 <_calloc_r>
 80089e8:	b160      	cbz	r0, 8008a04 <_Balloc+0x64>
 80089ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089ee:	e00e      	b.n	8008a0e <_Balloc+0x6e>
 80089f0:	2221      	movs	r2, #33	; 0x21
 80089f2:	2104      	movs	r1, #4
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fc4f 	bl	8009298 <_calloc_r>
 80089fa:	69e3      	ldr	r3, [r4, #28]
 80089fc:	60f0      	str	r0, [r6, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e4      	bne.n	80089ce <_Balloc+0x2e>
 8008a04:	2000      	movs	r0, #0
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	6802      	ldr	r2, [r0, #0]
 8008a0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a14:	e7f7      	b.n	8008a06 <_Balloc+0x66>
 8008a16:	bf00      	nop
 8008a18:	0800a10d 	.word	0x0800a10d
 8008a1c:	0800a19e 	.word	0x0800a19e

08008a20 <_Bfree>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	69c6      	ldr	r6, [r0, #28]
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	b976      	cbnz	r6, 8008a48 <_Bfree+0x28>
 8008a2a:	2010      	movs	r0, #16
 8008a2c:	f7ff fe56 	bl	80086dc <malloc>
 8008a30:	4602      	mov	r2, r0
 8008a32:	61e8      	str	r0, [r5, #28]
 8008a34:	b920      	cbnz	r0, 8008a40 <_Bfree+0x20>
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <_Bfree+0x3c>)
 8008a38:	4809      	ldr	r0, [pc, #36]	; (8008a60 <_Bfree+0x40>)
 8008a3a:	218f      	movs	r1, #143	; 0x8f
 8008a3c:	f000 fc0e 	bl	800925c <__assert_func>
 8008a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a44:	6006      	str	r6, [r0, #0]
 8008a46:	60c6      	str	r6, [r0, #12]
 8008a48:	b13c      	cbz	r4, 8008a5a <_Bfree+0x3a>
 8008a4a:	69eb      	ldr	r3, [r5, #28]
 8008a4c:	6862      	ldr	r2, [r4, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a54:	6021      	str	r1, [r4, #0]
 8008a56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	0800a10d 	.word	0x0800a10d
 8008a60:	0800a19e 	.word	0x0800a19e

08008a64 <__multadd>:
 8008a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a68:	690d      	ldr	r5, [r1, #16]
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	461e      	mov	r6, r3
 8008a70:	f101 0c14 	add.w	ip, r1, #20
 8008a74:	2000      	movs	r0, #0
 8008a76:	f8dc 3000 	ldr.w	r3, [ip]
 8008a7a:	b299      	uxth	r1, r3
 8008a7c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a80:	0c1e      	lsrs	r6, r3, #16
 8008a82:	0c0b      	lsrs	r3, r1, #16
 8008a84:	fb02 3306 	mla	r3, r2, r6, r3
 8008a88:	b289      	uxth	r1, r1
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a90:	4285      	cmp	r5, r0
 8008a92:	f84c 1b04 	str.w	r1, [ip], #4
 8008a96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a9a:	dcec      	bgt.n	8008a76 <__multadd+0x12>
 8008a9c:	b30e      	cbz	r6, 8008ae2 <__multadd+0x7e>
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	42ab      	cmp	r3, r5
 8008aa2:	dc19      	bgt.n	8008ad8 <__multadd+0x74>
 8008aa4:	6861      	ldr	r1, [r4, #4]
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	3101      	adds	r1, #1
 8008aaa:	f7ff ff79 	bl	80089a0 <_Balloc>
 8008aae:	4680      	mov	r8, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <__multadd+0x5a>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <__multadd+0x84>)
 8008ab6:	480d      	ldr	r0, [pc, #52]	; (8008aec <__multadd+0x88>)
 8008ab8:	21ba      	movs	r1, #186	; 0xba
 8008aba:	f000 fbcf 	bl	800925c <__assert_func>
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	3202      	adds	r2, #2
 8008ac2:	f104 010c 	add.w	r1, r4, #12
 8008ac6:	0092      	lsls	r2, r2, #2
 8008ac8:	300c      	adds	r0, #12
 8008aca:	f7fe fe27 	bl	800771c <memcpy>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ffa5 	bl	8008a20 <_Bfree>
 8008ad6:	4644      	mov	r4, r8
 8008ad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008adc:	3501      	adds	r5, #1
 8008ade:	615e      	str	r6, [r3, #20]
 8008ae0:	6125      	str	r5, [r4, #16]
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	0800a17c 	.word	0x0800a17c
 8008aec:	0800a19e 	.word	0x0800a19e

08008af0 <__hi0bits>:
 8008af0:	0c03      	lsrs	r3, r0, #16
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	b9d3      	cbnz	r3, 8008b2c <__hi0bits+0x3c>
 8008af6:	0400      	lsls	r0, r0, #16
 8008af8:	2310      	movs	r3, #16
 8008afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008afe:	bf04      	itt	eq
 8008b00:	0200      	lsleq	r0, r0, #8
 8008b02:	3308      	addeq	r3, #8
 8008b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b08:	bf04      	itt	eq
 8008b0a:	0100      	lsleq	r0, r0, #4
 8008b0c:	3304      	addeq	r3, #4
 8008b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b12:	bf04      	itt	eq
 8008b14:	0080      	lsleq	r0, r0, #2
 8008b16:	3302      	addeq	r3, #2
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	db05      	blt.n	8008b28 <__hi0bits+0x38>
 8008b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b20:	f103 0301 	add.w	r3, r3, #1
 8008b24:	bf08      	it	eq
 8008b26:	2320      	moveq	r3, #32
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4770      	bx	lr
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7e4      	b.n	8008afa <__hi0bits+0xa>

08008b30 <__lo0bits>:
 8008b30:	6803      	ldr	r3, [r0, #0]
 8008b32:	f013 0207 	ands.w	r2, r3, #7
 8008b36:	d00c      	beq.n	8008b52 <__lo0bits+0x22>
 8008b38:	07d9      	lsls	r1, r3, #31
 8008b3a:	d422      	bmi.n	8008b82 <__lo0bits+0x52>
 8008b3c:	079a      	lsls	r2, r3, #30
 8008b3e:	bf49      	itett	mi
 8008b40:	085b      	lsrmi	r3, r3, #1
 8008b42:	089b      	lsrpl	r3, r3, #2
 8008b44:	6003      	strmi	r3, [r0, #0]
 8008b46:	2201      	movmi	r2, #1
 8008b48:	bf5c      	itt	pl
 8008b4a:	6003      	strpl	r3, [r0, #0]
 8008b4c:	2202      	movpl	r2, #2
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4770      	bx	lr
 8008b52:	b299      	uxth	r1, r3
 8008b54:	b909      	cbnz	r1, 8008b5a <__lo0bits+0x2a>
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	2210      	movs	r2, #16
 8008b5a:	b2d9      	uxtb	r1, r3
 8008b5c:	b909      	cbnz	r1, 8008b62 <__lo0bits+0x32>
 8008b5e:	3208      	adds	r2, #8
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	0719      	lsls	r1, r3, #28
 8008b64:	bf04      	itt	eq
 8008b66:	091b      	lsreq	r3, r3, #4
 8008b68:	3204      	addeq	r2, #4
 8008b6a:	0799      	lsls	r1, r3, #30
 8008b6c:	bf04      	itt	eq
 8008b6e:	089b      	lsreq	r3, r3, #2
 8008b70:	3202      	addeq	r2, #2
 8008b72:	07d9      	lsls	r1, r3, #31
 8008b74:	d403      	bmi.n	8008b7e <__lo0bits+0x4e>
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	f102 0201 	add.w	r2, r2, #1
 8008b7c:	d003      	beq.n	8008b86 <__lo0bits+0x56>
 8008b7e:	6003      	str	r3, [r0, #0]
 8008b80:	e7e5      	b.n	8008b4e <__lo0bits+0x1e>
 8008b82:	2200      	movs	r2, #0
 8008b84:	e7e3      	b.n	8008b4e <__lo0bits+0x1e>
 8008b86:	2220      	movs	r2, #32
 8008b88:	e7e1      	b.n	8008b4e <__lo0bits+0x1e>
	...

08008b8c <__i2b>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2101      	movs	r1, #1
 8008b92:	f7ff ff05 	bl	80089a0 <_Balloc>
 8008b96:	4602      	mov	r2, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <__i2b+0x1a>
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <__i2b+0x24>)
 8008b9c:	4805      	ldr	r0, [pc, #20]	; (8008bb4 <__i2b+0x28>)
 8008b9e:	f240 1145 	movw	r1, #325	; 0x145
 8008ba2:	f000 fb5b 	bl	800925c <__assert_func>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6144      	str	r4, [r0, #20]
 8008baa:	6103      	str	r3, [r0, #16]
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	bf00      	nop
 8008bb0:	0800a17c 	.word	0x0800a17c
 8008bb4:	0800a19e 	.word	0x0800a19e

08008bb8 <__multiply>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4691      	mov	r9, r2
 8008bbe:	690a      	ldr	r2, [r1, #16]
 8008bc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bfb8      	it	lt
 8008bc8:	460b      	movlt	r3, r1
 8008bca:	460c      	mov	r4, r1
 8008bcc:	bfbc      	itt	lt
 8008bce:	464c      	movlt	r4, r9
 8008bd0:	4699      	movlt	r9, r3
 8008bd2:	6927      	ldr	r7, [r4, #16]
 8008bd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	eb07 060a 	add.w	r6, r7, sl
 8008be0:	42b3      	cmp	r3, r6
 8008be2:	b085      	sub	sp, #20
 8008be4:	bfb8      	it	lt
 8008be6:	3101      	addlt	r1, #1
 8008be8:	f7ff feda 	bl	80089a0 <_Balloc>
 8008bec:	b930      	cbnz	r0, 8008bfc <__multiply+0x44>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	4b44      	ldr	r3, [pc, #272]	; (8008d04 <__multiply+0x14c>)
 8008bf2:	4845      	ldr	r0, [pc, #276]	; (8008d08 <__multiply+0x150>)
 8008bf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008bf8:	f000 fb30 	bl	800925c <__assert_func>
 8008bfc:	f100 0514 	add.w	r5, r0, #20
 8008c00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c04:	462b      	mov	r3, r5
 8008c06:	2200      	movs	r2, #0
 8008c08:	4543      	cmp	r3, r8
 8008c0a:	d321      	bcc.n	8008c50 <__multiply+0x98>
 8008c0c:	f104 0314 	add.w	r3, r4, #20
 8008c10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c14:	f109 0314 	add.w	r3, r9, #20
 8008c18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	1b3a      	subs	r2, r7, r4
 8008c20:	3a15      	subs	r2, #21
 8008c22:	f022 0203 	bic.w	r2, r2, #3
 8008c26:	3204      	adds	r2, #4
 8008c28:	f104 0115 	add.w	r1, r4, #21
 8008c2c:	428f      	cmp	r7, r1
 8008c2e:	bf38      	it	cc
 8008c30:	2204      	movcc	r2, #4
 8008c32:	9201      	str	r2, [sp, #4]
 8008c34:	9a02      	ldr	r2, [sp, #8]
 8008c36:	9303      	str	r3, [sp, #12]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d80c      	bhi.n	8008c56 <__multiply+0x9e>
 8008c3c:	2e00      	cmp	r6, #0
 8008c3e:	dd03      	ble.n	8008c48 <__multiply+0x90>
 8008c40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d05b      	beq.n	8008d00 <__multiply+0x148>
 8008c48:	6106      	str	r6, [r0, #16]
 8008c4a:	b005      	add	sp, #20
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	f843 2b04 	str.w	r2, [r3], #4
 8008c54:	e7d8      	b.n	8008c08 <__multiply+0x50>
 8008c56:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c5a:	f1ba 0f00 	cmp.w	sl, #0
 8008c5e:	d024      	beq.n	8008caa <__multiply+0xf2>
 8008c60:	f104 0e14 	add.w	lr, r4, #20
 8008c64:	46a9      	mov	r9, r5
 8008c66:	f04f 0c00 	mov.w	ip, #0
 8008c6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c6e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c72:	fa1f fb82 	uxth.w	fp, r2
 8008c76:	b289      	uxth	r1, r1
 8008c78:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c80:	f8d9 2000 	ldr.w	r2, [r9]
 8008c84:	4461      	add	r1, ip
 8008c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c92:	b289      	uxth	r1, r1
 8008c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c98:	4577      	cmp	r7, lr
 8008c9a:	f849 1b04 	str.w	r1, [r9], #4
 8008c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ca2:	d8e2      	bhi.n	8008c6a <__multiply+0xb2>
 8008ca4:	9a01      	ldr	r2, [sp, #4]
 8008ca6:	f845 c002 	str.w	ip, [r5, r2]
 8008caa:	9a03      	ldr	r2, [sp, #12]
 8008cac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	f1b9 0f00 	cmp.w	r9, #0
 8008cb6:	d021      	beq.n	8008cfc <__multiply+0x144>
 8008cb8:	6829      	ldr	r1, [r5, #0]
 8008cba:	f104 0c14 	add.w	ip, r4, #20
 8008cbe:	46ae      	mov	lr, r5
 8008cc0:	f04f 0a00 	mov.w	sl, #0
 8008cc4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ccc:	fb09 220b 	mla	r2, r9, fp, r2
 8008cd0:	4452      	add	r2, sl
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cd8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ce0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ce4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ce8:	fb09 110a 	mla	r1, r9, sl, r1
 8008cec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008cf0:	4567      	cmp	r7, ip
 8008cf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf6:	d8e5      	bhi.n	8008cc4 <__multiply+0x10c>
 8008cf8:	9a01      	ldr	r2, [sp, #4]
 8008cfa:	50a9      	str	r1, [r5, r2]
 8008cfc:	3504      	adds	r5, #4
 8008cfe:	e799      	b.n	8008c34 <__multiply+0x7c>
 8008d00:	3e01      	subs	r6, #1
 8008d02:	e79b      	b.n	8008c3c <__multiply+0x84>
 8008d04:	0800a17c 	.word	0x0800a17c
 8008d08:	0800a19e 	.word	0x0800a19e

08008d0c <__pow5mult>:
 8008d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	4615      	mov	r5, r2
 8008d12:	f012 0203 	ands.w	r2, r2, #3
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	d007      	beq.n	8008d2c <__pow5mult+0x20>
 8008d1c:	4c25      	ldr	r4, [pc, #148]	; (8008db4 <__pow5mult+0xa8>)
 8008d1e:	3a01      	subs	r2, #1
 8008d20:	2300      	movs	r3, #0
 8008d22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d26:	f7ff fe9d 	bl	8008a64 <__multadd>
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	10ad      	asrs	r5, r5, #2
 8008d2e:	d03d      	beq.n	8008dac <__pow5mult+0xa0>
 8008d30:	69f4      	ldr	r4, [r6, #28]
 8008d32:	b97c      	cbnz	r4, 8008d54 <__pow5mult+0x48>
 8008d34:	2010      	movs	r0, #16
 8008d36:	f7ff fcd1 	bl	80086dc <malloc>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	61f0      	str	r0, [r6, #28]
 8008d3e:	b928      	cbnz	r0, 8008d4c <__pow5mult+0x40>
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <__pow5mult+0xac>)
 8008d42:	481e      	ldr	r0, [pc, #120]	; (8008dbc <__pow5mult+0xb0>)
 8008d44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d48:	f000 fa88 	bl	800925c <__assert_func>
 8008d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d50:	6004      	str	r4, [r0, #0]
 8008d52:	60c4      	str	r4, [r0, #12]
 8008d54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d5c:	b94c      	cbnz	r4, 8008d72 <__pow5mult+0x66>
 8008d5e:	f240 2171 	movw	r1, #625	; 0x271
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ff12 	bl	8008b8c <__i2b>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d6e:	4604      	mov	r4, r0
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	07eb      	lsls	r3, r5, #31
 8008d78:	d50a      	bpl.n	8008d90 <__pow5mult+0x84>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff ff1a 	bl	8008bb8 <__multiply>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4680      	mov	r8, r0
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff fe49 	bl	8008a20 <_Bfree>
 8008d8e:	4647      	mov	r7, r8
 8008d90:	106d      	asrs	r5, r5, #1
 8008d92:	d00b      	beq.n	8008dac <__pow5mult+0xa0>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	b938      	cbnz	r0, 8008da8 <__pow5mult+0x9c>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ff0b 	bl	8008bb8 <__multiply>
 8008da2:	6020      	str	r0, [r4, #0]
 8008da4:	f8c0 9000 	str.w	r9, [r0]
 8008da8:	4604      	mov	r4, r0
 8008daa:	e7e4      	b.n	8008d76 <__pow5mult+0x6a>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db2:	bf00      	nop
 8008db4:	0800a2e8 	.word	0x0800a2e8
 8008db8:	0800a10d 	.word	0x0800a10d
 8008dbc:	0800a19e 	.word	0x0800a19e

08008dc0 <__lshift>:
 8008dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	6849      	ldr	r1, [r1, #4]
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	4691      	mov	r9, r2
 8008dd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dd8:	f108 0601 	add.w	r6, r8, #1
 8008ddc:	42b3      	cmp	r3, r6
 8008dde:	db0b      	blt.n	8008df8 <__lshift+0x38>
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff fddd 	bl	80089a0 <_Balloc>
 8008de6:	4605      	mov	r5, r0
 8008de8:	b948      	cbnz	r0, 8008dfe <__lshift+0x3e>
 8008dea:	4602      	mov	r2, r0
 8008dec:	4b28      	ldr	r3, [pc, #160]	; (8008e90 <__lshift+0xd0>)
 8008dee:	4829      	ldr	r0, [pc, #164]	; (8008e94 <__lshift+0xd4>)
 8008df0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008df4:	f000 fa32 	bl	800925c <__assert_func>
 8008df8:	3101      	adds	r1, #1
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	e7ee      	b.n	8008ddc <__lshift+0x1c>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f100 0114 	add.w	r1, r0, #20
 8008e04:	f100 0210 	add.w	r2, r0, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4553      	cmp	r3, sl
 8008e0c:	db33      	blt.n	8008e76 <__lshift+0xb6>
 8008e0e:	6920      	ldr	r0, [r4, #16]
 8008e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e14:	f104 0314 	add.w	r3, r4, #20
 8008e18:	f019 091f 	ands.w	r9, r9, #31
 8008e1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e24:	d02b      	beq.n	8008e7e <__lshift+0xbe>
 8008e26:	f1c9 0e20 	rsb	lr, r9, #32
 8008e2a:	468a      	mov	sl, r1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	fa00 f009 	lsl.w	r0, r0, r9
 8008e34:	4310      	orrs	r0, r2
 8008e36:	f84a 0b04 	str.w	r0, [sl], #4
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	459c      	cmp	ip, r3
 8008e40:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e44:	d8f3      	bhi.n	8008e2e <__lshift+0x6e>
 8008e46:	ebac 0304 	sub.w	r3, ip, r4
 8008e4a:	3b15      	subs	r3, #21
 8008e4c:	f023 0303 	bic.w	r3, r3, #3
 8008e50:	3304      	adds	r3, #4
 8008e52:	f104 0015 	add.w	r0, r4, #21
 8008e56:	4584      	cmp	ip, r0
 8008e58:	bf38      	it	cc
 8008e5a:	2304      	movcc	r3, #4
 8008e5c:	50ca      	str	r2, [r1, r3]
 8008e5e:	b10a      	cbz	r2, 8008e64 <__lshift+0xa4>
 8008e60:	f108 0602 	add.w	r6, r8, #2
 8008e64:	3e01      	subs	r6, #1
 8008e66:	4638      	mov	r0, r7
 8008e68:	612e      	str	r6, [r5, #16]
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f7ff fdd8 	bl	8008a20 <_Bfree>
 8008e70:	4628      	mov	r0, r5
 8008e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e76:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	e7c5      	b.n	8008e0a <__lshift+0x4a>
 8008e7e:	3904      	subs	r1, #4
 8008e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e84:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e88:	459c      	cmp	ip, r3
 8008e8a:	d8f9      	bhi.n	8008e80 <__lshift+0xc0>
 8008e8c:	e7ea      	b.n	8008e64 <__lshift+0xa4>
 8008e8e:	bf00      	nop
 8008e90:	0800a17c 	.word	0x0800a17c
 8008e94:	0800a19e 	.word	0x0800a19e

08008e98 <__mcmp>:
 8008e98:	b530      	push	{r4, r5, lr}
 8008e9a:	6902      	ldr	r2, [r0, #16]
 8008e9c:	690c      	ldr	r4, [r1, #16]
 8008e9e:	1b12      	subs	r2, r2, r4
 8008ea0:	d10e      	bne.n	8008ec0 <__mcmp+0x28>
 8008ea2:	f100 0314 	add.w	r3, r0, #20
 8008ea6:	3114      	adds	r1, #20
 8008ea8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008eac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008eb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008eb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d003      	beq.n	8008ec4 <__mcmp+0x2c>
 8008ebc:	d305      	bcc.n	8008eca <__mcmp+0x32>
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	bd30      	pop	{r4, r5, pc}
 8008ec4:	4283      	cmp	r3, r0
 8008ec6:	d3f3      	bcc.n	8008eb0 <__mcmp+0x18>
 8008ec8:	e7fa      	b.n	8008ec0 <__mcmp+0x28>
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ece:	e7f7      	b.n	8008ec0 <__mcmp+0x28>

08008ed0 <__mdiff>:
 8008ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4620      	mov	r0, r4
 8008edc:	4690      	mov	r8, r2
 8008ede:	f7ff ffdb 	bl	8008e98 <__mcmp>
 8008ee2:	1e05      	subs	r5, r0, #0
 8008ee4:	d110      	bne.n	8008f08 <__mdiff+0x38>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff fd59 	bl	80089a0 <_Balloc>
 8008eee:	b930      	cbnz	r0, 8008efe <__mdiff+0x2e>
 8008ef0:	4b3a      	ldr	r3, [pc, #232]	; (8008fdc <__mdiff+0x10c>)
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	f240 2137 	movw	r1, #567	; 0x237
 8008ef8:	4839      	ldr	r0, [pc, #228]	; (8008fe0 <__mdiff+0x110>)
 8008efa:	f000 f9af 	bl	800925c <__assert_func>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	bfa4      	itt	ge
 8008f0a:	4643      	movge	r3, r8
 8008f0c:	46a0      	movge	r8, r4
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f14:	bfa6      	itte	ge
 8008f16:	461c      	movge	r4, r3
 8008f18:	2500      	movge	r5, #0
 8008f1a:	2501      	movlt	r5, #1
 8008f1c:	f7ff fd40 	bl	80089a0 <_Balloc>
 8008f20:	b920      	cbnz	r0, 8008f2c <__mdiff+0x5c>
 8008f22:	4b2e      	ldr	r3, [pc, #184]	; (8008fdc <__mdiff+0x10c>)
 8008f24:	4602      	mov	r2, r0
 8008f26:	f240 2145 	movw	r1, #581	; 0x245
 8008f2a:	e7e5      	b.n	8008ef8 <__mdiff+0x28>
 8008f2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f30:	6926      	ldr	r6, [r4, #16]
 8008f32:	60c5      	str	r5, [r0, #12]
 8008f34:	f104 0914 	add.w	r9, r4, #20
 8008f38:	f108 0514 	add.w	r5, r8, #20
 8008f3c:	f100 0e14 	add.w	lr, r0, #20
 8008f40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f48:	f108 0210 	add.w	r2, r8, #16
 8008f4c:	46f2      	mov	sl, lr
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f58:	fa11 f88b 	uxtah	r8, r1, fp
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	eba8 0801 	sub.w	r8, r8, r1
 8008f64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f6c:	fa1f f888 	uxth.w	r8, r8
 8008f70:	1419      	asrs	r1, r3, #16
 8008f72:	454e      	cmp	r6, r9
 8008f74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f78:	f84a 3b04 	str.w	r3, [sl], #4
 8008f7c:	d8e8      	bhi.n	8008f50 <__mdiff+0x80>
 8008f7e:	1b33      	subs	r3, r6, r4
 8008f80:	3b15      	subs	r3, #21
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	3304      	adds	r3, #4
 8008f88:	3415      	adds	r4, #21
 8008f8a:	42a6      	cmp	r6, r4
 8008f8c:	bf38      	it	cc
 8008f8e:	2304      	movcc	r3, #4
 8008f90:	441d      	add	r5, r3
 8008f92:	4473      	add	r3, lr
 8008f94:	469e      	mov	lr, r3
 8008f96:	462e      	mov	r6, r5
 8008f98:	4566      	cmp	r6, ip
 8008f9a:	d30e      	bcc.n	8008fba <__mdiff+0xea>
 8008f9c:	f10c 0203 	add.w	r2, ip, #3
 8008fa0:	1b52      	subs	r2, r2, r5
 8008fa2:	f022 0203 	bic.w	r2, r2, #3
 8008fa6:	3d03      	subs	r5, #3
 8008fa8:	45ac      	cmp	ip, r5
 8008faa:	bf38      	it	cc
 8008fac:	2200      	movcc	r2, #0
 8008fae:	4413      	add	r3, r2
 8008fb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fb4:	b17a      	cbz	r2, 8008fd6 <__mdiff+0x106>
 8008fb6:	6107      	str	r7, [r0, #16]
 8008fb8:	e7a4      	b.n	8008f04 <__mdiff+0x34>
 8008fba:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fbe:	fa11 f288 	uxtah	r2, r1, r8
 8008fc2:	1414      	asrs	r4, r2, #16
 8008fc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fc8:	b292      	uxth	r2, r2
 8008fca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fce:	f84e 2b04 	str.w	r2, [lr], #4
 8008fd2:	1421      	asrs	r1, r4, #16
 8008fd4:	e7e0      	b.n	8008f98 <__mdiff+0xc8>
 8008fd6:	3f01      	subs	r7, #1
 8008fd8:	e7ea      	b.n	8008fb0 <__mdiff+0xe0>
 8008fda:	bf00      	nop
 8008fdc:	0800a17c 	.word	0x0800a17c
 8008fe0:	0800a19e 	.word	0x0800a19e

08008fe4 <__d2b>:
 8008fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fe8:	460f      	mov	r7, r1
 8008fea:	2101      	movs	r1, #1
 8008fec:	ec59 8b10 	vmov	r8, r9, d0
 8008ff0:	4616      	mov	r6, r2
 8008ff2:	f7ff fcd5 	bl	80089a0 <_Balloc>
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	b930      	cbnz	r0, 8009008 <__d2b+0x24>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b24      	ldr	r3, [pc, #144]	; (8009090 <__d2b+0xac>)
 8008ffe:	4825      	ldr	r0, [pc, #148]	; (8009094 <__d2b+0xb0>)
 8009000:	f240 310f 	movw	r1, #783	; 0x30f
 8009004:	f000 f92a 	bl	800925c <__assert_func>
 8009008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800900c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009010:	bb2d      	cbnz	r5, 800905e <__d2b+0x7a>
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	f1b8 0300 	subs.w	r3, r8, #0
 8009018:	d026      	beq.n	8009068 <__d2b+0x84>
 800901a:	4668      	mov	r0, sp
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	f7ff fd87 	bl	8008b30 <__lo0bits>
 8009022:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009026:	b1e8      	cbz	r0, 8009064 <__d2b+0x80>
 8009028:	f1c0 0320 	rsb	r3, r0, #32
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	430b      	orrs	r3, r1
 8009032:	40c2      	lsrs	r2, r0
 8009034:	6163      	str	r3, [r4, #20]
 8009036:	9201      	str	r2, [sp, #4]
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	61a3      	str	r3, [r4, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bf14      	ite	ne
 8009040:	2202      	movne	r2, #2
 8009042:	2201      	moveq	r2, #1
 8009044:	6122      	str	r2, [r4, #16]
 8009046:	b1bd      	cbz	r5, 8009078 <__d2b+0x94>
 8009048:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800904c:	4405      	add	r5, r0
 800904e:	603d      	str	r5, [r7, #0]
 8009050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009054:	6030      	str	r0, [r6, #0]
 8009056:	4620      	mov	r0, r4
 8009058:	b003      	add	sp, #12
 800905a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800905e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009062:	e7d6      	b.n	8009012 <__d2b+0x2e>
 8009064:	6161      	str	r1, [r4, #20]
 8009066:	e7e7      	b.n	8009038 <__d2b+0x54>
 8009068:	a801      	add	r0, sp, #4
 800906a:	f7ff fd61 	bl	8008b30 <__lo0bits>
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	6163      	str	r3, [r4, #20]
 8009072:	3020      	adds	r0, #32
 8009074:	2201      	movs	r2, #1
 8009076:	e7e5      	b.n	8009044 <__d2b+0x60>
 8009078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800907c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009080:	6038      	str	r0, [r7, #0]
 8009082:	6918      	ldr	r0, [r3, #16]
 8009084:	f7ff fd34 	bl	8008af0 <__hi0bits>
 8009088:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800908c:	e7e2      	b.n	8009054 <__d2b+0x70>
 800908e:	bf00      	nop
 8009090:	0800a17c 	.word	0x0800a17c
 8009094:	0800a19e 	.word	0x0800a19e

08009098 <__sread>:
 8009098:	b510      	push	{r4, lr}
 800909a:	460c      	mov	r4, r1
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	f000 f8a8 	bl	80091f4 <_read_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	bfab      	itete	ge
 80090a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090aa:	89a3      	ldrhlt	r3, [r4, #12]
 80090ac:	181b      	addge	r3, r3, r0
 80090ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090b2:	bfac      	ite	ge
 80090b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090b6:	81a3      	strhlt	r3, [r4, #12]
 80090b8:	bd10      	pop	{r4, pc}

080090ba <__swrite>:
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	461f      	mov	r7, r3
 80090c0:	898b      	ldrh	r3, [r1, #12]
 80090c2:	05db      	lsls	r3, r3, #23
 80090c4:	4605      	mov	r5, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	4616      	mov	r6, r2
 80090ca:	d505      	bpl.n	80090d8 <__swrite+0x1e>
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	2302      	movs	r3, #2
 80090d2:	2200      	movs	r2, #0
 80090d4:	f000 f87c 	bl	80091d0 <_lseek_r>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	f000 b8a3 	b.w	8009238 <_write_r>

080090f2 <__sseek>:
 80090f2:	b510      	push	{r4, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fa:	f000 f869 	bl	80091d0 <_lseek_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	bf15      	itete	ne
 8009104:	6560      	strne	r0, [r4, #84]	; 0x54
 8009106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800910a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800910e:	81a3      	strheq	r3, [r4, #12]
 8009110:	bf18      	it	ne
 8009112:	81a3      	strhne	r3, [r4, #12]
 8009114:	bd10      	pop	{r4, pc}

08009116 <__sclose>:
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	f000 b849 	b.w	80091b0 <_close_r>

0800911e <_realloc_r>:
 800911e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	4680      	mov	r8, r0
 8009124:	4614      	mov	r4, r2
 8009126:	460e      	mov	r6, r1
 8009128:	b921      	cbnz	r1, 8009134 <_realloc_r+0x16>
 800912a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800912e:	4611      	mov	r1, r2
 8009130:	f7ff bafc 	b.w	800872c <_malloc_r>
 8009134:	b92a      	cbnz	r2, 8009142 <_realloc_r+0x24>
 8009136:	f000 f8c5 	bl	80092c4 <_free_r>
 800913a:	4625      	mov	r5, r4
 800913c:	4628      	mov	r0, r5
 800913e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009142:	f000 f91d 	bl	8009380 <_malloc_usable_size_r>
 8009146:	4284      	cmp	r4, r0
 8009148:	4607      	mov	r7, r0
 800914a:	d802      	bhi.n	8009152 <_realloc_r+0x34>
 800914c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009150:	d812      	bhi.n	8009178 <_realloc_r+0x5a>
 8009152:	4621      	mov	r1, r4
 8009154:	4640      	mov	r0, r8
 8009156:	f7ff fae9 	bl	800872c <_malloc_r>
 800915a:	4605      	mov	r5, r0
 800915c:	2800      	cmp	r0, #0
 800915e:	d0ed      	beq.n	800913c <_realloc_r+0x1e>
 8009160:	42bc      	cmp	r4, r7
 8009162:	4622      	mov	r2, r4
 8009164:	4631      	mov	r1, r6
 8009166:	bf28      	it	cs
 8009168:	463a      	movcs	r2, r7
 800916a:	f7fe fad7 	bl	800771c <memcpy>
 800916e:	4631      	mov	r1, r6
 8009170:	4640      	mov	r0, r8
 8009172:	f000 f8a7 	bl	80092c4 <_free_r>
 8009176:	e7e1      	b.n	800913c <_realloc_r+0x1e>
 8009178:	4635      	mov	r5, r6
 800917a:	e7df      	b.n	800913c <_realloc_r+0x1e>

0800917c <memmove>:
 800917c:	4288      	cmp	r0, r1
 800917e:	b510      	push	{r4, lr}
 8009180:	eb01 0402 	add.w	r4, r1, r2
 8009184:	d902      	bls.n	800918c <memmove+0x10>
 8009186:	4284      	cmp	r4, r0
 8009188:	4623      	mov	r3, r4
 800918a:	d807      	bhi.n	800919c <memmove+0x20>
 800918c:	1e43      	subs	r3, r0, #1
 800918e:	42a1      	cmp	r1, r4
 8009190:	d008      	beq.n	80091a4 <memmove+0x28>
 8009192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800919a:	e7f8      	b.n	800918e <memmove+0x12>
 800919c:	4402      	add	r2, r0
 800919e:	4601      	mov	r1, r0
 80091a0:	428a      	cmp	r2, r1
 80091a2:	d100      	bne.n	80091a6 <memmove+0x2a>
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ae:	e7f7      	b.n	80091a0 <memmove+0x24>

080091b0 <_close_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d06      	ldr	r5, [pc, #24]	; (80091cc <_close_r+0x1c>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	602b      	str	r3, [r5, #0]
 80091bc:	f7f9 fb7d 	bl	80028ba <_close>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_close_r+0x1a>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_close_r+0x1a>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	200054c8 	.word	0x200054c8

080091d0 <_lseek_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_lseek_r+0x20>)
 80091d4:	4604      	mov	r4, r0
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	2200      	movs	r2, #0
 80091dc:	602a      	str	r2, [r5, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f7f9 fb92 	bl	8002908 <_lseek>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_lseek_r+0x1e>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_lseek_r+0x1e>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	200054c8 	.word	0x200054c8

080091f4 <_read_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_read_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f9 fb20 	bl	8002848 <_read>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_read_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_read_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	200054c8 	.word	0x200054c8

08009218 <_sbrk_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d06      	ldr	r5, [pc, #24]	; (8009234 <_sbrk_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7f9 fb7e 	bl	8002924 <_sbrk>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_sbrk_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_sbrk_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	200054c8 	.word	0x200054c8

08009238 <_write_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d07      	ldr	r5, [pc, #28]	; (8009258 <_write_r+0x20>)
 800923c:	4604      	mov	r4, r0
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	2200      	movs	r2, #0
 8009244:	602a      	str	r2, [r5, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	f7f9 fb1b 	bl	8002882 <_write>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_write_r+0x1e>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_write_r+0x1e>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	200054c8 	.word	0x200054c8

0800925c <__assert_func>:
 800925c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800925e:	4614      	mov	r4, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <__assert_func+0x2c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	68d8      	ldr	r0, [r3, #12]
 800926a:	b14c      	cbz	r4, 8009280 <__assert_func+0x24>
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <__assert_func+0x30>)
 800926e:	9100      	str	r1, [sp, #0]
 8009270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009274:	4906      	ldr	r1, [pc, #24]	; (8009290 <__assert_func+0x34>)
 8009276:	462b      	mov	r3, r5
 8009278:	f000 f88a 	bl	8009390 <fiprintf>
 800927c:	f000 f8a7 	bl	80093ce <abort>
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <__assert_func+0x38>)
 8009282:	461c      	mov	r4, r3
 8009284:	e7f3      	b.n	800926e <__assert_func+0x12>
 8009286:	bf00      	nop
 8009288:	20000184 	.word	0x20000184
 800928c:	0800a3ff 	.word	0x0800a3ff
 8009290:	0800a40c 	.word	0x0800a40c
 8009294:	0800a43a 	.word	0x0800a43a

08009298 <_calloc_r>:
 8009298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800929a:	fba1 2402 	umull	r2, r4, r1, r2
 800929e:	b94c      	cbnz	r4, 80092b4 <_calloc_r+0x1c>
 80092a0:	4611      	mov	r1, r2
 80092a2:	9201      	str	r2, [sp, #4]
 80092a4:	f7ff fa42 	bl	800872c <_malloc_r>
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	4605      	mov	r5, r0
 80092ac:	b930      	cbnz	r0, 80092bc <_calloc_r+0x24>
 80092ae:	4628      	mov	r0, r5
 80092b0:	b003      	add	sp, #12
 80092b2:	bd30      	pop	{r4, r5, pc}
 80092b4:	220c      	movs	r2, #12
 80092b6:	6002      	str	r2, [r0, #0]
 80092b8:	2500      	movs	r5, #0
 80092ba:	e7f8      	b.n	80092ae <_calloc_r+0x16>
 80092bc:	4621      	mov	r1, r4
 80092be:	f7fe f9f5 	bl	80076ac <memset>
 80092c2:	e7f4      	b.n	80092ae <_calloc_r+0x16>

080092c4 <_free_r>:
 80092c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d044      	beq.n	8009354 <_free_r+0x90>
 80092ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ce:	9001      	str	r0, [sp, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f1a1 0404 	sub.w	r4, r1, #4
 80092d6:	bfb8      	it	lt
 80092d8:	18e4      	addlt	r4, r4, r3
 80092da:	f7ff fb55 	bl	8008988 <__malloc_lock>
 80092de:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <_free_r+0x94>)
 80092e0:	9801      	ldr	r0, [sp, #4]
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	b933      	cbnz	r3, 80092f4 <_free_r+0x30>
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	6014      	str	r4, [r2, #0]
 80092ea:	b003      	add	sp, #12
 80092ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f0:	f7ff bb50 	b.w	8008994 <__malloc_unlock>
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	d908      	bls.n	800930a <_free_r+0x46>
 80092f8:	6825      	ldr	r5, [r4, #0]
 80092fa:	1961      	adds	r1, r4, r5
 80092fc:	428b      	cmp	r3, r1
 80092fe:	bf01      	itttt	eq
 8009300:	6819      	ldreq	r1, [r3, #0]
 8009302:	685b      	ldreq	r3, [r3, #4]
 8009304:	1949      	addeq	r1, r1, r5
 8009306:	6021      	streq	r1, [r4, #0]
 8009308:	e7ed      	b.n	80092e6 <_free_r+0x22>
 800930a:	461a      	mov	r2, r3
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	b10b      	cbz	r3, 8009314 <_free_r+0x50>
 8009310:	42a3      	cmp	r3, r4
 8009312:	d9fa      	bls.n	800930a <_free_r+0x46>
 8009314:	6811      	ldr	r1, [r2, #0]
 8009316:	1855      	adds	r5, r2, r1
 8009318:	42a5      	cmp	r5, r4
 800931a:	d10b      	bne.n	8009334 <_free_r+0x70>
 800931c:	6824      	ldr	r4, [r4, #0]
 800931e:	4421      	add	r1, r4
 8009320:	1854      	adds	r4, r2, r1
 8009322:	42a3      	cmp	r3, r4
 8009324:	6011      	str	r1, [r2, #0]
 8009326:	d1e0      	bne.n	80092ea <_free_r+0x26>
 8009328:	681c      	ldr	r4, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	6053      	str	r3, [r2, #4]
 800932e:	440c      	add	r4, r1
 8009330:	6014      	str	r4, [r2, #0]
 8009332:	e7da      	b.n	80092ea <_free_r+0x26>
 8009334:	d902      	bls.n	800933c <_free_r+0x78>
 8009336:	230c      	movs	r3, #12
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	e7d6      	b.n	80092ea <_free_r+0x26>
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	1961      	adds	r1, r4, r5
 8009340:	428b      	cmp	r3, r1
 8009342:	bf04      	itt	eq
 8009344:	6819      	ldreq	r1, [r3, #0]
 8009346:	685b      	ldreq	r3, [r3, #4]
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	bf04      	itt	eq
 800934c:	1949      	addeq	r1, r1, r5
 800934e:	6021      	streq	r1, [r4, #0]
 8009350:	6054      	str	r4, [r2, #4]
 8009352:	e7ca      	b.n	80092ea <_free_r+0x26>
 8009354:	b003      	add	sp, #12
 8009356:	bd30      	pop	{r4, r5, pc}
 8009358:	200054c0 	.word	0x200054c0

0800935c <__ascii_mbtowc>:
 800935c:	b082      	sub	sp, #8
 800935e:	b901      	cbnz	r1, 8009362 <__ascii_mbtowc+0x6>
 8009360:	a901      	add	r1, sp, #4
 8009362:	b142      	cbz	r2, 8009376 <__ascii_mbtowc+0x1a>
 8009364:	b14b      	cbz	r3, 800937a <__ascii_mbtowc+0x1e>
 8009366:	7813      	ldrb	r3, [r2, #0]
 8009368:	600b      	str	r3, [r1, #0]
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	1e10      	subs	r0, r2, #0
 800936e:	bf18      	it	ne
 8009370:	2001      	movne	r0, #1
 8009372:	b002      	add	sp, #8
 8009374:	4770      	bx	lr
 8009376:	4610      	mov	r0, r2
 8009378:	e7fb      	b.n	8009372 <__ascii_mbtowc+0x16>
 800937a:	f06f 0001 	mvn.w	r0, #1
 800937e:	e7f8      	b.n	8009372 <__ascii_mbtowc+0x16>

08009380 <_malloc_usable_size_r>:
 8009380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009384:	1f18      	subs	r0, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfbc      	itt	lt
 800938a:	580b      	ldrlt	r3, [r1, r0]
 800938c:	18c0      	addlt	r0, r0, r3
 800938e:	4770      	bx	lr

08009390 <fiprintf>:
 8009390:	b40e      	push	{r1, r2, r3}
 8009392:	b503      	push	{r0, r1, lr}
 8009394:	4601      	mov	r1, r0
 8009396:	ab03      	add	r3, sp, #12
 8009398:	4805      	ldr	r0, [pc, #20]	; (80093b0 <fiprintf+0x20>)
 800939a:	f853 2b04 	ldr.w	r2, [r3], #4
 800939e:	6800      	ldr	r0, [r0, #0]
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	f000 f845 	bl	8009430 <_vfiprintf_r>
 80093a6:	b002      	add	sp, #8
 80093a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ac:	b003      	add	sp, #12
 80093ae:	4770      	bx	lr
 80093b0:	20000184 	.word	0x20000184

080093b4 <__ascii_wctomb>:
 80093b4:	b149      	cbz	r1, 80093ca <__ascii_wctomb+0x16>
 80093b6:	2aff      	cmp	r2, #255	; 0xff
 80093b8:	bf85      	ittet	hi
 80093ba:	238a      	movhi	r3, #138	; 0x8a
 80093bc:	6003      	strhi	r3, [r0, #0]
 80093be:	700a      	strbls	r2, [r1, #0]
 80093c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80093c4:	bf98      	it	ls
 80093c6:	2001      	movls	r0, #1
 80093c8:	4770      	bx	lr
 80093ca:	4608      	mov	r0, r1
 80093cc:	4770      	bx	lr

080093ce <abort>:
 80093ce:	b508      	push	{r3, lr}
 80093d0:	2006      	movs	r0, #6
 80093d2:	f000 fa89 	bl	80098e8 <raise>
 80093d6:	2001      	movs	r0, #1
 80093d8:	f7f9 fa2c 	bl	8002834 <_exit>

080093dc <__sfputc_r>:
 80093dc:	6893      	ldr	r3, [r2, #8]
 80093de:	3b01      	subs	r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	b410      	push	{r4}
 80093e4:	6093      	str	r3, [r2, #8]
 80093e6:	da08      	bge.n	80093fa <__sfputc_r+0x1e>
 80093e8:	6994      	ldr	r4, [r2, #24]
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	db01      	blt.n	80093f2 <__sfputc_r+0x16>
 80093ee:	290a      	cmp	r1, #10
 80093f0:	d103      	bne.n	80093fa <__sfputc_r+0x1e>
 80093f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093f6:	f000 b935 	b.w	8009664 <__swbuf_r>
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	1c58      	adds	r0, r3, #1
 80093fe:	6010      	str	r0, [r2, #0]
 8009400:	7019      	strb	r1, [r3, #0]
 8009402:	4608      	mov	r0, r1
 8009404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009408:	4770      	bx	lr

0800940a <__sfputs_r>:
 800940a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	4614      	mov	r4, r2
 8009412:	18d5      	adds	r5, r2, r3
 8009414:	42ac      	cmp	r4, r5
 8009416:	d101      	bne.n	800941c <__sfputs_r+0x12>
 8009418:	2000      	movs	r0, #0
 800941a:	e007      	b.n	800942c <__sfputs_r+0x22>
 800941c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009420:	463a      	mov	r2, r7
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ffda 	bl	80093dc <__sfputc_r>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d1f3      	bne.n	8009414 <__sfputs_r+0xa>
 800942c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009430 <_vfiprintf_r>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	460d      	mov	r5, r1
 8009436:	b09d      	sub	sp, #116	; 0x74
 8009438:	4614      	mov	r4, r2
 800943a:	4698      	mov	r8, r3
 800943c:	4606      	mov	r6, r0
 800943e:	b118      	cbz	r0, 8009448 <_vfiprintf_r+0x18>
 8009440:	6a03      	ldr	r3, [r0, #32]
 8009442:	b90b      	cbnz	r3, 8009448 <_vfiprintf_r+0x18>
 8009444:	f7fe f8dc 	bl	8007600 <__sinit>
 8009448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944a:	07d9      	lsls	r1, r3, #31
 800944c:	d405      	bmi.n	800945a <_vfiprintf_r+0x2a>
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	059a      	lsls	r2, r3, #22
 8009452:	d402      	bmi.n	800945a <_vfiprintf_r+0x2a>
 8009454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009456:	f7fe f95f 	bl	8007718 <__retarget_lock_acquire_recursive>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	071b      	lsls	r3, r3, #28
 800945e:	d501      	bpl.n	8009464 <_vfiprintf_r+0x34>
 8009460:	692b      	ldr	r3, [r5, #16]
 8009462:	b99b      	cbnz	r3, 800948c <_vfiprintf_r+0x5c>
 8009464:	4629      	mov	r1, r5
 8009466:	4630      	mov	r0, r6
 8009468:	f000 f93a 	bl	80096e0 <__swsetup_r>
 800946c:	b170      	cbz	r0, 800948c <_vfiprintf_r+0x5c>
 800946e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009470:	07dc      	lsls	r4, r3, #31
 8009472:	d504      	bpl.n	800947e <_vfiprintf_r+0x4e>
 8009474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009478:	b01d      	add	sp, #116	; 0x74
 800947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	0598      	lsls	r0, r3, #22
 8009482:	d4f7      	bmi.n	8009474 <_vfiprintf_r+0x44>
 8009484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009486:	f7fe f948 	bl	800771a <__retarget_lock_release_recursive>
 800948a:	e7f3      	b.n	8009474 <_vfiprintf_r+0x44>
 800948c:	2300      	movs	r3, #0
 800948e:	9309      	str	r3, [sp, #36]	; 0x24
 8009490:	2320      	movs	r3, #32
 8009492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009496:	f8cd 800c 	str.w	r8, [sp, #12]
 800949a:	2330      	movs	r3, #48	; 0x30
 800949c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009650 <_vfiprintf_r+0x220>
 80094a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a4:	f04f 0901 	mov.w	r9, #1
 80094a8:	4623      	mov	r3, r4
 80094aa:	469a      	mov	sl, r3
 80094ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b0:	b10a      	cbz	r2, 80094b6 <_vfiprintf_r+0x86>
 80094b2:	2a25      	cmp	r2, #37	; 0x25
 80094b4:	d1f9      	bne.n	80094aa <_vfiprintf_r+0x7a>
 80094b6:	ebba 0b04 	subs.w	fp, sl, r4
 80094ba:	d00b      	beq.n	80094d4 <_vfiprintf_r+0xa4>
 80094bc:	465b      	mov	r3, fp
 80094be:	4622      	mov	r2, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ffa1 	bl	800940a <__sfputs_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	f000 80a9 	beq.w	8009620 <_vfiprintf_r+0x1f0>
 80094ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d0:	445a      	add	r2, fp
 80094d2:	9209      	str	r2, [sp, #36]	; 0x24
 80094d4:	f89a 3000 	ldrb.w	r3, [sl]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80a1 	beq.w	8009620 <_vfiprintf_r+0x1f0>
 80094de:	2300      	movs	r3, #0
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e8:	f10a 0a01 	add.w	sl, sl, #1
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	9307      	str	r3, [sp, #28]
 80094f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f4:	931a      	str	r3, [sp, #104]	; 0x68
 80094f6:	4654      	mov	r4, sl
 80094f8:	2205      	movs	r2, #5
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	4854      	ldr	r0, [pc, #336]	; (8009650 <_vfiprintf_r+0x220>)
 8009500:	f7f6 fe6e 	bl	80001e0 <memchr>
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	b9d8      	cbnz	r0, 8009540 <_vfiprintf_r+0x110>
 8009508:	06d1      	lsls	r1, r2, #27
 800950a:	bf44      	itt	mi
 800950c:	2320      	movmi	r3, #32
 800950e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009512:	0713      	lsls	r3, r2, #28
 8009514:	bf44      	itt	mi
 8009516:	232b      	movmi	r3, #43	; 0x2b
 8009518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800951c:	f89a 3000 	ldrb.w	r3, [sl]
 8009520:	2b2a      	cmp	r3, #42	; 0x2a
 8009522:	d015      	beq.n	8009550 <_vfiprintf_r+0x120>
 8009524:	9a07      	ldr	r2, [sp, #28]
 8009526:	4654      	mov	r4, sl
 8009528:	2000      	movs	r0, #0
 800952a:	f04f 0c0a 	mov.w	ip, #10
 800952e:	4621      	mov	r1, r4
 8009530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009534:	3b30      	subs	r3, #48	; 0x30
 8009536:	2b09      	cmp	r3, #9
 8009538:	d94d      	bls.n	80095d6 <_vfiprintf_r+0x1a6>
 800953a:	b1b0      	cbz	r0, 800956a <_vfiprintf_r+0x13a>
 800953c:	9207      	str	r2, [sp, #28]
 800953e:	e014      	b.n	800956a <_vfiprintf_r+0x13a>
 8009540:	eba0 0308 	sub.w	r3, r0, r8
 8009544:	fa09 f303 	lsl.w	r3, r9, r3
 8009548:	4313      	orrs	r3, r2
 800954a:	9304      	str	r3, [sp, #16]
 800954c:	46a2      	mov	sl, r4
 800954e:	e7d2      	b.n	80094f6 <_vfiprintf_r+0xc6>
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	1d19      	adds	r1, r3, #4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	9103      	str	r1, [sp, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfbb      	ittet	lt
 800955c:	425b      	neglt	r3, r3
 800955e:	f042 0202 	orrlt.w	r2, r2, #2
 8009562:	9307      	strge	r3, [sp, #28]
 8009564:	9307      	strlt	r3, [sp, #28]
 8009566:	bfb8      	it	lt
 8009568:	9204      	strlt	r2, [sp, #16]
 800956a:	7823      	ldrb	r3, [r4, #0]
 800956c:	2b2e      	cmp	r3, #46	; 0x2e
 800956e:	d10c      	bne.n	800958a <_vfiprintf_r+0x15a>
 8009570:	7863      	ldrb	r3, [r4, #1]
 8009572:	2b2a      	cmp	r3, #42	; 0x2a
 8009574:	d134      	bne.n	80095e0 <_vfiprintf_r+0x1b0>
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	1d1a      	adds	r2, r3, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	9203      	str	r2, [sp, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009586:	3402      	adds	r4, #2
 8009588:	9305      	str	r3, [sp, #20]
 800958a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009660 <_vfiprintf_r+0x230>
 800958e:	7821      	ldrb	r1, [r4, #0]
 8009590:	2203      	movs	r2, #3
 8009592:	4650      	mov	r0, sl
 8009594:	f7f6 fe24 	bl	80001e0 <memchr>
 8009598:	b138      	cbz	r0, 80095aa <_vfiprintf_r+0x17a>
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	eba0 000a 	sub.w	r0, r0, sl
 80095a0:	2240      	movs	r2, #64	; 0x40
 80095a2:	4082      	lsls	r2, r0
 80095a4:	4313      	orrs	r3, r2
 80095a6:	3401      	adds	r4, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ae:	4829      	ldr	r0, [pc, #164]	; (8009654 <_vfiprintf_r+0x224>)
 80095b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b4:	2206      	movs	r2, #6
 80095b6:	f7f6 fe13 	bl	80001e0 <memchr>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d03f      	beq.n	800963e <_vfiprintf_r+0x20e>
 80095be:	4b26      	ldr	r3, [pc, #152]	; (8009658 <_vfiprintf_r+0x228>)
 80095c0:	bb1b      	cbnz	r3, 800960a <_vfiprintf_r+0x1da>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	3307      	adds	r3, #7
 80095c6:	f023 0307 	bic.w	r3, r3, #7
 80095ca:	3308      	adds	r3, #8
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d0:	443b      	add	r3, r7
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	e768      	b.n	80094a8 <_vfiprintf_r+0x78>
 80095d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095da:	460c      	mov	r4, r1
 80095dc:	2001      	movs	r0, #1
 80095de:	e7a6      	b.n	800952e <_vfiprintf_r+0xfe>
 80095e0:	2300      	movs	r3, #0
 80095e2:	3401      	adds	r4, #1
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	4619      	mov	r1, r3
 80095e8:	f04f 0c0a 	mov.w	ip, #10
 80095ec:	4620      	mov	r0, r4
 80095ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f2:	3a30      	subs	r2, #48	; 0x30
 80095f4:	2a09      	cmp	r2, #9
 80095f6:	d903      	bls.n	8009600 <_vfiprintf_r+0x1d0>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0c6      	beq.n	800958a <_vfiprintf_r+0x15a>
 80095fc:	9105      	str	r1, [sp, #20]
 80095fe:	e7c4      	b.n	800958a <_vfiprintf_r+0x15a>
 8009600:	fb0c 2101 	mla	r1, ip, r1, r2
 8009604:	4604      	mov	r4, r0
 8009606:	2301      	movs	r3, #1
 8009608:	e7f0      	b.n	80095ec <_vfiprintf_r+0x1bc>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4b12      	ldr	r3, [pc, #72]	; (800965c <_vfiprintf_r+0x22c>)
 8009612:	a904      	add	r1, sp, #16
 8009614:	4630      	mov	r0, r6
 8009616:	f7fd fbb3 	bl	8006d80 <_printf_float>
 800961a:	4607      	mov	r7, r0
 800961c:	1c78      	adds	r0, r7, #1
 800961e:	d1d6      	bne.n	80095ce <_vfiprintf_r+0x19e>
 8009620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009622:	07d9      	lsls	r1, r3, #31
 8009624:	d405      	bmi.n	8009632 <_vfiprintf_r+0x202>
 8009626:	89ab      	ldrh	r3, [r5, #12]
 8009628:	059a      	lsls	r2, r3, #22
 800962a:	d402      	bmi.n	8009632 <_vfiprintf_r+0x202>
 800962c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800962e:	f7fe f874 	bl	800771a <__retarget_lock_release_recursive>
 8009632:	89ab      	ldrh	r3, [r5, #12]
 8009634:	065b      	lsls	r3, r3, #25
 8009636:	f53f af1d 	bmi.w	8009474 <_vfiprintf_r+0x44>
 800963a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963c:	e71c      	b.n	8009478 <_vfiprintf_r+0x48>
 800963e:	ab03      	add	r3, sp, #12
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	462a      	mov	r2, r5
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <_vfiprintf_r+0x22c>)
 8009646:	a904      	add	r1, sp, #16
 8009648:	4630      	mov	r0, r6
 800964a:	f7fd fe3d 	bl	80072c8 <_printf_i>
 800964e:	e7e4      	b.n	800961a <_vfiprintf_r+0x1ea>
 8009650:	0800a18d 	.word	0x0800a18d
 8009654:	0800a197 	.word	0x0800a197
 8009658:	08006d81 	.word	0x08006d81
 800965c:	0800940b 	.word	0x0800940b
 8009660:	0800a193 	.word	0x0800a193

08009664 <__swbuf_r>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	460e      	mov	r6, r1
 8009668:	4614      	mov	r4, r2
 800966a:	4605      	mov	r5, r0
 800966c:	b118      	cbz	r0, 8009676 <__swbuf_r+0x12>
 800966e:	6a03      	ldr	r3, [r0, #32]
 8009670:	b90b      	cbnz	r3, 8009676 <__swbuf_r+0x12>
 8009672:	f7fd ffc5 	bl	8007600 <__sinit>
 8009676:	69a3      	ldr	r3, [r4, #24]
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	071a      	lsls	r2, r3, #28
 800967e:	d525      	bpl.n	80096cc <__swbuf_r+0x68>
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	b31b      	cbz	r3, 80096cc <__swbuf_r+0x68>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	1a98      	subs	r0, r3, r2
 800968a:	6963      	ldr	r3, [r4, #20]
 800968c:	b2f6      	uxtb	r6, r6
 800968e:	4283      	cmp	r3, r0
 8009690:	4637      	mov	r7, r6
 8009692:	dc04      	bgt.n	800969e <__swbuf_r+0x3a>
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f7ff f94e 	bl	8008938 <_fflush_r>
 800969c:	b9e0      	cbnz	r0, 80096d8 <__swbuf_r+0x74>
 800969e:	68a3      	ldr	r3, [r4, #8]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60a3      	str	r3, [r4, #8]
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	6022      	str	r2, [r4, #0]
 80096aa:	701e      	strb	r6, [r3, #0]
 80096ac:	6962      	ldr	r2, [r4, #20]
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d004      	beq.n	80096be <__swbuf_r+0x5a>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	07db      	lsls	r3, r3, #31
 80096b8:	d506      	bpl.n	80096c8 <__swbuf_r+0x64>
 80096ba:	2e0a      	cmp	r6, #10
 80096bc:	d104      	bne.n	80096c8 <__swbuf_r+0x64>
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7ff f939 	bl	8008938 <_fflush_r>
 80096c6:	b938      	cbnz	r0, 80096d8 <__swbuf_r+0x74>
 80096c8:	4638      	mov	r0, r7
 80096ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096cc:	4621      	mov	r1, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 f806 	bl	80096e0 <__swsetup_r>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0d5      	beq.n	8009684 <__swbuf_r+0x20>
 80096d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096dc:	e7f4      	b.n	80096c8 <__swbuf_r+0x64>
	...

080096e0 <__swsetup_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4b2a      	ldr	r3, [pc, #168]	; (800978c <__swsetup_r+0xac>)
 80096e4:	4605      	mov	r5, r0
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	460c      	mov	r4, r1
 80096ea:	b118      	cbz	r0, 80096f4 <__swsetup_r+0x14>
 80096ec:	6a03      	ldr	r3, [r0, #32]
 80096ee:	b90b      	cbnz	r3, 80096f4 <__swsetup_r+0x14>
 80096f0:	f7fd ff86 	bl	8007600 <__sinit>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096fa:	0718      	lsls	r0, r3, #28
 80096fc:	d422      	bmi.n	8009744 <__swsetup_r+0x64>
 80096fe:	06d9      	lsls	r1, r3, #27
 8009700:	d407      	bmi.n	8009712 <__swsetup_r+0x32>
 8009702:	2309      	movs	r3, #9
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009710:	e034      	b.n	800977c <__swsetup_r+0x9c>
 8009712:	0758      	lsls	r0, r3, #29
 8009714:	d512      	bpl.n	800973c <__swsetup_r+0x5c>
 8009716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009718:	b141      	cbz	r1, 800972c <__swsetup_r+0x4c>
 800971a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800971e:	4299      	cmp	r1, r3
 8009720:	d002      	beq.n	8009728 <__swsetup_r+0x48>
 8009722:	4628      	mov	r0, r5
 8009724:	f7ff fdce 	bl	80092c4 <_free_r>
 8009728:	2300      	movs	r3, #0
 800972a:	6363      	str	r3, [r4, #52]	; 0x34
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	2300      	movs	r3, #0
 8009736:	6063      	str	r3, [r4, #4]
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f043 0308 	orr.w	r3, r3, #8
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	b94b      	cbnz	r3, 800975c <__swsetup_r+0x7c>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800974e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009752:	d003      	beq.n	800975c <__swsetup_r+0x7c>
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f000 f840 	bl	80097dc <__smakebuf_r>
 800975c:	89a0      	ldrh	r0, [r4, #12]
 800975e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009762:	f010 0301 	ands.w	r3, r0, #1
 8009766:	d00a      	beq.n	800977e <__swsetup_r+0x9e>
 8009768:	2300      	movs	r3, #0
 800976a:	60a3      	str	r3, [r4, #8]
 800976c:	6963      	ldr	r3, [r4, #20]
 800976e:	425b      	negs	r3, r3
 8009770:	61a3      	str	r3, [r4, #24]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	b943      	cbnz	r3, 8009788 <__swsetup_r+0xa8>
 8009776:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800977a:	d1c4      	bne.n	8009706 <__swsetup_r+0x26>
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	0781      	lsls	r1, r0, #30
 8009780:	bf58      	it	pl
 8009782:	6963      	ldrpl	r3, [r4, #20]
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	e7f4      	b.n	8009772 <__swsetup_r+0x92>
 8009788:	2000      	movs	r0, #0
 800978a:	e7f7      	b.n	800977c <__swsetup_r+0x9c>
 800978c:	20000184 	.word	0x20000184

08009790 <__swhatbuf_r>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	460c      	mov	r4, r1
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2900      	cmp	r1, #0
 800979a:	b096      	sub	sp, #88	; 0x58
 800979c:	4615      	mov	r5, r2
 800979e:	461e      	mov	r6, r3
 80097a0:	da0d      	bge.n	80097be <__swhatbuf_r+0x2e>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097a8:	f04f 0100 	mov.w	r1, #0
 80097ac:	bf0c      	ite	eq
 80097ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097b2:	2340      	movne	r3, #64	; 0x40
 80097b4:	2000      	movs	r0, #0
 80097b6:	6031      	str	r1, [r6, #0]
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	b016      	add	sp, #88	; 0x58
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
 80097be:	466a      	mov	r2, sp
 80097c0:	f000 f848 	bl	8009854 <_fstat_r>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	dbec      	blt.n	80097a2 <__swhatbuf_r+0x12>
 80097c8:	9901      	ldr	r1, [sp, #4]
 80097ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097d2:	4259      	negs	r1, r3
 80097d4:	4159      	adcs	r1, r3
 80097d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097da:	e7eb      	b.n	80097b4 <__swhatbuf_r+0x24>

080097dc <__smakebuf_r>:
 80097dc:	898b      	ldrh	r3, [r1, #12]
 80097de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097e0:	079d      	lsls	r5, r3, #30
 80097e2:	4606      	mov	r6, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	d507      	bpl.n	80097f8 <__smakebuf_r+0x1c>
 80097e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	2301      	movs	r3, #1
 80097f2:	6163      	str	r3, [r4, #20]
 80097f4:	b002      	add	sp, #8
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	ab01      	add	r3, sp, #4
 80097fa:	466a      	mov	r2, sp
 80097fc:	f7ff ffc8 	bl	8009790 <__swhatbuf_r>
 8009800:	9900      	ldr	r1, [sp, #0]
 8009802:	4605      	mov	r5, r0
 8009804:	4630      	mov	r0, r6
 8009806:	f7fe ff91 	bl	800872c <_malloc_r>
 800980a:	b948      	cbnz	r0, 8009820 <__smakebuf_r+0x44>
 800980c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d4ef      	bmi.n	80097f4 <__smakebuf_r+0x18>
 8009814:	f023 0303 	bic.w	r3, r3, #3
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	e7e3      	b.n	80097e8 <__smakebuf_r+0xc>
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	6020      	str	r0, [r4, #0]
 8009824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	9b00      	ldr	r3, [sp, #0]
 800982c:	6163      	str	r3, [r4, #20]
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	6120      	str	r0, [r4, #16]
 8009832:	b15b      	cbz	r3, 800984c <__smakebuf_r+0x70>
 8009834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009838:	4630      	mov	r0, r6
 800983a:	f000 f81d 	bl	8009878 <_isatty_r>
 800983e:	b128      	cbz	r0, 800984c <__smakebuf_r+0x70>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	431d      	orrs	r5, r3
 8009850:	81a5      	strh	r5, [r4, #12]
 8009852:	e7cf      	b.n	80097f4 <__smakebuf_r+0x18>

08009854 <_fstat_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	; (8009874 <_fstat_r+0x20>)
 8009858:	2300      	movs	r3, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f7f9 f836 	bl	80028d2 <_fstat>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d102      	bne.n	8009870 <_fstat_r+0x1c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b103      	cbz	r3, 8009870 <_fstat_r+0x1c>
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	200054c8 	.word	0x200054c8

08009878 <_isatty_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	; (8009894 <_isatty_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f9 f835 	bl	80028f2 <_isatty>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_isatty_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_isatty_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200054c8 	.word	0x200054c8

08009898 <_raise_r>:
 8009898:	291f      	cmp	r1, #31
 800989a:	b538      	push	{r3, r4, r5, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	460d      	mov	r5, r1
 80098a0:	d904      	bls.n	80098ac <_raise_r+0x14>
 80098a2:	2316      	movs	r3, #22
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098ae:	b112      	cbz	r2, 80098b6 <_raise_r+0x1e>
 80098b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b4:	b94b      	cbnz	r3, 80098ca <_raise_r+0x32>
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f830 	bl	800991c <_getpid_r>
 80098bc:	462a      	mov	r2, r5
 80098be:	4601      	mov	r1, r0
 80098c0:	4620      	mov	r0, r4
 80098c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_kill_r>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d00a      	beq.n	80098e4 <_raise_r+0x4c>
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	d103      	bne.n	80098da <_raise_r+0x42>
 80098d2:	2316      	movs	r3, #22
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	2001      	movs	r0, #1
 80098d8:	e7e7      	b.n	80098aa <_raise_r+0x12>
 80098da:	2400      	movs	r4, #0
 80098dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e0:	4628      	mov	r0, r5
 80098e2:	4798      	blx	r3
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7e0      	b.n	80098aa <_raise_r+0x12>

080098e8 <raise>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <raise+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f7ff bfd3 	b.w	8009898 <_raise_r>
 80098f2:	bf00      	nop
 80098f4:	20000184 	.word	0x20000184

080098f8 <_kill_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_kill_r+0x20>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	4611      	mov	r1, r2
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	f7f8 ff85 	bl	8002814 <_kill>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d102      	bne.n	8009914 <_kill_r+0x1c>
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	b103      	cbz	r3, 8009914 <_kill_r+0x1c>
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	bf00      	nop
 8009918:	200054c8 	.word	0x200054c8

0800991c <_getpid_r>:
 800991c:	f7f8 bf72 	b.w	8002804 <_getpid>

08009920 <_init>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr

0800992c <_fini>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr
