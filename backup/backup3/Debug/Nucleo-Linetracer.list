
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800a248  0800a248  0001a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af24  0800af24  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af2c  0800af2c  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af30  0800af30  0001af30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800af34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002368  200002fc  0800b230  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  0800b230  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c84b  00000000  00000000  0002036f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003427  00000000  00000000  0002cbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0002ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5f  00000000  00000000  00030f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016360  00000000  00000000  00031ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc08  00000000  00000000  00047e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075c06  00000000  00000000  00057a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e58  00000000  00000000  000cd628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d2480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a230 	.word	0x0800a230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	0800a230 	.word	0x0800a230

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpun>:
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x10>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d10a      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x20>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0001 	mov.w	r0, #1
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b970 	b.w	8000ec4 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	460d      	mov	r5, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	460f      	mov	r7, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14a      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4694      	mov	ip, r2
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0xe2>
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	b143      	cbz	r3, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c1c:	f1c3 0220 	rsb	r2, r3, #32
 8000c20:	409f      	lsls	r7, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	409c      	lsls	r4, r3
 8000c2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2e:	fa1f f58c 	uxth.w	r5, ip
 8000c32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c36:	0c22      	lsrs	r2, r4, #16
 8000c38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c40:	fb01 f005 	mul.w	r0, r1, r5
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x62>
 8000c48:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c50:	f080 811c 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c54:	4290      	cmp	r0, r2
 8000c56:	f240 8119 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c5a:	3902      	subs	r1, #2
 8000c5c:	4462      	add	r2, ip
 8000c5e:	1a12      	subs	r2, r2, r0
 8000c60:	b2a4      	uxth	r4, r4
 8000c62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6e:	fb00 f505 	mul.w	r5, r0, r5
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x90>
 8000c76:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x294>
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x294>
 8000c88:	4464      	add	r4, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11e      	cbz	r6, 8000c9e <__udivmoddi4+0xa2>
 8000c96:	40dc      	lsrs	r4, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0xbc>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80ed 	beq.w	8000e86 <__udivmoddi4+0x28a>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d149      	bne.n	8000d54 <__udivmoddi4+0x158>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0xce>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80f8 	bhi.w	8000eba <__udivmoddi4+0x2be>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0e2      	beq.n	8000c9e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cdc:	e7df      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xe6>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cec:	1a8a      	subs	r2, r1, r2
 8000cee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000d00:	0c22      	lsrs	r2, r4, #16
 8000d02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d06:	fb0e f005 	mul.w	r0, lr, r5
 8000d0a:	4290      	cmp	r0, r2
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d12:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b8>
 8000d1e:	4645      	mov	r5, r8
 8000d20:	1a12      	subs	r2, r2, r0
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d30:	fb0e fe00 	mul.w	lr, lr, r0
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x14e>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x14c>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c2>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	eba4 040e 	sub.w	r4, r4, lr
 8000d4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d52:	e79f      	b.n	8000c94 <__udivmoddi4+0x98>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa05 f401 	lsl.w	r4, r5, r1
 8000d66:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6a:	40fd      	lsrs	r5, r7
 8000d6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d84:	fb08 f50e 	mul.w	r5, r8, lr
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d9c:	f080 8088 	bcs.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	f240 8085 	bls.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da6:	f1a8 0802 	sub.w	r8, r8, #2
 8000daa:	4464      	add	r4, ip
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	b29d      	uxth	r5, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dcc:	d26c      	bcs.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	d96a      	bls.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dda:	fba3 9502 	umull	r9, r5, r3, r2
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	42ac      	cmp	r4, r5
 8000de4:	46c8      	mov	r8, r9
 8000de6:	46ae      	mov	lr, r5
 8000de8:	d356      	bcc.n	8000e98 <__udivmoddi4+0x29c>
 8000dea:	d053      	beq.n	8000e94 <__udivmoddi4+0x298>
 8000dec:	b156      	cbz	r6, 8000e04 <__udivmoddi4+0x208>
 8000dee:	ebb0 0208 	subs.w	r2, r0, r8
 8000df2:	eb64 040e 	sbc.w	r4, r4, lr
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	40ca      	lsrs	r2, r1
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	e9c6 7400 	strd	r7, r4, [r6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	f1c3 0120 	rsb	r1, r3, #32
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	fa20 f201 	lsr.w	r2, r0, r1
 8000e18:	fa25 f101 	lsr.w	r1, r5, r1
 8000e1c:	409d      	lsls	r5, r3
 8000e1e:	432a      	orrs	r2, r5
 8000e20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e36:	fb00 f50e 	mul.w	r5, r0, lr
 8000e3a:	428d      	cmp	r5, r1
 8000e3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x258>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e4a:	d22f      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e4c:	428d      	cmp	r5, r1
 8000e4e:	d92d      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1b49      	subs	r1, r1, r5
 8000e56:	b292      	uxth	r2, r2
 8000e58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	fb05 f10e 	mul.w	r1, r5, lr
 8000e68:	4291      	cmp	r1, r2
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x282>
 8000e6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e70:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e74:	d216      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d914      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e7a:	3d02      	subs	r5, #2
 8000e7c:	4462      	add	r2, ip
 8000e7e:	1a52      	subs	r2, r2, r1
 8000e80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e84:	e738      	b.n	8000cf8 <__udivmoddi4+0xfc>
 8000e86:	4631      	mov	r1, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e708      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000e8c:	4639      	mov	r1, r7
 8000e8e:	e6e6      	b.n	8000c5e <__udivmoddi4+0x62>
 8000e90:	4610      	mov	r0, r2
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x90>
 8000e94:	4548      	cmp	r0, r9
 8000e96:	d2a9      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e98:	ebb9 0802 	subs.w	r8, r9, r2
 8000e9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	e7a3      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea4:	4645      	mov	r5, r8
 8000ea6:	e7ea      	b.n	8000e7e <__udivmoddi4+0x282>
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	e794      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eac:	4640      	mov	r0, r8
 8000eae:	e7d1      	b.n	8000e54 <__udivmoddi4+0x258>
 8000eb0:	46d0      	mov	r8, sl
 8000eb2:	e77b      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb4:	3d02      	subs	r5, #2
 8000eb6:	4462      	add	r2, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x124>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e70a      	b.n	8000cd4 <__udivmoddi4+0xd8>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x14e>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001022:	b480      	push	{r7}
 8001024:	b089      	sub	sp, #36	; 0x24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	332c      	adds	r3, #44	; 0x2c
 8001032:	4619      	mov	r1, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800103a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800103e:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	fa92 f2a2 	rbit	r2, r2
 8001046:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	fab2 f282 	clz	r2, r2
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	40d3      	lsrs	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	211f      	movs	r1, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 011f 	and.w	r1, r3, #31
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	431a      	orrs	r2, r3
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b08d      	sub	sp, #52	; 0x34
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	330c      	adds	r3, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	fa92 f2a2 	rbit	r2, r2
 80010d8:	617a      	str	r2, [r7, #20]
  return result;
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	fab2 f282 	clz	r2, r2
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	40d3      	lsrs	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010f4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010f8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	fa91 f1a1 	rbit	r1, r1
 8001100:	61f9      	str	r1, [r7, #28]
  return result;
 8001102:	69f9      	ldr	r1, [r7, #28]
 8001104:	fab1 f181 	clz	r1, r1
 8001108:	b2c9      	uxtb	r1, r1
 800110a:	40cb      	lsrs	r3, r1
 800110c:	2107      	movs	r1, #7
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	401a      	ands	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800111c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001120:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001124:	fa91 f1a1 	rbit	r1, r1
 8001128:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800112a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112c:	fab1 f181 	clz	r1, r1
 8001130:	b2c9      	uxtb	r1, r1
 8001132:	40cb      	lsrs	r3, r1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001140:	bf00      	nop
 8001142:	3734      	adds	r7, #52	; 0x34
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 0201 	bic.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_RCC_HSI_Enable+0x1c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <LL_RCC_HSI_Enable+0x1c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <LL_RCC_HSI_IsReady+0x20>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b02      	cmp	r3, #2
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4904      	ldr	r1, [pc, #16]	; (8001240 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <LL_RCC_SetSysClkSource+0x24>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 0203 	bic.w	r2, r3, #3
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <LL_RCC_SetSysClkSource+0x24>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40023800 	.word	0x40023800

0800126c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <LL_RCC_GetSysClkSource+0x18>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <LL_RCC_SetAHBPrescaler+0x24>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	4904      	ldr	r1, [pc, #16]	; (80012ac <LL_RCC_SetAHBPrescaler+0x24>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40023800 	.word	0x40023800

080012b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800

080012d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e8:	4904      	ldr	r1, [pc, #16]	; (80012fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800

08001300 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <LL_RCC_SetTIMPrescaler+0x28>)
 800130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001312:	4905      	ldr	r1, [pc, #20]	; (8001328 <LL_RCC_SetTIMPrescaler+0x28>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40023800 	.word	0x40023800

0800132c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LL_RCC_PLL_Enable+0x1c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <LL_RCC_PLL_Enable+0x1c>)
 8001336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <LL_RCC_PLL_IsReady+0x24>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001388:	4013      	ands	r3, r2
 800138a:	68f9      	ldr	r1, [r7, #12]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	4311      	orrs	r1, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	0192      	lsls	r2, r2, #6
 8001394:	430a      	orrs	r2, r1
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40023800 	.word	0x40023800
 80013bc:	ffbf8000 	.word	0xffbf8000

080013c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4313      	orrs	r3, r2
 8001402:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800

08001420 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <LL_APB2_GRP1_EnableClock+0x2c>)
 800142a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <LL_APB2_GRP1_EnableClock+0x2c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40023800 	.word	0x40023800

08001450 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <LL_SYSCFG_SetEXTISource+0x58>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	3302      	adds	r3, #2
 8001462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	0c1b      	lsrs	r3, r3, #16
 800146a:	43db      	mvns	r3, r3
 800146c:	ea02 0103 	and.w	r1, r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	60bb      	str	r3, [r7, #8]
  return result;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	fa03 f202 	lsl.w	r2, r3, r2
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <LL_SYSCFG_SetEXTISource+0x58>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	430a      	orrs	r2, r1
 8001496:	3302      	adds	r3, #2
 8001498:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40013800 	.word	0x40013800

080014ac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <LL_FLASH_SetLatency+0x24>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 0207 	bic.w	r2, r3, #7
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <LL_FLASH_SetLatency+0x24>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <LL_FLASH_GetLatency+0x18>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40007000 	.word	0x40007000

08001518 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40007000 	.word	0x40007000

08001540 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 0210 	bic.w	r2, r3, #16
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 0208 	bic.w	r2, r3, #8
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015de:	f023 0307 	bic.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	615a      	str	r2, [r3, #20]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	613b      	str	r3, [r7, #16]
  return result;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2103      	movs	r1, #3
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	61bb      	str	r3, [r7, #24]
  return result;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b089      	sub	sp, #36	; 0x24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	613b      	str	r3, [r7, #16]
  return result;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2103      	movs	r1, #3
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	61bb      	str	r3, [r7, #24]
  return result;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	431a      	orrs	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	60da      	str	r2, [r3, #12]
}
 8001738:	bf00      	nop
 800173a:	3724      	adds	r7, #36	; 0x24
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001766:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800176a:	f7ff fe59 	bl	8001420 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800176e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001772:	f7ff fe3d 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001776:	2007      	movs	r0, #7
 8001778:	f7ff fba6 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f818 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 fb26 	bl	8001dd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001784:	f000 f862 	bl	800184c <MX_ADC1_Init>
  MX_I2C3_Init();
 8001788:	f000 f8de 	bl	8001948 <MX_I2C3_Init>
  MX_TIM2_Init();
 800178c:	f000 f99e 	bl	8001acc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001790:	f000 f9d4 	bl	8001b3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001794:	f000 fa12 	bl	8001bbc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001798:	f000 fa50 	bl	8001c3c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800179c:	f000 fac8 	bl	8001d30 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80017a0:	f000 fa8c 	bl	8001cbc <MX_TIM9_Init>
  MX_SPI2_Init();
 80017a4:	f000 f93e 	bl	8001a24 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80017a8:	f004 fbc8 	bl	8005f3c <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80017ac:	e7fe      	b.n	80017ac <main+0x4a>
	...

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f7ff fe79 	bl	80014ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80017ba:	bf00      	nop
 80017bc:	f7ff fe8a 	bl	80014d4 <LL_FLASH_GetLatency>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d1fa      	bne.n	80017bc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80017c6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80017ca:	f7ff fe91 	bl	80014f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80017ce:	2010      	movs	r0, #16
 80017d0:	f7ff fd22 	bl	8001218 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80017d4:	f7ff fcfe 	bl	80011d4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017d8:	bf00      	nop
 80017da:	f7ff fd0b 	bl	80011f4 <LL_RCC_HSI_IsReady>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d1fa      	bne.n	80017da <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 80017e4:	2300      	movs	r3, #0
 80017e6:	2264      	movs	r2, #100	; 0x64
 80017e8:	2108      	movs	r1, #8
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fdc2 	bl	8001374 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80017f0:	f7ff fd9c 	bl	800132c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80017f4:	bf00      	nop
 80017f6:	f7ff fda9 	bl	800134c <LL_RCC_PLL_IsReady>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d1fa      	bne.n	80017f6 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001800:	bf00      	nop
 8001802:	f7ff fe89 	bl	8001518 <LL_PWR_IsActiveFlag_VOS>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0fa      	beq.n	8001802 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fd3b 	bl	8001288 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001812:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001816:	f7ff fd4b 	bl	80012b0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fd5c 	bl	80012d8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fd0f 	bl	8001244 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001826:	bf00      	nop
 8001828:	f7ff fd20 	bl	800126c <LL_RCC_GetSysClkSource>
 800182c:	4603      	mov	r3, r0
 800182e:	2b08      	cmp	r3, #8
 8001830:	d1fa      	bne.n	8001828 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <SystemClock_Config+0x98>)
 8001834:	f002 fb08 	bl	8003e48 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <SystemClock_Config+0x98>)
 800183a:	f002 fb13 	bl	8003e64 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff fd5e 	bl	8001300 <LL_RCC_SetTIMPrescaler>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	05f5e100 	.word	0x05f5e100

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001882:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001886:	f7ff fdcb 	bl	8001420 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fd98 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff fd95 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800189a:	2303      	movs	r3, #3
 800189c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4823      	ldr	r0, [pc, #140]	; (8001934 <MX_ADC1_Init+0xe8>)
 80018a8:	f001 fbca 	bl	8003040 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin|LL_GPIO_PIN_1;
 80018ac:	2303      	movs	r3, #3
 80018ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	481e      	ldr	r0, [pc, #120]	; (8001938 <MX_ADC1_Init+0xec>)
 80018be:	f001 fbbf 	bl	8003040 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80018ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018d2:	4619      	mov	r1, r3
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <MX_ADC1_Init+0xf0>)
 80018d6:	f001 f929 	bl	8002b2c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4619      	mov	r1, r3
 80018f4:	4811      	ldr	r0, [pc, #68]	; (800193c <MX_ADC1_Init+0xf0>)
 80018f6:	f001 f945 	bl	8002b84 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80018fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <MX_ADC1_Init+0xf0>)
 8001900:	f7ff fbc5 	bl	800108e <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <MX_ADC1_Init+0xf4>)
 8001912:	f001 f8ed 	bl	8002af0 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <MX_ADC1_Init+0xf8>)
 8001918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_ADC1_Init+0xf0>)
 800191e:	f7ff fb80 	bl	8001022 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001922:	2201      	movs	r2, #1
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <MX_ADC1_Init+0xf8>)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC1_Init+0xf0>)
 8001928:	f7ff fbc4 	bl	80010b4 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3740      	adds	r7, #64	; 0x40
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020000 	.word	0x40020000
 8001938:	40020400 	.word	0x40020400
 800193c:	40012000 	.word	0x40012000
 8001940:	40012300 	.word	0x40012300
 8001944:	03200006 	.word	0x03200006

08001948 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	2220      	movs	r2, #32
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f006 fb30 	bl	8007fbc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800196c:	2004      	movs	r0, #4
 800196e:	f7ff fd27 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fd24 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800197e:	2302      	movs	r3, #2
 8001980:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001986:	2301      	movs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800198a:	2301      	movs	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800198e:	2304      	movs	r3, #4
 8001990:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	481f      	ldr	r0, [pc, #124]	; (8001a14 <MX_I2C3_Init+0xcc>)
 8001998:	f001 fb52 	bl	8003040 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800199c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019a2:	2302      	movs	r3, #2
 80019a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019b2:	2304      	movs	r3, #4
 80019b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4817      	ldr	r0, [pc, #92]	; (8001a18 <MX_I2C3_Init+0xd0>)
 80019bc:	f001 fb40 	bl	8003040 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80019c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019c4:	f7ff fd14 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 80019c8:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_I2C3_Init+0xd4>)
 80019ca:	f7ff fbf2 	bl	80011b2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 80019ce:	4813      	ldr	r0, [pc, #76]	; (8001a1c <MX_I2C3_Init+0xd4>)
 80019d0:	f7ff fbcc 	bl	800116c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_I2C3_Init+0xd4>)
 80019d6:	f7ff fbb9 	bl	800114c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_I2C3_Init+0xd8>)
 80019e0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_I2C3_Init+0xd4>)
 80019fe:	f001 fc9f 	bl	8003340 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_I2C3_Init+0xd4>)
 8001a06:	f7ff fbc1 	bl	800118c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3738      	adds	r7, #56	; 0x38
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40005c00 	.word	0x40005c00
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f006 fac2 	bl	8007fbc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a4c:	f7ff fcd0 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7ff fcb5 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001a56:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4619      	mov	r1, r3
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_SPI2_Init+0xa0>)
 8001a76:	f001 fae3 	bl	8003040 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001aa6:	f107 0318 	add.w	r3, r7, #24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_SPI2_Init+0xa4>)
 8001aae:	f001 fdde 	bl	800366e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_SPI2_Init+0xa4>)
 8001ab6:	f7ff fd43 	bl	8001540 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3740      	adds	r7, #64	; 0x40
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fc85 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001ae6:	2363      	movs	r3, #99	; 0x63
 8001ae8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b00:	f001 fe42 	bl	8003788 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001b04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b08:	f7ff fd50 	bl	80015ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b12:	f7ff fd5b 	bl	80015cc <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001b16:	2108      	movs	r1, #8
 8001b18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b1c:	f7ff fd23 	bl	8001566 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001b20:	2100      	movs	r1, #0
 8001b22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b26:	f7ff fd66 	bl	80015f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001b2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b2e:	f7ff fd75 	bl	800161c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7ff fc4d 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b56:	f7ff f9db 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa2b 	bl	8000fbc <NVIC_EncodePriority>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	201d      	movs	r0, #29
 8001b6c:	f7ff f9fc 	bl	8000f68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001b70:	201d      	movs	r0, #29
 8001b72:	f7ff f9db 	bl	8000f2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001b76:	2363      	movs	r3, #99	; 0x63
 8001b78:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b82:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <MX_TIM3_Init+0x7c>)
 8001b8e:	f001 fdfb 	bl	8003788 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_TIM3_Init+0x7c>)
 8001b94:	f7ff fcfa 	bl	800158c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM3_Init+0x7c>)
 8001b9c:	f7ff fd16 	bl	80015cc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_TIM3_Init+0x7c>)
 8001ba4:	f7ff fd27 	bl	80015f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM3_Init+0x7c>)
 8001baa:	f7ff fd37 	bl	800161c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001bd0:	2004      	movs	r0, #4
 8001bd2:	f7ff fc0d 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bd6:	f7ff f99b 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f9eb 	bl	8000fbc <NVIC_EncodePriority>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	201e      	movs	r0, #30
 8001bec:	f7ff f9bc 	bl	8000f68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001bf0:	201e      	movs	r0, #30
 8001bf2:	f7ff f99b 	bl	8000f2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001bf6:	2363      	movs	r3, #99	; 0x63
 8001bf8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c02:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <MX_TIM4_Init+0x7c>)
 8001c0e:	f001 fdbb 	bl	8003788 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <MX_TIM4_Init+0x7c>)
 8001c14:	f7ff fcba 	bl	800158c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <MX_TIM4_Init+0x7c>)
 8001c1c:	f7ff fcd6 	bl	80015cc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001c20:	2100      	movs	r1, #0
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM4_Init+0x7c>)
 8001c24:	f7ff fce7 	bl	80015f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <MX_TIM4_Init+0x7c>)
 8001c2a:	f7ff fcf7 	bl	800161c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40000800 	.word	0x40000800

08001c3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8001c50:	2008      	movs	r0, #8
 8001c52:	f7ff fbcd 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 8001c56:	f7ff f95b 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f9ab 	bl	8000fbc <NVIC_EncodePriority>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	2032      	movs	r0, #50	; 0x32
 8001c6c:	f7ff f97c 	bl	8000f68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f7ff f95b 	bl	8000f2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 8001c7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c82:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <MX_TIM5_Init+0x7c>)
 8001c8e:	f001 fd7b 	bl	8003788 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8001c92:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <MX_TIM5_Init+0x7c>)
 8001c94:	f7ff fc8a 	bl	80015ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM5_Init+0x7c>)
 8001c9c:	f7ff fc96 	bl	80015cc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_TIM5_Init+0x7c>)
 8001ca4:	f7ff fca7 	bl	80015f6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM5_Init+0x7c>)
 8001caa:	f7ff fcb7 	bl	800161c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40000c00 	.word	0x40000c00

08001cbc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8001cd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cd4:	f7ff fba4 	bl	8001420 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8001cd8:	f7ff f91a 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f96a 	bl	8000fbc <NVIC_EncodePriority>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4619      	mov	r1, r3
 8001cec:	2018      	movs	r0, #24
 8001cee:	f7ff f93b 	bl	8000f68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cf2:	2018      	movs	r0, #24
 8001cf4:	f7ff f91a 	bl	8000f2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8001d00:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001d04:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM9_Init+0x70>)
 8001d10:	f001 fd3a 	bl	8003788 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_TIM9_Init+0x70>)
 8001d16:	f7ff fc49 	bl	80015ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM9_Init+0x70>)
 8001d1e:	f7ff fc55 	bl	80015cc <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40014000 	.word	0x40014000

08001d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001d5a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d5e:	f7ff fb47 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff fb2c 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d68:	230c      	movs	r3, #12
 8001d6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <MX_USART2_UART_Init+0x98>)
 8001d86:	f001 f95b 	bl	8003040 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001d8a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d8e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_USART2_UART_Init+0x9c>)
 8001db0:	f001 ffcc 	bl	8003d4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART2_UART_Init+0x9c>)
 8001db6:	f7ff fc51 	bl	800165c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_USART2_UART_Init+0x9c>)
 8001dbc:	f7ff fc3e 	bl	800163c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3738      	adds	r7, #56	; 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001df0:	2004      	movs	r0, #4
 8001df2:	f7ff fae5 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001df6:	2080      	movs	r0, #128	; 0x80
 8001df8:	f7ff fae2 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fadf 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e02:	2002      	movs	r0, #2
 8001e04:	f7ff fadc 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001e08:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001e0c:	4842      	ldr	r0, [pc, #264]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001e0e:	f7ff fc99 	bl	8001744 <LL_GPIO_ResetOutputPin>
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8001e12:	2130      	movs	r1, #48	; 0x30
 8001e14:	4841      	ldr	r0, [pc, #260]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001e16:	f7ff fc95 	bl	8001744 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin
 8001e1a:	f247 3104 	movw	r1, #29444	; 0x7304
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x150>)
 8001e20:	f7ff fc90 	bl	8001744 <LL_GPIO_ResetOutputPin>
                          |Motor_L2_Pin|Motor_R2_Pin);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001e24:	493f      	ldr	r1, [pc, #252]	; (8001f24 <MX_GPIO_Init+0x154>)
 8001e26:	2002      	movs	r0, #2
 8001e28:	f7ff fb12 	bl	8001450 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 ff78 	bl	8002d38 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4832      	ldr	r0, [pc, #200]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001e50:	f7ff fc49 	bl	80016e6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5a:	482f      	ldr	r0, [pc, #188]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001e5c:	f7ff fc14 	bl	8001688 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001e60:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001e64:	603b      	str	r3, [r7, #0]
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e66:	2301      	movs	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	463b      	mov	r3, r7
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4827      	ldr	r0, [pc, #156]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001e7c:	f001 f8e0 	bl	8003040 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001e80:	2310      	movs	r3, #16
 8001e82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e84:	2301      	movs	r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001e94:	463b      	mov	r3, r7
 8001e96:	4619      	mov	r1, r3
 8001e98:	4820      	ldr	r0, [pc, #128]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001e9a:	f001 f8d1 	bl	8003040 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4819      	ldr	r0, [pc, #100]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001eb8:	f001 f8c2 	bl	8003040 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_GPIO_Init+0x150>)
 8001ed6:	f001 f8b3 	bl	8003040 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin|Motor_L2_Pin
 8001eda:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8001ede:	603b      	str	r3, [r7, #0]
                          |Motor_R2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <MX_GPIO_Init+0x150>)
 8001ef6:	f001 f8a3 	bl	8003040 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWL_Pin|SWR_Pin;
 8001efa:	2330      	movs	r3, #48	; 0x30
 8001efc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_GPIO_Init+0x150>)
 8001f0c:	f001 f898 	bl	8003040 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	00f00003 	.word	0x00f00003

08001f28 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	b29b      	uxth	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	bf0c      	ite	eq
 8001f76:	2301      	moveq	r3, #1
 8001f78:	2300      	movne	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f06f 0202 	mvn.w	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_TIM_SetAutoReload>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f06f 0201 	mvn.w	r2, #1
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <Sensor_ADC_Read>:





__STATIC_INLINE uint16_t	Sensor_ADC_Read() {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
	static uint16_t adcValue = 0;


	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <Sensor_ADC_Read+0x44>)
 8001fe6:	f7ff ffcf 	bl	8001f88 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <Sensor_ADC_Read+0x44>)
 8001fec:	f7ff ff9c 	bl	8001f28 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8001ff0:	bf00      	nop
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <Sensor_ADC_Read+0x44>)
 8001ff4:	f7ff ffb5 	bl	8001f62 <LL_ADC_IsActiveFlag_EOCS>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f9      	beq.n	8001ff2 <Sensor_ADC_Read+0x16>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <Sensor_ADC_Read+0x44>)
 8002000:	f7ff ffa2 	bl	8001f48 <LL_ADC_REG_ReadConversionData12>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <Sensor_ADC_Read+0x48>)
 800200a:	801a      	strh	r2, [r3, #0]
	LL_ADC_ClearFlag_EOCS(ADC1);
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <Sensor_ADC_Read+0x44>)
 800200e:	f7ff ffbb 	bl	8001f88 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 8002012:	b662      	cpsie	i
}
 8002014:	bf00      	nop
	__enable_irq();
	return adcValue;
 8002016:	4b03      	ldr	r3, [pc, #12]	; (8002024 <Sensor_ADC_Read+0x48>)
 8002018:	881b      	ldrh	r3, [r3, #0]
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40012000 	.word	0x40012000
 8002024:	20000330 	.word	0x20000330

08002028 <Make_Sensor_Raw_Vals>:


// rawValue 계산
__STATIC_INLINE void		Make_Sensor_Raw_Vals(uint8_t idx) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]

	static uint8_t	midian[3] = { 0, };

	GPIOC->ODR = (GPIOC->ODR & ~0x07) | (idx) | 0x08;
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <Make_Sensor_Raw_Vals+0xe4>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4313      	orrs	r3, r2
 800203e:	4a33      	ldr	r2, [pc, #204]	; (800210c <Make_Sensor_Raw_Vals+0xe4>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6153      	str	r3, [r2, #20]
	// ADC 읽기
	midian[0] = Sensor_ADC_Read() >> 4;
 8002046:	f7ff ffc9 	bl	8001fdc <Sensor_ADC_Read>
 800204a:	4603      	mov	r3, r0
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002054:	701a      	strb	r2, [r3, #0]
	midian[1] = Sensor_ADC_Read() >> 4;
 8002056:	f7ff ffc1 	bl	8001fdc <Sensor_ADC_Read>
 800205a:	4603      	mov	r3, r0
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002064:	705a      	strb	r2, [r3, #1]
	midian[2] = Sensor_ADC_Read() >> 4;
 8002066:	f7ff ffb9 	bl	8001fdc <Sensor_ADC_Read>
 800206a:	4603      	mov	r3, r0
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b27      	ldr	r3, [pc, #156]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002074:	709a      	strb	r2, [r3, #2]

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <Make_Sensor_Raw_Vals+0xe4>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4a24      	ldr	r2, [pc, #144]	; (800210c <Make_Sensor_Raw_Vals+0xe4>)
 800207c:	f023 0308 	bic.w	r3, r3, #8
 8002080:	6153      	str	r3, [r2, #20]
	// 0000 {1}(XXX) == 0000 {LED}(다음 번 i)
//	GPIOC->ODR = (GPIOC->ODR & ~0x07) | ( (sensorReadIdx + 1) & 0x07 ) | 0x08;


	// 중앙값을 sensorRawVals[i]에 저장
	if (midian[0] > midian[1]) {
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	429a      	cmp	r2, r3
 800208c:	d917      	bls.n	80020be <Make_Sensor_Raw_Vals+0x96>
		SWAP(midian[0], midian[1]);
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	4053      	eors	r3, r2
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020a0:	785a      	ldrb	r2, [r3, #1]
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4053      	eors	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020ac:	705a      	strb	r2, [r3, #1]
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	4053      	eors	r3, r2
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020bc:	701a      	strb	r2, [r3, #0]
	}
	if (midian[1] > midian[2]) {
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020c0:	785a      	ldrb	r2, [r3, #1]
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020c4:	789b      	ldrb	r3, [r3, #2]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d917      	bls.n	80020fa <Make_Sensor_Raw_Vals+0xd2>
		SWAP(midian[1], midian[2]);
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020cc:	785a      	ldrb	r2, [r3, #1]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	4053      	eors	r3, r2
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020d8:	705a      	strb	r2, [r3, #1]
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020dc:	789a      	ldrb	r2, [r3, #2]
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	4053      	eors	r3, r2
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020e8:	709a      	strb	r2, [r3, #2]
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020ec:	785a      	ldrb	r2, [r3, #1]
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020f0:	789b      	ldrb	r3, [r3, #2]
 80020f2:	4053      	eors	r3, r2
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020f8:	705a      	strb	r2, [r3, #1]
	}
	sensorRawVals[idx] =  midian[1];
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <Make_Sensor_Raw_Vals+0xe8>)
 80020fe:	7851      	ldrb	r1, [r2, #1]
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <Make_Sensor_Raw_Vals+0xec>)
 8002102:	54d1      	strb	r1, [r2, r3]
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020800 	.word	0x40020800
 8002110:	2000032c 	.word	0x2000032c
 8002114:	200024fc 	.word	0x200024fc

08002118 <Make_Sensor_Norm_Vals>:



// normalized value 계산
__STATIC_INLINE void		Make_Sensor_Norm_Vals(uint8_t idx) {
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
		sensorNormVals[idx] = 255;
	else
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
	*/

	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <Make_Sensor_Norm_Vals+0x88>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <Make_Sensor_Norm_Vals+0x8c>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	1aca      	subs	r2, r1, r3
 8002136:	4613      	mov	r3, r2
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	491a      	ldr	r1, [pc, #104]	; (80021a8 <Make_Sensor_Norm_Vals+0x90>)
 8002140:	5c8a      	ldrb	r2, [r1, r2]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	fb93 f3f2 	sdiv	r3, r3, r2
		& ( (sensorRawVals[idx] < blackMaxs[idx]) - 0x01) ) \
 8002148:	b25b      	sxtb	r3, r3
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	4914      	ldr	r1, [pc, #80]	; (80021a0 <Make_Sensor_Norm_Vals+0x88>)
 800214e:	5c8a      	ldrb	r2, [r1, r2]
 8002150:	b2d1      	uxtb	r1, r2
 8002152:	79fa      	ldrb	r2, [r7, #7]
 8002154:	4813      	ldr	r0, [pc, #76]	; (80021a4 <Make_Sensor_Norm_Vals+0x8c>)
 8002156:	5c82      	ldrb	r2, [r0, r2]
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	4291      	cmp	r1, r2
 800215c:	d201      	bcs.n	8002162 <Make_Sensor_Norm_Vals+0x4a>
 800215e:	2200      	movs	r2, #0
 8002160:	e001      	b.n	8002166 <Make_Sensor_Norm_Vals+0x4e>
 8002162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002166:	4013      	ands	r3, r2
 8002168:	b25b      	sxtb	r3, r3
		| ((sensorRawVals[idx] < whiteMaxs[idx]) - 0x01);
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <Make_Sensor_Norm_Vals+0x88>)
 800216e:	5c8a      	ldrb	r2, [r1, r2]
 8002170:	b2d1      	uxtb	r1, r2
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	480d      	ldr	r0, [pc, #52]	; (80021ac <Make_Sensor_Norm_Vals+0x94>)
 8002176:	5c82      	ldrb	r2, [r0, r2]
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	4291      	cmp	r1, r2
 800217c:	d201      	bcs.n	8002182 <Make_Sensor_Norm_Vals+0x6a>
 800217e:	2200      	movs	r2, #0
 8002180:	e001      	b.n	8002186 <Make_Sensor_Norm_Vals+0x6e>
 8002182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002186:	4313      	orrs	r3, r2
 8002188:	b25a      	sxtb	r2, r3
	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 800218a:	79fb      	ldrb	r3, [r7, #7]
		| ((sensorRawVals[idx] < whiteMaxs[idx]) - 0x01);
 800218c:	b2d1      	uxtb	r1, r2
	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <Make_Sensor_Norm_Vals+0x98>)
 8002190:	54d1      	strb	r1, [r2, r3]


}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	200024fc 	.word	0x200024fc
 80021a4:	2000250c 	.word	0x2000250c
 80021a8:	20000120 	.word	0x20000120
 80021ac:	20000128 	.word	0x20000128
 80021b0:	20002504 	.word	0x20002504

080021b4 <Make_Sensor_State>:




// sensor state 계산
__STATIC_INLINE void		Make_Sensor_State(uint8_t idx) {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]

	//state = ( state & ~(0x01 << idx) ) | ( (sensorNormVals[idx] > threshold) << idx );
	if (sensorNormVals[idx] > threshold) {
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <Make_Sensor_State+0x70>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <Make_Sensor_State+0x74>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d910      	bls.n	80021f2 <Make_Sensor_State+0x3e>
		state |= 0x01 << (7 - idx);
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2201      	movs	r2, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	b25a      	sxtb	r2, r3
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <Make_Sensor_State+0x78>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <Make_Sensor_State+0x78>)
 80021ee:	701a      	strb	r2, [r3, #0]
	}
	else {
		state &= ~(0x01 << (7 - idx));
	}
}
 80021f0:	e011      	b.n	8002216 <Make_Sensor_State+0x62>
		state &= ~(0x01 << (7 - idx));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f1c3 0307 	rsb	r3, r3, #7
 80021f8:	2201      	movs	r2, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	b25a      	sxtb	r2, r3
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <Make_Sensor_State+0x78>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b25b      	sxtb	r3, r3
 800220c:	4013      	ands	r3, r2
 800220e:	b25b      	sxtb	r3, r3
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <Make_Sensor_State+0x78>)
 8002214:	701a      	strb	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20002504 	.word	0x20002504
 8002228:	20000130 	.word	0x20000130
 800222c:	20002514 	.word	0x20002514

08002230 <Sensor_TIM5_IRQ>:





__STATIC_INLINE void		Sensor_TIM5_IRQ() {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

	static uint8_t	sensorReadIdx = 0;
	static uint8_t	sensorReadIdxTable[8] = { 3, 4, 2, 5, 1, 6, 0, 7 };

	Make_Sensor_Raw_Vals(sensorReadIdxTable[sensorReadIdx]);
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <Sensor_TIM5_IRQ+0x70>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <Sensor_TIM5_IRQ+0x74>)
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fef2 	bl	8002028 <Make_Sensor_Raw_Vals>

	Make_Sensor_Norm_Vals(sensorReadIdxTable[sensorReadIdx]);
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <Sensor_TIM5_IRQ+0x70>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <Sensor_TIM5_IRQ+0x74>)
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff62 	bl	8002118 <Make_Sensor_Norm_Vals>

	Make_Sensor_State(sensorReadIdxTable[sensorReadIdx]);
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <Sensor_TIM5_IRQ+0x70>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Sensor_TIM5_IRQ+0x74>)
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ffa8 	bl	80021b4 <Make_Sensor_State>

	sensorReadIdx = (sensorReadIdx + 1) & 0x07;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <Sensor_TIM5_IRQ+0x70>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <Sensor_TIM5_IRQ+0x70>)
 8002274:	701a      	strb	r2, [r3, #0]

	// curTick 업데이트
	curTick = (curTick_L + curTick_R) >> 2;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Sensor_TIM5_IRQ+0x78>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <Sensor_TIM5_IRQ+0x7c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <Sensor_TIM5_IRQ+0x80>)
 8002284:	6013      	str	r3, [r2, #0]

	// lineOut 판단 시간 업데이트
	if (driveState == DRIVE_DECISION_LINE_OUT) {
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <Sensor_TIM5_IRQ+0x84>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b04      	cmp	r3, #4
 800228e:	d104      	bne.n	800229a <Sensor_TIM5_IRQ+0x6a>

		curTime++;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <Sensor_TIM5_IRQ+0x88>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <Sensor_TIM5_IRQ+0x88>)
 8002298:	6013      	str	r3, [r2, #0]
	}
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000032a 	.word	0x2000032a
 80022a4:	20000028 	.word	0x20000028
 80022a8:	200014c4 	.word	0x200014c4
 80022ac:	200014c8 	.word	0x200014c8
 80022b0:	200014cc 	.word	0x200014cc
 80022b4:	200024d4 	.word	0x200024d4
 80022b8:	200014d0 	.word	0x200014d0

080022bc <Window_Position_Val>:
#include "sensor.h"



// 이전 주기에서 읽은 센서 위치에서 4개만 선별
__STATIC_INLINE int32_t	Window_Position_Val() {
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	static int32_t	sensorNormVal = 0;
	static int32_t	positionSum = 0;
	static int32_t	sensorNormValsSum = 1;


	positionIdxMax = 5;
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <Window_Position_Val+0xb8>)
 80022c2:	2205      	movs	r2, #5
 80022c4:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 2;
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <Window_Position_Val+0xbc>)
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]

	// positionVal이 -2000보다 작거나 2000 보다 클 때
	if (absPositionVal > positionTable[4]) {
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <Window_Position_Val+0xc0>)
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <Window_Position_Val+0xc4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	da10      	bge.n	80022fa <Window_Position_Val+0x3e>

		// positionVal이 -2000보다 작을 때
		if (positionVal < 0) {
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <Window_Position_Val+0xc8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da06      	bge.n	80022ee <Window_Position_Val+0x32>
			positionIdxMax = 4;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <Window_Position_Val+0xb8>)
 80022e2:	2204      	movs	r2, #4
 80022e4:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 1;
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <Window_Position_Val+0xbc>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e005      	b.n	80022fa <Window_Position_Val+0x3e>
		}
		// positionVal이 2000보다 클 때
		else {
			positionIdxMax = 6;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <Window_Position_Val+0xb8>)
 80022f0:	2206      	movs	r2, #6
 80022f2:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 3;
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <Window_Position_Val+0xbc>)
 80022f6:	2203      	movs	r2, #3
 80022f8:	701a      	strb	r2, [r3, #0]
		}
	}


	positionSum = 0;
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <Window_Position_Val+0xcc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <Window_Position_Val+0xd0>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]


	do {

		// 중간에 센서 인터럽트가 있다면 값이 바뀔 수 있음으로 별도의 변수에 저장
		sensorNormVal = sensorNormVals[positionIdxMin];
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <Window_Position_Val+0xbc>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <Window_Position_Val+0xd4>)
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <Window_Position_Val+0xd8>)
 8002316:	601a      	str	r2, [r3, #0]

		positionSum += positionTable[positionIdxMin] * sensorNormVal;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <Window_Position_Val+0xbc>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <Window_Position_Val+0xc0>)
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <Window_Position_Val+0xd8>)
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fb03 f202 	mul.w	r2, r3, r2
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <Window_Position_Val+0xcc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4413      	add	r3, r2
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <Window_Position_Val+0xcc>)
 8002334:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVal;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <Window_Position_Val+0xd0>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <Window_Position_Val+0xd8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <Window_Position_Val+0xd0>)
 8002342:	6013      	str	r3, [r2, #0]

		positionIdxMin++;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <Window_Position_Val+0xbc>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <Window_Position_Val+0xbc>)
 800234e:	701a      	strb	r2, [r3, #0]

	} while (positionIdxMin < positionIdxMax + 1);
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <Window_Position_Val+0xb8>)
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <Window_Position_Val+0xbc>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d2d4      	bcs.n	8002306 <Window_Position_Val+0x4a>


	// positionValBuffer 값 return
	//divide by zero 방지하기 위해 sensorNormValsSum + 1로 나눔
	return positionSum / (sensorNormValsSum + 1);
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <Window_Position_Val+0xcc>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <Window_Position_Val+0xd0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000
 8002378:	20000001 	.word	0x20000001
 800237c:	20000004 	.word	0x20000004
 8002380:	200014bc 	.word	0x200014bc
 8002384:	200014b4 	.word	0x200014b4
 8002388:	20000320 	.word	0x20000320
 800238c:	20000024 	.word	0x20000024
 8002390:	20002504 	.word	0x20002504
 8002394:	20000324 	.word	0x20000324

08002398 <Update_Limited_Position_Val>:
	}
}



__STATIC_INLINE void	Update_Limited_Position_Val() {
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

	// 곡선에 진입을 시작했을 때 빠르게 curve decel을 해줌
	if (limitedPositionVal < absPositionVal) {
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <Update_Limited_Position_Val+0x5c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	da0f      	bge.n	80023c8 <Update_Limited_Position_Val+0x30>

		limitedPositionVal += 20;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3314      	adds	r3, #20
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023b0:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal > absPositionVal) {
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <Update_Limited_Position_Val+0x5c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dd13      	ble.n	80023e6 <Update_Limited_Position_Val+0x4e>
			limitedPositionVal = absPositionVal;
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <Update_Limited_Position_Val+0x5c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023c4:	6013      	str	r3, [r2, #0]
		limitedPositionVal -= 10;
		if (limitedPositionVal < absPositionVal) {
			limitedPositionVal = absPositionVal;
		}
	}
}
 80023c6:	e00e      	b.n	80023e6 <Update_Limited_Position_Val+0x4e>
		limitedPositionVal -= 10;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3b0a      	subs	r3, #10
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023d0:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal < absPositionVal) {
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <Update_Limited_Position_Val+0x5c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	da03      	bge.n	80023e6 <Update_Limited_Position_Val+0x4e>
			limitedPositionVal = absPositionVal;
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <Update_Limited_Position_Val+0x5c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <Update_Limited_Position_Val+0x58>)
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	200014b8 	.word	0x200014b8
 80023f4:	200014bc 	.word	0x200014bc

080023f8 <Update_Position_Val>:





__STATIC_INLINE void	Update_Position_Val() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0


	positionVal = Window_Position_Val();//Stabilize_Position_Val( Window_Position_Val() );
 80023fc:	f7ff ff5e 	bl	80022bc <Window_Position_Val>
 8002400:	4603      	mov	r3, r0
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <Update_Position_Val+0x30>)
 8002404:	6013      	str	r3, [r2, #0]

	absPositionVal = ABS(positionVal);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <Update_Position_Val+0x30>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	da03      	bge.n	8002416 <Update_Position_Val+0x1e>
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <Update_Position_Val+0x30>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	425b      	negs	r3, r3
 8002414:	e001      	b.n	800241a <Update_Position_Val+0x22>
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <Update_Position_Val+0x30>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <Update_Position_Val+0x34>)
 800241c:	6013      	str	r3, [r2, #0]

	Update_Limited_Position_Val();
 800241e:	f7ff ffbb 	bl	8002398 <Update_Limited_Position_Val>
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200014b4 	.word	0x200014b4
 800242c:	200014bc 	.word	0x200014bc

08002430 <Motor_L_Speed_Control>:





__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 800243a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002464 <Motor_L_Speed_Control+0x34>
 800243e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800244a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800244e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002452:	ee17 1a90 	vmov	r1, s15
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <Motor_L_Speed_Control+0x38>)
 8002458:	f7ff fda4 	bl	8001fa4 <LL_TIM_SetAutoReload>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	43cc3418 	.word	0x43cc3418
 8002468:	40000400 	.word	0x40000400

0800246c <Motor_R_Speed_Control>:


__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 8002476:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80024a0 <Motor_R_Speed_Control+0x34>
 800247a:	ed97 7a01 	vldr	s14, [r7, #4]
 800247e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800248a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248e:	ee17 1a90 	vmov	r1, s15
 8002492:	4804      	ldr	r0, [pc, #16]	; (80024a4 <Motor_R_Speed_Control+0x38>)
 8002494:	f7ff fd86 	bl	8001fa4 <LL_TIM_SetAutoReload>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	43cc3418 	.word	0x43cc3418
 80024a4:	40000800 	.word	0x40000800

080024a8 <Drive_TIM9_IRQ>:




// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0

	static float	finalSpeed;


	// 가속도 조절
	if (currentSpeed < targetSpeed) {
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 80024ae:	ed93 7a00 	vldr	s14, [r3]
 80024b2:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <Drive_TIM9_IRQ+0x130>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d51e      	bpl.n	8002500 <Drive_TIM9_IRQ+0x58>

		currentSpeed += accele / 2000;
 80024c2:	4b46      	ldr	r3, [pc, #280]	; (80025dc <Drive_TIM9_IRQ+0x134>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80025e0 <Drive_TIM9_IRQ+0x138>
 80024cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]
		if (currentSpeed > targetSpeed) {
 80024e0:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <Drive_TIM9_IRQ+0x130>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	dd22      	ble.n	800253c <Drive_TIM9_IRQ+0x94>
			currentSpeed = targetSpeed;
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <Drive_TIM9_IRQ+0x130>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a36      	ldr	r2, [pc, #216]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <Drive_TIM9_IRQ+0x94>
		}
	}
	else {

		currentSpeed -= decele / 2000;
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <Drive_TIM9_IRQ+0x13c>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	eddf 6a36 	vldr	s13, [pc, #216]	; 80025e0 <Drive_TIM9_IRQ+0x138>
 800250a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 8002510:	ed93 7a00 	vldr	s14, [r3]
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 800251a:	edc3 7a00 	vstr	s15, [r3]
		if (currentSpeed < targetSpeed) {
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <Drive_TIM9_IRQ+0x130>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d503      	bpl.n	800253c <Drive_TIM9_IRQ+0x94>
			currentSpeed = targetSpeed;
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <Drive_TIM9_IRQ+0x130>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 800253a:	6013      	str	r3, [r2, #0]
		}
	}


	// positionVal 값 업데이트
	Update_Position_Val();
 800253c:	f7ff ff5c 	bl	80023f8 <Update_Position_Val>

	// 포지션 값에 따른 감속
	finalSpeed = curveDecelCoef * currentSpeed * (limitedPositionVal + curveDecelCoef);
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <Drive_TIM9_IRQ+0x140>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <Drive_TIM9_IRQ+0x12c>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <Drive_TIM9_IRQ+0x144>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <Drive_TIM9_IRQ+0x140>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <Drive_TIM9_IRQ+0x148>)
 800256c:	edc3 7a00 	vstr	s15, [r3]

	//position 값에 따른 좌우 모터 속도 조정
	Motor_L_Speed_Control( finalSpeed * (1 + positionVal * positionCoef) );
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <Drive_TIM9_IRQ+0x14c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <Drive_TIM9_IRQ+0x150>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800258a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <Drive_TIM9_IRQ+0x148>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	f7ff ff48 	bl	8002430 <Motor_L_Speed_Control>
	Motor_R_Speed_Control( finalSpeed * (1 - positionVal * positionCoef) );
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <Drive_TIM9_IRQ+0x14c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <Drive_TIM9_IRQ+0x150>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <Drive_TIM9_IRQ+0x148>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	f7ff ff4e 	bl	800246c <Motor_R_Speed_Control>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000004c 	.word	0x2000004c
 80025d8:	20000048 	.word	0x20000048
 80025dc:	20000040 	.word	0x20000040
 80025e0:	44fa0000 	.word	0x44fa0000
 80025e4:	20000044 	.word	0x20000044
 80025e8:	20000054 	.word	0x20000054
 80025ec:	200014b8 	.word	0x200014b8
 80025f0:	2000031c 	.word	0x2000031c
 80025f4:	200014b4 	.word	0x200014b4
 80025f8:	2000003c 	.word	0x2000003c

080025fc <Custom_GPIO_Set_t>:
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}

static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	43db      	mvns	r3, r3
 8002612:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	2a00      	cmp	r2, #0
 800261e:	d002      	beq.n	8002626 <Custom_GPIO_Set_t+0x2a>
 8002620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002624:	e000      	b.n	8002628 <Custom_GPIO_Set_t+0x2c>
 8002626:	2200      	movs	r2, #0
 8002628:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 800262e:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8002630:	615a      	str	r2, [r3, #20]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <Motor_L_TIM3_IRQ>:





__STATIC_INLINE void	Motor_L_TIM3_IRQ() {
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	phaseL = (phaseL + 1) & 0x03;
	*/


	// motorL phase 잡기
	Custom_GPIO_Set_t(motorL + 0, (phases[7 - phaseL] >> 0) & 0x01);
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f1c3 0307 	rsb	r3, r3, #7
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <Motor_L_TIM3_IRQ+0x9c>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	4619      	mov	r1, r3
 8002658:	4821      	ldr	r0, [pc, #132]	; (80026e0 <Motor_L_TIM3_IRQ+0xa0>)
 800265a:	f7ff ffcf 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, (phases[7 - phaseL] >> 1) & 0x01);
 800265e:	4821      	ldr	r0, [pc, #132]	; (80026e4 <Motor_L_TIM3_IRQ+0xa4>)
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f1c3 0307 	rsb	r3, r3, #7
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <Motor_L_TIM3_IRQ+0x9c>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	4619      	mov	r1, r3
 8002678:	f7ff ffc0 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, (phases[7 - phaseL] >> 2) & 0x01);
 800267c:	481a      	ldr	r0, [pc, #104]	; (80026e8 <Motor_L_TIM3_IRQ+0xa8>)
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <Motor_L_TIM3_IRQ+0x9c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4619      	mov	r1, r3
 8002696:	f7ff ffb1 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, (phases[7 - phaseL] >> 3) & 0x01);
 800269a:	4814      	ldr	r0, [pc, #80]	; (80026ec <Motor_L_TIM3_IRQ+0xac>)
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f1c3 0307 	rsb	r3, r3, #7
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <Motor_L_TIM3_IRQ+0x9c>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7ff ffa2 	bl	80025fc <Custom_GPIO_Set_t>

	phaseL = (phaseL + 1) & 0x07;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <Motor_L_TIM3_IRQ+0x98>)
 80026c8:	701a      	strb	r2, [r3, #0]


	// tick 값 증가
	curTick_L += 1;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <Motor_L_TIM3_IRQ+0xb0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <Motor_L_TIM3_IRQ+0xb0>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000328 	.word	0x20000328
 80026dc:	20000118 	.word	0x20000118
 80026e0:	200000d8 	.word	0x200000d8
 80026e4:	200000e0 	.word	0x200000e0
 80026e8:	200000e8 	.word	0x200000e8
 80026ec:	200000f0 	.word	0x200000f0
 80026f0:	200014c4 	.word	0x200014c4

080026f4 <Motor_R_TIM4_IRQ>:





__STATIC_INLINE void	Motor_R_TIM4_IRQ() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	static uint8_t phaseR  = 0;


	// motorR phase 잡기
	Custom_GPIO_Set_t(motorR + 0, (phases[phaseR] >> 0) & 0x01);
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <Motor_R_TIM4_IRQ+0x9c>)
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	4619      	mov	r1, r3
 800270a:	4822      	ldr	r0, [pc, #136]	; (8002794 <Motor_R_TIM4_IRQ+0xa0>)
 800270c:	f7ff ff76 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, (phases[phaseR] >> 1) & 0x01);
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <Motor_R_TIM4_IRQ+0xa4>)
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <Motor_R_TIM4_IRQ+0x9c>)
 800271a:	5c5b      	ldrb	r3, [r3, r1]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff ff67 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, (phases[phaseR] >> 2) & 0x01);
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <Motor_R_TIM4_IRQ+0xa8>)
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <Motor_R_TIM4_IRQ+0x9c>)
 8002738:	5c5b      	ldrb	r3, [r3, r1]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f7ff ff58 	bl	80025fc <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, (phases[phaseR] >> 3) & 0x01);
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <Motor_R_TIM4_IRQ+0xac>)
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <Motor_R_TIM4_IRQ+0x9c>)
 8002756:	5c5b      	ldrb	r3, [r3, r1]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7ff ff49 	bl	80025fc <Custom_GPIO_Set_t>

	//phaseR = (phaseR + 1) & 0x03;

	phaseR = (phaseR + 1) & 0x07;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <Motor_R_TIM4_IRQ+0x98>)
 800277a:	701a      	strb	r2, [r3, #0]


	// tick 값 증가
	curTick_R += 1;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <Motor_R_TIM4_IRQ+0xb0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <Motor_R_TIM4_IRQ+0xb0>)
 8002784:	6013      	str	r3, [r2, #0]
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000329 	.word	0x20000329
 8002790:	20000118 	.word	0x20000118
 8002794:	200000f8 	.word	0x200000f8
 8002798:	20000100 	.word	0x20000100
 800279c:	20000108 	.word	0x20000108
 80027a0:	20000110 	.word	0x20000110
 80027a4:	200014c8 	.word	0x200014c8

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80027ac:	e7fe      	b.n	80027ac <NMI_Handler+0x4>

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 80027b2:	f004 f8a3 	bl	80068fc <Motor_Power_Off>
 80027b6:	e7fc      	b.n	80027b2 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 80027bc:	f004 f89e 	bl	80068fc <Motor_Power_Off>
 80027c0:	e7fc      	b.n	80027bc <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 80027c6:	f004 f899 	bl	80068fc <Motor_Power_Off>
 80027ca:	e7fc      	b.n	80027c6 <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 80027d0:	f004 f894 	bl	80068fc <Motor_Power_Off>
 80027d4:	e7fc      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Handler+0x18>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	4a03      	ldr	r2, [pc, #12]	; (8002818 <SysTick_Handler+0x18>)
 800280c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000318 	.word	0x20000318

0800281c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  Drive_TIM9_IRQ();
 8002820:	f7ff fe42 	bl	80024a8 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM9);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002826:	f7ff fbcb 	bl	8001fc0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40014000 	.word	0x40014000

08002834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Motor_L_TIM3_IRQ();
 8002838:	f7ff ff02 	bl	8002640 <Motor_L_TIM3_IRQ>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM3);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM3_IRQHandler+0x14>)
 800283e:	f7ff fbbf 	bl	8001fc0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40000400 	.word	0x40000400

0800284c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  Motor_R_TIM4_IRQ();
 8002850:	f7ff ff50 	bl	80026f4 <Motor_R_TIM4_IRQ>
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <TIM4_IRQHandler+0x14>)
 8002856:	f7ff fbb3 	bl	8001fc0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM4_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40000800 	.word	0x40000800

08002864 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  Sensor_TIM5_IRQ();
 8002868:	f7ff fce2 	bl	8002230 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM5);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <TIM5_IRQHandler+0x14>)
 800286e:	f7ff fba7 	bl	8001fc0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40000c00 	.word	0x40000c00

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
	return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002896:	f005 fb9d 	bl	8007fd4 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
	return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
	while (1) {}		/* Make sure we hang here */
 80028be:	e7fe      	b.n	80028be <_exit+0x12>

080028c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e00a      	b.n	80028e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4601      	mov	r1, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <_read+0x12>
	}

return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f003 faf9 	bl	8005f0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x12>
	}
	return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_isatty>:

int _isatty(int file)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	return 1;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
	return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f005 fb02 	bl	8007fd4 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000334 	.word	0x20000334
 8002a04:	20002668 	.word	0x20002668

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a32:	490e      	ldr	r1, [pc, #56]	; (8002a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a34:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a48:	4c0b      	ldr	r4, [pc, #44]	; (8002a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a56:	f7ff ffd7 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f005 fac1 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7fe fe80 	bl	8001762 <main>
  bx  lr    
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002a70:	0800af34 	.word	0x0800af34
  ldr r2, =_sbss
 8002a74:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002a78:	20002664 	.word	0x20002664

08002a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>

08002a7e <LL_ADC_SetCommonClock>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_REG_SetSequencerLength>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_IsEnabled>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002afe:	480a      	ldr	r0, [pc, #40]	; (8002b28 <LL_ADC_CommonInit+0x38>)
 8002b00:	f7ff ffe3 	bl	8002aca <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ffb4 	bl	8002a7e <LL_ADC_SetCommonClock>
 8002b16:	e001      	b.n	8002b1c <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40012000 	.word	0x40012000

08002b2c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffc5 	bl	8002aca <LL_ADC_IsEnabled>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d117      	bne.n	8002b76 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	6892      	ldr	r2, [r2, #8]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e001      	b.n	8002b7a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff99 	bl	8002aca <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12b      	bne.n	8002bf6 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	e005      	b.n	8002bc6 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <LL_ADC_REG_Init+0x80>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	6912      	ldr	r2, [r2, #16]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff58 	bl	8002aa4 <LL_ADC_REG_SetSequencerLength>
 8002bf4:	e001      	b.n	8002bfa <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	c0fffcfd 	.word	0xc0fffcfd

08002c08 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4904      	ldr	r1, [pc, #16]	; (8002c28 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4904      	ldr	r1, [pc, #16]	; (8002c50 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4904      	ldr	r1, [pc, #16]	; (8002c74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]

}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	4904      	ldr	r1, [pc, #16]	; (8002c9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]

}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40013c00 	.word	0x40013c00

08002cec <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60cb      	str	r3, [r1, #12]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d065      	beq.n	8002e18 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d06b      	beq.n	8002e2c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	795b      	ldrb	r3, [r3, #5]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d01c      	beq.n	8002d96 <LL_EXTI_Init+0x5e>
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	dc25      	bgt.n	8002dac <LL_EXTI_Init+0x74>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <LL_EXTI_Init+0x32>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d00b      	beq.n	8002d80 <LL_EXTI_Init+0x48>
 8002d68:	e020      	b.n	8002dac <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff82 	bl	8002c78 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff45 	bl	8002c08 <LL_EXTI_EnableIT_0_31>
          break;
 8002d7e:	e018      	b.n	8002db2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff51 	bl	8002c2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff60 	bl	8002c54 <LL_EXTI_EnableEvent_0_31>
          break;
 8002d94:	e00d      	b.n	8002db2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff34 	bl	8002c08 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff55 	bl	8002c54 <LL_EXTI_EnableEvent_0_31>
          break;
 8002daa:	e002      	b.n	8002db2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
          break;
 8002db0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	799b      	ldrb	r3, [r3, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d038      	beq.n	8002e2c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d01c      	beq.n	8002dfc <LL_EXTI_Init+0xc4>
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	dc25      	bgt.n	8002e12 <LL_EXTI_Init+0xda>
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <LL_EXTI_Init+0x98>
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d00b      	beq.n	8002de6 <LL_EXTI_Init+0xae>
 8002dce:	e020      	b.n	8002e12 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff9b 	bl	8002d10 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff5e 	bl	8002ca0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002de4:	e022      	b.n	8002e2c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff6a 	bl	8002cc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff79 	bl	8002cec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002dfa:	e017      	b.n	8002e2c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff4d 	bl	8002ca0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff6e 	bl	8002cec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002e10:	e00c      	b.n	8002e2c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
            break;
 8002e16:	e009      	b.n	8002e2c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff05 	bl	8002c2c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff26 	bl	8002c78 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <LL_GPIO_SetPinMode>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b089      	sub	sp, #36	; 0x24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	61bb      	str	r3, [r7, #24]
  return result;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3724      	adds	r7, #36	; 0x24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_GPIO_SetPinOutputType>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_GPIO_SetPinSpeed>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	613b      	str	r3, [r7, #16]
  return result;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2103      	movs	r1, #3
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	61bb      	str	r3, [r7, #24]
  return result;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_GPIO_SetPinPull>:
{
 8002f22:	b480      	push	{r7}
 8002f24:	b089      	sub	sp, #36	; 0x24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	613b      	str	r3, [r7, #16]
  return result;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2103      	movs	r1, #3
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	401a      	ands	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	61bb      	str	r3, [r7, #24]
  return result;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	60da      	str	r2, [r3, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3724      	adds	r7, #36	; 0x24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_GPIO_SetAFPin_0_7>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	613b      	str	r3, [r7, #16]
  return result;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61bb      	str	r3, [r7, #24]
  return result;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	621a      	str	r2, [r3, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_GPIO_SetAFPin_8_15>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b089      	sub	sp, #36	; 0x24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	613b      	str	r3, [r7, #16]
  return result;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	210f      	movs	r1, #15
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	401a      	ands	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	61bb      	str	r3, [r7, #24]
  return result;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003034:	bf00      	nop
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	613b      	str	r3, [r7, #16]
  return result;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800306a:	e050      	b.n	800310e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d042      	beq.n	8003108 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <LL_GPIO_Init+0x52>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d10d      	bne.n	80030ae <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ff12 	bl	8002ec4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	461a      	mov	r2, r3
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fef3 	bl	8002e94 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	461a      	mov	r2, r3
 80030b4:	69b9      	ldr	r1, [r7, #24]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ff33 	bl	8002f22 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d11a      	bne.n	80030fa <LL_GPIO_Init+0xba>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	60bb      	str	r3, [r7, #8]
  return result;
 80030d0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b07      	cmp	r3, #7
 80030da:	d807      	bhi.n	80030ec <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	461a      	mov	r2, r3
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff4b 	bl	8002f80 <LL_GPIO_SetAFPin_0_7>
 80030ea:	e006      	b.n	80030fa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	461a      	mov	r2, r3
 80030f2:	69b9      	ldr	r1, [r7, #24]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff72 	bl	8002fde <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fe97 	bl	8002e36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1a7      	bne.n	800306c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <LL_I2C_Enable>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_I2C_Disable>:
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0201 	bic.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_I2C_ConfigFilters>:
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f023 021f 	bic.w	r2, r3, #31
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	430b      	orrs	r3, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_I2C_SetOwnAddress1>:
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <LL_I2C_ConfigSpeed+0x124>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9b      	lsrs	r3, r3, #18
 80031e4:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	493a      	ldr	r1, [pc, #232]	; (80032ec <LL_I2C_ConfigSpeed+0x128>)
 8003202:	428b      	cmp	r3, r1
 8003204:	d802      	bhi.n	800320c <LL_I2C_ConfigSpeed+0x48>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3301      	adds	r3, #1
 800320a:	e009      	b.n	8003220 <LL_I2C_ConfigSpeed+0x5c>
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4936      	ldr	r1, [pc, #216]	; (80032f0 <LL_I2C_ConfigSpeed+0x12c>)
 8003218:	fba1 1303 	umull	r1, r3, r1, r3
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	3301      	adds	r3, #1
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a30      	ldr	r2, [pc, #192]	; (80032ec <LL_I2C_ConfigSpeed+0x128>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d939      	bls.n	80032a2 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d117      	bne.n	8003264 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325c:	e01d      	b.n	800329a <LL_I2C_ConfigSpeed+0xd6>
 800325e:	f248 0301 	movw	r3, #32769	; 0x8001
 8003262:	e01a      	b.n	800329a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	e001      	b.n	800329a <LL_I2C_ConfigSpeed+0xd6>
 8003296:	f248 0301 	movw	r3, #32769	; 0x8001
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e011      	b.n	80032c6 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b0:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	e000      	b.n	80032c4 <LL_I2C_ConfigSpeed+0x100>
 80032c2:	2304      	movs	r3, #4
 80032c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	61da      	str	r2, [r3, #28]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	000186a0 	.word	0x000186a0
 80032f0:	10624dd3 	.word	0x10624dd3

080032f4 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 021a 	bic.w	r2, r3, #26
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fefb 	bl	8003146 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f89d 	bl	8003494 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	461a      	mov	r2, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fefe 	bl	8003166 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800336a:	6939      	ldr	r1, [r7, #16]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff25 	bl	80031c4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6959      	ldr	r1, [r3, #20]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	461a      	mov	r2, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff04 	bl	8003192 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffaf 	bl	80032f4 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fec5 	bl	8003126 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffb9 	bl	800331a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <LL_RCC_GetSysClkSource>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <LL_RCC_GetSysClkSource+0x18>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <LL_RCC_GetAHBPrescaler>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <LL_RCC_GetAPB1Prescaler>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <LL_RCC_GetAPB1Prescaler+0x18>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800

08003408 <LL_RCC_GetAPB2Prescaler>:
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <LL_RCC_GetAPB2Prescaler+0x18>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <LL_RCC_PLL_GetMainSource+0x18>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <LL_RCC_PLL_GetN+0x18>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40023800 	.word	0x40023800

0800345c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <LL_RCC_PLL_GetP+0x18>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800

08003478 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <LL_RCC_PLL_GetDivider+0x18>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800349c:	f000 f820 	bl	80034e0 <RCC_GetSystemClockFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f840 	bl	8003530 <RCC_GetHCLKClockFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f84e 	bl	800355c <RCC_GetPCLK1ClockFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f85a 	bl	8003584 <RCC_GetPCLK2ClockFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60da      	str	r2, [r3, #12]
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80034ea:	f7ff ff63 	bl	80033b4 <LL_RCC_GetSysClkSource>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d00c      	beq.n	800350e <RCC_GetSystemClockFreq+0x2e>
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d80f      	bhi.n	8003518 <RCC_GetSystemClockFreq+0x38>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <RCC_GetSystemClockFreq+0x22>
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d003      	beq.n	8003508 <RCC_GetSystemClockFreq+0x28>
 8003500:	e00a      	b.n	8003518 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <RCC_GetSystemClockFreq+0x48>)
 8003504:	607b      	str	r3, [r7, #4]
      break;
 8003506:	e00a      	b.n	800351e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <RCC_GetSystemClockFreq+0x4c>)
 800350a:	607b      	str	r3, [r7, #4]
      break;
 800350c:	e007      	b.n	800351e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800350e:	2008      	movs	r0, #8
 8003510:	f000 f84c 	bl	80035ac <RCC_PLL_GetFreqDomain_SYS>
 8003514:	6078      	str	r0, [r7, #4]
      break;
 8003516:	e002      	b.n	800351e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <RCC_GetSystemClockFreq+0x48>)
 800351a:	607b      	str	r3, [r7, #4]
      break;
 800351c:	bf00      	nop
  }

  return frequency;
 800351e:	687b      	ldr	r3, [r7, #4]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003538:	f7ff ff4a 	bl	80033d0 <LL_RCC_GetAHBPrescaler>
 800353c:	4603      	mov	r3, r0
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <RCC_GetHCLKClockFreq+0x28>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	40d3      	lsrs	r3, r2
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800a918 	.word	0x0800a918

0800355c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003564:	f7ff ff42 	bl	80033ec <LL_RCC_GetAPB1Prescaler>
 8003568:	4603      	mov	r3, r0
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <RCC_GetPCLK1ClockFreq+0x24>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	40d3      	lsrs	r3, r2
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	0800a928 	.word	0x0800a928

08003584 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800358c:	f7ff ff3c 	bl	8003408 <LL_RCC_GetAPB2Prescaler>
 8003590:	4603      	mov	r3, r0
 8003592:	0b5b      	lsrs	r3, r3, #13
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	40d3      	lsrs	r3, r2
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	0800a928 	.word	0x0800a928

080035ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80035c0:	f7ff ff30 	bl	8003424 <LL_RCC_PLL_GetMainSource>
 80035c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	d003      	beq.n	80035dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80035d4:	e005      	b.n	80035e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80035d8:	617b      	str	r3, [r7, #20]
      break;
 80035da:	e005      	b.n	80035e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80035de:	617b      	str	r3, [r7, #20]
      break;
 80035e0:	e002      	b.n	80035e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80035e4:	617b      	str	r3, [r7, #20]
      break;
 80035e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d113      	bne.n	8003616 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80035ee:	f7ff ff43 	bl	8003478 <LL_RCC_PLL_GetDivider>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80035fa:	f7ff ff21 	bl	8003440 <LL_RCC_PLL_GetN>
 80035fe:	4603      	mov	r3, r0
 8003600:	fb03 f404 	mul.w	r4, r3, r4
 8003604:	f7ff ff2a 	bl	800345c <LL_RCC_PLL_GetP>
 8003608:	4603      	mov	r3, r0
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	3301      	adds	r3, #1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fbb4 f3f3 	udiv	r3, r4, r3
 8003614:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003616:	693b      	ldr	r3, [r7, #16]
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <LL_SPI_IsEnabled>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d101      	bne.n	8003640 <LL_SPI_IsEnabled+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_SPI_IsEnabled+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffd3 	bl	8003628 <LL_SPI_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d139      	bne.n	80036fc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003690:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6811      	ldr	r1, [r2, #0]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	4311      	orrs	r1, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	68d2      	ldr	r2, [r2, #12]
 80036a8:	4311      	orrs	r1, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6912      	ldr	r2, [r2, #16]
 80036ae:	4311      	orrs	r1, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6952      	ldr	r2, [r2, #20]
 80036b4:	4311      	orrs	r1, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	6992      	ldr	r2, [r2, #24]
 80036ba:	4311      	orrs	r1, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	69d2      	ldr	r2, [r2, #28]
 80036c0:	4311      	orrs	r1, r2
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	6a12      	ldr	r2, [r2, #32]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f023 0204 	bic.w	r2, r3, #4
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	0c1b      	lsrs	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d105      	bne.n	80036f8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffab 	bl	800364e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	61da      	str	r2, [r3, #28]
  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <LL_TIM_SetPrescaler>:
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_TIM_SetAutoReload>:
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_TIM_SetRepetitionCounter>:
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a31      	ldr	r2, [pc, #196]	; (8003860 <LL_TIM_Init+0xd8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <LL_TIM_Init+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d00b      	beq.n	80037c0 <LL_TIM_Init+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2e      	ldr	r2, [pc, #184]	; (8003864 <LL_TIM_Init+0xdc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <LL_TIM_Init+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <LL_TIM_Init+0xe0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <LL_TIM_Init+0x38>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <LL_TIM_Init+0xe4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d106      	bne.n	80037ce <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <LL_TIM_Init+0xd8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01b      	beq.n	800380e <LL_TIM_Init+0x86>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d017      	beq.n	800380e <LL_TIM_Init+0x86>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a20      	ldr	r2, [pc, #128]	; (8003864 <LL_TIM_Init+0xdc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <LL_TIM_Init+0x86>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <LL_TIM_Init+0xe0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <LL_TIM_Init+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <LL_TIM_Init+0xe4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <LL_TIM_Init+0x86>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <LL_TIM_Init+0xe8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <LL_TIM_Init+0x86>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <LL_TIM_Init+0xec>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <LL_TIM_Init+0x86>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <LL_TIM_Init+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d106      	bne.n	800381c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff80 	bl	800372e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff6c 	bl	8003712 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a08      	ldr	r2, [pc, #32]	; (8003860 <LL_TIM_Init+0xd8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d105      	bne.n	800384e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff7e 	bl	800374a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff89 	bl	8003766 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800

0800387c <LL_USART_IsEnabled>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_USART_SetStopBitsLength>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_USART_SetHWFlowCtrl>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	615a      	str	r2, [r3, #20]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_USART_SetBaudRate>:
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b0c0      	sub	sp, #256	; 0x100
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038fc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003900:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	f040 810c 	bne.w	8003b2c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003914:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800391e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	1891      	adds	r1, r2, r2
 800392c:	6639      	str	r1, [r7, #96]	; 0x60
 800392e:	415b      	adcs	r3, r3
 8003930:	667b      	str	r3, [r7, #100]	; 0x64
 8003932:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003936:	4621      	mov	r1, r4
 8003938:	eb12 0801 	adds.w	r8, r2, r1
 800393c:	4629      	mov	r1, r5
 800393e:	eb43 0901 	adc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003964:	462b      	mov	r3, r5
 8003966:	eb49 0303 	adc.w	r3, r9, r3
 800396a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800396e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003972:	2200      	movs	r2, #0
 8003974:	469a      	mov	sl, r3
 8003976:	4693      	mov	fp, r2
 8003978:	eb1a 030a 	adds.w	r3, sl, sl
 800397c:	65bb      	str	r3, [r7, #88]	; 0x58
 800397e:	eb4b 030b 	adc.w	r3, fp, fp
 8003982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003984:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800398c:	f7fd f91e 	bl	8000bcc <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	b29b      	uxth	r3, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039b0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80039b4:	4642      	mov	r2, r8
 80039b6:	464b      	mov	r3, r9
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	6539      	str	r1, [r7, #80]	; 0x50
 80039bc:	415b      	adcs	r3, r3
 80039be:	657b      	str	r3, [r7, #84]	; 0x54
 80039c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039c4:	4641      	mov	r1, r8
 80039c6:	1851      	adds	r1, r2, r1
 80039c8:	64b9      	str	r1, [r7, #72]	; 0x48
 80039ca:	4649      	mov	r1, r9
 80039cc:	414b      	adcs	r3, r1
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80039dc:	4659      	mov	r1, fp
 80039de:	00cb      	lsls	r3, r1, #3
 80039e0:	4651      	mov	r1, sl
 80039e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e6:	4651      	mov	r1, sl
 80039e8:	00ca      	lsls	r2, r1, #3
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	4642      	mov	r2, r8
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f8:	464b      	mov	r3, r9
 80039fa:	460a      	mov	r2, r1
 80039fc:	eb42 0303 	adc.w	r3, r2, r3
 8003a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003a12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a16:	460b      	mov	r3, r1
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a28:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003a2c:	f7fd f8ce 	bl	8000bcc <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003a38:	fba3 2301 	umull	r2, r3, r3, r1
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2264      	movs	r2, #100	; 0x64
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	1acb      	subs	r3, r1, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4423      	add	r3, r4
 8003a62:	b29c      	uxth	r4, r3
 8003a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a72:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a86:	4641      	mov	r1, r8
 8003a88:	1851      	adds	r1, r2, r1
 8003a8a:	6339      	str	r1, [r7, #48]	; 0x30
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	414b      	adcs	r3, r1
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	00cb      	lsls	r3, r1, #3
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	00ca      	lsls	r2, r1, #3
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aba:	464b      	mov	r3, r9
 8003abc:	460a      	mov	r2, r1
 8003abe:	eb42 0303 	adc.w	r3, r2, r3
 8003ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003ad4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	18db      	adds	r3, r3, r3
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	4613      	mov	r3, r2
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003aee:	f7fd f86d 	bl	8000bcc <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2164      	movs	r1, #100	; 0x64
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4423      	add	r3, r4
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	e108      	b.n	8003d3a <LL_USART_SetBaudRate+0x44a>
 8003b28:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b36:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b3a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003b3e:	4642      	mov	r2, r8
 8003b40:	464b      	mov	r3, r9
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	6239      	str	r1, [r7, #32]
 8003b46:	415b      	adcs	r3, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4e:	4641      	mov	r1, r8
 8003b50:	1854      	adds	r4, r2, r1
 8003b52:	4649      	mov	r1, r9
 8003b54:	eb43 0501 	adc.w	r5, r3, r1
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	18e3      	adds	r3, r4, r3
 8003b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b74:	464b      	mov	r3, r9
 8003b76:	eb45 0303 	adc.w	r3, r5, r3
 8003b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003b98:	4629      	mov	r1, r5
 8003b9a:	008b      	lsls	r3, r1, #2
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	008a      	lsls	r2, r1, #2
 8003ba6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003baa:	f7fd f80f 	bl	8000bcc <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <LL_USART_SetBaudRate+0x458>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bce:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	61b9      	str	r1, [r7, #24]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1851      	adds	r1, r2, r1
 8003be6:	6139      	str	r1, [r7, #16]
 8003be8:	4649      	mov	r1, r9
 8003bea:	414b      	adcs	r3, r1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	00cb      	lsls	r3, r1, #3
 8003bfe:	4651      	mov	r1, sl
 8003c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c04:	4651      	mov	r1, sl
 8003c06:	00ca      	lsls	r2, r1, #3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4642      	mov	r2, r8
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c16:	464b      	mov	r3, r9
 8003c18:	460a      	mov	r2, r1
 8003c1a:	eb42 0303 	adc.w	r3, r2, r3
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	008b      	lsls	r3, r1, #2
 8003c40:	4641      	mov	r1, r8
 8003c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c46:	4641      	mov	r1, r8
 8003c48:	008a      	lsls	r2, r1, #2
 8003c4a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003c4e:	f7fc ffbd 	bl	8000bcc <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <LL_USART_SetBaudRate+0x458>)
 8003c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2264      	movs	r2, #100	; 0x64
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	1acb      	subs	r3, r1, r3
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	3332      	adds	r3, #50	; 0x32
 8003c6c:	4a36      	ldr	r2, [pc, #216]	; (8003d48 <LL_USART_SetBaudRate+0x458>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	4423      	add	r3, r4
 8003c7e:	b29c      	uxth	r4, r3
 8003c80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c84:	2200      	movs	r2, #0
 8003c86:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c88:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c8a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c8e:	4642      	mov	r2, r8
 8003c90:	464b      	mov	r3, r9
 8003c92:	1891      	adds	r1, r2, r2
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	415b      	adcs	r3, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	1851      	adds	r1, r2, r1
 8003ca2:	6039      	str	r1, [r7, #0]
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	414b      	adcs	r3, r1
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cb6:	4659      	mov	r1, fp
 8003cb8:	00cb      	lsls	r3, r1, #3
 8003cba:	4651      	mov	r1, sl
 8003cbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	00ca      	lsls	r2, r1, #3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4642      	mov	r2, r8
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8003cda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	008a      	lsls	r2, r1, #2
 8003cfe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d02:	f7fc ff63 	bl	8000bcc <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <LL_USART_SetBaudRate+0x458>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <LL_USART_SetBaudRate+0x458>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4423      	add	r3, r4
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d38:	609a      	str	r2, [r3, #8]
}
 8003d3a:	bf00      	nop
 8003d3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d40:	46bd      	mov	sp, r7
 8003d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d46:	bf00      	nop
 8003d48:	51eb851f 	.word	0x51eb851f

08003d4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fd8c 	bl	800387c <LL_USART_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d149      	bne.n	8003dfe <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d72:	f023 030c 	bic.w	r3, r3, #12
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	6851      	ldr	r1, [r2, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	6912      	ldr	r2, [r2, #16]
 8003d84:	4311      	orrs	r1, r2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6992      	ldr	r2, [r2, #24]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff fd83 	bl	80038a4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fd90 	bl	80038ca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fb70 	bl	8003494 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <LL_USART_Init+0xbc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d102      	bne.n	8003dc2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e00c      	b.n	8003ddc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <LL_USART_Init+0xc0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d102      	bne.n	8003dd0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e005      	b.n	8003ddc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <LL_USART_Init+0xc4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003dea:	2300      	movs	r3, #0
 8003dec:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69b9      	ldr	r1, [r7, #24]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fd79 	bl	80038f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40011000 	.word	0x40011000
 8003e0c:	40004400 	.word	0x40004400
 8003e10:	40011400 	.word	0x40011400

08003e14 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <LL_InitTick+0x30>)
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <LL_InitTick+0x30>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <LL_InitTick+0x30>)
 8003e34:	2205      	movs	r2, #5
 8003e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ffdd 	bl	8003e14 <LL_InitTick>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <LL_SetSystemCoreClock+0x1c>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000030 	.word	0x20000030

08003e84 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
	_file = file;
 8003e90:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <__Custom_Exception_Set_Message+0x2c>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6013      	str	r3, [r2, #0]
	_line = line;
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <__Custom_Exception_Set_Message+0x30>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6013      	str	r3, [r2, #0]
	_message = message;
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <__Custom_Exception_Set_Message+0x34>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000338 	.word	0x20000338
 8003eb4:	2000033c 	.word	0x2000033c
 8003eb8:	20000340 	.word	0x20000340

08003ebc <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8003ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ec4:	4803      	ldr	r0, [pc, #12]	; (8003ed4 <Custom_FileSystem_Load+0x18>)
 8003ec6:	f000 fa9b 	bl	8004400 <Custom_Flash_Read>
	filesystemLoaded = true;
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <Custom_FileSystem_Load+0x1c>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000344 	.word	0x20000344
 8003ed8:	20001345 	.word	0x20001345

08003edc <Custom_FileSystem_Get_CheckSum>:
	ASSERT(Custom_Flash_Erase());
	ASSERT(Custom_Flash_Write(filesystem, FILESYSTEM_SIZE));
	return true;
}

static uint8_t Custom_FileSystem_Get_CheckSum(FileInfo_t *file) {
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	FileInfo_u *fileUnion = (FileInfo_u*) file;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

	uint8_t checksum = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]

	for (int i = 0; i < FILEINFO_SIZE; i++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e009      	b.n	8003f06 <Custom_FileSystem_Get_CheckSum+0x2a>
		checksum ^= fileUnion->bytes[i];
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	4053      	eors	r3, r2
 8003efe:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < FILEINFO_SIZE; i++) {
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	3301      	adds	r3, #1
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b1b      	cmp	r3, #27
 8003f0a:	d9f2      	bls.n	8003ef2 <Custom_FileSystem_Get_CheckSum+0x16>
	}

	return checksum;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <Custom_FileSystem_IsValidName>:

bool Custom_FileSystem_IsValidName(char *filename) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	// 파일 이름이 너무 짧은 경우(0글자)
	ASSERT_MSG(filename[0] != 0, "Filename is too short.");
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <Custom_FileSystem_IsValidName+0x1e>
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <Custom_FileSystem_IsValidName+0x54>)
 8003f2e:	215a      	movs	r1, #90	; 0x5a
 8003f30:	4810      	ldr	r0, [pc, #64]	; (8003f74 <Custom_FileSystem_IsValidName+0x58>)
 8003f32:	f7ff ffa7 	bl	8003e84 <__Custom_Exception_Set_Message>
 8003f36:	2300      	movs	r3, #0
 8003f38:	e016      	b.n	8003f68 <Custom_FileSystem_IsValidName+0x4c>

	// 파일 이름이 적절한 경우
	for (int i = 0; i < FILENAME_LENGTH; i++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e00a      	b.n	8003f56 <Custom_FileSystem_IsValidName+0x3a>
		if (filename[i] == 0) return true;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <Custom_FileSystem_IsValidName+0x34>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e00b      	b.n	8003f68 <Custom_FileSystem_IsValidName+0x4c>
	for (int i = 0; i < FILENAME_LENGTH; i++) {
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b13      	cmp	r3, #19
 8003f5a:	ddf1      	ble.n	8003f40 <Custom_FileSystem_IsValidName+0x24>
	}

	// 파일 이름이 너무 긴 경우
	ASSERT_MSG(false, "Filename is too long.");
 8003f5c:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <Custom_FileSystem_IsValidName+0x5c>)
 8003f5e:	2162      	movs	r1, #98	; 0x62
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <Custom_FileSystem_IsValidName+0x58>)
 8003f62:	f7ff ff8f 	bl	8003e84 <__Custom_Exception_Set_Message>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	0800a294 	.word	0x0800a294
 8003f74:	0800a268 	.word	0x0800a268
 8003f78:	0800a2ac 	.word	0x0800a2ac

08003f7c <Custom_FileSystem_Validate>:

bool Custom_FileSystem_Validate(FileInfo_t *file) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	ASSERT_MSG(filesystemLoaded, "File system is not loaded yet.");
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <Custom_FileSystem_Validate+0xa0>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f083 0301 	eor.w	r3, r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <Custom_FileSystem_Validate+0x24>
 8003f92:	4a23      	ldr	r2, [pc, #140]	; (8004020 <Custom_FileSystem_Validate+0xa4>)
 8003f94:	2166      	movs	r1, #102	; 0x66
 8003f96:	4823      	ldr	r0, [pc, #140]	; (8004024 <Custom_FileSystem_Validate+0xa8>)
 8003f98:	f7ff ff74 	bl	8003e84 <__Custom_Exception_Set_Message>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e039      	b.n	8004014 <Custom_FileSystem_Validate+0x98>
	ASSERT(NAME_ISVALID(file->filename));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ffba 	bl	8003f1c <Custom_FileSystem_IsValidName>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f083 0301 	eor.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <Custom_FileSystem_Validate+0x3c>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e02d      	b.n	8004014 <Custom_FileSystem_Validate+0x98>
	ASSERT_MSG(RANGE_ISVALID(file), "File out out file system.");
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <Custom_FileSystem_Validate+0xac>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d307      	bcc.n	8003fd0 <Custom_FileSystem_Validate+0x54>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	331c      	adds	r3, #28
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <Custom_FileSystem_Validate+0xb0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d306      	bcc.n	8003fde <Custom_FileSystem_Validate+0x62>
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <Custom_FileSystem_Validate+0xb4>)
 8003fd2:	2168      	movs	r1, #104	; 0x68
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <Custom_FileSystem_Validate+0xa8>)
 8003fd6:	f7ff ff55 	bl	8003e84 <__Custom_Exception_Set_Message>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e01a      	b.n	8004014 <Custom_FileSystem_Validate+0x98>
	ASSERT_MSG(file->size > 0, "File size is 0.");
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <Custom_FileSystem_Validate+0x78>
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <Custom_FileSystem_Validate+0xb8>)
 8003fe8:	2169      	movs	r1, #105	; 0x69
 8003fea:	480e      	ldr	r0, [pc, #56]	; (8004024 <Custom_FileSystem_Validate+0xa8>)
 8003fec:	f7ff ff4a 	bl	8003e84 <__Custom_Exception_Set_Message>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e00f      	b.n	8004014 <Custom_FileSystem_Validate+0x98>

	uint8_t checksum = Custom_FileSystem_Get_CheckSum(file);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff71 	bl	8003edc <Custom_FileSystem_Get_CheckSum>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	73fb      	strb	r3, [r7, #15]
	ASSERT_MSG(checksum == 0, "Checksum is not 0.");
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <Custom_FileSystem_Validate+0x96>
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <Custom_FileSystem_Validate+0xbc>)
 8004006:	216c      	movs	r1, #108	; 0x6c
 8004008:	4806      	ldr	r0, [pc, #24]	; (8004024 <Custom_FileSystem_Validate+0xa8>)
 800400a:	f7ff ff3b 	bl	8003e84 <__Custom_Exception_Set_Message>
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <Custom_FileSystem_Validate+0x98>
	return true;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20001345 	.word	0x20001345
 8004020:	0800a2c4 	.word	0x0800a2c4
 8004024:	0800a268 	.word	0x0800a268
 8004028:	20000344 	.word	0x20000344
 800402c:	20001344 	.word	0x20001344
 8004030:	0800a2e4 	.word	0x0800a2e4
 8004034:	0800a300 	.word	0x0800a300
 8004038:	0800a310 	.word	0x0800a310

0800403c <Custom_FileSystem_Find>:

FileInfo_t* Custom_FileSystem_Find(char *filename) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	if (!filesystemLoaded) {
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <Custom_FileSystem_Find+0x88>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <Custom_FileSystem_Find+0x24>
		// 아예 파일시스템 로드가 안 된 경우
		SET_ERR("File system is not loaded yet.");
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <Custom_FileSystem_Find+0x8c>)
 8004054:	2173      	movs	r1, #115	; 0x73
 8004056:	481d      	ldr	r0, [pc, #116]	; (80040cc <Custom_FileSystem_Find+0x90>)
 8004058:	f7ff ff14 	bl	8003e84 <__Custom_Exception_Set_Message>
		return FILEINFO_NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	e02d      	b.n	80040bc <Custom_FileSystem_Find+0x80>
	}

	if (!NAME_ISVALID(filename)) return FILEINFO_NULL;
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff5b 	bl	8003f1c <Custom_FileSystem_IsValidName>
 8004066:	4603      	mov	r3, r0
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <Custom_FileSystem_Find+0x3a>
 8004072:	2300      	movs	r3, #0
 8004074:	e022      	b.n	80040bc <Custom_FileSystem_Find+0x80>

	uint8_t *file = filesystem;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <Custom_FileSystem_Find+0x94>)
 8004078:	60fb      	str	r3, [r7, #12]
	while (true) {
		if (!Custom_FileSystem_Validate(FILE(file))) break;
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ff7e 	bl	8003f7c <Custom_FileSystem_Validate>
 8004080:	4603      	mov	r3, r0
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d110      	bne.n	80040ae <Custom_FileSystem_Find+0x72>
		if (strcmp((FILE(file))->filename, filename) == 0) return FILE(file);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc f8fd 	bl	8000290 <strcmp>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <Custom_FileSystem_Find+0x64>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e00d      	b.n	80040bc <Custom_FileSystem_Find+0x80>
		else file += SIZE(file);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	331c      	adds	r3, #28
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
		if (!Custom_FileSystem_Validate(FILE(file))) break;
 80040ac:	e7e5      	b.n	800407a <Custom_FileSystem_Find+0x3e>
 80040ae:	bf00      	nop
	}

	SET_ERR("Such file does not exist.");
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <Custom_FileSystem_Find+0x98>)
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	4805      	ldr	r0, [pc, #20]	; (80040cc <Custom_FileSystem_Find+0x90>)
 80040b6:	f7ff fee5 	bl	8003e84 <__Custom_Exception_Set_Message>
	return FILEINFO_NULL;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20001345 	.word	0x20001345
 80040c8:	0800a2c4 	.word	0x0800a2c4
 80040cc:	0800a268 	.word	0x0800a268
 80040d0:	20000344 	.word	0x20000344
 80040d4:	0800a324 	.word	0x0800a324

080040d8 <Custom_FileSystem_Delete>:

bool Custom_FileSystem_Delete(FileInfo_t *file) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	ASSERT(Custom_FileSystem_Validate(file));
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff4b 	bl	8003f7c <Custom_FileSystem_Validate>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f083 0301 	eor.w	r3, r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <Custom_FileSystem_Delete+0x1e>
 80040f2:	2300      	movs	r3, #0
 80040f4:	e022      	b.n	800413c <Custom_FileSystem_Delete+0x64>

	// 파일데이터를 shift한다.
	uint8_t *ptr1 = PTR(file);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr2 = ptr1 + SIZE(file);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	331c      	adds	r3, #28
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	60bb      	str	r3, [r7, #8]

	for (; ptr2 < FSEND;) {
 8004106:	e009      	b.n	800411c <Custom_FileSystem_Delete+0x44>
		*ptr1 = *ptr2;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]
		ptr1++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
		ptr2++;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	3301      	adds	r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
	for (; ptr2 < FSEND;) {
 800411c:	4a09      	ldr	r2, [pc, #36]	; (8004144 <Custom_FileSystem_Delete+0x6c>)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4293      	cmp	r3, r2
 8004122:	d3f1      	bcc.n	8004108 <Custom_FileSystem_Delete+0x30>
	}

	// 남는 공간을 0으로 채운다.
	for (; ptr1 < FSEND; ptr1++) {
 8004124:	e005      	b.n	8004132 <Custom_FileSystem_Delete+0x5a>
		*ptr1 = 0;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
	for (; ptr1 < FSEND; ptr1++) {
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <Custom_FileSystem_Delete+0x6c>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4293      	cmp	r3, r2
 8004138:	d3f5      	bcc.n	8004126 <Custom_FileSystem_Delete+0x4e>
	}

	return true;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20001344 	.word	0x20001344

08004148 <Custom_FileSystem_Read>:

bool Custom_FileSystem_Read(FileInfo_t *file, uint8_t *dest, uint32_t length) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
	ASSERT(Custom_FileSystem_Validate(file));
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff ff11 	bl	8003f7c <Custom_FileSystem_Validate>
 800415a:	4603      	mov	r3, r0
 800415c:	f083 0301 	eor.w	r3, r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <Custom_FileSystem_Read+0x22>
 8004166:	2300      	movs	r3, #0
 8004168:	e021      	b.n	80041ae <Custom_FileSystem_Read+0x66>
	ASSERT_MSG(file->size >= length, "Given length is larger than file size.");
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d906      	bls.n	8004182 <Custom_FileSystem_Read+0x3a>
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <Custom_FileSystem_Read+0x70>)
 8004176:	219b      	movs	r1, #155	; 0x9b
 8004178:	4810      	ldr	r0, [pc, #64]	; (80041bc <Custom_FileSystem_Read+0x74>)
 800417a:	f7ff fe83 	bl	8003e84 <__Custom_Exception_Set_Message>
 800417e:	2300      	movs	r3, #0
 8004180:	e015      	b.n	80041ae <Custom_FileSystem_Read+0x66>

	uint8_t *ptr = DATA(file);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	331c      	adds	r3, #28
 8004186:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < length; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e00a      	b.n	80041a4 <Custom_FileSystem_Read+0x5c>
		dest[i] = ptr[i];
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	441a      	add	r2, r3
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	440b      	add	r3, r1
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < length; i++) {
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d3f0      	bcc.n	800418e <Custom_FileSystem_Read+0x46>
	}

	return true;
 80041ac:	2301      	movs	r3, #1
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	0800a340 	.word	0x0800a340
 80041bc:	0800a268 	.word	0x0800a268

080041c0 <Custom_FileSystem_Write>:

bool Custom_FileSystem_Write(char *filename, uint8_t *data, uint32_t length) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
	ASSERT_MSG(filesystemLoaded, "File system is not loaded yet.");
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <Custom_FileSystem_Write+0x190>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f083 0301 	eor.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <Custom_FileSystem_Write+0x28>
 80041da:	4a5e      	ldr	r2, [pc, #376]	; (8004354 <Custom_FileSystem_Write+0x194>)
 80041dc:	21a6      	movs	r1, #166	; 0xa6
 80041de:	485e      	ldr	r0, [pc, #376]	; (8004358 <Custom_FileSystem_Write+0x198>)
 80041e0:	f7ff fe50 	bl	8003e84 <__Custom_Exception_Set_Message>
 80041e4:	2300      	movs	r3, #0
 80041e6:	e0ae      	b.n	8004346 <Custom_FileSystem_Write+0x186>
	ASSERT(NAME_ISVALID(filename));
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fe97 	bl	8003f1c <Custom_FileSystem_IsValidName>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f083 0301 	eor.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <Custom_FileSystem_Write+0x3e>
 80041fa:	2300      	movs	r3, #0
 80041fc:	e0a3      	b.n	8004346 <Custom_FileSystem_Write+0x186>
	ASSERT_MSG(length > 0, "Cannot write zero length file.");
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <Custom_FileSystem_Write+0x52>
 8004204:	4a55      	ldr	r2, [pc, #340]	; (800435c <Custom_FileSystem_Write+0x19c>)
 8004206:	21a8      	movs	r1, #168	; 0xa8
 8004208:	4853      	ldr	r0, [pc, #332]	; (8004358 <Custom_FileSystem_Write+0x198>)
 800420a:	f7ff fe3b 	bl	8003e84 <__Custom_Exception_Set_Message>
 800420e:	2300      	movs	r3, #0
 8004210:	e099      	b.n	8004346 <Custom_FileSystem_Write+0x186>

	// 모든 파일을 순차적으로 읽으면서 남은 저장공간 계산
	uint32_t freeSpace = FILESYSTEM_SIZE;
 8004212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t *file = FSBASE;
 8004218:	4b51      	ldr	r3, [pc, #324]	; (8004360 <Custom_FileSystem_Write+0x1a0>)
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
	while (Custom_FileSystem_Validate(FILE(file))) {
 800421c:	e00c      	b.n	8004238 <Custom_FileSystem_Write+0x78>
		uint8_t size = SIZE(FILE(file));
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	331c      	adds	r3, #28
 8004226:	75fb      	strb	r3, [r7, #23]
		freeSpace -= size;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
		file += size;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004234:	4413      	add	r3, r2
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
	while (Custom_FileSystem_Validate(FILE(file))) {
 8004238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423a:	f7ff fe9f 	bl	8003f7c <Custom_FileSystem_Validate>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ec      	bne.n	800421e <Custom_FileSystem_Write+0x5e>
	}

	// 파일 크기의 합과 마지막 파일의 주소가 같은지 검사
	ASSERT_MSG(
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	4413      	add	r3, r2
 800424a:	4a46      	ldr	r2, [pc, #280]	; (8004364 <Custom_FileSystem_Write+0x1a4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d006      	beq.n	800425e <Custom_FileSystem_Write+0x9e>
 8004250:	4a45      	ldr	r2, [pc, #276]	; (8004368 <Custom_FileSystem_Write+0x1a8>)
 8004252:	21b4      	movs	r1, #180	; 0xb4
 8004254:	4840      	ldr	r0, [pc, #256]	; (8004358 <Custom_FileSystem_Write+0x198>)
 8004256:	f7ff fe15 	bl	8003e84 <__Custom_Exception_Set_Message>
 800425a:	2300      	movs	r3, #0
 800425c:	e073      	b.n	8004346 <Custom_FileSystem_Write+0x186>
			(FILESYSTEM_SIZE + FSBASE) == (file + freeSpace),
			"File system free space unmatched."
			);

	// 같은 이름의 파일이 있을 경우 덮어쓸 것이므로 용량 증가
	FileInfo_t *exists = Custom_FileSystem_Find(filename);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff feec 	bl	800403c <Custom_FileSystem_Find>
 8004264:	6278      	str	r0, [r7, #36]	; 0x24

	if (exists != FILEINFO_NULL) {
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <Custom_FileSystem_Write+0xc6>
		uint32_t size = SIZE(exists);
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	331c      	adds	r3, #28
 8004272:	623b      	str	r3, [r7, #32]
		freeSpace += size;
 8004274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	4413      	add	r3, r2
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
		file -= size;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	425b      	negs	r3, r3
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	4413      	add	r3, r2
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
	}

	// 파일이 너무 커서 저장 불가능할 경우 예외처리
	ASSERT_MSG(freeSpace >= FILEINFO_SIZE + length, "File is too large.");
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	331c      	adds	r3, #28
 800428a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428c:	429a      	cmp	r2, r3
 800428e:	d206      	bcs.n	800429e <Custom_FileSystem_Write+0xde>
 8004290:	4a36      	ldr	r2, [pc, #216]	; (800436c <Custom_FileSystem_Write+0x1ac>)
 8004292:	21c3      	movs	r1, #195	; 0xc3
 8004294:	4830      	ldr	r0, [pc, #192]	; (8004358 <Custom_FileSystem_Write+0x198>)
 8004296:	f7ff fdf5 	bl	8003e84 <__Custom_Exception_Set_Message>
 800429a:	2300      	movs	r3, #0
 800429c:	e053      	b.n	8004346 <Custom_FileSystem_Write+0x186>

	// 기존에 동일한 이름의 파일이 있을 경우 삭제
	if (exists != FILEINFO_NULL) {
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <Custom_FileSystem_Write+0xfa>
		ASSERT(Custom_FileSystem_Delete(exists));
 80042a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a6:	f7ff ff17 	bl	80040d8 <Custom_FileSystem_Delete>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <Custom_FileSystem_Write+0xfa>
 80042b6:	2300      	movs	r3, #0
 80042b8:	e045      	b.n	8004346 <Custom_FileSystem_Write+0x186>
	}

	// 마지막 파일 위치에 새로운 파일 작성
	FileInfo_t *lastFile = FILE(file);
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	61fb      	str	r3, [r7, #28]

	// 파일 길이 복사
	lastFile->size = length;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	615a      	str	r2, [r3, #20]

	// 파일이름 복사
	int i = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; filename[i]; i++) {
 80042c8:	e00b      	b.n	80042e2 <Custom_FileSystem_Write+0x122>
		lastFile->filename[i] = filename[i];
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	7819      	ldrb	r1, [r3, #0]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	4413      	add	r3, r2
 80042d8:	460a      	mov	r2, r1
 80042da:	701a      	strb	r2, [r3, #0]
	for (; filename[i]; i++) {
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	3301      	adds	r3, #1
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ed      	bne.n	80042ca <Custom_FileSystem_Write+0x10a>
	}
	for (; i < FILENAME_LENGTH; i++) {
 80042ee:	e007      	b.n	8004300 <Custom_FileSystem_Write+0x140>
		lastFile->filename[i] = 0;
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	4413      	add	r3, r2
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
	for (; i < FILENAME_LENGTH; i++) {
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	3301      	adds	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	2b13      	cmp	r3, #19
 8004304:	ddf4      	ble.n	80042f0 <Custom_FileSystem_Write+0x130>
	}

	// 체크썸 계산
	lastFile->checksum = 0;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	761a      	strb	r2, [r3, #24]
	lastFile->checksum = Custom_FileSystem_Get_CheckSum(lastFile);
 800430c:	69f8      	ldr	r0, [r7, #28]
 800430e:	f7ff fde5 	bl	8003edc <Custom_FileSystem_Get_CheckSum>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	761a      	strb	r2, [r3, #24]

	// 데이터 복사
	uint8_t *dst = DATA(lastFile);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	331c      	adds	r3, #28
 800431e:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < length; i++) {
 8004320:	2300      	movs	r3, #0
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
 8004324:	e00a      	b.n	800433c <Custom_FileSystem_Write+0x17c>
		dst[i] = data[i];
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	441a      	add	r2, r3
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	440b      	add	r3, r1
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < length; i++) {
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	3301      	adds	r3, #1
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
 800433c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d3f0      	bcc.n	8004326 <Custom_FileSystem_Write+0x166>
	}

	return true;
 8004344:	2301      	movs	r3, #1
}
 8004346:	4618      	mov	r0, r3
 8004348:	3738      	adds	r7, #56	; 0x38
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20001345 	.word	0x20001345
 8004354:	0800a2c4 	.word	0x0800a2c4
 8004358:	0800a268 	.word	0x0800a268
 800435c:	0800a368 	.word	0x0800a368
 8004360:	20000344 	.word	0x20000344
 8004364:	20001344 	.word	0x20001344
 8004368:	0800a388 	.word	0x0800a388
 800436c:	0800a3ac 	.word	0x0800a3ac

08004370 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <Custom_Flash_Check_Error+0x78>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <Custom_Flash_Check_Error+0x24>
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <Custom_Flash_Check_Error+0x7c>)
 8004388:	2113      	movs	r1, #19
 800438a:	4819      	ldr	r0, [pc, #100]	; (80043f0 <Custom_Flash_Check_Error+0x80>)
 800438c:	f7ff fd7a 	bl	8003e84 <__Custom_Exception_Set_Message>
 8004390:	2300      	movs	r3, #0
 8004392:	e024      	b.n	80043de <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <Custom_Flash_Check_Error+0x3c>
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <Custom_Flash_Check_Error+0x84>)
 80043a0:	2114      	movs	r1, #20
 80043a2:	4813      	ldr	r0, [pc, #76]	; (80043f0 <Custom_Flash_Check_Error+0x80>)
 80043a4:	f7ff fd6e 	bl	8003e84 <__Custom_Exception_Set_Message>
 80043a8:	2300      	movs	r3, #0
 80043aa:	e018      	b.n	80043de <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <Custom_Flash_Check_Error+0x54>
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <Custom_Flash_Check_Error+0x88>)
 80043b8:	2115      	movs	r1, #21
 80043ba:	480d      	ldr	r0, [pc, #52]	; (80043f0 <Custom_Flash_Check_Error+0x80>)
 80043bc:	f7ff fd62 	bl	8003e84 <__Custom_Exception_Set_Message>
 80043c0:	2300      	movs	r3, #0
 80043c2:	e00c      	b.n	80043de <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <Custom_Flash_Check_Error+0x6c>
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <Custom_Flash_Check_Error+0x8c>)
 80043d0:	2116      	movs	r1, #22
 80043d2:	4807      	ldr	r0, [pc, #28]	; (80043f0 <Custom_Flash_Check_Error+0x80>)
 80043d4:	f7ff fd56 	bl	8003e84 <__Custom_Exception_Set_Message>
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <Custom_Flash_Check_Error+0x6e>

	return true;
 80043dc:	2301      	movs	r3, #1
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00
 80043ec:	0800a3c0 	.word	0x0800a3c0
 80043f0:	0800a3dc 	.word	0x0800a3dc
 80043f4:	0800a404 	.word	0x0800a404
 80043f8:	0800a424 	.word	0x0800a424
 80043fc:	0800a444 	.word	0x0800a444

08004400 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004410:	d306      	bcc.n	8004420 <Custom_Flash_Read+0x20>
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <Custom_Flash_Read+0x5c>)
 8004414:	211d      	movs	r1, #29
 8004416:	4812      	ldr	r0, [pc, #72]	; (8004460 <Custom_Flash_Read+0x60>)
 8004418:	f7ff fd34 	bl	8003e84 <__Custom_Exception_Set_Message>
 800441c:	2300      	movs	r3, #0
 800441e:	e019      	b.n	8004454 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e00f      	b.n	8004446 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800442c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004430:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	440b      	add	r3, r1
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d8eb      	bhi.n	8004426 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 800444e:	f7ff ff8f 	bl	8004370 <Custom_Flash_Check_Error>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	0800a45c 	.word	0x0800a45c
 8004460:	0800a3dc 	.word	0x0800a3dc

08004464 <LL_SPI_Enable>:
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_SPI_SetTransferDirection>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d101      	bne.n	80044c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d101      	bne.n	80044e8 <LL_SPI_IsActiveFlag_BSY+0x18>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_SPI_IsActiveFlag_BSY+0x1a>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	330c      	adds	r3, #12
 8004506:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <Custom_GPIO_Set>:
		uint32_t value) {
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <Custom_GPIO_Set+0x22>
 8004536:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800453a:	e000      	b.n	800453e <Custom_GPIO_Set+0x24>
 800453c:	2100      	movs	r1, #0
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	400b      	ands	r3, r1
 8004542:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	615a      	str	r2, [r3, #20]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 800455e:	bf00      	nop
 8004560:	480b      	ldr	r0, [pc, #44]	; (8004590 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004562:	f7ff ffa2 	bl	80044aa <LL_SPI_IsActiveFlag_TXE>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f9      	beq.n	8004560 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	4619      	mov	r1, r3
 8004570:	4807      	ldr	r0, [pc, #28]	; (8004590 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004572:	f7ff ffc0 	bl	80044f6 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8004576:	bf00      	nop
 8004578:	4805      	ldr	r0, [pc, #20]	; (8004590 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800457a:	f7ff ffa9 	bl	80044d0 <LL_SPI_IsActiveFlag_BSY>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f9      	bne.n	8004578 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40003800 	.word	0x40003800

08004594 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 800459e:	2200      	movs	r2, #0
 80045a0:	2110      	movs	r1, #16
 80045a2:	4811      	ldr	r0, [pc, #68]	; (80045e8 <Custom_OLED_Write_Command+0x54>)
 80045a4:	f7ff ffb9 	bl	800451a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2104      	movs	r1, #4
 80045ac:	480f      	ldr	r0, [pc, #60]	; (80045ec <Custom_OLED_Write_Command+0x58>)
 80045ae:	f7ff ffb4 	bl	800451a <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e009      	b.n	80045cc <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ffc7 	bl	8004554 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d8f1      	bhi.n	80045b8 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 80045d4:	2201      	movs	r2, #1
 80045d6:	2104      	movs	r1, #4
 80045d8:	4804      	ldr	r0, [pc, #16]	; (80045ec <Custom_OLED_Write_Command+0x58>)
 80045da:	f7ff ff9e 	bl	800451a <Custom_GPIO_Set>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400

080045f0 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 80045fa:	2201      	movs	r2, #1
 80045fc:	2110      	movs	r1, #16
 80045fe:	4817      	ldr	r0, [pc, #92]	; (800465c <Custom_OLED_Write_Data+0x6c>)
 8004600:	f7ff ff8b 	bl	800451a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004604:	2200      	movs	r2, #0
 8004606:	2104      	movs	r1, #4
 8004608:	4815      	ldr	r0, [pc, #84]	; (8004660 <Custom_OLED_Write_Data+0x70>)
 800460a:	f7ff ff86 	bl	800451a <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e016      	b.n	8004642 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	b29b      	uxth	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff95 	bl	8004554 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ff8c 	bl	8004554 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d8e4      	bhi.n	8004614 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 800464a:	2201      	movs	r2, #1
 800464c:	2104      	movs	r1, #4
 800464e:	4804      	ldr	r0, [pc, #16]	; (8004660 <Custom_OLED_Write_Data+0x70>)
 8004650:	f7ff ff63 	bl	800451a <Custom_GPIO_Set>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40020000 	.word	0x40020000
 8004660:	40020400 	.word	0x40020400

08004664 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	4623      	mov	r3, r4
 8004674:	71fb      	strb	r3, [r7, #7]
 8004676:	4603      	mov	r3, r0
 8004678:	71bb      	strb	r3, [r7, #6]
 800467a:	460b      	mov	r3, r1
 800467c:	717b      	strb	r3, [r7, #5]
 800467e:	4613      	mov	r3, r2
 8004680:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8004682:	2315      	movs	r3, #21
 8004684:	723b      	strb	r3, [r7, #8]
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	727b      	strb	r3, [r7, #9]
 800468a:	797b      	ldrb	r3, [r7, #5]
 800468c:	72bb      	strb	r3, [r7, #10]
 800468e:	2375      	movs	r3, #117	; 0x75
 8004690:	72fb      	strb	r3, [r7, #11]
 8004692:	79bb      	ldrb	r3, [r7, #6]
 8004694:	733b      	strb	r3, [r7, #12]
 8004696:	793b      	ldrb	r3, [r7, #4]
 8004698:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	2106      	movs	r1, #6
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff77 	bl	8004594 <Custom_OLED_Write_Command>
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}

080046ae <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 80046b4:	2300      	movs	r3, #0
 80046b6:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 80046b8:	233f      	movs	r3, #63	; 0x3f
 80046ba:	225f      	movs	r2, #95	; 0x5f
 80046bc:	2100      	movs	r1, #0
 80046be:	2000      	movs	r0, #0
 80046c0:	f7ff ffd0 	bl	8004664 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80046c4:	2300      	movs	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e007      	b.n	80046da <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 80046ca:	1cbb      	adds	r3, r7, #2
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff8e 	bl	80045f0 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80046e0:	dbf3      	blt.n	80046ca <Custom_OLED_Clear+0x1c>
    }
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <Custom_OLED_Init>:

void Custom_OLED_Init() {
 80046ec:	b5b0      	push	{r4, r5, r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 80046f2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80046f6:	480e      	ldr	r0, [pc, #56]	; (8004730 <Custom_OLED_Init+0x44>)
 80046f8:	f7ff fec4 	bl	8004484 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <Custom_OLED_Init+0x44>)
 80046fe:	f7ff feb1 	bl	8004464 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <Custom_OLED_Init+0x48>)
 8004704:	463c      	mov	r4, r7
 8004706:	461d      	mov	r5, r3
 8004708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800470c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004710:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004714:	6020      	str	r0, [r4, #0]
 8004716:	3404      	adds	r4, #4
 8004718:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 800471a:	463b      	mov	r3, r7
 800471c:	2125      	movs	r1, #37	; 0x25
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff38 	bl	8004594 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8004724:	f7ff ffc3 	bl	80046ae <Custom_OLED_Clear>
}
 8004728:	bf00      	nop
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bdb0      	pop	{r4, r5, r7, pc}
 8004730:	40003800 	.word	0x40003800
 8004734:	0800a4a4 	.word	0x0800a4a4

08004738 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	4604      	mov	r4, r0
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4623      	mov	r3, r4
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	4603      	mov	r3, r0
 800474c:	80bb      	strh	r3, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	71bb      	strb	r3, [r7, #6]
 8004752:	4613      	mov	r3, r2
 8004754:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8004756:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800475a:	461a      	mov	r2, r3
 800475c:	0092      	lsls	r2, r2, #2
 800475e:	4413      	add	r3, r2
 8004760:	b2da      	uxtb	r2, r3
 8004762:	79bb      	ldrb	r3, [r7, #6]
 8004764:	4413      	add	r3, r2
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 800476c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	4413      	add	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b5f      	cmp	r3, #95	; 0x5f
 8004782:	d802      	bhi.n	800478a <Custom_OLED_Putchar+0x52>
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	2b3f      	cmp	r3, #63	; 0x3f
 8004788:	d902      	bls.n	8004790 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800478e:	e06a      	b.n	8004866 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8004790:	7bbb      	ldrb	r3, [r7, #14]
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	78f9      	ldrb	r1, [r7, #3]
 8004796:	79b8      	ldrb	r0, [r7, #6]
 8004798:	f7ff ff64 	bl	8004664 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	4a32      	ldr	r2, [pc, #200]	; (8004870 <Custom_OLED_Putchar+0x138>)
 80047a6:	4413      	add	r3, r2
 80047a8:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e048      	b.n	8004842 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e03f      	b.n	8004836 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e034      	b.n	8004826 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e029      	b.n	8004816 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	fa42 f303 	asr.w	r3, r2, r3
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <Custom_OLED_Putchar+0xa6>
 80047da:	88b8      	ldrh	r0, [r7, #4]
 80047dc:	e000      	b.n	80047e0 <Custom_OLED_Putchar+0xa8>
 80047de:	2000      	movs	r0, #0
 80047e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047e4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80047e8:	69f9      	ldr	r1, [r7, #28]
 80047ea:	fb02 f101 	mul.w	r1, r2, r1
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	440a      	add	r2, r1
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	441a      	add	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <Custom_OLED_Putchar+0x13c>)
 800480a:	4601      	mov	r1, r0
 800480c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3301      	adds	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	dbd0      	blt.n	80047c2 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	3301      	adds	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	dbc5      	blt.n	80047bc <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3301      	adds	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b07      	cmp	r3, #7
 800483a:	ddbc      	ble.n	80047b6 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b04      	cmp	r3, #4
 8004846:	ddb3      	ble.n	80047b0 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8004848:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800484c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004850:	fb03 f202 	mul.w	r2, r3, r2
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4619      	mov	r1, r3
 800485e:	4805      	ldr	r0, [pc, #20]	; (8004874 <Custom_OLED_Putchar+0x13c>)
 8004860:	f7ff fec6 	bl	80045f0 <Custom_OLED_Write_Data>
	return 0;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	0800a930 	.word	0x0800a930
 8004874:	20001348 	.word	0x20001348

08004878 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8004878:	b40f      	push	{r0, r1, r2, r3}
 800487a:	b590      	push	{r4, r7, lr}
 800487c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8004880:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 800488e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8004892:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004896:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800489a:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 800489c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80048a0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80048a4:	f107 0008 	add.w	r0, r7, #8
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80048ae:	f003 fb7b 	bl	8007fa8 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80048b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048bc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80048c6:	e226      	b.n	8004d16 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80048c8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80048cc:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80048d0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b2f      	cmp	r3, #47	; 0x2f
 80048da:	f040 81f7 	bne.w	8004ccc <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 80048de:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80048e2:	3301      	adds	r3, #1
 80048e4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80048e8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 80048f2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80048f6:	2b2f      	cmp	r3, #47	; 0x2f
 80048f8:	d105      	bne.n	8004906 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 80048fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80048fe:	3301      	adds	r3, #1
 8004900:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004904:	e1e2      	b.n	8004ccc <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 8004906:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800490a:	3b23      	subs	r3, #35	; 0x23
 800490c:	2b56      	cmp	r3, #86	; 0x56
 800490e:	f200 81d7 	bhi.w	8004cc0 <Custom_OLED_Printf+0x448>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <Custom_OLED_Printf+0xa0>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004b31 	.word	0x08004b31
 800491c:	08004cc1 	.word	0x08004cc1
 8004920:	08004cc1 	.word	0x08004cc1
 8004924:	08004cc1 	.word	0x08004cc1
 8004928:	08004cc1 	.word	0x08004cc1
 800492c:	08004cc1 	.word	0x08004cc1
 8004930:	08004cc1 	.word	0x08004cc1
 8004934:	08004cc1 	.word	0x08004cc1
 8004938:	08004cc1 	.word	0x08004cc1
 800493c:	08004cc1 	.word	0x08004cc1
 8004940:	08004cc1 	.word	0x08004cc1
 8004944:	08004cc1 	.word	0x08004cc1
 8004948:	08004cc1 	.word	0x08004cc1
 800494c:	08004a75 	.word	0x08004a75
 8004950:	08004a75 	.word	0x08004a75
 8004954:	08004a75 	.word	0x08004a75
 8004958:	08004a75 	.word	0x08004a75
 800495c:	08004a75 	.word	0x08004a75
 8004960:	08004a75 	.word	0x08004a75
 8004964:	08004a75 	.word	0x08004a75
 8004968:	08004cc1 	.word	0x08004cc1
 800496c:	08004cc1 	.word	0x08004cc1
 8004970:	08004cc1 	.word	0x08004cc1
 8004974:	08004cc1 	.word	0x08004cc1
 8004978:	08004cc1 	.word	0x08004cc1
 800497c:	08004cc1 	.word	0x08004cc1
 8004980:	08004cc1 	.word	0x08004cc1
 8004984:	08004cc1 	.word	0x08004cc1
 8004988:	08004cc1 	.word	0x08004cc1
 800498c:	08004cc1 	.word	0x08004cc1
 8004990:	08004b21 	.word	0x08004b21
 8004994:	08004cc1 	.word	0x08004cc1
 8004998:	08004cc1 	.word	0x08004cc1
 800499c:	08004cc1 	.word	0x08004cc1
 80049a0:	08004cc1 	.word	0x08004cc1
 80049a4:	08004cc1 	.word	0x08004cc1
 80049a8:	08004cc1 	.word	0x08004cc1
 80049ac:	08004cc1 	.word	0x08004cc1
 80049b0:	08004cc1 	.word	0x08004cc1
 80049b4:	08004cc1 	.word	0x08004cc1
 80049b8:	08004b0f 	.word	0x08004b0f
 80049bc:	08004cc1 	.word	0x08004cc1
 80049c0:	08004cc1 	.word	0x08004cc1
 80049c4:	08004cc1 	.word	0x08004cc1
 80049c8:	08004cc1 	.word	0x08004cc1
 80049cc:	08004cc1 	.word	0x08004cc1
 80049d0:	08004cc1 	.word	0x08004cc1
 80049d4:	08004cc1 	.word	0x08004cc1
 80049d8:	08004cc1 	.word	0x08004cc1
 80049dc:	08004cc1 	.word	0x08004cc1
 80049e0:	08004cc1 	.word	0x08004cc1
 80049e4:	08004cc1 	.word	0x08004cc1
 80049e8:	08004cc1 	.word	0x08004cc1
 80049ec:	08004cc1 	.word	0x08004cc1
 80049f0:	08004cc1 	.word	0x08004cc1
 80049f4:	08004cc1 	.word	0x08004cc1
 80049f8:	08004cc1 	.word	0x08004cc1
 80049fc:	08004cc1 	.word	0x08004cc1
 8004a00:	08004cc1 	.word	0x08004cc1
 8004a04:	08004cc1 	.word	0x08004cc1
 8004a08:	08004cc1 	.word	0x08004cc1
 8004a0c:	08004cc1 	.word	0x08004cc1
 8004a10:	08004b29 	.word	0x08004b29
 8004a14:	08004aad 	.word	0x08004aad
 8004a18:	08004abf 	.word	0x08004abf
 8004a1c:	08004cc1 	.word	0x08004cc1
 8004a20:	08004cc1 	.word	0x08004cc1
 8004a24:	08004cc1 	.word	0x08004cc1
 8004a28:	08004aa3 	.word	0x08004aa3
 8004a2c:	08004cc1 	.word	0x08004cc1
 8004a30:	08004cc1 	.word	0x08004cc1
 8004a34:	08004cc1 	.word	0x08004cc1
 8004a38:	08004b19 	.word	0x08004b19
 8004a3c:	08004add 	.word	0x08004add
 8004a40:	08004ac9 	.word	0x08004ac9
 8004a44:	08004cc1 	.word	0x08004cc1
 8004a48:	08004ad3 	.word	0x08004ad3
 8004a4c:	08004b05 	.word	0x08004b05
 8004a50:	08004cc1 	.word	0x08004cc1
 8004a54:	08004a99 	.word	0x08004a99
 8004a58:	08004af1 	.word	0x08004af1
 8004a5c:	08004ae7 	.word	0x08004ae7
 8004a60:	08004cc1 	.word	0x08004cc1
 8004a64:	08004afb 	.word	0x08004afb
 8004a68:	08004a8f 	.word	0x08004a8f
 8004a6c:	08004cc1 	.word	0x08004cc1
 8004a70:	08004ab5 	.word	0x08004ab5
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 8004a7a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8004a7e:	3b30      	subs	r3, #48	; 0x30
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	00d2      	lsls	r2, r2, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 8004a8c:	e118      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 8004a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a92:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004a96:	e113      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 8004a98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a9c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004aa0:	e10e      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8004aa2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004aa6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004aaa:	e109      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 8004aac:	231f      	movs	r3, #31
 8004aae:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004ab2:	e105      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 8004ab4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ab8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004abc:	e100      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 8004abe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ac2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004ac6:	e0fb      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 8004ac8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004acc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004ad0:	e0f6      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 8004ad2:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8004ad6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004ada:	e0f1      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 8004adc:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8004ae0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004ae4:	e0ec      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 8004ae6:	f240 73ef 	movw	r3, #2031	; 0x7ef
 8004aea:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004aee:	e0e7      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 8004af0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004af4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004af8:	e0e2      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 8004afa:	f647 031f 	movw	r3, #30751	; 0x781f
 8004afe:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004b02:	e0dd      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 8004b04:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8004b08:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004b0c:	e0d8      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 8004b0e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b12:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004b16:	e0d3      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8004b1e:	e0cf      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8004b20:	2302      	movs	r3, #2
 8004b22:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8004b26:	e0cb      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8004b2e:	e0c7      	b.n	8004cc0 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004b3c:	e099      	b.n	8004c72 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 8004b3e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004b42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b46:	4413      	add	r3, r2
 8004b48:	3302      	adds	r3, #2
 8004b4a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004b4e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004b52:	5cd3      	ldrb	r3, [r2, r3]
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d924      	bls.n	8004ba2 <Custom_OLED_Printf+0x32a>
 8004b58:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004b5c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b60:	4413      	add	r3, r2
 8004b62:	3302      	adds	r3, #2
 8004b64:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004b68:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004b6c:	5cd3      	ldrb	r3, [r2, r3]
 8004b6e:	2b46      	cmp	r3, #70	; 0x46
 8004b70:	d817      	bhi.n	8004ba2 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 8004b72:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8004b7c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004b80:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b84:	4413      	add	r3, r2
 8004b86:	3302      	adds	r3, #2
 8004b88:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004b8c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004b90:	5cd3      	ldrb	r3, [r2, r3]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004b98:	4413      	add	r3, r2
 8004b9a:	3b37      	subs	r3, #55	; 0x37
 8004b9c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004ba0:	e062      	b.n	8004c68 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 8004ba2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004ba6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004baa:	4413      	add	r3, r2
 8004bac:	3302      	adds	r3, #2
 8004bae:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004bb2:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004bb6:	5cd3      	ldrb	r3, [r2, r3]
 8004bb8:	2b60      	cmp	r3, #96	; 0x60
 8004bba:	d924      	bls.n	8004c06 <Custom_OLED_Printf+0x38e>
 8004bbc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004bc0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004bcc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004bd0:	5cd3      	ldrb	r3, [r2, r3]
 8004bd2:	2b66      	cmp	r3, #102	; 0x66
 8004bd4:	d817      	bhi.n	8004c06 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 8004bd6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 8004be0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004be4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004be8:	4413      	add	r3, r2
 8004bea:	3302      	adds	r3, #2
 8004bec:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004bf0:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b57      	subs	r3, #87	; 0x57
 8004c00:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004c04:	e030      	b.n	8004c68 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 8004c06:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004c0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c0e:	4413      	add	r3, r2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004c16:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c1e:	d923      	bls.n	8004c68 <Custom_OLED_Printf+0x3f0>
 8004c20:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004c24:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c28:	4413      	add	r3, r2
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004c30:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	2b39      	cmp	r3, #57	; 0x39
 8004c38:	d816      	bhi.n	8004c68 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 8004c3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8004c44:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004c48:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3302      	adds	r3, #2
 8004c50:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004c54:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c60:	4413      	add	r3, r2
 8004c62:	3b30      	subs	r3, #48	; 0x30
 8004c64:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8004c68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004c72:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	f67f af61 	bls.w	8004b3e <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 8004c7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c80:	0a1b      	lsrs	r3, r3, #8
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 8004cb4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004cb8:	3306      	adds	r3, #6
 8004cba:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 8004cbe:	bf00      	nop
				}

				cursor += 2;
 8004cc0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 8004cca:	e024      	b.n	8004d16 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 8004ccc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004cd0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8004cd4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004cd8:	4413      	add	r3, r2
 8004cda:	7818      	ldrb	r0, [r3, #0]
 8004cdc:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 8004ce0:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8004ce4:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8004ce8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f7ff fd22 	bl	8004738 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 8004cf4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	0052      	lsls	r2, r2, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8004d06:	4413      	add	r3, r2
 8004d08:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 8004d0c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004d10:	3301      	adds	r3, #1
 8004d12:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 8004d16:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004d1a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8004d1e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f47f adce 	bne.w	80048c8 <Custom_OLED_Printf+0x50>
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d3a:	b004      	add	sp, #16
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop

08004d40 <LL_GPIO_ReadInputPort>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	return uwTick;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <Custom_Delay_Get_SysTick+0x14>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000318 	.word	0x20000318

08004d70 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 8004d8e:	f7ff ffe3 	bl	8004d58 <Custom_Delay_Get_SysTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	741a      	strb	r2, [r3, #16]
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ffc3 	bl	8004d40 <LL_GPIO_ReadInputPort>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 8004dd0:	f7ff ffc2 	bl	8004d58 <Custom_Delay_Get_SysTick>
 8004dd4:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7c1b      	ldrb	r3, [r3, #16]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	d873      	bhi.n	8004ec8 <Custom_Switch_State_Machine+0x120>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <Custom_Switch_State_Machine+0x40>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e1d 	.word	0x08004e1d
 8004df0:	08004ec9 	.word	0x08004ec9
 8004df4:	08004e53 	.word	0x08004e53
 8004df8:	08004ec9 	.word	0x08004ec9
 8004dfc:	08004ec9 	.word	0x08004ec9
 8004e00:	08004ec9 	.word	0x08004ec9
 8004e04:	08004e9d 	.word	0x08004e9d

		case LONG_OFF:
			if (currentPushed) {
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d05b      	beq.n	8004ec6 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2250      	movs	r2, #80	; 0x50
 8004e18:	609a      	str	r2, [r3, #8]
			}
			break;
 8004e1a:	e054      	b.n	8004ec6 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	1acb      	subs	r3, r1, r3
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d808      	bhi.n	8004e3e <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2204      	movs	r2, #4
 8004e34:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e3c:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1acb      	subs	r3, r1, r3
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
			break;
 8004e50:	e03a      	b.n	8004ec8 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8004e52:	7bbb      	ldrb	r3, [r7, #14]
 8004e54:	f083 0301 	eor.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2250      	movs	r2, #80	; 0x50
 8004e68:	609a      	str	r2, [r3, #8]
				break;
 8004e6a:	e02d      	b.n	8004ec8 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	1acb      	subs	r3, r1, r3
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d805      	bhi.n	8004e88 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e86:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1acb      	subs	r3, r1, r3
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
			break;
 8004e9a:	e015      	b.n	8004ec8 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	1acb      	subs	r3, r1, r3
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d802      	bhi.n	8004eb2 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68d9      	ldr	r1, [r3, #12]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1acb      	subs	r3, r1, r3
 8004ebe:	441a      	add	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
			break;
 8004ec4:	e000      	b.n	8004ec8 <Custom_Switch_State_Machine+0x120>
			break;
 8004ec6:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	60da      	str	r2, [r3, #12]

	return pushEvent;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2;
	if (!isInitialized) {
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <Custom_Switch_Read+0xb8>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f083 0301 	eor.w	r3, r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <Custom_Switch_Read+0x2e>
		isInitialized = true;
 8004eec:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <Custom_Switch_Read+0xb8>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	4927      	ldr	r1, [pc, #156]	; (8004f94 <Custom_Switch_Read+0xbc>)
 8004ef6:	4828      	ldr	r0, [pc, #160]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004ef8:	f7ff ff3a 	bl	8004d70 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 8004efc:	2220      	movs	r2, #32
 8004efe:	4925      	ldr	r1, [pc, #148]	; (8004f94 <Custom_Switch_Read+0xbc>)
 8004f00:	4826      	ldr	r0, [pc, #152]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f02:	f7ff ff35 	bl	8004d70 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8004f06:	4824      	ldr	r0, [pc, #144]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f08:	f7ff ff4e 	bl	8004da8 <Custom_Switch_State_Machine>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8004f10:	4822      	ldr	r0, [pc, #136]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f12:	f7ff ff49 	bl	8004da8 <Custom_Switch_State_Machine>
 8004f16:	4603      	mov	r3, r0
 8004f18:	71bb      	strb	r3, [r7, #6]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if ((sw1.state & SHORT_ON) && sw2PushEvent) {
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f1c:	7c1b      	ldrb	r3, [r3, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <Custom_Switch_Read+0x68>
 8004f26:	79bb      	ldrb	r3, [r7, #6]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <Custom_Switch_Read+0x68>
		sw1PushEvent = true;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	71fb      	strb	r3, [r7, #7]
		sw1.state = sw2.state;
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f32:	7c1a      	ldrb	r2, [r3, #16]
 8004f34:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f36:	741a      	strb	r2, [r3, #16]
		sw1.timer = sw2.timer;
 8004f38:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f3e:	6093      	str	r3, [r2, #8]
	}
	if ((sw2.state & SHORT_ON) && sw1PushEvent) {
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f42:	7c1b      	ldrb	r3, [r3, #16]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <Custom_Switch_Read+0x8e>
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <Custom_Switch_Read+0x8e>
		sw2PushEvent = true;
 8004f52:	2301      	movs	r3, #1
 8004f54:	71bb      	strb	r3, [r7, #6]
		sw2.state = sw1.state;
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f58:	7c1a      	ldrb	r2, [r3, #16]
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f5c:	741a      	strb	r2, [r3, #16]
		sw2.timer = sw1.timer;
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <Custom_Switch_Read+0xc0>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <Custom_Switch_Read+0xc4>)
 8004f64:	6093      	str	r3, [r2, #8]
	}

	uint8_t buttonPushEvent = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	717b      	strb	r3, [r7, #5]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <Custom_Switch_Read+0xa0>
 8004f70:	797b      	ldrb	r3, [r7, #5]
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	717b      	strb	r3, [r7, #5]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8004f78:	79bb      	ldrb	r3, [r7, #6]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <Custom_Switch_Read+0xae>
 8004f7e:	797b      	ldrb	r3, [r7, #5]
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	717b      	strb	r3, [r7, #5]

	return buttonPushEvent;
 8004f86:	797b      	ldrb	r3, [r7, #5]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20001488 	.word	0x20001488
 8004f94:	40020400 	.word	0x40020400
 8004f98:	2000148c 	.word	0x2000148c
 8004f9c:	200014a0 	.word	0x200014a0

08004fa0 <Print_Drive_Data>:


#include "header_init.h"


void Print_Drive_Data() {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
	uint32_t i = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
	uint16_t markCnt_L = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	807b      	strh	r3, [r7, #2]
	uint16_t markCnt_R = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	803b      	strh	r3, [r7, #0]

	// 마크 개수 세기
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	e03b      	b.n	8005030 <Print_Drive_Data+0x90>

		// 현재상태가 좌측 곡선인 경우
		if (driveData[i].markState == MARK_CURVE_L) {
 8004fb8:	4a33      	ldr	r2, [pc, #204]	; (8005088 <Print_Drive_Data+0xe8>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	789b      	ldrb	r3, [r3, #2]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d103      	bne.n	8004fd0 <Print_Drive_Data+0x30>

			markCnt_L += 1;
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	807b      	strh	r3, [r7, #2]
 8004fce:	e02c      	b.n	800502a <Print_Drive_Data+0x8a>
		}

		// 현재상태가 우측 곡선인 경우
		else if (driveData[i].markState == MARK_CURVE_R) {
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	; (8005088 <Print_Drive_Data+0xe8>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d103      	bne.n	8004fe8 <Print_Drive_Data+0x48>

			markCnt_R += 1;
 8004fe0:	883b      	ldrh	r3, [r7, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	803b      	strh	r3, [r7, #0]
 8004fe6:	e020      	b.n	800502a <Print_Drive_Data+0x8a>
		}

		// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
		else if (driveData[i].markState == MARK_STRAIGHT) {
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <Print_Drive_Data+0xe8>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	789b      	ldrb	r3, [r3, #2]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d118      	bne.n	800502a <Print_Drive_Data+0x8a>

			// 이전 상태가 좌측 곡선이었을 경우
			if (driveData[i-1].markState == MARK_CURVE_L) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <Print_Drive_Data+0xe8>)
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	789b      	ldrb	r3, [r3, #2]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d103      	bne.n	8005012 <Print_Drive_Data+0x72>
				markCnt_L += 1;
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	3301      	adds	r3, #1
 800500e:	807b      	strh	r3, [r7, #2]
 8005010:	e00b      	b.n	800502a <Print_Drive_Data+0x8a>
			}
			// 이전 상태가 우측 곡선이었을 경우
			else if (driveData[i-1].markState == MARK_CURVE_R) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3b01      	subs	r3, #1
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <Print_Drive_Data+0xe8>)
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	789b      	ldrb	r3, [r3, #2]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d102      	bne.n	800502a <Print_Drive_Data+0x8a>
				markCnt_R += 1;
 8005024:	883b      	ldrh	r3, [r7, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	803b      	strh	r3, [r7, #0]
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3301      	adds	r3, #1
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	4a15      	ldr	r2, [pc, #84]	; (8005088 <Print_Drive_Data+0xe8>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	789b      	ldrb	r3, [r3, #2]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1bb      	bne.n	8004fb8 <Print_Drive_Data+0x18>
		}
	}


	// OLED에 변수명 변수값 출력
	Custom_OLED_Clear();
 8005040:	f7ff fb35 	bl	80046ae <Custom_OLED_Clear>
	Custom_OLED_Printf("/0mark L:   %d", markCnt_L);
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	4619      	mov	r1, r3
 8005048:	4810      	ldr	r0, [pc, #64]	; (800508c <Print_Drive_Data+0xec>)
 800504a:	f7ff fc15 	bl	8004878 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1mark R:   %d", markCnt_R);
 800504e:	883b      	ldrh	r3, [r7, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	480f      	ldr	r0, [pc, #60]	; (8005090 <Print_Drive_Data+0xf0>)
 8005054:	f7ff fc10 	bl	8004878 <Custom_OLED_Printf>
	Custom_OLED_Printf("/2cross:    %d", driveData[i-1].crossCnt);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <Print_Drive_Data+0xe8>)
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	78db      	ldrb	r3, [r3, #3]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	480a      	ldr	r0, [pc, #40]	; (8005094 <Print_Drive_Data+0xf4>)
 800506a:	f7ff fc05 	bl	8004878 <Custom_OLED_Printf>

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 800506e:	bf00      	nop
 8005070:	f7ff ff32 	bl	8004ed8 <Custom_Switch_Read>
 8005074:	4603      	mov	r3, r0
 8005076:	2b03      	cmp	r3, #3
 8005078:	d1fa      	bne.n	8005070 <Print_Drive_Data+0xd0>

	Custom_OLED_Clear();
 800507a:	f7ff fb18 	bl	80046ae <Custom_OLED_Clear>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200014d4 	.word	0x200014d4
 800508c:	0800a4cc 	.word	0x0800a4cc
 8005090:	0800a4dc 	.word	0x0800a4dc
 8005094:	0800a4ec 	.word	0x0800a4ec

08005098 <Save_Drive_Data_Flash>:



void Save_Drive_Data_Flash() {
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0

	Custom_OLED_Clear();
 800509c:	f7ff fb07 	bl	80046ae <Custom_OLED_Clear>

	if (Custom_FileSystem_Write("drive data", (uint8_t *)driveData, sizeof(driveData)) == CUSTOM_TRUE) {
 80050a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a4:	490b      	ldr	r1, [pc, #44]	; (80050d4 <Save_Drive_Data_Flash+0x3c>)
 80050a6:	480c      	ldr	r0, [pc, #48]	; (80050d8 <Save_Drive_Data_Flash+0x40>)
 80050a8:	f7ff f88a 	bl	80041c0 <Custom_FileSystem_Write>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <Save_Drive_Data_Flash+0x22>
		Custom_OLED_Printf("SUCCESS");
 80050b2:	480a      	ldr	r0, [pc, #40]	; (80050dc <Save_Drive_Data_Flash+0x44>)
 80050b4:	f7ff fbe0 	bl	8004878 <Custom_OLED_Printf>
 80050b8:	e002      	b.n	80050c0 <Save_Drive_Data_Flash+0x28>
	}
	else {
		Custom_OLED_Printf("SAVE FAIL");
 80050ba:	4809      	ldr	r0, [pc, #36]	; (80050e0 <Save_Drive_Data_Flash+0x48>)
 80050bc:	f7ff fbdc 	bl	8004878 <Custom_OLED_Printf>
	}

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 80050c0:	bf00      	nop
 80050c2:	f7ff ff09 	bl	8004ed8 <Custom_Switch_Read>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d1fa      	bne.n	80050c2 <Save_Drive_Data_Flash+0x2a>

	Custom_OLED_Clear();
 80050cc:	f7ff faef 	bl	80046ae <Custom_OLED_Clear>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	200014d4 	.word	0x200014d4
 80050d8:	0800a4fc 	.word	0x0800a4fc
 80050dc:	0800a508 	.word	0x0800a508
 80050e0:	0800a510 	.word	0x0800a510

080050e4 <Read_Drive_Data_Flash>:



void Read_Drive_Data_Flash() {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 80050ea:	af00      	add	r7, sp, #0

	t_driveData driveDataBuffer[MAX_MARKER_CNT];

	FileInfo_t *fileInfo = Custom_FileSystem_Find("drive data");
 80050ec:	4823      	ldr	r0, [pc, #140]	; (800517c <Read_Drive_Data_Flash+0x98>)
 80050ee:	f7fe ffa5 	bl	800403c <Custom_FileSystem_Find>
 80050f2:	f8c7 0800 	str.w	r0, [r7, #2048]	; 0x800

	Custom_OLED_Clear();
 80050f6:	f7ff fada 	bl	80046ae <Custom_OLED_Clear>

	if (fileInfo != FILEINFO_NULL && Custom_FileSystem_Read(fileInfo, (uint8_t *)driveDataBuffer, sizeof(driveDataBuffer)) == CUSTOM_TRUE) {
 80050fa:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02b      	beq.n	800515a <Read_Drive_Data_Flash+0x76>
 8005102:	463b      	mov	r3, r7
 8005104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005108:	4619      	mov	r1, r3
 800510a:	f8d7 0800 	ldr.w	r0, [r7, #2048]	; 0x800
 800510e:	f7ff f81b 	bl	8004148 <Custom_FileSystem_Read>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d020      	beq.n	800515a <Read_Drive_Data_Flash+0x76>

		for (uint32_t i = 0; i < MAX_MARKER_CNT;  i++) {
 8005118:	2300      	movs	r3, #0
 800511a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800511e:	e013      	b.n	8005148 <Read_Drive_Data_Flash+0x64>
			driveData[i] = driveDataBuffer[i];
 8005120:	4817      	ldr	r0, [pc, #92]	; (8005180 <Read_Drive_Data_Flash+0x9c>)
 8005122:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005126:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800512a:	f6a2 0108 	subw	r1, r2, #2056	; 0x808
 800512e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	440a      	add	r2, r1
 800513a:	6810      	ldr	r0, [r2, #0]
 800513c:	6018      	str	r0, [r3, #0]
		for (uint32_t i = 0; i < MAX_MARKER_CNT;  i++) {
 800513e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005142:	3301      	adds	r3, #1
 8005144:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8005148:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d3e6      	bcc.n	8005120 <Read_Drive_Data_Flash+0x3c>
		}
		Custom_OLED_Printf("SUCCESS");
 8005152:	480c      	ldr	r0, [pc, #48]	; (8005184 <Read_Drive_Data_Flash+0xa0>)
 8005154:	f7ff fb90 	bl	8004878 <Custom_OLED_Printf>
 8005158:	e002      	b.n	8005160 <Read_Drive_Data_Flash+0x7c>
	}
	else {
		Custom_OLED_Printf("READ FAIL");
 800515a:	480b      	ldr	r0, [pc, #44]	; (8005188 <Read_Drive_Data_Flash+0xa4>)
 800515c:	f7ff fb8c 	bl	8004878 <Custom_OLED_Printf>
	}

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 8005160:	bf00      	nop
 8005162:	f7ff feb9 	bl	8004ed8 <Custom_Switch_Read>
 8005166:	4603      	mov	r3, r0
 8005168:	2b03      	cmp	r3, #3
 800516a:	d1fa      	bne.n	8005162 <Read_Drive_Data_Flash+0x7e>

	Custom_OLED_Clear();
 800516c:	f7ff fa9f 	bl	80046ae <Custom_OLED_Clear>
}
 8005170:	bf00      	nop
 8005172:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	0800a4fc 	.word	0x0800a4fc
 8005180:	200014d4 	.word	0x200014d4
 8005184:	0800a508 	.word	0x0800a508
 8005188:	0800a51c 	.word	0x0800a51c

0800518c <Delete_Drive_Data_Flash>:

void Delete_Drive_Data_Flash() {
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0

	FileInfo_t *fileInfo = Custom_FileSystem_Find("drive data");
 8005192:	4811      	ldr	r0, [pc, #68]	; (80051d8 <Delete_Drive_Data_Flash+0x4c>)
 8005194:	f7fe ff52 	bl	800403c <Custom_FileSystem_Find>
 8005198:	6078      	str	r0, [r7, #4]

	Custom_OLED_Clear();
 800519a:	f7ff fa88 	bl	80046ae <Custom_OLED_Clear>

	if (fileInfo != FILEINFO_NULL && Custom_FileSystem_Delete(fileInfo) == CUSTOM_TRUE) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <Delete_Drive_Data_Flash+0x2c>
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fe ff97 	bl	80040d8 <Custom_FileSystem_Delete>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <Delete_Drive_Data_Flash+0x2c>
		Custom_OLED_Printf("SUCCESS");
 80051b0:	480a      	ldr	r0, [pc, #40]	; (80051dc <Delete_Drive_Data_Flash+0x50>)
 80051b2:	f7ff fb61 	bl	8004878 <Custom_OLED_Printf>
 80051b6:	e002      	b.n	80051be <Delete_Drive_Data_Flash+0x32>
	}
	else {
		Custom_OLED_Printf("DELETE FAIL");
 80051b8:	4809      	ldr	r0, [pc, #36]	; (80051e0 <Delete_Drive_Data_Flash+0x54>)
 80051ba:	f7ff fb5d 	bl	8004878 <Custom_OLED_Printf>
	}

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 80051be:	bf00      	nop
 80051c0:	f7ff fe8a 	bl	8004ed8 <Custom_Switch_Read>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d1fa      	bne.n	80051c0 <Delete_Drive_Data_Flash+0x34>

	Custom_OLED_Clear();
 80051ca:	f7ff fa70 	bl	80046ae <Custom_OLED_Clear>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	0800a4fc 	.word	0x0800a4fc
 80051dc:	0800a508 	.word	0x0800a508
 80051e0:	0800a528 	.word	0x0800a528

080051e4 <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting(uint8_t driveIdx) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]

	Pre_Drive_Var_Adjust();
 80051ee:	f000 f809 	bl	8005204 <Pre_Drive_Var_Adjust>
	Pre_Drive_Var_Init(driveIdx);
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f9af 	bl	8005558 <Pre_Drive_Var_Init>

}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <Pre_Drive_Var_Adjust>:



// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust() {
 8005204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005206:	b0b9      	sub	sp, #228	; 0xe4
 8005208:	af06      	add	r7, sp, #24
	uint8_t	sw = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5


	t_driveMenu_Int		intValues[] = {
 8005210:	4bc9      	ldr	r3, [pc, #804]	; (8005538 <Pre_Drive_Var_Adjust+0x334>)
 8005212:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8005216:	461d      	mov	r5, r3
 8005218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800521a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800521c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005220:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "Threshold",			&threshold,			5 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8005224:	2301      	movs	r3, #1
 8005226:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4


	t_driveMenu_Float	floatValues[] = {
 800522a:	4ac4      	ldr	r2, [pc, #784]	; (800553c <Pre_Drive_Var_Adjust+0x338>)
 800522c:	463b      	mov	r3, r7
 800522e:	4611      	mov	r1, r2
 8005230:	22a8      	movs	r2, #168	; 0xa8
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fefa 	bl	800802c <memcpy>
			{ "Accele",				&accele,			0.5f },
			{ "Decele",				&decele_init,		0.5f },
			{ "CurveDecel Coef",	&curveDecelCoef,	50 },
			{ "Position Coef",		&positionCoef,		0.00001f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8005238:	2307      	movs	r3, #7
 800523a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3



	for (uint8_t i = 0; i < intValCnt; i++) {
 800523e:	2300      	movs	r3, #0
 8005240:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8005244:	e0d1      	b.n	80053ea <Pre_Drive_Var_Adjust+0x1e6>

		Custom_OLED_Clear();
 8005246:	f7ff fa32 	bl	80046ae <Custom_OLED_Clear>

		// 정수 변수 초기화
		if (i < intValCnt) {
 800524a:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 800524e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8005252:	429a      	cmp	r2, r3
 8005254:	f080 80c4 	bcs.w	80053e0 <Pre_Drive_Var_Adjust+0x1dc>

			if (i == 0) {
 8005258:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 80af 	bne.w	80053c0 <Pre_Drive_Var_Adjust+0x1bc>
				Sensor_Start();
 8005262:	f002 f86d 	bl	8007340 <Sensor_Start>
			}

			while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005266:	e0ab      	b.n	80053c0 <Pre_Drive_Var_Adjust+0x1bc>

				// OLED에 변수명 변수값 출력
				Custom_OLED_Printf("/2%s", intValues[i].valName);
 8005268:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 800526c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	4619      	mov	r1, r3
 800527c:	48b0      	ldr	r0, [pc, #704]	; (8005540 <Pre_Drive_Var_Adjust+0x33c>)
 800527e:	f7ff fafb 	bl	8004878 <Custom_OLED_Printf>
				Custom_OLED_Printf("/4%d", *(intValues[i].val));
 8005282:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	33c8      	adds	r3, #200	; 0xc8
 8005290:	443b      	add	r3, r7
 8005292:	3b10      	subs	r3, #16
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	48aa      	ldr	r0, [pc, #680]	; (8005544 <Pre_Drive_Var_Adjust+0x340>)
 800529c:	f7ff faec 	bl	8004878 <Custom_OLED_Printf>

				if (i == 0) {
 80052a0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d140      	bne.n	800532a <Pre_Drive_Var_Adjust+0x126>
					Custom_OLED_Printf("/0%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80052a8:	4ba7      	ldr	r3, [pc, #668]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0501 	and.w	r5, r3, #1
 80052b6:	4ba4      	ldr	r3, [pc, #656]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0601 	and.w	r6, r3, #1
 80052c4:	4ba0      	ldr	r3, [pc, #640]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0c01 	and.w	ip, r3, #1
 80052d2:	4b9d      	ldr	r3, [pc, #628]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	4a99      	ldr	r2, [pc, #612]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052e2:	7812      	ldrb	r2, [r2, #0]
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	08d2      	lsrs	r2, r2, #3
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	f002 0201 	and.w	r2, r2, #1
 80052ee:	4996      	ldr	r1, [pc, #600]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052f0:	7809      	ldrb	r1, [r1, #0]
 80052f2:	b2c9      	uxtb	r1, r1
 80052f4:	0889      	lsrs	r1, r1, #2
 80052f6:	b2c9      	uxtb	r1, r1
 80052f8:	f001 0101 	and.w	r1, r1, #1
 80052fc:	4892      	ldr	r0, [pc, #584]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 80052fe:	7800      	ldrb	r0, [r0, #0]
 8005300:	b2c0      	uxtb	r0, r0
 8005302:	0840      	lsrs	r0, r0, #1
 8005304:	b2c0      	uxtb	r0, r0
 8005306:	f000 0001 	and.w	r0, r0, #1
						(state >> 7) & 1, (state >> 6) & 1, (state >> 5) & 1, (state >> 4) & 1, \
						(state >> 3) & 1, (state >> 2) & 1, (state >> 1) & 1, (state >> 0) & 1);
 800530a:	4c8f      	ldr	r4, [pc, #572]	; (8005548 <Pre_Drive_Var_Adjust+0x344>)
 800530c:	7824      	ldrb	r4, [r4, #0]
 800530e:	b2e4      	uxtb	r4, r4
					Custom_OLED_Printf("/0%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005310:	f004 0401 	and.w	r4, r4, #1
 8005314:	9404      	str	r4, [sp, #16]
 8005316:	9003      	str	r0, [sp, #12]
 8005318:	9102      	str	r1, [sp, #8]
 800531a:	9201      	str	r2, [sp, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4663      	mov	r3, ip
 8005320:	4632      	mov	r2, r6
 8005322:	4629      	mov	r1, r5
 8005324:	4889      	ldr	r0, [pc, #548]	; (800554c <Pre_Drive_Var_Adjust+0x348>)
 8005326:	f7ff faa7 	bl	8004878 <Custom_OLED_Printf>
				}

				// 변수 값 빼기
				if (sw == CUSTOM_SW_1) {
 800532a:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800532e:	2b01      	cmp	r3, #1
 8005330:	d121      	bne.n	8005376 <Pre_Drive_Var_Adjust+0x172>
					*(intValues[i].val) -= intValues[i].changeVal;
 8005332:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	33c8      	adds	r3, #200	; 0xc8
 8005340:	443b      	add	r3, r7
 8005342:	3b0c      	subs	r3, #12
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	33c8      	adds	r3, #200	; 0xc8
 8005354:	443b      	add	r3, r7
 8005356:	3b10      	subs	r3, #16
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	33c8      	adds	r3, #200	; 0xc8
 800536a:	443b      	add	r3, r7
 800536c:	3b10      	subs	r3, #16
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1a42      	subs	r2, r0, r1
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e024      	b.n	80053c0 <Pre_Drive_Var_Adjust+0x1bc>
				}
				// 변수값 더하기
				else if (sw == CUSTOM_SW_2) {
 8005376:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800537a:	2b02      	cmp	r3, #2
 800537c:	d120      	bne.n	80053c0 <Pre_Drive_Var_Adjust+0x1bc>
					*(intValues[i].val) += intValues[i].changeVal;
 800537e:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	33c8      	adds	r3, #200	; 0xc8
 800538c:	443b      	add	r3, r7
 800538e:	3b0c      	subs	r3, #12
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	33c8      	adds	r3, #200	; 0xc8
 80053a0:	443b      	add	r3, r7
 80053a2:	3b10      	subs	r3, #16
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6819      	ldr	r1, [r3, #0]
 80053a8:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 80053ac:	4613      	mov	r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	33c8      	adds	r3, #200	; 0xc8
 80053b6:	443b      	add	r3, r7
 80053b8:	3b10      	subs	r3, #16
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1842      	adds	r2, r0, r1
 80053be:	601a      	str	r2, [r3, #0]
			while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80053c0:	f7ff fd8a 	bl	8004ed8 <Custom_Switch_Read>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 80053ca:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	f47f af4a 	bne.w	8005268 <Pre_Drive_Var_Adjust+0x64>
				}
			}

			if (i == 0) {
 80053d4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <Pre_Drive_Var_Adjust+0x1dc>
				Sensor_Stop();
 80053dc:	f001 ffc8 	bl	8007370 <Sensor_Stop>
	for (uint8_t i = 0; i < intValCnt; i++) {
 80053e0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80053e4:	3301      	adds	r3, #1
 80053e6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80053ea:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 80053ee:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80053f2:	429a      	cmp	r2, r3
 80053f4:	f4ff af27 	bcc.w	8005246 <Pre_Drive_Var_Adjust+0x42>
		}
	}


	// float 변수 초기화
	for (uint8_t i = 0; i < floatValCnt; i++) {
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80053fe:	e08d      	b.n	800551c <Pre_Drive_Var_Adjust+0x318>

		Custom_OLED_Clear();
 8005400:	f7ff f955 	bl	80046ae <Custom_OLED_Clear>

		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005404:	e07b      	b.n	80054fe <Pre_Drive_Var_Adjust+0x2fa>

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/2%s", floatValues[i].valName);
 8005406:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 800540a:	4639      	mov	r1, r7
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	4619      	mov	r1, r3
 8005418:	4849      	ldr	r0, [pc, #292]	; (8005540 <Pre_Drive_Var_Adjust+0x33c>)
 800541a:	f7ff fa2d 	bl	8004878 <Custom_OLED_Printf>
			Custom_OLED_Printf("/4%f", *(floatValues[i].val));
 800541e:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	33c8      	adds	r3, #200	; 0xc8
 800542c:	443b      	add	r3, r7
 800542e:	3bb8      	subs	r3, #184	; 0xb8
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb f899 	bl	800056c <__aeabi_f2d>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4844      	ldr	r0, [pc, #272]	; (8005550 <Pre_Drive_Var_Adjust+0x34c>)
 8005440:	f7ff fa1a 	bl	8004878 <Custom_OLED_Printf>

			if (i == floatValCnt - 1) {
 8005444:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8005448:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800544c:	3b01      	subs	r3, #1
 800544e:	429a      	cmp	r2, r3
 8005450:	d102      	bne.n	8005458 <Pre_Drive_Var_Adjust+0x254>
				Custom_OLED_Printf("/g/0Ready to Drive");
 8005452:	4840      	ldr	r0, [pc, #256]	; (8005554 <Pre_Drive_Var_Adjust+0x350>)
 8005454:	f7ff fa10 	bl	8004878 <Custom_OLED_Printf>
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8005458:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800545c:	2b01      	cmp	r3, #1
 800545e:	d125      	bne.n	80054ac <Pre_Drive_Var_Adjust+0x2a8>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 8005460:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	33c8      	adds	r3, #200	; 0xc8
 800546e:	443b      	add	r3, r7
 8005470:	3bb4      	subs	r3, #180	; 0xb4
 8005472:	edd3 7a00 	vldr	s15, [r3]
 8005476:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	33c8      	adds	r3, #200	; 0xc8
 8005484:	443b      	add	r3, r7
 8005486:	3bb8      	subs	r3, #184	; 0xb8
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	ed93 7a00 	vldr	s14, [r3]
 800548e:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	33c8      	adds	r3, #200	; 0xc8
 800549c:	443b      	add	r3, r7
 800549e:	3bb8      	subs	r3, #184	; 0xb8
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a6:	edc3 7a00 	vstr	s15, [r3]
 80054aa:	e028      	b.n	80054fe <Pre_Drive_Var_Adjust+0x2fa>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 80054ac:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d124      	bne.n	80054fe <Pre_Drive_Var_Adjust+0x2fa>
				*(floatValues[i].val) += floatValues[i].changeVal;
 80054b4:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	33c8      	adds	r3, #200	; 0xc8
 80054c2:	443b      	add	r3, r7
 80054c4:	3bb4      	subs	r3, #180	; 0xb4
 80054c6:	ed93 7a00 	vldr	s14, [r3]
 80054ca:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 80054ce:	4613      	mov	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	33c8      	adds	r3, #200	; 0xc8
 80054d8:	443b      	add	r3, r7
 80054da:	3bb8      	subs	r3, #184	; 0xb8
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 80054e6:	4613      	mov	r3, r2
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	33c8      	adds	r3, #200	; 0xc8
 80054f0:	443b      	add	r3, r7
 80054f2:	3bb8      	subs	r3, #184	; 0xb8
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054fa:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80054fe:	f7ff fceb 	bl	8004ed8 <Custom_Switch_Read>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8005508:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800550c:	2b03      	cmp	r3, #3
 800550e:	f47f af7a 	bne.w	8005406 <Pre_Drive_Var_Adjust+0x202>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005512:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8005516:	3301      	adds	r3, #1
 8005518:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800551c:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 8005520:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8005524:	429a      	cmp	r2, r3
 8005526:	f4ff af6b 	bcc.w	8005400 <Pre_Drive_Var_Adjust+0x1fc>
			}
		}
	}

	Custom_OLED_Clear();
 800552a:	f7ff f8c0 	bl	80046ae <Custom_OLED_Clear>
}
 800552e:	bf00      	nop
 8005530:	37cc      	adds	r7, #204	; 0xcc
 8005532:	46bd      	mov	sp, r7
 8005534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005536:	bf00      	nop
 8005538:	0800a58c 	.word	0x0800a58c
 800553c:	0800a5a4 	.word	0x0800a5a4
 8005540:	0800a534 	.word	0x0800a534
 8005544:	0800a53c 	.word	0x0800a53c
 8005548:	20002514 	.word	0x20002514
 800554c:	0800a544 	.word	0x0800a544
 8005550:	0800a570 	.word	0x0800a570
 8005554:	0800a578 	.word	0x0800a578

08005558 <Pre_Drive_Var_Init>:


// 주행 전 초기값 대입
static void Pre_Drive_Var_Init(uint8_t driveIdx) {
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]


	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 8005562:	4b32      	ldr	r3, [pc, #200]	; (800562c <Pre_Drive_Var_Init+0xd4>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 8005568:	4b31      	ldr	r3, [pc, #196]	; (8005630 <Pre_Drive_Var_Init+0xd8>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
	absPositionVal = 0;
 800556e:	4b31      	ldr	r3, [pc, #196]	; (8005634 <Pre_Drive_Var_Init+0xdc>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	decele = decele_init;
 8005574:	4b30      	ldr	r3, [pc, #192]	; (8005638 <Pre_Drive_Var_Init+0xe0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a30      	ldr	r2, [pc, #192]	; (800563c <Pre_Drive_Var_Init+0xe4>)
 800557a:	6013      	str	r3, [r2, #0]

	targetSpeed = targetSpeed_init;
 800557c:	4b30      	ldr	r3, [pc, #192]	; (8005640 <Pre_Drive_Var_Init+0xe8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a30      	ldr	r2, [pc, #192]	; (8005644 <Pre_Drive_Var_Init+0xec>)
 8005582:	6013      	str	r3, [r2, #0]
	currentSpeed = MIN_SPEED;
 8005584:	4b30      	ldr	r3, [pc, #192]	; (8005648 <Pre_Drive_Var_Init+0xf0>)
 8005586:	4a31      	ldr	r2, [pc, #196]	; (800564c <Pre_Drive_Var_Init+0xf4>)
 8005588:	601a      	str	r2, [r3, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 800558a:	4b31      	ldr	r3, [pc, #196]	; (8005650 <Pre_Drive_Var_Init+0xf8>)
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 8005590:	4b30      	ldr	r3, [pc, #192]	; (8005654 <Pre_Drive_Var_Init+0xfc>)
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick_L = 0;
 8005596:	4b30      	ldr	r3, [pc, #192]	; (8005658 <Pre_Drive_Var_Init+0x100>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
	curTick_R = 0;
 800559c:	4b2f      	ldr	r3, [pc, #188]	; (800565c <Pre_Drive_Var_Init+0x104>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
	curTick = (curTick_L + curTick_R) >> 2; // (curTick_L + curTick_R) / 2
 80055a2:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <Pre_Drive_Var_Init+0x100>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <Pre_Drive_Var_Init+0x104>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4413      	add	r3, r2
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <Pre_Drive_Var_Init+0x108>)
 80055b0:	6013      	str	r3, [r2, #0]

	// 500us 단위의 타이머 업데이트
	curTime = 0;
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <Pre_Drive_Var_Init+0x10c>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

	// state machine 의 상태 업데이트
	driveState = DRIVE_STATE_IDLE;
 80055b8:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <Pre_Drive_Var_Init+0x110>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 80055be:	4b2b      	ldr	r3, [pc, #172]	; (800566c <Pre_Drive_Var_Init+0x114>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	801a      	strh	r2, [r3, #0]


	// 1차 주행에서만 초기화할 변수
	if (driveIdx == FIRST_DRIVE) {
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d11e      	bne.n	8005608 <Pre_Drive_Var_Init+0xb0>

		for (uint32_t i = 0; i < MAX_MARKER_CNT; i++) {
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e00d      	b.n	80055ec <Pre_Drive_Var_Init+0x94>
			t_driveData temp = T_DRIVE_DATA_INIT;
 80055d0:	2300      	movs	r3, #0
 80055d2:	813b      	strh	r3, [r7, #8]
 80055d4:	2300      	movs	r3, #0
 80055d6:	72bb      	strb	r3, [r7, #10]
 80055d8:	2300      	movs	r3, #0
 80055da:	72fb      	strb	r3, [r7, #11]

			driveDataBuffer[i] = temp;
 80055dc:	4924      	ldr	r1, [pc, #144]	; (8005670 <Pre_Drive_Var_Init+0x118>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint32_t i = 0; i < MAX_MARKER_CNT; i++) {
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f2:	d3ed      	bcc.n	80055d0 <Pre_Drive_Var_Init+0x78>
		}

		// driveData의 0, 1번째 값 초기화
		// 0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠
		// 실질적으로 주행은 1번 인덱스부터 시작
		driveDataBuffer[0].markState = MARK_STRAIGHT;
 80055f4:	4b1e      	ldr	r3, [pc, #120]	; (8005670 <Pre_Drive_Var_Init+0x118>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	709a      	strb	r2, [r3, #2]
		driveDataBuffer[1].markState = MARK_STRAIGHT;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <Pre_Drive_Var_Init+0x118>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	719a      	strb	r2, [r3, #6]

		// driveDataBuffer에 접근하는 포인터 1번 인덱스로 초기화
		driveDataBufferPtr = driveDataBuffer + 1;
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <Pre_Drive_Var_Init+0x11c>)
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <Pre_Drive_Var_Init+0x120>)
 8005604:	601a      	str	r2, [r3, #0]
		boostCntl = BOOST_CNTL_IDLE;

		// driveData에 접근하는 포인터 1번 인덱스로 초기화
		driveDataPtr = driveData + 1;
	}
}
 8005606:	e00b      	b.n	8005620 <Pre_Drive_Var_Init+0xc8>
	else if (driveIdx == SECOND_DRIVE) {
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d108      	bne.n	8005620 <Pre_Drive_Var_Init+0xc8>
		isReadAllMark = CUSTOM_TRUE;
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <Pre_Drive_Var_Init+0x124>)
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
		boostCntl = BOOST_CNTL_IDLE;
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <Pre_Drive_Var_Init+0x128>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
		driveDataPtr = driveData + 1;
 800561a:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <Pre_Drive_Var_Init+0x12c>)
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <Pre_Drive_Var_Init+0x130>)
 800561e:	601a      	str	r2, [r3, #0]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	200014b4 	.word	0x200014b4
 8005630:	200014b8 	.word	0x200014b8
 8005634:	200014bc 	.word	0x200014bc
 8005638:	20000038 	.word	0x20000038
 800563c:	20000044 	.word	0x20000044
 8005640:	20000034 	.word	0x20000034
 8005644:	20000048 	.word	0x20000048
 8005648:	2000004c 	.word	0x2000004c
 800564c:	3c23d70a 	.word	0x3c23d70a
 8005650:	200014c0 	.word	0x200014c0
 8005654:	20000058 	.word	0x20000058
 8005658:	200014c4 	.word	0x200014c4
 800565c:	200014c8 	.word	0x200014c8
 8005660:	200014cc 	.word	0x200014cc
 8005664:	200014d0 	.word	0x200014d0
 8005668:	200024d4 	.word	0x200024d4
 800566c:	200024d6 	.word	0x200024d6
 8005670:	20001cd4 	.word	0x20001cd4
 8005674:	20001cd8 	.word	0x20001cd8
 8005678:	20000060 	.word	0x20000060
 800567c:	20000059 	.word	0x20000059
 8005680:	200024d5 	.word	0x200024d5
 8005684:	200014d8 	.word	0x200014d8
 8005688:	2000005c 	.word	0x2000005c

0800568c <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3b01      	subs	r3, #1
 800569c:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800569e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80056ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80056be:	bf00      	nop
 80056c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d1f8      	bne.n	80056c0 <Custom_Delay_us+0x34>
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff ffcc 	bl	800568c <Custom_Delay_us>
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	ed87 0a01 	vstr	s0, [r7, #4]
 8005706:	edc7 0a00 	vstr	s1, [r7]

	targetSpeed = pinSpeed;
 800570a:	4a2b      	ldr	r2, [pc, #172]	; (80057b8 <Drive_Fit_In+0xbc>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - currentSpeed) * (pinSpeed + currentSpeed) / (2 * s) );
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <Drive_Fit_In+0xc0>)
 8005712:	edd3 7a00 	vldr	s15, [r3]
 8005716:	ed97 7a00 	vldr	s14, [r7]
 800571a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <Drive_Fit_In+0xc0>)
 8005720:	edd3 6a00 	vldr	s13, [r3]
 8005724:	edd7 7a00 	vldr	s15, [r7]
 8005728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005730:	edd7 7a01 	vldr	s15, [r7, #4]
 8005734:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005744:	d518      	bpl.n	8005778 <Drive_Fit_In+0x7c>
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <Drive_Fit_In+0xc0>)
 8005748:	edd3 7a00 	vldr	s15, [r3]
 800574c:	ed97 7a00 	vldr	s14, [r7]
 8005750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <Drive_Fit_In+0xc0>)
 8005756:	edd3 6a00 	vldr	s13, [r3]
 800575a:	edd7 7a00 	vldr	s15, [r7]
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005766:	edd7 7a01 	vldr	s15, [r7, #4]
 800576a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800576e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005772:	eef1 7a67 	vneg.f32	s15, s15
 8005776:	e015      	b.n	80057a4 <Drive_Fit_In+0xa8>
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <Drive_Fit_In+0xc0>)
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	ed97 7a00 	vldr	s14, [r7]
 8005782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <Drive_Fit_In+0xc0>)
 8005788:	edd3 6a00 	vldr	s13, [r3]
 800578c:	edd7 7a00 	vldr	s15, [r7]
 8005790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005794:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005798:	edd7 7a01 	vldr	s15, [r7, #4]
 800579c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80057a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <Drive_Fit_In+0xc4>)
 80057a6:	edc3 7a00 	vstr	s15, [r3]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000048 	.word	0x20000048
 80057bc:	2000004c 	.word	0x2000004c
 80057c0:	20000044 	.word	0x20000044

080057c4 <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End() {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0

	static uint8_t exitEcho;

	exitEcho = EXIT_ECHO_IDLE;
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <Is_Drive_End+0x6c>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]

	// endMark || lineOut
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 80057ce:	4b19      	ldr	r3, [pc, #100]	; (8005834 <Is_Drive_End+0x70>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d804      	bhi.n	80057e2 <Is_Drive_End+0x1e>
 80057d8:	4b17      	ldr	r3, [pc, #92]	; (8005838 <Is_Drive_End+0x74>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d122      	bne.n	8005828 <Is_Drive_End+0x64>

		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 80057e2:	4b16      	ldr	r3, [pc, #88]	; (800583c <Is_Drive_End+0x78>)
 80057e4:	edd3 7a00 	vldr	s15, [r3]
 80057e8:	eddf 0a15 	vldr	s1, [pc, #84]	; 8005840 <Is_Drive_End+0x7c>
 80057ec:	eeb0 0a67 	vmov.f32	s0, s15
 80057f0:	f7ff ff84 	bl	80056fc <Drive_Fit_In>

		while (currentSpeed > DRIVE_END_DELAY_SPEED) {
 80057f4:	bf00      	nop
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <Is_Drive_End+0x80>)
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005848 <Is_Drive_End+0x84>
 8005800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005808:	dcf5      	bgt.n	80057f6 <Is_Drive_End+0x32>
			//Drive_Speed_Cntl();
		}

		Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 800580a:	2096      	movs	r0, #150	; 0x96
 800580c:	f7ff ff66 	bl	80056dc <Custom_Delay_ms>

		if (endMarkCnt >= 2) {
 8005810:	4b08      	ldr	r3, [pc, #32]	; (8005834 <Is_Drive_End+0x70>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d903      	bls.n	8005822 <Is_Drive_End+0x5e>

			exitEcho = EXIT_ECHO_END_MARK;
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <Is_Drive_End+0x6c>)
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e002      	b.n	8005828 <Is_Drive_End+0x64>
		}
		else {

			exitEcho = EXIT_ECHO_LINE_OUT;
 8005822:	4b03      	ldr	r3, [pc, #12]	; (8005830 <Is_Drive_End+0x6c>)
 8005824:	2202      	movs	r2, #2
 8005826:	701a      	strb	r2, [r3, #0]
		}
	}

	return exitEcho;
 8005828:	4b01      	ldr	r3, [pc, #4]	; (8005830 <Is_Drive_End+0x6c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200024e0 	.word	0x200024e0
 8005834:	200014c0 	.word	0x200014c0
 8005838:	20000058 	.word	0x20000058
 800583c:	20000064 	.word	0x20000064
 8005840:	3c23d70a 	.word	0x3c23d70a
 8005844:	2000004c 	.word	0x2000004c
 8005848:	3e99999a 	.word	0x3e99999a

0800584c <Get_Line_Sensor_Cnt>:




// line sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Line_Sensor_Cnt() {
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	4413      	add	r3, r2
 8005872:	b2da      	uxtb	r2, r3
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	091b      	lsrs	r3, r3, #4
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	4413      	add	r3, r2
 8005886:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8005888:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8005898:	4413      	add	r3, r2
 800589a:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <Get_Line_Sensor_Cnt+0x84>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	b2db      	uxtb	r3, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20002514 	.word	0x20002514

080058d4 <Get_Marker_Sensor_Cnt>:


// marker sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Marker_Sensor_Cnt() {
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
	return ((state >> 7) & 0x01) + ((state >> 0) & 0x01);
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <Get_Marker_Sensor_Cnt+0x30>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	09db      	lsrs	r3, r3, #7
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <Get_Marker_Sensor_Cnt+0x30>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	b2db      	uxtb	r3, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20002514 	.word	0x20002514

08005908 <Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Decision(uint8_t sensorStateSum) {
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]


	// cross
	if (sensorStateSum == 0xff) {
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d103      	bne.n	8005920 <Decision+0x18>

		markState = MARK_CROSS;
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <Decision+0x7c>)
 800591a:	2205      	movs	r2, #5
 800591c:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 800591e:	e02a      	b.n	8005976 <Decision+0x6e>
	else if ( (sensorStateSum & 0x81) == 0x81 ) {
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8005926:	2b81      	cmp	r3, #129	; 0x81
 8005928:	d103      	bne.n	8005932 <Decision+0x2a>
		markState = MARK_END;
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <Decision+0x7c>)
 800592c:	2204      	movs	r2, #4
 800592e:	701a      	strb	r2, [r3, #0]
}
 8005930:	e021      	b.n	8005976 <Decision+0x6e>
	else if ( (sensorStateSum & 0x80) == 0x80 ) {
 8005932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	da0c      	bge.n	8005954 <Decision+0x4c>
		if (markState == MARK_CURVE_L) {
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <Decision+0x7c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b03      	cmp	r3, #3
 8005942:	d103      	bne.n	800594c <Decision+0x44>
			markState = MARK_STRAIGHT;
 8005944:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <Decision+0x7c>)
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
}
 800594a:	e014      	b.n	8005976 <Decision+0x6e>
			markState = MARK_CURVE_L;
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <Decision+0x7c>)
 800594e:	2203      	movs	r2, #3
 8005950:	701a      	strb	r2, [r3, #0]
}
 8005952:	e010      	b.n	8005976 <Decision+0x6e>
	else if ( (sensorStateSum & 0x01) == 0x01 ) {
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <Decision+0x6e>
		if (markState == MARK_CURVE_R) {
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <Decision+0x7c>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d103      	bne.n	8005970 <Decision+0x68>
			markState = MARK_STRAIGHT;
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <Decision+0x7c>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
}
 800596e:	e002      	b.n	8005976 <Decision+0x6e>
			markState = MARK_CURVE_R;
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <Decision+0x7c>)
 8005972:	2202      	movs	r2, #2
 8005974:	701a      	strb	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000058 	.word	0x20000058

08005988 <Drive_State_Machine>:





__STATIC_INLINE void	Drive_State_Machine() {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	//센서 값 누적
	static uint8_t	sensorStateSum;
	static uint32_t	lineOutStartTime;


	switch (driveState) {
 800598c:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <Drive_State_Machine+0x10c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b04      	cmp	r3, #4
 8005994:	d87c      	bhi.n	8005a90 <Drive_State_Machine+0x108>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <Drive_State_Machine+0x14>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059b1 	.word	0x080059b1
 80059a0:	080059fb 	.word	0x080059fb
 80059a4:	08005a27 	.word	0x08005a27
 80059a8:	08005a4b 	.word	0x08005a4b
 80059ac:	08005a5d 	.word	0x08005a5d

		case DRIVE_STATE_IDLE :

			// 라인 센서 4개 이상 인식
			if (Get_Line_Sensor_Cnt() >= 4) {
 80059b0:	f7ff ff4c 	bl	800584c <Get_Line_Sensor_Cnt>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d906      	bls.n	80059c8 <Drive_State_Machine+0x40>

				sensorStateSum = 0x00;
 80059ba:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <Drive_State_Machine+0x110>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_CROSS;
 80059c0:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <Drive_State_Machine+0x10c>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]

				lineOutStartTime = curTime;
				driveState = DRIVE_DECISION_LINE_OUT;
			}

			break;
 80059c6:	e05c      	b.n	8005a82 <Drive_State_Machine+0xfa>
			else if (Get_Marker_Sensor_Cnt() != 0) {
 80059c8:	f7ff ff84 	bl	80058d4 <Get_Marker_Sensor_Cnt>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <Drive_State_Machine+0x58>
				sensorStateSum = 0x00;
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <Drive_State_Machine+0x110>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_MARKER;
 80059d8:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <Drive_State_Machine+0x10c>)
 80059da:	2202      	movs	r2, #2
 80059dc:	701a      	strb	r2, [r3, #0]
			break;
 80059de:	e050      	b.n	8005a82 <Drive_State_Machine+0xfa>
			else if (state == 0x00) {
 80059e0:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <Drive_State_Machine+0x114>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d14b      	bne.n	8005a82 <Drive_State_Machine+0xfa>
				lineOutStartTime = curTime;
 80059ea:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <Drive_State_Machine+0x118>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <Drive_State_Machine+0x11c>)
 80059f0:	6013      	str	r3, [r2, #0]
				driveState = DRIVE_DECISION_LINE_OUT;
 80059f2:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <Drive_State_Machine+0x10c>)
 80059f4:	2204      	movs	r2, #4
 80059f6:	701a      	strb	r2, [r3, #0]
			break;
 80059f8:	e043      	b.n	8005a82 <Drive_State_Machine+0xfa>


		case DRIVE_STATE_CROSS:

			// accum
			sensorStateSum |= state;
 80059fa:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <Drive_State_Machine+0x114>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a0a:	701a      	strb	r2, [r3, #0]

			// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
			if (sensorStateSum == 0xff && Get_Marker_Sensor_Cnt() == 0) {
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2bff      	cmp	r3, #255	; 0xff
 8005a12:	d138      	bne.n	8005a86 <Drive_State_Machine+0xfe>
 8005a14:	f7ff ff5e 	bl	80058d4 <Get_Marker_Sensor_Cnt>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d133      	bne.n	8005a86 <Drive_State_Machine+0xfe>
				driveState = DRIVE_STATE_DECISION;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <Drive_State_Machine+0x10c>)
 8005a20:	2203      	movs	r2, #3
 8005a22:	701a      	strb	r2, [r3, #0]
			}

			break;
 8005a24:	e02f      	b.n	8005a86 <Drive_State_Machine+0xfe>


		case DRIVE_STATE_MARKER :

			// accum
			sensorStateSum |= state;
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <Drive_State_Machine+0x114>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a36:	701a      	strb	r2, [r3, #0]

			// 마커 센서가 0개 일 때
			if (Get_Marker_Sensor_Cnt() == 0) {
 8005a38:	f7ff ff4c 	bl	80058d4 <Get_Marker_Sensor_Cnt>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d123      	bne.n	8005a8a <Drive_State_Machine+0x102>
				driveState = DRIVE_STATE_DECISION;
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <Drive_State_Machine+0x10c>)
 8005a44:	2203      	movs	r2, #3
 8005a46:	701a      	strb	r2, [r3, #0]
			}

			break;
 8005a48:	e01f      	b.n	8005a8a <Drive_State_Machine+0x102>


		case DRIVE_STATE_DECISION :

			Decision(sensorStateSum);
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <Drive_State_Machine+0x110>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ff5a 	bl	8005908 <Decision>
			driveState = DRIVE_STATE_IDLE;
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <Drive_State_Machine+0x10c>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]

			break;
 8005a5a:	e019      	b.n	8005a90 <Drive_State_Machine+0x108>


		case DRIVE_DECISION_LINE_OUT :

			if (state != 0x00) {
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <Drive_State_Machine+0x114>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <Drive_State_Machine+0xe6>

				driveState = DRIVE_STATE_IDLE;
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <Drive_State_Machine+0x10c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
			else if (curTime > lineOutStartTime + 2 * LINE_OUT_DELAY_MS) {

				markState = MARK_LINE_OUT;
			}

			break ;
 8005a6c:	e00f      	b.n	8005a8e <Drive_State_Machine+0x106>
			else if (curTime > lineOutStartTime + 2 * LINE_OUT_DELAY_MS) {
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <Drive_State_Machine+0x118>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <Drive_State_Machine+0x11c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d909      	bls.n	8005a8e <Drive_State_Machine+0x106>
				markState = MARK_LINE_OUT;
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <Drive_State_Machine+0x120>)
 8005a7c:	2206      	movs	r2, #6
 8005a7e:	701a      	strb	r2, [r3, #0]
			break ;
 8005a80:	e005      	b.n	8005a8e <Drive_State_Machine+0x106>
			break;
 8005a82:	bf00      	nop
 8005a84:	e004      	b.n	8005a90 <Drive_State_Machine+0x108>
			break;
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <Drive_State_Machine+0x108>
			break;
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <Drive_State_Machine+0x108>
			break ;
 8005a8e:	bf00      	nop

	}
}
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200024d4 	.word	0x200024d4
 8005a98:	200024d8 	.word	0x200024d8
 8005a9c:	20002514 	.word	0x20002514
 8005aa0:	200014d0 	.word	0x200014d0
 8005aa4:	200024dc 	.word	0x200024dc
 8005aa8:	20000058 	.word	0x20000058

08005aac <First_Drive>:




//1차 주행
void First_Drive() {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0

	uint8_t exitEcho = EXIT_ECHO_IDLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8005ab6:	f7fe fdfa 	bl	80046ae <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting(FIRST_DRIVE);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff fb92 	bl	80051e4 <Pre_Drive_Setting>

	Sensor_Start();
 8005ac0:	f001 fc3e 	bl	8007340 <Sensor_Start>
	Motor_Start();
 8005ac4:	f000 ff54 	bl	8006970 <Motor_Start>
	Speed_Control_Start();
 8005ac8:	f000 ff7e 	bl	80069c8 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 8005acc:	f7ff ff5c 	bl	8005988 <Drive_State_Machine>
		First_Drive_Ctrl();
 8005ad0:	f000 f818 	bl	8005b04 <First_Drive_Ctrl>
		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 8005ad4:	f7ff fe76 	bl	80057c4 <Is_Drive_End>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	71fb      	strb	r3, [r7, #7]
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d100      	bne.n	8005ae4 <First_Drive+0x38>
		Drive_State_Machine();
 8005ae2:	e7f3      	b.n	8005acc <First_Drive+0x20>
			break;
 8005ae4:	bf00      	nop
		}
	}

	Motor_Stop();
 8005ae6:	f000 ff57 	bl	8006998 <Motor_Stop>
	Speed_Control_Stop();
 8005aea:	f000 ff79 	bl	80069e0 <Speed_Control_Stop>
	Sensor_Stop();
 8005aee:	f001 fc3f 	bl	8007370 <Sensor_Stop>


	First_Drive_Data_Cntl(exitEcho);
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f88d 	bl	8005c14 <First_Drive_Data_Cntl>
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <First_Drive_Ctrl>:





__STATIC_INLINE void First_Drive_Ctrl() {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataBufferPtr->markState) {
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <First_Drive_Ctrl+0x20>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	789b      	ldrb	r3, [r3, #2]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <First_Drive_Ctrl+0x24>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d001      	beq.n	8005b1e <First_Drive_Ctrl+0x1a>

		// driveData 값 업데이트
		Set_First_Drive_Data();
 8005b1a:	f000 f807 	bl	8005b2c <Set_First_Drive_Data>
	}
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000060 	.word	0x20000060
 8005b28:	20000058 	.word	0x20000058

08005b2c <Set_First_Drive_Data>:



__STATIC_INLINE void Set_First_Drive_Data() {
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0

	// 크로스, 엔드마크가 아닐 경우
	if (markState != MARK_CROSS && markState != MARK_END) {
 8005b30:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d024      	beq.n	8005b84 <Set_First_Drive_Data+0x58>
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d01f      	beq.n	8005b84 <Set_First_Drive_Data+0x58>

		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
		driveDataBufferPtr->tickCnt = curTick - (driveDataBufferPtr-1)->tickCnt;
 8005b44:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <Set_First_Drive_Data+0xd8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b299      	uxth	r1, r3
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3b04      	subs	r3, #4
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1a8a      	subs	r2, r1, r2
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	801a      	strh	r2, [r3, #0]

		// 종료시점에서 크로스를 읽은 총 개수를 저장
		driveDataBufferPtr->crossCnt = crossCnt;
 8005b5e:	4b2b      	ldr	r3, [pc, #172]	; (8005c0c <Set_First_Drive_Data+0xe0>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	70da      	strb	r2, [r3, #3]

		// drivePtr 값 인덱스 증가
		driveDataBufferPtr += 1;
 8005b6c:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b74:	6013      	str	r3, [r2, #0]

		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBufferPtr->markState = markState;
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	709a      	strb	r2, [r3, #2]
 8005b82:	e038      	b.n	8005bf6 <Set_First_Drive_Data+0xca>
	}

	else {

		// 크로스일 경우
		if (markState == MARK_CROSS) {
 8005b84:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d107      	bne.n	8005b9e <Set_First_Drive_Data+0x72>

			crossCnt += 1;
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <Set_First_Drive_Data+0xe0>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <Set_First_Drive_Data+0xe0>)
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e024      	b.n	8005be8 <Set_First_Drive_Data+0xbc>
		}

		// 엔드마크일 경우
		else if (markState == MARK_END){
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d11f      	bne.n	8005be8 <Set_First_Drive_Data+0xbc>

			endMarkCnt += 1;
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <Set_First_Drive_Data+0xe4>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <Set_First_Drive_Data+0xe4>)
 8005bb4:	701a      	strb	r2, [r3, #0]

			if (endMarkCnt >= 2) {
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <Set_First_Drive_Data+0xe4>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d913      	bls.n	8005be8 <Set_First_Drive_Data+0xbc>

				// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
				driveDataBufferPtr->tickCnt = curTick - (driveDataBufferPtr-1)->tickCnt;
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <Set_First_Drive_Data+0xd8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b299      	uxth	r1, r3
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1a8a      	subs	r2, r1, r2
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	801a      	strh	r2, [r3, #0]

				// 종료시점에서 크로스를 읽은 총 개수를 저장
				driveDataBufferPtr->crossCnt = crossCnt;
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <Set_First_Drive_Data+0xe0>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	70da      	strb	r2, [r3, #3]
			}
		}

		// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
		markState = driveDataBufferPtr->markState;
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <Set_First_Drive_Data+0xdc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <Set_First_Drive_Data+0xd4>)
 8005bf2:	701a      	strb	r2, [r3, #0]
	}

}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000058 	.word	0x20000058
 8005c04:	200014cc 	.word	0x200014cc
 8005c08:	20000060 	.word	0x20000060
 8005c0c:	200024d6 	.word	0x200024d6
 8005c10:	200014c0 	.word	0x200014c0

08005c14 <First_Drive_Data_Cntl>:





static void First_Drive_Data_Cntl(uint8_t exitEcho) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 1;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
	uint16_t markCnt_L = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	817b      	strh	r3, [r7, #10]
	uint16_t markCnt_R = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	813b      	strh	r3, [r7, #8]

	if (exitEcho == EXIT_ECHO_END_MARK) {
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d16b      	bne.n	8005d08 <First_Drive_Data_Cntl+0xf4>

		// 마크 개수 세기
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE; i += 1) {
 8005c30:	2301      	movs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e03b      	b.n	8005cae <First_Drive_Data_Cntl+0x9a>

			// 현재상태가 좌측 곡선인 경우
			if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	789b      	ldrb	r3, [r3, #2]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d103      	bne.n	8005c4e <First_Drive_Data_Cntl+0x3a>

				markCnt_L += 1;
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	817b      	strh	r3, [r7, #10]
 8005c4c:	e02c      	b.n	8005ca8 <First_Drive_Data_Cntl+0x94>
			}

			// 현재상태가 우측 곡선인 경우
			else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 8005c4e:	4a37      	ldr	r2, [pc, #220]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	789b      	ldrb	r3, [r3, #2]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d103      	bne.n	8005c66 <First_Drive_Data_Cntl+0x52>

				markCnt_R += 1;
 8005c5e:	893b      	ldrh	r3, [r7, #8]
 8005c60:	3301      	adds	r3, #1
 8005c62:	813b      	strh	r3, [r7, #8]
 8005c64:	e020      	b.n	8005ca8 <First_Drive_Data_Cntl+0x94>
			}

			// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
			else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 8005c66:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	789b      	ldrb	r3, [r3, #2]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d118      	bne.n	8005ca8 <First_Drive_Data_Cntl+0x94>

				// 이전 상태가 좌측 곡선이었을 경우
				if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	789b      	ldrb	r3, [r3, #2]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d103      	bne.n	8005c90 <First_Drive_Data_Cntl+0x7c>
					markCnt_L += 1;
 8005c88:	897b      	ldrh	r3, [r7, #10]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	817b      	strh	r3, [r7, #10]
 8005c8e:	e00b      	b.n	8005ca8 <First_Drive_Data_Cntl+0x94>
				}

				// 이전 상태가 우측 곡선이었을 경우
				else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4a25      	ldr	r2, [pc, #148]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	789b      	ldrb	r3, [r3, #2]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d102      	bne.n	8005ca8 <First_Drive_Data_Cntl+0x94>
					markCnt_R += 1;
 8005ca2:	893b      	ldrh	r3, [r7, #8]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	813b      	strh	r3, [r7, #8]
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE; i += 1) {
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	789b      	ldrb	r3, [r3, #2]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1bb      	bne.n	8005c36 <First_Drive_Data_Cntl+0x22>
				}
			}
		}

		Custom_OLED_Clear();
 8005cbe:	f7fe fcf6 	bl	80046ae <Custom_OLED_Clear>

		// OLED에 exitEcho 변수명 및 마크 개수 출력
		Custom_OLED_Printf("/0end mark");
 8005cc2:	481b      	ldr	r0, [pc, #108]	; (8005d30 <First_Drive_Data_Cntl+0x11c>)
 8005cc4:	f7fe fdd8 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 8005cc8:	897b      	ldrh	r3, [r7, #10]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4819      	ldr	r0, [pc, #100]	; (8005d34 <First_Drive_Data_Cntl+0x120>)
 8005cce:	f7fe fdd3 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4818      	ldr	r0, [pc, #96]	; (8005d38 <First_Drive_Data_Cntl+0x124>)
 8005cd8:	f7fe fdce 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3cross:    %d", driveDataBuffer[i-1].crossCnt);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <First_Drive_Data_Cntl+0x118>)
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4619      	mov	r1, r3
 8005cec:	4813      	ldr	r0, [pc, #76]	; (8005d3c <First_Drive_Data_Cntl+0x128>)
 8005cee:	f7fe fdc3 	bl	8004878 <Custom_OLED_Printf>

		while (CUSTOM_SW_BOTH != Custom_Switch_Read()) ;
 8005cf2:	bf00      	nop
 8005cf4:	f7ff f8f0 	bl	8004ed8 <Custom_Switch_Read>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d1fa      	bne.n	8005cf4 <First_Drive_Data_Cntl+0xe0>

		First_Drive_Data_Update_Cntl(exitEcho);
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f81f 	bl	8005d44 <First_Drive_Data_Update_Cntl>
 8005d06:	e00b      	b.n	8005d20 <First_Drive_Data_Cntl+0x10c>
	}

	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d108      	bne.n	8005d20 <First_Drive_Data_Cntl+0x10c>

		Custom_OLED_Printf("/0line out");
 8005d0e:	480c      	ldr	r0, [pc, #48]	; (8005d40 <First_Drive_Data_Cntl+0x12c>)
 8005d10:	f7fe fdb2 	bl	8004878 <Custom_OLED_Printf>

		while (CUSTOM_SW_BOTH != Custom_Switch_Read()) ;
 8005d14:	bf00      	nop
 8005d16:	f7ff f8df 	bl	8004ed8 <Custom_Switch_Read>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d1fa      	bne.n	8005d16 <First_Drive_Data_Cntl+0x102>
	}

	Custom_OLED_Clear();
 8005d20:	f7fe fcc5 	bl	80046ae <Custom_OLED_Clear>
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20001cd4 	.word	0x20001cd4
 8005d30:	0800a64c 	.word	0x0800a64c
 8005d34:	0800a658 	.word	0x0800a658
 8005d38:	0800a668 	.word	0x0800a668
 8005d3c:	0800a678 	.word	0x0800a678
 8005d40:	0800a688 	.word	0x0800a688

08005d44 <First_Drive_Data_Update_Cntl>:



static void First_Drive_Data_Update_Cntl(uint8_t exitEcho) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]

	uint8_t sw;
	uint8_t isUpdate = CUSTOM_FALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]

	Custom_OLED_Printf("/5update: NO");
 8005d52:	482a      	ldr	r0, [pc, #168]	; (8005dfc <First_Drive_Data_Update_Cntl+0xb8>)
 8005d54:	f7fe fd90 	bl	8004878 <Custom_OLED_Printf>

	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005d58:	e010      	b.n	8005d7c <First_Drive_Data_Update_Cntl+0x38>

		// data 업데이트 함
		if (sw == CUSTOM_SW_1) {
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d105      	bne.n	8005d6c <First_Drive_Data_Update_Cntl+0x28>
			Custom_OLED_Printf("/5update: YES");
 8005d60:	4827      	ldr	r0, [pc, #156]	; (8005e00 <First_Drive_Data_Update_Cntl+0xbc>)
 8005d62:	f7fe fd89 	bl	8004878 <Custom_OLED_Printf>
			isUpdate = CUSTOM_TRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e007      	b.n	8005d7c <First_Drive_Data_Update_Cntl+0x38>
		}

		// data 업데이트 안함
		else if (sw == CUSTOM_SW_2) {
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d104      	bne.n	8005d7c <First_Drive_Data_Update_Cntl+0x38>
			Custom_OLED_Printf("/5update: NO ");
 8005d72:	4824      	ldr	r0, [pc, #144]	; (8005e04 <First_Drive_Data_Update_Cntl+0xc0>)
 8005d74:	f7fe fd80 	bl	8004878 <Custom_OLED_Printf>
			isUpdate = CUSTOM_FALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005d7c:	f7ff f8ac 	bl	8004ed8 <Custom_Switch_Read>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d1e7      	bne.n	8005d5a <First_Drive_Data_Update_Cntl+0x16>
		}
	}
	Custom_OLED_Clear();
 8005d8a:	f7fe fc90 	bl	80046ae <Custom_OLED_Clear>

	if (driveData[0].markState == MARK_NONE || isUpdate == CUSTOM_TRUE) {
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <First_Drive_Data_Update_Cntl+0xc4>)
 8005d90:	789b      	ldrb	r3, [r3, #2]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <First_Drive_Data_Update_Cntl+0x5a>
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d12a      	bne.n	8005df4 <First_Drive_Data_Update_Cntl+0xb0>

		for (uint32_t i = 0; i < MAX_MARKER_CNT; i += 1) {
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e023      	b.n	8005dec <First_Drive_Data_Update_Cntl+0xa8>
			driveData[i].tickCnt = driveDataBuffer[i].tickCnt;
 8005da4:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <First_Drive_Data_Update_Cntl+0xc8>)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005dac:	b299      	uxth	r1, r3
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <First_Drive_Data_Update_Cntl+0xc4>)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			driveData[i].markState = driveDataBuffer[i].markState;
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <First_Drive_Data_Update_Cntl+0xc8>)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	789b      	ldrb	r3, [r3, #2]
 8005dc0:	b2d9      	uxtb	r1, r3
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <First_Drive_Data_Update_Cntl+0xc4>)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	460a      	mov	r2, r1
 8005dcc:	709a      	strb	r2, [r3, #2]
			driveData[i].crossCnt = driveDataBuffer[i].crossCnt;
 8005dce:	4a0f      	ldr	r2, [pc, #60]	; (8005e0c <First_Drive_Data_Update_Cntl+0xc8>)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	b2d9      	uxtb	r1, r3
 8005dda:	4a0b      	ldr	r2, [pc, #44]	; (8005e08 <First_Drive_Data_Update_Cntl+0xc4>)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	460a      	mov	r2, r1
 8005de4:	70da      	strb	r2, [r3, #3]
		for (uint32_t i = 0; i < MAX_MARKER_CNT; i += 1) {
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3301      	adds	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df2:	d3d7      	bcc.n	8005da4 <First_Drive_Data_Update_Cntl+0x60>
		}
	}
}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	0800a694 	.word	0x0800a694
 8005e00:	0800a6a4 	.word	0x0800a6a4
 8005e04:	0800a6b4 	.word	0x0800a6b4
 8005e08:	200014d4 	.word	0x200014d4
 8005e0c:	20001cd4 	.word	0x20001cd4

08005e10 <LL_USART_Enable>:
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8005e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8005e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8005ea6:	bf00      	nop
 8005ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d1f8      	bne.n	8005ea8 <Custom_Delay_us+0x34>
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ffcc 	bl	8005e74 <Custom_Delay_us>
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
	uwTick = 0;
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <Custom_Delay_Init_SysTick+0x20>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <Custom_Delay_Init_SysTick+0x24>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <Custom_Delay_Init_SysTick+0x24>)
 8005ef4:	f043 0307 	orr.w	r3, r3, #7
 8005ef8:	6013      	str	r3, [r2, #0]
}
 8005efa:	bf00      	nop
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	20000318 	.word	0x20000318
 8005f08:	e000e010 	.word	0xe000e010

08005f0c <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8005f14:	bf00      	nop
 8005f16:	4808      	ldr	r0, [pc, #32]	; (8005f38 <__io_putchar+0x2c>)
 8005f18:	f7ff ff8a 	bl	8005e30 <LL_USART_IsActiveFlag_TXE>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f9      	beq.n	8005f16 <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	4803      	ldr	r0, [pc, #12]	; (8005f38 <__io_putchar+0x2c>)
 8005f2a:	f7ff ff94 	bl	8005e56 <LL_USART_TransmitData8>
	return ch;
 8005f2e:	687b      	ldr	r3, [r7, #4]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40004400 	.word	0x40004400

08005f3c <Init>:



void Init() {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b0c2      	sub	sp, #264	; 0x108
 8005f40:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8005f42:	483c      	ldr	r0, [pc, #240]	; (8006034 <Init+0xf8>)
 8005f44:	f7ff ff64 	bl	8005e10 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8005f48:	f7ff ffcc 	bl	8005ee4 <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8005f4c:	f7fe fbce 	bl	80046ec <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8005f50:	f7fd ffb4 	bl	8003ebc <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8005f54:	f7fe fbca 	bl	80046ec <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8005f58:	4837      	ldr	r0, [pc, #220]	; (8006038 <Init+0xfc>)
 8005f5a:	f7fe fc8d 	bl	8004878 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8005f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f62:	f7ff ffaf 	bl	8005ec4 <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6e:	4a33      	ldr	r2, [pc, #204]	; (800603c <Init+0x100>)
 8005f70:	4618      	mov	r0, r3
 8005f72:	4611      	mov	r1, r2
 8005f74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f002 f857 	bl	800802c <memcpy>
			{ "Del DriveData  ", Delete_Drive_Data_Flash},
			{ "Save DriveData ", Save_Drive_Data_Flash},
			{ "Read DriveData ", Read_Drive_Data_Flash},
	};

	uint8_t sw = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	uint8_t count = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 8005f8a:	230d      	movs	r3, #13
 8005f8c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

	Custom_OLED_Clear();
 8005f90:	f7fe fb8d 	bl	80046ae <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8005f94:	f7fe fb8b 	bl	80046ae <Custom_OLED_Clear>
		while(CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8005f98:	e033      	b.n	8006002 <Init+0xc6>
			Custom_OLED_Printf("%s", menus[count].menuName);
 8005f9a:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	4619      	mov	r1, r3
 8005fac:	4824      	ldr	r0, [pc, #144]	; (8006040 <Init+0x104>)
 8005fae:	f7fe fc63 	bl	8004878 <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8005fb2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d10f      	bne.n	8005fda <Init+0x9e>
				if (count == 0)
 8005fba:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <Init+0x92>
					count = menuCnt - 1;
 8005fc2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005fcc:	e019      	b.n	8006002 <Init+0xc6>
				else
					count--;
 8005fce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005fd8:	e013      	b.n	8006002 <Init+0xc6>
			}
			else if (sw == CUSTOM_SW_2) {
 8005fda:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d10f      	bne.n	8006002 <Init+0xc6>
				if (count == menuCnt - 1)
 8005fe2:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8005fe6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005fea:	3b01      	subs	r3, #1
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d103      	bne.n	8005ff8 <Init+0xbc>
					count = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005ff6:	e004      	b.n	8006002 <Init+0xc6>
				else
					count++;
 8005ff8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		while(CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8006002:	f7fe ff69 	bl	8004ed8 <Custom_Switch_Read>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800600c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006010:	2b03      	cmp	r3, #3
 8006012:	d1c2      	bne.n	8005f9a <Init+0x5e>
			}
		}
		menus[count].func();
 8006014:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	3310      	adds	r3, #16
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4798      	blx	r3
		Custom_OLED_Clear();
 8006030:	e7b0      	b.n	8005f94 <Init+0x58>
 8006032:	bf00      	nop
 8006034:	40004400 	.word	0x40004400
 8006038:	0800a6c4 	.word	0x0800a6c4
 800603c:	0800a6dc 	.word	0x0800a6dc
 8006040:	0800a6d8 	.word	0x0800a6d8

08006044 <LL_TIM_SetAutoReload>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <Window_Position_Val>:
__STATIC_INLINE int32_t	Window_Position_Val() {
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
	positionIdxMax = 5;
 8006064:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <Window_Position_Val+0xb8>)
 8006066:	2205      	movs	r2, #5
 8006068:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 2;
 800606a:	4b2c      	ldr	r3, [pc, #176]	; (800611c <Window_Position_Val+0xbc>)
 800606c:	2202      	movs	r2, #2
 800606e:	701a      	strb	r2, [r3, #0]
	if (absPositionVal > positionTable[4]) {
 8006070:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <Window_Position_Val+0xc0>)
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <Window_Position_Val+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	da10      	bge.n	800609e <Window_Position_Val+0x3e>
		if (positionVal < 0) {
 800607c:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <Window_Position_Val+0xc8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da06      	bge.n	8006092 <Window_Position_Val+0x32>
			positionIdxMax = 4;
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <Window_Position_Val+0xb8>)
 8006086:	2204      	movs	r2, #4
 8006088:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 1;
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <Window_Position_Val+0xbc>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e005      	b.n	800609e <Window_Position_Val+0x3e>
			positionIdxMax = 6;
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <Window_Position_Val+0xb8>)
 8006094:	2206      	movs	r2, #6
 8006096:	701a      	strb	r2, [r3, #0]
			positionIdxMin = 3;
 8006098:	4b20      	ldr	r3, [pc, #128]	; (800611c <Window_Position_Val+0xbc>)
 800609a:	2203      	movs	r2, #3
 800609c:	701a      	strb	r2, [r3, #0]
	positionSum = 0;
 800609e:	4b23      	ldr	r3, [pc, #140]	; (800612c <Window_Position_Val+0xcc>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <Window_Position_Val+0xd0>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
		sensorNormVal = sensorNormVals[positionIdxMin];
 80060aa:	4b1c      	ldr	r3, [pc, #112]	; (800611c <Window_Position_Val+0xbc>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <Window_Position_Val+0xd4>)
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	4b1f      	ldr	r3, [pc, #124]	; (8006138 <Window_Position_Val+0xd8>)
 80060ba:	601a      	str	r2, [r3, #0]
		positionSum += positionTable[positionIdxMin] * sensorNormVal;
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <Window_Position_Val+0xbc>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <Window_Position_Val+0xc0>)
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <Window_Position_Val+0xd8>)
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	fb03 f202 	mul.w	r2, r3, r2
 80060d0:	4b16      	ldr	r3, [pc, #88]	; (800612c <Window_Position_Val+0xcc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4413      	add	r3, r2
 80060d6:	4a15      	ldr	r2, [pc, #84]	; (800612c <Window_Position_Val+0xcc>)
 80060d8:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVal;
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <Window_Position_Val+0xd0>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b16      	ldr	r3, [pc, #88]	; (8006138 <Window_Position_Val+0xd8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4413      	add	r3, r2
 80060e4:	4a12      	ldr	r2, [pc, #72]	; (8006130 <Window_Position_Val+0xd0>)
 80060e6:	6013      	str	r3, [r2, #0]
		positionIdxMin++;
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <Window_Position_Val+0xbc>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <Window_Position_Val+0xbc>)
 80060f2:	701a      	strb	r2, [r3, #0]
	} while (positionIdxMin < positionIdxMax + 1);
 80060f4:	4b08      	ldr	r3, [pc, #32]	; (8006118 <Window_Position_Val+0xb8>)
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <Window_Position_Val+0xbc>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d2d4      	bcs.n	80060aa <Window_Position_Val+0x4a>
	return positionSum / (sensorNormValsSum + 1);
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <Window_Position_Val+0xcc>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <Window_Position_Val+0xd0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800610e:	4618      	mov	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	200000b0 	.word	0x200000b0
 800611c:	200000b1 	.word	0x200000b1
 8006120:	200000b4 	.word	0x200000b4
 8006124:	200014bc 	.word	0x200014bc
 8006128:	200014b4 	.word	0x200014b4
 800612c:	200024e4 	.word	0x200024e4
 8006130:	200000d4 	.word	0x200000d4
 8006134:	20002504 	.word	0x20002504
 8006138:	200024e8 	.word	0x200024e8

0800613c <Update_Limited_Position_Val>:
__STATIC_INLINE void	Update_Limited_Position_Val() {
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
	if (limitedPositionVal < absPositionVal) {
 8006140:	4b14      	ldr	r3, [pc, #80]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <Update_Limited_Position_Val+0x5c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	da0f      	bge.n	800616c <Update_Limited_Position_Val+0x30>
		limitedPositionVal += 20;
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <Update_Limited_Position_Val+0x58>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006154:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal > absPositionVal) {
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <Update_Limited_Position_Val+0x5c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	dd13      	ble.n	800618a <Update_Limited_Position_Val+0x4e>
			limitedPositionVal = absPositionVal;
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <Update_Limited_Position_Val+0x5c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	e00e      	b.n	800618a <Update_Limited_Position_Val+0x4e>
		limitedPositionVal -= 10;
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <Update_Limited_Position_Val+0x58>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3b0a      	subs	r3, #10
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006174:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal < absPositionVal) {
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b07      	ldr	r3, [pc, #28]	; (8006198 <Update_Limited_Position_Val+0x5c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	da03      	bge.n	800618a <Update_Limited_Position_Val+0x4e>
			limitedPositionVal = absPositionVal;
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <Update_Limited_Position_Val+0x5c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a03      	ldr	r2, [pc, #12]	; (8006194 <Update_Limited_Position_Val+0x58>)
 8006188:	6013      	str	r3, [r2, #0]
}
 800618a:	bf00      	nop
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	200014b8 	.word	0x200014b8
 8006198:	200014bc 	.word	0x200014bc

0800619c <Update_Position_Val>:
__STATIC_INLINE void	Update_Position_Val() {
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
	positionVal = Window_Position_Val();//Stabilize_Position_Val( Window_Position_Val() );
 80061a0:	f7ff ff5e 	bl	8006060 <Window_Position_Val>
 80061a4:	4603      	mov	r3, r0
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <Update_Position_Val+0x30>)
 80061a8:	6013      	str	r3, [r2, #0]
	absPositionVal = ABS(positionVal);
 80061aa:	4b08      	ldr	r3, [pc, #32]	; (80061cc <Update_Position_Val+0x30>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da03      	bge.n	80061ba <Update_Position_Val+0x1e>
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <Update_Position_Val+0x30>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	425b      	negs	r3, r3
 80061b8:	e001      	b.n	80061be <Update_Position_Val+0x22>
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <Update_Position_Val+0x30>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <Update_Position_Val+0x34>)
 80061c0:	6013      	str	r3, [r2, #0]
	Update_Limited_Position_Val();
 80061c2:	f7ff ffbb 	bl	800613c <Update_Limited_Position_Val>
}
 80061c6:	bf00      	nop
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200014b4 	.word	0x200014b4
 80061d0:	200014bc 	.word	0x200014bc

080061d4 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80061dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80061e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80061f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006206:	bf00      	nop
 8006208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d1f8      	bne.n	8006208 <Custom_Delay_us+0x34>
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff ffcc 	bl	80061d4 <Custom_Delay_us>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <Motor_L_Speed_Control>:
__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 800624e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006278 <Motor_L_Speed_Control+0x34>
 8006252:	ed97 7a01 	vldr	s14, [r7, #4]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800625e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006266:	ee17 1a90 	vmov	r1, s15
 800626a:	4804      	ldr	r0, [pc, #16]	; (800627c <Motor_L_Speed_Control+0x38>)
 800626c:	f7ff feea 	bl	8006044 <LL_TIM_SetAutoReload>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	43cc3418 	.word	0x43cc3418
 800627c:	40000400 	.word	0x40000400

08006280 <Motor_R_Speed_Control>:
__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 800628a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80062b4 <Motor_R_Speed_Control+0x34>
 800628e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800629e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a2:	ee17 1a90 	vmov	r1, s15
 80062a6:	4804      	ldr	r0, [pc, #16]	; (80062b8 <Motor_R_Speed_Control+0x38>)
 80062a8:	f7ff fecc 	bl	8006044 <LL_TIM_SetAutoReload>
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	43cc3418 	.word	0x43cc3418
 80062b8:	40000800 	.word	0x40000800

080062bc <Custom_GPIO_Set_t>:
static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d002      	beq.n	80062e6 <Custom_GPIO_Set_t+0x2a>
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e4:	e000      	b.n	80062e8 <Custom_GPIO_Set_t+0x2c>
 80062e6:	2200      	movs	r2, #0
 80062e8:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80062ee:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80062f0:	615a      	str	r2, [r3, #20]
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <Sensor_Test_Raw>:





void Sensor_Test_Raw() {
 8006300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006302:	b087      	sub	sp, #28
 8006304:	af06      	add	r7, sp, #24
	Sensor_Start();
 8006306:	f001 f81b 	bl	8007340 <Sensor_Start>
	Custom_OLED_Clear();
 800630a:	f7fe f9d0 	bl	80046ae <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 800630e:	e029      	b.n	8006364 <Sensor_Test_Raw+0x64>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <Sensor_Test_Raw+0x80>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006316:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006318:	4b19      	ldr	r3, [pc, #100]	; (8006380 <Sensor_Test_Raw+0x80>)
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800631e:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <Sensor_Test_Raw+0x80>)
 8006322:	789b      	ldrb	r3, [r3, #2]
 8006324:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006326:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <Sensor_Test_Raw+0x80>)
 800632a:	78db      	ldrb	r3, [r3, #3]
 800632c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800632e:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <Sensor_Test_Raw+0x80>)
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006336:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006338:	4b11      	ldr	r3, [pc, #68]	; (8006380 <Sensor_Test_Raw+0x80>)
 800633a:	795b      	ldrb	r3, [r3, #5]
 800633c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800633e:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <Sensor_Test_Raw+0x80>)
 8006342:	799b      	ldrb	r3, [r3, #6]
 8006344:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006346:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <Sensor_Test_Raw+0x80>)
 800634a:	79db      	ldrb	r3, [r3, #7]
 800634c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	9403      	str	r4, [sp, #12]
 8006352:	9002      	str	r0, [sp, #8]
 8006354:	9101      	str	r1, [sp, #4]
 8006356:	9200      	str	r2, [sp, #0]
 8006358:	4663      	mov	r3, ip
 800635a:	4632      	mov	r2, r6
 800635c:	4629      	mov	r1, r5
 800635e:	4809      	ldr	r0, [pc, #36]	; (8006384 <Sensor_Test_Raw+0x84>)
 8006360:	f7fe fa8a 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006364:	f7fe fdb8 	bl	8004ed8 <Custom_Switch_Read>
 8006368:	4603      	mov	r3, r0
 800636a:	2b03      	cmp	r3, #3
 800636c:	d1d0      	bne.n	8006310 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 800636e:	f7fe f99e 	bl	80046ae <Custom_OLED_Clear>
	Sensor_Stop();
 8006372:	f000 fffd 	bl	8007370 <Sensor_Stop>
}
 8006376:	bf00      	nop
 8006378:	3704      	adds	r7, #4
 800637a:	46bd      	mov	sp, r7
 800637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637e:	bf00      	nop
 8006380:	200024fc 	.word	0x200024fc
 8006384:	0800a7e0 	.word	0x0800a7e0

08006388 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	b087      	sub	sp, #28
 800638c:	af06      	add	r7, sp, #24
	Sensor_Start();
 800638e:	f000 ffd7 	bl	8007340 <Sensor_Start>
	Custom_OLED_Clear();
 8006392:	f7fe f98c 	bl	80046ae <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8006396:	e029      	b.n	80063ec <Sensor_Test_Normalized+0x64>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <Sensor_Test_Normalized+0x80>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800639e:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063a6:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063aa:	789b      	ldrb	r3, [r3, #2]
 80063ac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063ae:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063b6:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80063b8:	4b13      	ldr	r3, [pc, #76]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063ba:	791b      	ldrb	r3, [r3, #4]
 80063bc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063be:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80063c0:	4b11      	ldr	r3, [pc, #68]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063c2:	795b      	ldrb	r3, [r3, #5]
 80063c4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063c6:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063ca:	799b      	ldrb	r3, [r3, #6]
 80063cc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063ce:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <Sensor_Test_Normalized+0x80>)
 80063d2:	79db      	ldrb	r3, [r3, #7]
 80063d4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	9403      	str	r4, [sp, #12]
 80063da:	9002      	str	r0, [sp, #8]
 80063dc:	9101      	str	r1, [sp, #4]
 80063de:	9200      	str	r2, [sp, #0]
 80063e0:	4663      	mov	r3, ip
 80063e2:	4632      	mov	r2, r6
 80063e4:	4629      	mov	r1, r5
 80063e6:	4809      	ldr	r0, [pc, #36]	; (800640c <Sensor_Test_Normalized+0x84>)
 80063e8:	f7fe fa46 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80063ec:	f7fe fd74 	bl	8004ed8 <Custom_Switch_Read>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d1d0      	bne.n	8006398 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 80063f6:	f7fe f95a 	bl	80046ae <Custom_OLED_Clear>
	Sensor_Stop();
 80063fa:	f000 ffb9 	bl	8007370 <Sensor_Stop>
}
 80063fe:	bf00      	nop
 8006400:	3704      	adds	r7, #4
 8006402:	46bd      	mov	sp, r7
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	bf00      	nop
 8006408:	20002504 	.word	0x20002504
 800640c:	0800a7e0 	.word	0x0800a7e0

08006410 <Sensor_Test_State>:





void Sensor_Test_State() {
 8006410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006412:	b089      	sub	sp, #36	; 0x24
 8006414:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 800641a:	f000 ff91 	bl	8007340 <Sensor_Start>
	Custom_OLED_Clear();
 800641e:	f7fe f946 	bl	80046ae <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8006422:	e05f      	b.n	80064e4 <Sensor_Test_State+0xd4>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8006424:	4b37      	ldr	r3, [pc, #220]	; (8006504 <Sensor_Test_State+0xf4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	4837      	ldr	r0, [pc, #220]	; (8006508 <Sensor_Test_State+0xf8>)
 800642c:	f7fe fa24 	bl	8004878 <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006430:	4b36      	ldr	r3, [pc, #216]	; (800650c <Sensor_Test_State+0xfc>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	09db      	lsrs	r3, r3, #7
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0501 	and.w	r5, r3, #1
 800643e:	4b33      	ldr	r3, [pc, #204]	; (800650c <Sensor_Test_State+0xfc>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 0601 	and.w	r6, r3, #1
 800644c:	4b2f      	ldr	r3, [pc, #188]	; (800650c <Sensor_Test_State+0xfc>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0c01 	and.w	ip, r3, #1
 800645a:	4b2c      	ldr	r3, [pc, #176]	; (800650c <Sensor_Test_State+0xfc>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	4a28      	ldr	r2, [pc, #160]	; (800650c <Sensor_Test_State+0xfc>)
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	08d2      	lsrs	r2, r2, #3
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	f002 0201 	and.w	r2, r2, #1
 8006476:	4925      	ldr	r1, [pc, #148]	; (800650c <Sensor_Test_State+0xfc>)
 8006478:	7809      	ldrb	r1, [r1, #0]
 800647a:	b2c9      	uxtb	r1, r1
 800647c:	0889      	lsrs	r1, r1, #2
 800647e:	b2c9      	uxtb	r1, r1
 8006480:	f001 0101 	and.w	r1, r1, #1
 8006484:	4821      	ldr	r0, [pc, #132]	; (800650c <Sensor_Test_State+0xfc>)
 8006486:	7800      	ldrb	r0, [r0, #0]
 8006488:	b2c0      	uxtb	r0, r0
 800648a:	0840      	lsrs	r0, r0, #1
 800648c:	b2c0      	uxtb	r0, r0
 800648e:	f000 0001 	and.w	r0, r0, #1
			(state >> 7) & 1, (state >> 6) & 1, (state >> 5) & 1, (state >> 4) & 1, \
			(state >> 3) & 1, (state >> 2) & 1, (state >> 1) & 1, (state >> 0) & 1);
 8006492:	4c1e      	ldr	r4, [pc, #120]	; (800650c <Sensor_Test_State+0xfc>)
 8006494:	7824      	ldrb	r4, [r4, #0]
 8006496:	b2e4      	uxtb	r4, r4
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006498:	f004 0401 	and.w	r4, r4, #1
 800649c:	9404      	str	r4, [sp, #16]
 800649e:	9003      	str	r0, [sp, #12]
 80064a0:	9102      	str	r1, [sp, #8]
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4663      	mov	r3, ip
 80064a8:	4632      	mov	r2, r6
 80064aa:	4629      	mov	r1, r5
 80064ac:	4818      	ldr	r0, [pc, #96]	; (8006510 <Sensor_Test_State+0x100>)
 80064ae:	f7fe f9e3 	bl	8004878 <Custom_OLED_Printf>


		if (sw == CUSTOM_SW_1) {
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d109      	bne.n	80064cc <Sensor_Test_State+0xbc>
			if (threshold > THRESHOLD_MIN) {
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <Sensor_Test_State+0xf4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b19      	cmp	r3, #25
 80064be:	d911      	bls.n	80064e4 <Sensor_Test_State+0xd4>
				threshold -= THRESHOLD_CHANGE_VAL;
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <Sensor_Test_State+0xf4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3b05      	subs	r3, #5
 80064c6:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <Sensor_Test_State+0xf4>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e00b      	b.n	80064e4 <Sensor_Test_State+0xd4>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d108      	bne.n	80064e4 <Sensor_Test_State+0xd4>
			if (threshold < THRESHOLD_MAX) {
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <Sensor_Test_State+0xf4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b7c      	cmp	r3, #124	; 0x7c
 80064d8:	d804      	bhi.n	80064e4 <Sensor_Test_State+0xd4>
				threshold += THRESHOLD_CHANGE_VAL;
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <Sensor_Test_State+0xf4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3305      	adds	r3, #5
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <Sensor_Test_State+0xf4>)
 80064e2:	6013      	str	r3, [r2, #0]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80064e4:	f7fe fcf8 	bl	8004ed8 <Custom_Switch_Read>
 80064e8:	4603      	mov	r3, r0
 80064ea:	71fb      	strb	r3, [r7, #7]
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d198      	bne.n	8006424 <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 80064f2:	f7fe f8dc 	bl	80046ae <Custom_OLED_Clear>
	Sensor_Stop();
 80064f6:	f000 ff3b 	bl	8007370 <Sensor_Stop>
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006502:	bf00      	nop
 8006504:	20000130 	.word	0x20000130
 8006508:	0800a80c 	.word	0x0800a80c
 800650c:	20002514 	.word	0x20002514
 8006510:	0800a820 	.word	0x0800a820

08006514 <Motor_Test_Phase>:





void Motor_Test_Phase() {
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	717b      	strb	r3, [r7, #5]
	uint8_t	phaseL = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	71fb      	strb	r3, [r7, #7]
	uint8_t	phaseR = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	71bb      	strb	r3, [r7, #6]

	/*
	 * 모터의 각 상을 잠깐씩 잡아본다.
	 * 모터에 무리를 주지 않기 위해 100ms 동안만 상을 잡은 후 바로 놓는다.
	 */
	Custom_OLED_Clear();
 8006526:	f7fe f8c2 	bl	80046ae <Custom_OLED_Clear>
	Custom_OLED_Printf("/0phaseL: %1x", phaseL);
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	4619      	mov	r1, r3
 800652e:	484d      	ldr	r0, [pc, #308]	; (8006664 <Motor_Test_Phase+0x150>)
 8006530:	f7fe f9a2 	bl	8004878 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1phaseR: %1x", phaseR);
 8006534:	79bb      	ldrb	r3, [r7, #6]
 8006536:	4619      	mov	r1, r3
 8006538:	484b      	ldr	r0, [pc, #300]	; (8006668 <Motor_Test_Phase+0x154>)
 800653a:	f7fe f99d 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800653e:	e082      	b.n	8006646 <Motor_Test_Phase+0x132>

		if (sw == CUSTOM_SW_1) {
 8006540:	797b      	ldrb	r3, [r7, #5]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d142      	bne.n	80065cc <Motor_Test_Phase+0xb8>
			Custom_GPIO_Set_t(motorL + 0, (phases[7 - phaseL] >> 0) & 0x01);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f1c3 0307 	rsb	r3, r3, #7
 800654c:	4a47      	ldr	r2, [pc, #284]	; (800666c <Motor_Test_Phase+0x158>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	4619      	mov	r1, r3
 8006556:	4846      	ldr	r0, [pc, #280]	; (8006670 <Motor_Test_Phase+0x15c>)
 8006558:	f7ff feb0 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 1, (phases[7 - phaseL] >> 1) & 0x01);
 800655c:	4845      	ldr	r0, [pc, #276]	; (8006674 <Motor_Test_Phase+0x160>)
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	f1c3 0307 	rsb	r3, r3, #7
 8006564:	4a41      	ldr	r2, [pc, #260]	; (800666c <Motor_Test_Phase+0x158>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	4619      	mov	r1, r3
 8006572:	f7ff fea3 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 2, (phases[7 - phaseL] >> 2) & 0x01);
 8006576:	4840      	ldr	r0, [pc, #256]	; (8006678 <Motor_Test_Phase+0x164>)
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	f1c3 0307 	rsb	r3, r3, #7
 800657e:	4a3b      	ldr	r2, [pc, #236]	; (800666c <Motor_Test_Phase+0x158>)
 8006580:	5cd3      	ldrb	r3, [r2, r3]
 8006582:	089b      	lsrs	r3, r3, #2
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	4619      	mov	r1, r3
 800658c:	f7ff fe96 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 3, (phases[7 - phaseL] >> 3) & 0x01);
 8006590:	483a      	ldr	r0, [pc, #232]	; (800667c <Motor_Test_Phase+0x168>)
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	f1c3 0307 	rsb	r3, r3, #7
 8006598:	4a34      	ldr	r2, [pc, #208]	; (800666c <Motor_Test_Phase+0x158>)
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	08db      	lsrs	r3, r3, #3
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	4619      	mov	r1, r3
 80065a6:	f7ff fe89 	bl	80062bc <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 80065aa:	2064      	movs	r0, #100	; 0x64
 80065ac:	f7ff fe3a 	bl	8006224 <Custom_Delay_ms>
			Motor_Power_Off();
 80065b0:	f000 f9a4 	bl	80068fc <Motor_Power_Off>

			Custom_OLED_Printf("/0phaseL: %1x", phaseL);
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	4619      	mov	r1, r3
 80065b8:	482a      	ldr	r0, [pc, #168]	; (8006664 <Motor_Test_Phase+0x150>)
 80065ba:	f7fe f95d 	bl	8004878 <Custom_OLED_Printf>
			phaseL = (phaseL + 1) & 0x07;
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	71fb      	strb	r3, [r7, #7]
 80065ca:	e03c      	b.n	8006646 <Motor_Test_Phase+0x132>
		}

		else if (sw == CUSTOM_SW_2) {
 80065cc:	797b      	ldrb	r3, [r7, #5]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d139      	bne.n	8006646 <Motor_Test_Phase+0x132>
			Custom_GPIO_Set_t(motorR + 0, (phases[phaseR] >> 0) & 0x01);
 80065d2:	79bb      	ldrb	r3, [r7, #6]
 80065d4:	4a25      	ldr	r2, [pc, #148]	; (800666c <Motor_Test_Phase+0x158>)
 80065d6:	5cd3      	ldrb	r3, [r2, r3]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	4619      	mov	r1, r3
 80065de:	4828      	ldr	r0, [pc, #160]	; (8006680 <Motor_Test_Phase+0x16c>)
 80065e0:	f7ff fe6c 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 1, (phases[phaseR] >> 1) & 0x01);
 80065e4:	4827      	ldr	r0, [pc, #156]	; (8006684 <Motor_Test_Phase+0x170>)
 80065e6:	79bb      	ldrb	r3, [r7, #6]
 80065e8:	4a20      	ldr	r2, [pc, #128]	; (800666c <Motor_Test_Phase+0x158>)
 80065ea:	5cd3      	ldrb	r3, [r2, r3]
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	4619      	mov	r1, r3
 80065f6:	f7ff fe61 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 2, (phases[phaseR] >> 2) & 0x01);
 80065fa:	4823      	ldr	r0, [pc, #140]	; (8006688 <Motor_Test_Phase+0x174>)
 80065fc:	79bb      	ldrb	r3, [r7, #6]
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <Motor_Test_Phase+0x158>)
 8006600:	5cd3      	ldrb	r3, [r2, r3]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	4619      	mov	r1, r3
 800660c:	f7ff fe56 	bl	80062bc <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 3, (phases[phaseR] >> 3) & 0x01);
 8006610:	481e      	ldr	r0, [pc, #120]	; (800668c <Motor_Test_Phase+0x178>)
 8006612:	79bb      	ldrb	r3, [r7, #6]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <Motor_Test_Phase+0x158>)
 8006616:	5cd3      	ldrb	r3, [r2, r3]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	4619      	mov	r1, r3
 8006622:	f7ff fe4b 	bl	80062bc <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 8006626:	2064      	movs	r0, #100	; 0x64
 8006628:	f7ff fdfc 	bl	8006224 <Custom_Delay_ms>
			Motor_Power_Off();
 800662c:	f000 f966 	bl	80068fc <Motor_Power_Off>

			Custom_OLED_Printf("/1phaseR: %1x", phaseR);
 8006630:	79bb      	ldrb	r3, [r7, #6]
 8006632:	4619      	mov	r1, r3
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <Motor_Test_Phase+0x154>)
 8006636:	f7fe f91f 	bl	8004878 <Custom_OLED_Printf>
			phaseR = (phaseR + 1) & 0x07;
 800663a:	79bb      	ldrb	r3, [r7, #6]
 800663c:	3301      	adds	r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	71bb      	strb	r3, [r7, #6]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8006646:	f7fe fc47 	bl	8004ed8 <Custom_Switch_Read>
 800664a:	4603      	mov	r3, r0
 800664c:	717b      	strb	r3, [r7, #5]
 800664e:	797b      	ldrb	r3, [r7, #5]
 8006650:	2b03      	cmp	r3, #3
 8006652:	f47f af75 	bne.w	8006540 <Motor_Test_Phase+0x2c>
		}
	}

	Custom_OLED_Clear();
 8006656:	f7fe f82a 	bl	80046ae <Custom_OLED_Clear>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	0800a84c 	.word	0x0800a84c
 8006668:	0800a85c 	.word	0x0800a85c
 800666c:	20000068 	.word	0x20000068
 8006670:	20000070 	.word	0x20000070
 8006674:	20000078 	.word	0x20000078
 8006678:	20000080 	.word	0x20000080
 800667c:	20000088 	.word	0x20000088
 8006680:	20000090 	.word	0x20000090
 8006684:	20000098 	.word	0x20000098
 8006688:	200000a0 	.word	0x200000a0
 800668c:	200000a8 	.word	0x200000a8

08006690 <Motor_Test_Velocity>:





void Motor_Test_Velocity() {
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
	uint8_t		sw = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	72fb      	strb	r3, [r7, #11]
	float		speed = MIN_SPEED;
 800669a:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <Motor_Test_Velocity+0xc8>)
 800669c:	60fb      	str	r3, [r7, #12]
	float		maxSpeed = 2.5;
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <Motor_Test_Velocity+0xcc>)
 80066a0:	607b      	str	r3, [r7, #4]
	float		minSpeed = 1.5;
 80066a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80066a6:	603b      	str	r3, [r7, #0]
	/*
	 * 모터 속도를 부드럽게 올렸다가 내리기를 반복한다.
	 */
	accele = ACCELE_INIT;
 80066a8:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <Motor_Test_Velocity+0xd0>)
 80066aa:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <Motor_Test_Velocity+0xd4>)
 80066ac:	601a      	str	r2, [r3, #0]

	Motor_Start();
 80066ae:	f000 f95f 	bl	8006970 <Motor_Start>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80066b2:	e043      	b.n	800673c <Motor_Test_Velocity+0xac>
		Motor_L_Speed_Control(speed);
 80066b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80066b8:	f7ff fdc4 	bl	8006244 <Motor_L_Speed_Control>
		Motor_R_Speed_Control(speed);
 80066bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80066c0:	f7ff fdde 	bl	8006280 <Motor_R_Speed_Control>
		if ( (speed + accele / 2000 > maxSpeed) || (speed + accele / 2000 < minSpeed) ) {
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <Motor_Test_Velocity+0xd0>)
 80066c6:	edd3 7a00 	vldr	s15, [r3]
 80066ca:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006768 <Motor_Test_Velocity+0xd8>
 80066ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80066d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066da:	ed97 7a01 	vldr	s14, [r7, #4]
 80066de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e6:	d411      	bmi.n	800670c <Motor_Test_Velocity+0x7c>
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <Motor_Test_Velocity+0xd0>)
 80066ea:	edd3 7a00 	vldr	s15, [r3]
 80066ee:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006768 <Motor_Test_Velocity+0xd8>
 80066f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066fe:	ed97 7a00 	vldr	s14, [r7]
 8006702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670a:	dd07      	ble.n	800671c <Motor_Test_Velocity+0x8c>
			accele *= -1;
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <Motor_Test_Velocity+0xd0>)
 800670e:	edd3 7a00 	vldr	s15, [r3]
 8006712:	eef1 7a67 	vneg.f32	s15, s15
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <Motor_Test_Velocity+0xd0>)
 8006718:	edc3 7a00 	vstr	s15, [r3]
		}
		Custom_Delay_ms(1);
 800671c:	2001      	movs	r0, #1
 800671e:	f7ff fd81 	bl	8006224 <Custom_Delay_ms>
		speed += accele / 2000;
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <Motor_Test_Velocity+0xd0>)
 8006724:	ed93 7a00 	vldr	s14, [r3]
 8006728:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8006768 <Motor_Test_Velocity+0xd8>
 800672c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006730:	ed97 7a03 	vldr	s14, [r7, #12]
 8006734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006738:	edc7 7a03 	vstr	s15, [r7, #12]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800673c:	f7fe fbcc 	bl	8004ed8 <Custom_Switch_Read>
 8006740:	4603      	mov	r3, r0
 8006742:	72fb      	strb	r3, [r7, #11]
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d1b4      	bne.n	80066b4 <Motor_Test_Velocity+0x24>
	}
	Motor_Stop();
 800674a:	f000 f925 	bl	8006998 <Motor_Stop>
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	3c23d70a 	.word	0x3c23d70a
 800675c:	40200000 	.word	0x40200000
 8006760:	20000040 	.word	0x20000040
 8006764:	40400000 	.word	0x40400000
 8006768:	44fa0000 	.word	0x44fa0000

0800676c <Drive_Test_Position>:





void Drive_Test_Position() {
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8006776:	f7fd ff9a 	bl	80046ae <Custom_OLED_Clear>
	Sensor_Start();
 800677a:	f000 fde1 	bl	8007340 <Sensor_Start>

	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800677e:	e03d      	b.n	80067fc <Drive_Test_Position+0x90>
		Update_Position_Val();
 8006780:	f7ff fd0c 	bl	800619c <Update_Position_Val>

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <Drive_Test_Position+0xb0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	4825      	ldr	r0, [pc, #148]	; (8006820 <Drive_Test_Position+0xb4>)
 800678c:	f7fe f874 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1limited: %7d", limitedPositionVal);
 8006790:	4b24      	ldr	r3, [pc, #144]	; (8006824 <Drive_Test_Position+0xb8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4619      	mov	r1, r3
 8006796:	4824      	ldr	r0, [pc, #144]	; (8006828 <Drive_Test_Position+0xbc>)
 8006798:	f7fe f86e 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL:  %f", (1 + positionVal * positionCoef));
 800679c:	4b1f      	ldr	r3, [pc, #124]	; (800681c <Drive_Test_Position+0xb0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <Drive_Test_Position+0xc0>)
 80067aa:	edd3 7a00 	vldr	s15, [r3]
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067ba:	ee17 0a90 	vmov	r0, s15
 80067be:	f7f9 fed5 	bl	800056c <__aeabi_f2d>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	481a      	ldr	r0, [pc, #104]	; (8006830 <Drive_Test_Position+0xc4>)
 80067c8:	f7fe f856 	bl	8004878 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR:  %f", (1 - positionVal * positionCoef));
 80067cc:	4b13      	ldr	r3, [pc, #76]	; (800681c <Drive_Test_Position+0xb0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <Drive_Test_Position+0xc0>)
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ea:	ee17 0a90 	vmov	r0, s15
 80067ee:	f7f9 febd 	bl	800056c <__aeabi_f2d>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	480f      	ldr	r0, [pc, #60]	; (8006834 <Drive_Test_Position+0xc8>)
 80067f8:	f7fe f83e 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80067fc:	f7fe fb6c 	bl	8004ed8 <Custom_Switch_Read>
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d1ba      	bne.n	8006780 <Drive_Test_Position+0x14>
	}

	Sensor_Stop();
 800680a:	f000 fdb1 	bl	8007370 <Sensor_Stop>
	Custom_OLED_Clear();
 800680e:	f7fd ff4e 	bl	80046ae <Custom_OLED_Clear>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200014b4 	.word	0x200014b4
 8006820:	0800a86c 	.word	0x0800a86c
 8006824:	200014b8 	.word	0x200014b8
 8006828:	0800a87c 	.word	0x0800a87c
 800682c:	2000003c 	.word	0x2000003c
 8006830:	0800a88c 	.word	0x0800a88c
 8006834:	0800a89c 	.word	0x0800a89c

08006838 <LL_TIM_EnableCounter>:
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f043 0201 	orr.w	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	601a      	str	r2, [r3, #0]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <LL_TIM_DisableCounter>:
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f023 0201 	bic.w	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <LL_TIM_EnableIT_UPDATE>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f043 0201 	orr.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60da      	str	r2, [r3, #12]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_TIM_DisableIT_UPDATE>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f023 0201 	bic.w	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <Custom_GPIO_Set_t>:
static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	2a00      	cmp	r2, #0
 80068da:	d002      	beq.n	80068e2 <Custom_GPIO_Set_t+0x2a>
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e0:	e000      	b.n	80068e4 <Custom_GPIO_Set_t+0x2c>
 80068e2:	2200      	movs	r2, #0
 80068e4:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 80068ea:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80068ec:	615a      	str	r2, [r3, #20]
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <Motor_Power_Off>:





void Motor_Power_Off() {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
	Custom_GPIO_Set_t(motorL + 0, 0);
 8006900:	2100      	movs	r1, #0
 8006902:	4813      	ldr	r0, [pc, #76]	; (8006950 <Motor_Power_Off+0x54>)
 8006904:	f7ff ffd8 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0);
 8006908:	4b12      	ldr	r3, [pc, #72]	; (8006954 <Motor_Power_Off+0x58>)
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ffd3 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0);
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <Motor_Power_Off+0x5c>)
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff ffce 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0);
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <Motor_Power_Off+0x60>)
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff ffc9 	bl	80068b8 <Custom_GPIO_Set_t>

	Custom_GPIO_Set_t(motorR + 0, 0);
 8006926:	2100      	movs	r1, #0
 8006928:	480d      	ldr	r0, [pc, #52]	; (8006960 <Motor_Power_Off+0x64>)
 800692a:	f7ff ffc5 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0);
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <Motor_Power_Off+0x68>)
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ffc0 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0);
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <Motor_Power_Off+0x6c>)
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff ffbb 	bl	80068b8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0);
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <Motor_Power_Off+0x70>)
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff ffb6 	bl	80068b8 <Custom_GPIO_Set_t>
}
 800694c:	bf00      	nop
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200000d8 	.word	0x200000d8
 8006954:	200000e0 	.word	0x200000e0
 8006958:	200000e8 	.word	0x200000e8
 800695c:	200000f0 	.word	0x200000f0
 8006960:	200000f8 	.word	0x200000f8
 8006964:	20000100 	.word	0x20000100
 8006968:	20000108 	.word	0x20000108
 800696c:	20000110 	.word	0x20000110

08006970 <Motor_Start>:





void Motor_Start() {
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 8006974:	4806      	ldr	r0, [pc, #24]	; (8006990 <Motor_Start+0x20>)
 8006976:	f7ff ff5f 	bl	8006838 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <Motor_Start+0x20>)
 800697c:	f7ff ff7c 	bl	8006878 <LL_TIM_EnableIT_UPDATE>

	LL_TIM_EnableCounter(TIM4);
 8006980:	4804      	ldr	r0, [pc, #16]	; (8006994 <Motor_Start+0x24>)
 8006982:	f7ff ff59 	bl	8006838 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM4);
 8006986:	4803      	ldr	r0, [pc, #12]	; (8006994 <Motor_Start+0x24>)
 8006988:	f7ff ff76 	bl	8006878 <LL_TIM_EnableIT_UPDATE>
}
 800698c:	bf00      	nop
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800

08006998 <Motor_Stop>:





void Motor_Stop() {
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	Motor_Power_Off();
 800699c:	f7ff ffae 	bl	80068fc <Motor_Power_Off>

	LL_TIM_DisableIT_UPDATE(TIM3);
 80069a0:	4807      	ldr	r0, [pc, #28]	; (80069c0 <Motor_Stop+0x28>)
 80069a2:	f7ff ff79 	bl	8006898 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM3);
 80069a6:	4806      	ldr	r0, [pc, #24]	; (80069c0 <Motor_Stop+0x28>)
 80069a8:	f7ff ff56 	bl	8006858 <LL_TIM_DisableCounter>

	LL_TIM_DisableIT_UPDATE(TIM4);
 80069ac:	4805      	ldr	r0, [pc, #20]	; (80069c4 <Motor_Stop+0x2c>)
 80069ae:	f7ff ff73 	bl	8006898 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM4);
 80069b2:	4804      	ldr	r0, [pc, #16]	; (80069c4 <Motor_Stop+0x2c>)
 80069b4:	f7ff ff50 	bl	8006858 <LL_TIM_DisableCounter>

	Motor_Power_Off();
 80069b8:	f7ff ffa0 	bl	80068fc <Motor_Power_Off>
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40000800 	.word	0x40000800

080069c8 <Speed_Control_Start>:




void Speed_Control_Start(){
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 80069cc:	4803      	ldr	r0, [pc, #12]	; (80069dc <Speed_Control_Start+0x14>)
 80069ce:	f7ff ff33 	bl	8006838 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 80069d2:	4802      	ldr	r0, [pc, #8]	; (80069dc <Speed_Control_Start+0x14>)
 80069d4:	f7ff ff50 	bl	8006878 <LL_TIM_EnableIT_UPDATE>
}
 80069d8:	bf00      	nop
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40014000 	.word	0x40014000

080069e0 <Speed_Control_Stop>:




void Speed_Control_Stop(){
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 80069e4:	4803      	ldr	r0, [pc, #12]	; (80069f4 <Speed_Control_Stop+0x14>)
 80069e6:	f7ff ff57 	bl	8006898 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 80069ea:	4802      	ldr	r0, [pc, #8]	; (80069f4 <Speed_Control_Stop+0x14>)
 80069ec:	f7ff ff34 	bl	8006858 <LL_TIM_DisableCounter>
}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40014000 	.word	0x40014000

080069f8 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006a2a:	bf00      	nop
 8006a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d1f8      	bne.n	8006a2c <Custom_Delay_us+0x34>
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ffcc 	bl	80069f8 <Custom_Delay_us>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <Drive_Fit_In>:
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a72:	edc7 0a00 	vstr	s1, [r7]
	targetSpeed = pinSpeed;
 8006a76:	4a2b      	ldr	r2, [pc, #172]	; (8006b24 <Drive_Fit_In+0xbc>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - currentSpeed) * (pinSpeed + currentSpeed) / (2 * s) );
 8006a7c:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006a7e:	edd3 7a00 	vldr	s15, [r3]
 8006a82:	ed97 7a00 	vldr	s14, [r7]
 8006a86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006a8c:	edd3 6a00 	vldr	s13, [r3]
 8006a90:	edd7 7a00 	vldr	s15, [r7]
 8006a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aa0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab0:	d518      	bpl.n	8006ae4 <Drive_Fit_In+0x7c>
 8006ab2:	4b1d      	ldr	r3, [pc, #116]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006ab4:	edd3 7a00 	vldr	s15, [r3]
 8006ab8:	ed97 7a00 	vldr	s14, [r7]
 8006abc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ac0:	4b19      	ldr	r3, [pc, #100]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006ac2:	edd3 6a00 	vldr	s13, [r3]
 8006ac6:	edd7 7a00 	vldr	s15, [r7]
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ad6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ade:	eef1 7a67 	vneg.f32	s15, s15
 8006ae2:	e015      	b.n	8006b10 <Drive_Fit_In+0xa8>
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006ae6:	edd3 7a00 	vldr	s15, [r3]
 8006aea:	ed97 7a00 	vldr	s14, [r7]
 8006aee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <Drive_Fit_In+0xc0>)
 8006af4:	edd3 6a00 	vldr	s13, [r3]
 8006af8:	edd7 7a00 	vldr	s15, [r7]
 8006afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b08:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <Drive_Fit_In+0xc4>)
 8006b12:	edc3 7a00 	vstr	s15, [r3]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000048 	.word	0x20000048
 8006b28:	2000004c 	.word	0x2000004c
 8006b2c:	20000044 	.word	0x20000044

08006b30 <Is_Drive_End>:
__STATIC_INLINE uint8_t	Is_Drive_End() {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	exitEcho = EXIT_ECHO_IDLE;
 8006b34:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <Is_Drive_End+0x6c>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 8006b3a:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <Is_Drive_End+0x70>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d804      	bhi.n	8006b4e <Is_Drive_End+0x1e>
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <Is_Drive_End+0x74>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b06      	cmp	r3, #6
 8006b4c:	d122      	bne.n	8006b94 <Is_Drive_End+0x64>
		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <Is_Drive_End+0x78>)
 8006b50:	edd3 7a00 	vldr	s15, [r3]
 8006b54:	eddf 0a15 	vldr	s1, [pc, #84]	; 8006bac <Is_Drive_End+0x7c>
 8006b58:	eeb0 0a67 	vmov.f32	s0, s15
 8006b5c:	f7ff ff84 	bl	8006a68 <Drive_Fit_In>
		while (currentSpeed > DRIVE_END_DELAY_SPEED) {
 8006b60:	bf00      	nop
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <Is_Drive_End+0x80>)
 8006b64:	edd3 7a00 	vldr	s15, [r3]
 8006b68:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006bb4 <Is_Drive_End+0x84>
 8006b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b74:	dcf5      	bgt.n	8006b62 <Is_Drive_End+0x32>
		Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 8006b76:	2096      	movs	r0, #150	; 0x96
 8006b78:	f7ff ff66 	bl	8006a48 <Custom_Delay_ms>
		if (endMarkCnt >= 2) {
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <Is_Drive_End+0x70>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d903      	bls.n	8006b8e <Is_Drive_End+0x5e>
			exitEcho = EXIT_ECHO_END_MARK;
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <Is_Drive_End+0x6c>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e002      	b.n	8006b94 <Is_Drive_End+0x64>
			exitEcho = EXIT_ECHO_LINE_OUT;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <Is_Drive_End+0x6c>)
 8006b90:	2202      	movs	r2, #2
 8006b92:	701a      	strb	r2, [r3, #0]
	return exitEcho;
 8006b94:	4b01      	ldr	r3, [pc, #4]	; (8006b9c <Is_Drive_End+0x6c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	200024f8 	.word	0x200024f8
 8006ba0:	200014c0 	.word	0x200014c0
 8006ba4:	20000058 	.word	0x20000058
 8006ba8:	20000064 	.word	0x20000064
 8006bac:	3c23d70a 	.word	0x3c23d70a
 8006bb0:	2000004c 	.word	0x2000004c
 8006bb4:	3e99999a 	.word	0x3e99999a

08006bb8 <Get_Line_Sensor_Cnt>:
__STATIC_INLINE uint8_t	Get_Line_Sensor_Cnt() {
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8006bbc:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	091b      	lsrs	r3, r3, #4
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	b2db      	uxtb	r3, r3
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8006c04:	4413      	add	r3, r2
 8006c06:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	089b      	lsrs	r3, r3, #2
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <Get_Line_Sensor_Cnt+0x84>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	b2db      	uxtb	r3, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20002514 	.word	0x20002514

08006c40 <Get_Marker_Sensor_Cnt>:
__STATIC_INLINE uint8_t	Get_Marker_Sensor_Cnt() {
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
	return ((state >> 7) & 0x01) + ((state >> 0) & 0x01);
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <Get_Marker_Sensor_Cnt+0x30>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <Get_Marker_Sensor_Cnt+0x30>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	b2db      	uxtb	r3, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20002514 	.word	0x20002514

08006c74 <Decision>:
__STATIC_INLINE void	Decision(uint8_t sensorStateSum) {
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
	if (sensorStateSum == 0xff) {
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	2bff      	cmp	r3, #255	; 0xff
 8006c82:	d103      	bne.n	8006c8c <Decision+0x18>
		markState = MARK_CROSS;
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <Decision+0x7c>)
 8006c86:	2205      	movs	r2, #5
 8006c88:	701a      	strb	r2, [r3, #0]
}
 8006c8a:	e02a      	b.n	8006ce2 <Decision+0x6e>
	else if ( (sensorStateSum & 0x81) == 0x81 ) {
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8006c92:	2b81      	cmp	r3, #129	; 0x81
 8006c94:	d103      	bne.n	8006c9e <Decision+0x2a>
		markState = MARK_END;
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <Decision+0x7c>)
 8006c98:	2204      	movs	r2, #4
 8006c9a:	701a      	strb	r2, [r3, #0]
}
 8006c9c:	e021      	b.n	8006ce2 <Decision+0x6e>
	else if ( (sensorStateSum & 0x80) == 0x80 ) {
 8006c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da0c      	bge.n	8006cc0 <Decision+0x4c>
		if (markState == MARK_CURVE_L) {
 8006ca6:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <Decision+0x7c>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d103      	bne.n	8006cb8 <Decision+0x44>
			markState = MARK_STRAIGHT;
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <Decision+0x7c>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
}
 8006cb6:	e014      	b.n	8006ce2 <Decision+0x6e>
			markState = MARK_CURVE_L;
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <Decision+0x7c>)
 8006cba:	2203      	movs	r2, #3
 8006cbc:	701a      	strb	r2, [r3, #0]
}
 8006cbe:	e010      	b.n	8006ce2 <Decision+0x6e>
	else if ( (sensorStateSum & 0x01) == 0x01 ) {
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <Decision+0x6e>
		if (markState == MARK_CURVE_R) {
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <Decision+0x7c>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d103      	bne.n	8006cdc <Decision+0x68>
			markState = MARK_STRAIGHT;
 8006cd4:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <Decision+0x7c>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
}
 8006cda:	e002      	b.n	8006ce2 <Decision+0x6e>
			markState = MARK_CURVE_R;
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <Decision+0x7c>)
 8006cde:	2202      	movs	r2, #2
 8006ce0:	701a      	strb	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000058 	.word	0x20000058

08006cf4 <Drive_State_Machine>:
__STATIC_INLINE void	Drive_State_Machine() {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
	switch (driveState) {
 8006cf8:	4b41      	ldr	r3, [pc, #260]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d87c      	bhi.n	8006dfc <Drive_State_Machine+0x108>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <Drive_State_Machine+0x14>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d1d 	.word	0x08006d1d
 8006d0c:	08006d67 	.word	0x08006d67
 8006d10:	08006d93 	.word	0x08006d93
 8006d14:	08006db7 	.word	0x08006db7
 8006d18:	08006dc9 	.word	0x08006dc9
			if (Get_Line_Sensor_Cnt() >= 4) {
 8006d1c:	f7ff ff4c 	bl	8006bb8 <Get_Line_Sensor_Cnt>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d906      	bls.n	8006d34 <Drive_State_Machine+0x40>
				sensorStateSum = 0x00;
 8006d26:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_CROSS;
 8006d2c:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
			break;
 8006d32:	e05c      	b.n	8006dee <Drive_State_Machine+0xfa>
			else if (Get_Marker_Sensor_Cnt() != 0) {
 8006d34:	f7ff ff84 	bl	8006c40 <Get_Marker_Sensor_Cnt>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <Drive_State_Machine+0x58>
				sensorStateSum = 0x00;
 8006d3e:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
				driveState = DRIVE_STATE_MARKER;
 8006d44:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006d46:	2202      	movs	r2, #2
 8006d48:	701a      	strb	r2, [r3, #0]
			break;
 8006d4a:	e050      	b.n	8006dee <Drive_State_Machine+0xfa>
			else if (state == 0x00) {
 8006d4c:	4b2e      	ldr	r3, [pc, #184]	; (8006e08 <Drive_State_Machine+0x114>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d14b      	bne.n	8006dee <Drive_State_Machine+0xfa>
				lineOutStartTime = curTime;
 8006d56:	4b2d      	ldr	r3, [pc, #180]	; (8006e0c <Drive_State_Machine+0x118>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2d      	ldr	r2, [pc, #180]	; (8006e10 <Drive_State_Machine+0x11c>)
 8006d5c:	6013      	str	r3, [r2, #0]
				driveState = DRIVE_DECISION_LINE_OUT;
 8006d5e:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006d60:	2204      	movs	r2, #4
 8006d62:	701a      	strb	r2, [r3, #0]
			break;
 8006d64:	e043      	b.n	8006dee <Drive_State_Machine+0xfa>
			sensorStateSum |= state;
 8006d66:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <Drive_State_Machine+0x114>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	4b25      	ldr	r3, [pc, #148]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d76:	701a      	strb	r2, [r3, #0]
			if (sensorStateSum == 0xff && Get_Marker_Sensor_Cnt() == 0) {
 8006d78:	4b22      	ldr	r3, [pc, #136]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2bff      	cmp	r3, #255	; 0xff
 8006d7e:	d138      	bne.n	8006df2 <Drive_State_Machine+0xfe>
 8006d80:	f7ff ff5e 	bl	8006c40 <Get_Marker_Sensor_Cnt>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d133      	bne.n	8006df2 <Drive_State_Machine+0xfe>
				driveState = DRIVE_STATE_DECISION;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	701a      	strb	r2, [r3, #0]
			break;
 8006d90:	e02f      	b.n	8006df2 <Drive_State_Machine+0xfe>
			sensorStateSum |= state;
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <Drive_State_Machine+0x114>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <Drive_State_Machine+0x110>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <Drive_State_Machine+0x110>)
 8006da2:	701a      	strb	r2, [r3, #0]
			if (Get_Marker_Sensor_Cnt() == 0) {
 8006da4:	f7ff ff4c 	bl	8006c40 <Get_Marker_Sensor_Cnt>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d123      	bne.n	8006df6 <Drive_State_Machine+0x102>
				driveState = DRIVE_STATE_DECISION;
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006db0:	2203      	movs	r2, #3
 8006db2:	701a      	strb	r2, [r3, #0]
			break;
 8006db4:	e01f      	b.n	8006df6 <Drive_State_Machine+0x102>
			Decision(sensorStateSum);
 8006db6:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <Drive_State_Machine+0x110>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff5a 	bl	8006c74 <Decision>
			driveState = DRIVE_STATE_IDLE;
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
			break;
 8006dc6:	e019      	b.n	8006dfc <Drive_State_Machine+0x108>
			if (state != 0x00) {
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <Drive_State_Machine+0x114>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <Drive_State_Machine+0xe6>
				driveState = DRIVE_STATE_IDLE;
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <Drive_State_Machine+0x10c>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
			break ;
 8006dd8:	e00f      	b.n	8006dfa <Drive_State_Machine+0x106>
			else if (curTime > lineOutStartTime + 2 * LINE_OUT_DELAY_MS) {
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <Drive_State_Machine+0x118>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <Drive_State_Machine+0x11c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d909      	bls.n	8006dfa <Drive_State_Machine+0x106>
				markState = MARK_LINE_OUT;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <Drive_State_Machine+0x120>)
 8006de8:	2206      	movs	r2, #6
 8006dea:	701a      	strb	r2, [r3, #0]
			break ;
 8006dec:	e005      	b.n	8006dfa <Drive_State_Machine+0x106>
			break;
 8006dee:	bf00      	nop
 8006df0:	e004      	b.n	8006dfc <Drive_State_Machine+0x108>
			break;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <Drive_State_Machine+0x108>
			break;
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <Drive_State_Machine+0x108>
			break ;
 8006dfa:	bf00      	nop
}
 8006dfc:	bf00      	nop
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200024d4 	.word	0x200024d4
 8006e04:	200024f0 	.word	0x200024f0
 8006e08:	20002514 	.word	0x20002514
 8006e0c:	200014d0 	.word	0x200014d0
 8006e10:	200024f4 	.word	0x200024f4
 8006e14:	20000058 	.word	0x20000058

08006e18 <Second_Drive>:




//1차 주행
void Second_Drive() {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0

	uint8_t	exitEcho = EXIT_ECHO_IDLE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8006e22:	f7fd fc44 	bl	80046ae <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting(SECOND_DRIVE);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7fe f9dc 	bl	80051e4 <Pre_Drive_Setting>

	Sensor_Start();
 8006e2c:	f000 fa88 	bl	8007340 <Sensor_Start>
	Motor_Start();
 8006e30:	f7ff fd9e 	bl	8006970 <Motor_Start>
	Speed_Control_Start();
 8006e34:	f7ff fdc8 	bl	80069c8 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 8006e38:	f7ff ff5c 	bl	8006cf4 <Drive_State_Machine>
		Second_Drive_Ctrl();
 8006e3c:	f000 f82c 	bl	8006e98 <Second_Drive_Ctrl>
		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 8006e40:	f7ff fe76 	bl	8006b30 <Is_Drive_End>
 8006e44:	4603      	mov	r3, r0
 8006e46:	71fb      	strb	r3, [r7, #7]
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d100      	bne.n	8006e50 <Second_Drive+0x38>
		Drive_State_Machine();
 8006e4e:	e7f3      	b.n	8006e38 <Second_Drive+0x20>
			break;
 8006e50:	bf00      	nop
		}
	}

	Motor_Stop();
 8006e52:	f7ff fda1 	bl	8006998 <Motor_Stop>
	Speed_Control_Stop();
 8006e56:	f7ff fdc3 	bl	80069e0 <Speed_Control_Stop>
	Sensor_Stop();
 8006e5a:	f000 fa89 	bl	8007370 <Sensor_Stop>



	Custom_OLED_Clear();
 8006e5e:	f7fd fc26 	bl	80046ae <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d103      	bne.n	8006e70 <Second_Drive+0x58>
		Custom_OLED_Printf("/0end mark");
 8006e68:	4809      	ldr	r0, [pc, #36]	; (8006e90 <Second_Drive+0x78>)
 8006e6a:	f7fd fd05 	bl	8004878 <Custom_OLED_Printf>
 8006e6e:	e002      	b.n	8006e76 <Second_Drive+0x5e>
	}
	else {
		Custom_OLED_Printf("/0line out");
 8006e70:	4808      	ldr	r0, [pc, #32]	; (8006e94 <Second_Drive+0x7c>)
 8006e72:	f7fd fd01 	bl	8004878 <Custom_OLED_Printf>
	}

	while (CUSTOM_SW_BOTH != Custom_Switch_Read());
 8006e76:	bf00      	nop
 8006e78:	f7fe f82e 	bl	8004ed8 <Custom_Switch_Read>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d1fa      	bne.n	8006e78 <Second_Drive+0x60>
	Custom_OLED_Clear();
 8006e82:	f7fd fc14 	bl	80046ae <Custom_OLED_Clear>
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0800a8bc 	.word	0x0800a8bc
 8006e94:	0800a8c8 	.word	0x0800a8c8

08006e98 <Second_Drive_Ctrl>:




__STATIC_INLINE void Second_Drive_Ctrl() {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataPtr->markState) {
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <Second_Drive_Ctrl+0x34>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	789b      	ldrb	r3, [r3, #2]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <Second_Drive_Ctrl+0x38>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d002      	beq.n	8006eb4 <Second_Drive_Ctrl+0x1c>

		// driveData 값 업데이트
		Set_Second_Drive_Data();
 8006eae:	f000 f813 	bl	8006ed8 <Set_Second_Drive_Data>
	else {

		// isReadAllMark 보정
		Second_Drive_Restore_Mark();
	}
}
 8006eb2:	e009      	b.n	8006ec8 <Second_Drive_Ctrl+0x30>
	else if (isReadAllMark == CUSTOM_TRUE) {
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <Second_Drive_Ctrl+0x3c>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d102      	bne.n	8006ec4 <Second_Drive_Ctrl+0x2c>
		Second_Drive_Boost();
 8006ebe:	f000 f861 	bl	8006f84 <Second_Drive_Boost>
}
 8006ec2:	e001      	b.n	8006ec8 <Second_Drive_Ctrl+0x30>
		Second_Drive_Restore_Mark();
 8006ec4:	f000 f90e 	bl	80070e4 <Second_Drive_Restore_Mark>
}
 8006ec8:	bf00      	nop
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000005c 	.word	0x2000005c
 8006ed0:	20000058 	.word	0x20000058
 8006ed4:	20000059 	.word	0x20000059

08006ed8 <Set_Second_Drive_Data>:





__STATIC_INLINE void Set_Second_Drive_Data() {
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0

	// 크로스, 엔드마크가 아닐 경우
	if (markState != MARK_CROSS && markState != MARK_END) {
 8006edc:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d01a      	beq.n	8006f1c <Set_Second_Drive_Data+0x44>
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d015      	beq.n	8006f1c <Set_Second_Drive_Data+0x44>

		// 현재 마크가 시작된 틱값 변경
		markStartTick = curTick;
 8006ef0:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <Set_Second_Drive_Data+0x94>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <Set_Second_Drive_Data+0x98>)
 8006ef6:	6013      	str	r3, [r2, #0]

		// drivePtr 값 인덱스 증가
		driveDataPtr += 1;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <Set_Second_Drive_Data+0x9c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <Set_Second_Drive_Data+0x9c>)
 8006f00:	6013      	str	r3, [r2, #0]


		// 주행중 markState와 1차 주행에서 저장된 markState가 동일하지 않다면 비정상적으로 읽었다고 판단
		if (markState != driveDataPtr->markState) {
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <Set_Second_Drive_Data+0x9c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	789b      	ldrb	r3, [r3, #2]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d023      	beq.n	8006f5c <Set_Second_Drive_Data+0x84>

			// 마크 인식 정상 여부를 업데이트
			isReadAllMark = CUSTOM_FALSE;
 8006f14:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <Set_Second_Drive_Data+0xa0>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
		if (markState != driveDataPtr->markState) {
 8006f1a:	e01f      	b.n	8006f5c <Set_Second_Drive_Data+0x84>
	}

	else {

		// 크로스일 경우
		if (markState == MARK_CROSS) {
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d107      	bne.n	8006f36 <Set_Second_Drive_Data+0x5e>

			crossCnt += 1;
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <Set_Second_Drive_Data+0xa4>)
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <Set_Second_Drive_Data+0xa4>)
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e00b      	b.n	8006f4e <Set_Second_Drive_Data+0x76>
		}

		// 엔드마크일 경우
		else if (markState == MARK_END){
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d106      	bne.n	8006f4e <Set_Second_Drive_Data+0x76>

			endMarkCnt += 1;
 8006f40:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <Set_Second_Drive_Data+0xa8>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <Set_Second_Drive_Data+0xa8>)
 8006f4c:	701a      	strb	r2, [r3, #0]
		}

		// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
		markState = driveDataPtr->markState;
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <Set_Second_Drive_Data+0x9c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	789b      	ldrb	r3, [r3, #2]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <Set_Second_Drive_Data+0x90>)
 8006f58:	701a      	strb	r2, [r3, #0]
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000058 	.word	0x20000058
 8006f6c:	200014cc 	.word	0x200014cc
 8006f70:	200024ec 	.word	0x200024ec
 8006f74:	2000005c 	.word	0x2000005c
 8006f78:	20000059 	.word	0x20000059
 8006f7c:	200024d6 	.word	0x200024d6
 8006f80:	200014c0 	.word	0x200014c0

08006f84 <Second_Drive_Boost>:



__STATIC_INLINE void Second_Drive_Boost() {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0

	// 직선 가속
	switch (boostCntl) {
 8006f88:	4b4b      	ldr	r3, [pc, #300]	; (80070b8 <Second_Drive_Boost+0x134>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	f200 808f 	bhi.w	80070b2 <Second_Drive_Boost+0x12e>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <Second_Drive_Boost+0x18>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	0800701f 	.word	0x0800701f
 8006fa4:	0800705b 	.word	0x0800705b
 8006fa8:	0800706d 	.word	0x0800706d

			// 초기 상태
			case BOOST_CNTL_IDLE :

					// 직선일 경우
					if (driveState == MARK_STRAIGHT) {
 8006fac:	4b43      	ldr	r3, [pc, #268]	; (80070bc <Second_Drive_Boost+0x138>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d17a      	bne.n	80070ac <Second_Drive_Boost+0x128>

						// 최소 부스트 거리 이상일 때
						if (driveDataPtr->tickCnt > ACCELE_START_TICK + MIN_BOOST_TICK + DECELE_END_TICK) {
 8006fb6:	4b42      	ldr	r3, [pc, #264]	; (80070c0 <Second_Drive_Boost+0x13c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80070c4 <Second_Drive_Boost+0x140>
 8006fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd2:	dc00      	bgt.n	8006fd6 <Second_Drive_Boost+0x52>
								boostCntl = BOOST_CNTL_ACCELE;
							}
						}
					}

					break ;
 8006fd4:	e06a      	b.n	80070ac <Second_Drive_Boost+0x128>
							if (curTick < markStartTick + driveDataPtr->tickCnt - MIN_BOOST_TICK - DECELE_END_TICK) {
 8006fd6:	4b3c      	ldr	r3, [pc, #240]	; (80070c8 <Second_Drive_Boost+0x144>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fe2:	4b37      	ldr	r3, [pc, #220]	; (80070c0 <Second_Drive_Boost+0x13c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b37      	ldr	r3, [pc, #220]	; (80070cc <Second_Drive_Boost+0x148>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eddf 6a35 	vldr	s13, [pc, #212]	; 80070d0 <Second_Drive_Boost+0x14c>
 8006ffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007002:	eddf 6a34 	vldr	s13, [pc, #208]	; 80070d4 <Second_Drive_Boost+0x150>
 8007006:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800700a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007012:	d400      	bmi.n	8007016 <Second_Drive_Boost+0x92>
					break ;
 8007014:	e04a      	b.n	80070ac <Second_Drive_Boost+0x128>
								boostCntl = BOOST_CNTL_ACCELE;
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <Second_Drive_Boost+0x134>)
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
					break ;
 800701c:	e046      	b.n	80070ac <Second_Drive_Boost+0x128>

			// 부스트 가속 컨드롤
			case BOOST_CNTL_ACCELE :

					// 직선 구간 진입 후 ACCELE_START_TICK만큼 지났을 때 부스트
					if (curTick > markStartTick + ACCELE_START_TICK) {
 800701e:	4b2a      	ldr	r3, [pc, #168]	; (80070c8 <Second_Drive_Boost+0x144>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800702a:	4b28      	ldr	r3, [pc, #160]	; (80070cc <Second_Drive_Boost+0x148>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a28 	vldr	s13, [pc, #160]	; 80070d8 <Second_Drive_Boost+0x154>
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	dc00      	bgt.n	800704a <Second_Drive_Boost+0xc6>
						targetSpeed = boostSpeed;

						boostCntl = BOOST_CNTL_DECELE;
					}

					break;
 8007048:	e033      	b.n	80070b2 <Second_Drive_Boost+0x12e>
						targetSpeed = boostSpeed;
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <Second_Drive_Boost+0x158>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a24      	ldr	r2, [pc, #144]	; (80070e0 <Second_Drive_Boost+0x15c>)
 8007050:	6013      	str	r3, [r2, #0]
						boostCntl = BOOST_CNTL_DECELE;
 8007052:	4b19      	ldr	r3, [pc, #100]	; (80070b8 <Second_Drive_Boost+0x134>)
 8007054:	2202      	movs	r2, #2
 8007056:	701a      	strb	r2, [r3, #0]
					break;
 8007058:	e02b      	b.n	80070b2 <Second_Drive_Boost+0x12e>

			// 부스트 감속 컨트롤
			case BOOST_CNTL_DECELE :

					// decel이 시작되었을 경우
					if (Is_Decele() == CUSTOM_TRUE) {
 800705a:	f000 f853 	bl	8007104 <Is_Decele>
 800705e:	4603      	mov	r3, r0
 8007060:	2b01      	cmp	r3, #1
 8007062:	d125      	bne.n	80070b0 <Second_Drive_Boost+0x12c>

						boostCntl = BOOST_CNTL_END;
 8007064:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <Second_Drive_Boost+0x134>)
 8007066:	2203      	movs	r2, #3
 8007068:	701a      	strb	r2, [r3, #0]
					}

					break ;
 800706a:	e021      	b.n	80070b0 <Second_Drive_Boost+0x12c>

			// 부스트가 종료되었을 때
			case BOOST_CNTL_END :

					// 감속이 종료되었을 때
					if ( curTick > markStartTick + driveDataPtr->tickCnt - DECELE_END_TICK ) {
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <Second_Drive_Boost+0x144>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007078:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <Second_Drive_Boost+0x13c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <Second_Drive_Boost+0x148>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4413      	add	r3, r2
 8007088:	ee07 3a90 	vmov	s15, r3
 800708c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007090:	eddf 6a10 	vldr	s13, [pc, #64]	; 80070d4 <Second_Drive_Boost+0x150>
 8007094:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800709c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a0:	dc00      	bgt.n	80070a4 <Second_Drive_Boost+0x120>

						boostCntl = BOOST_CNTL_IDLE;
					}

					break ;
 80070a2:	e006      	b.n	80070b2 <Second_Drive_Boost+0x12e>
						boostCntl = BOOST_CNTL_IDLE;
 80070a4:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <Second_Drive_Boost+0x134>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
					break ;
 80070aa:	e002      	b.n	80070b2 <Second_Drive_Boost+0x12e>
					break ;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <Second_Drive_Boost+0x12e>
					break ;
 80070b0:	bf00      	nop
	}
}
 80070b2:	bf00      	nop
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200024d5 	.word	0x200024d5
 80070bc:	200024d4 	.word	0x200024d4
 80070c0:	2000005c 	.word	0x2000005c
 80070c4:	44f4da95 	.word	0x44f4da95
 80070c8:	200014cc 	.word	0x200014cc
 80070cc:	200024ec 	.word	0x200024ec
 80070d0:	4499089d 	.word	0x4499089d
 80070d4:	43f4da95 	.word	0x43f4da95
 80070d8:	4374da95 	.word	0x4374da95
 80070dc:	20000050 	.word	0x20000050
 80070e0:	20000048 	.word	0x20000048

080070e4 <Second_Drive_Restore_Mark>:



__STATIC_INLINE void Second_Drive_Restore_Mark() {
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0

	if (crossCnt > driveData->crossCnt) {
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <Second_Drive_Restore_Mark+0x18>)
 80070ea:	78db      	ldrb	r3, [r3, #3]
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <Second_Drive_Restore_Mark+0x1c>)
 80070ee:	881b      	ldrh	r3, [r3, #0]
	}

	else {

	}
}
 80070f0:	bf00      	nop
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	200014d4 	.word	0x200014d4
 8007100:	200024d6 	.word	0x200024d6

08007104 <Is_Decele>:
 * fit_in 함수를 역산
 * 현재 남은 감속 거리를 토대로 감속하는데에 필요한 감속속도을 계산
 * 계산을통해 나온 감속 속도가 현재 감속 속도보다 크거나 같을 때 감속
 */

__STATIC_INLINE uint8_t	Is_Decele() {
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
	return CUSTOM_FALSE;

	*/


	if (    decele * 2 * ( driveDataPtr->tickCnt - DECELE_END_TICK - (curTick - markStartTick) )    <= \
 8007108:	4b38      	ldr	r3, [pc, #224]	; (80071ec <Is_Decele+0xe8>)
 800710a:	edd3 7a00 	vldr	s15, [r3]
 800710e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007112:	4b37      	ldr	r3, [pc, #220]	; (80071f0 <Is_Decele+0xec>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007122:	eddf 6a34 	vldr	s13, [pc, #208]	; 80071f4 <Is_Decele+0xf0>
 8007126:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800712a:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <Is_Decele+0xf4>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b33      	ldr	r3, [pc, #204]	; (80071fc <Is_Decele+0xf8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007140:	ee27 7a27 	vmul.f32	s14, s14, s15
			ABS( (targetSpeed_init - currentSpeed) * (targetSpeed_init + currentSpeed) ) * TICK_PER_M    ) {
 8007144:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <Is_Decele+0xfc>)
 8007146:	edd3 6a00 	vldr	s13, [r3]
 800714a:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <Is_Decele+0x100>)
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007154:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <Is_Decele+0xfc>)
 8007156:	ed93 6a00 	vldr	s12, [r3]
 800715a:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <Is_Decele+0x100>)
 800715c:	edd3 7a00 	vldr	s15, [r3]
 8007160:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007170:	d514      	bpl.n	800719c <Is_Decele+0x98>
 8007172:	4b23      	ldr	r3, [pc, #140]	; (8007200 <Is_Decele+0xfc>)
 8007174:	edd3 6a00 	vldr	s13, [r3]
 8007178:	4b22      	ldr	r3, [pc, #136]	; (8007204 <Is_Decele+0x100>)
 800717a:	edd3 7a00 	vldr	s15, [r3]
 800717e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007182:	4b1f      	ldr	r3, [pc, #124]	; (8007200 <Is_Decele+0xfc>)
 8007184:	ed93 6a00 	vldr	s12, [r3]
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <Is_Decele+0x100>)
 800718a:	edd3 7a00 	vldr	s15, [r3]
 800718e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007196:	eef1 7a67 	vneg.f32	s15, s15
 800719a:	e011      	b.n	80071c0 <Is_Decele+0xbc>
 800719c:	4b18      	ldr	r3, [pc, #96]	; (8007200 <Is_Decele+0xfc>)
 800719e:	edd3 6a00 	vldr	s13, [r3]
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <Is_Decele+0x100>)
 80071a4:	edd3 7a00 	vldr	s15, [r3]
 80071a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80071ac:	4b14      	ldr	r3, [pc, #80]	; (8007200 <Is_Decele+0xfc>)
 80071ae:	ed93 6a00 	vldr	s12, [r3]
 80071b2:	4b14      	ldr	r3, [pc, #80]	; (8007204 <Is_Decele+0x100>)
 80071b4:	edd3 7a00 	vldr	s15, [r3]
 80071b8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80071bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071c0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007208 <Is_Decele+0x104>
 80071c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (    decele * 2 * ( driveDataPtr->tickCnt - DECELE_END_TICK - (curTick - markStartTick) )    <= \
 80071c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d0:	d805      	bhi.n	80071de <Is_Decele+0xda>

		// targetSpeed_init로 감속
		targetSpeed = targetSpeed_init;
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <Is_Decele+0xfc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0d      	ldr	r2, [pc, #52]	; (800720c <Is_Decele+0x108>)
 80071d8:	6013      	str	r3, [r2, #0]

		return CUSTOM_TRUE;
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <Is_Decele+0xdc>
	}

	return CUSTOM_FALSE;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000044 	.word	0x20000044
 80071f0:	2000005c 	.word	0x2000005c
 80071f4:	43f4da95 	.word	0x43f4da95
 80071f8:	200014cc 	.word	0x200014cc
 80071fc:	200024ec 	.word	0x200024ec
 8007200:	20000034 	.word	0x20000034
 8007204:	2000004c 	.word	0x2000004c
 8007208:	4519089d 	.word	0x4519089d
 800720c:	20000048 	.word	0x20000048

08007210 <LL_ADC_Enable>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_ADC_Disable>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f023 0201 	bic.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	609a      	str	r2, [r3, #8]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LL_TIM_EnableCounter>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f043 0201 	orr.w	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_TIM_DisableCounter>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 0201 	bic.w	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_TIM_EnableIT_UPDATE>:
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 0201 	orr.w	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_TIM_DisableIT_UPDATE>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f023 0201 	bic.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60da      	str	r2, [r3, #12]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80072d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3b01      	subs	r3, #1
 80072e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80072e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80072f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8007302:	bf00      	nop
 8007304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	d1f8      	bne.n	8007304 <Custom_Delay_us+0x34>
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff ffcc 	bl	80072d0 <Custom_Delay_us>
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <Sensor_Start>:





void Sensor_Start() {
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 8007344:	4808      	ldr	r0, [pc, #32]	; (8007368 <Sensor_Start+0x28>)
 8007346:	f7ff ff63 	bl	8007210 <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 800734a:	200a      	movs	r0, #10
 800734c:	f7ff ffe8 	bl	8007320 <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 8007350:	4806      	ldr	r0, [pc, #24]	; (800736c <Sensor_Start+0x2c>)
 8007352:	f7ff ff7d 	bl	8007250 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 8007356:	4805      	ldr	r0, [pc, #20]	; (800736c <Sensor_Start+0x2c>)
 8007358:	f7ff ff9a 	bl	8007290 <LL_TIM_EnableIT_UPDATE>

	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 800735c:	200a      	movs	r0, #10
 800735e:	f7ff ffdf 	bl	8007320 <Custom_Delay_ms>
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40012000 	.word	0x40012000
 800736c:	40000c00 	.word	0x40000c00

08007370 <Sensor_Stop>:




void Sensor_Stop() {
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 8007374:	4805      	ldr	r0, [pc, #20]	; (800738c <Sensor_Stop+0x1c>)
 8007376:	f7ff ff5b 	bl	8007230 <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 800737a:	4805      	ldr	r0, [pc, #20]	; (8007390 <Sensor_Stop+0x20>)
 800737c:	f7ff ff78 	bl	8007270 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 8007380:	4803      	ldr	r0, [pc, #12]	; (8007390 <Sensor_Stop+0x20>)
 8007382:	f7ff ff95 	bl	80072b0 <LL_TIM_DisableIT_UPDATE>
}
 8007386:	bf00      	nop
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40012000 	.word	0x40012000
 8007390:	40000c00 	.word	0x40000c00

08007394 <Sensor_Calibration>:





void Sensor_Calibration() {
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b089      	sub	sp, #36	; 0x24
 8007398:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < 8; i++) {
 800739e:	2300      	movs	r3, #0
 80073a0:	71fb      	strb	r3, [r7, #7]
 80073a2:	e00a      	b.n	80073ba <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	4a63      	ldr	r2, [pc, #396]	; (8007534 <Sensor_Calibration+0x1a0>)
 80073a8:	2100      	movs	r1, #0
 80073aa:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	4a62      	ldr	r2, [pc, #392]	; (8007538 <Sensor_Calibration+0x1a4>)
 80073b0:	2100      	movs	r1, #0
 80073b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	3301      	adds	r3, #1
 80073b8:	71fb      	strb	r3, [r7, #7]
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	2b07      	cmp	r3, #7
 80073be:	d9f1      	bls.n	80073a4 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 80073c0:	f7ff ffbe 	bl	8007340 <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 80073c4:	f7fd f973 	bl	80046ae <Custom_OLED_Clear>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80073c8:	e044      	b.n	8007454 <Sensor_Calibration+0xc0>
		Custom_OLED_Printf("/0Black Max");
 80073ca:	485c      	ldr	r0, [pc, #368]	; (800753c <Sensor_Calibration+0x1a8>)
 80073cc:	f7fd fa54 	bl	8004878 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 8; i++) {
 80073d0:	2300      	movs	r3, #0
 80073d2:	71bb      	strb	r3, [r7, #6]
 80073d4:	e011      	b.n	80073fa <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 80073d6:	79bb      	ldrb	r3, [r7, #6]
 80073d8:	4a57      	ldr	r2, [pc, #348]	; (8007538 <Sensor_Calibration+0x1a4>)
 80073da:	5cd3      	ldrb	r3, [r2, r3]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	79ba      	ldrb	r2, [r7, #6]
 80073e0:	4957      	ldr	r1, [pc, #348]	; (8007540 <Sensor_Calibration+0x1ac>)
 80073e2:	5c8a      	ldrb	r2, [r1, r2]
 80073e4:	70fa      	strb	r2, [r7, #3]
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 80073ec:	79bb      	ldrb	r3, [r7, #6]
 80073ee:	4952      	ldr	r1, [pc, #328]	; (8007538 <Sensor_Calibration+0x1a4>)
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 8; i++) {
 80073f4:	79bb      	ldrb	r3, [r7, #6]
 80073f6:	3301      	adds	r3, #1
 80073f8:	71bb      	strb	r3, [r7, #6]
 80073fa:	79bb      	ldrb	r3, [r7, #6]
 80073fc:	2b07      	cmp	r3, #7
 80073fe:	d9ea      	bls.n	80073d6 <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007400:	4b4d      	ldr	r3, [pc, #308]	; (8007538 <Sensor_Calibration+0x1a4>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007406:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007408:	4b4b      	ldr	r3, [pc, #300]	; (8007538 <Sensor_Calibration+0x1a4>)
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800740e:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007410:	4b49      	ldr	r3, [pc, #292]	; (8007538 <Sensor_Calibration+0x1a4>)
 8007412:	789b      	ldrb	r3, [r3, #2]
 8007414:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007416:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007418:	4b47      	ldr	r3, [pc, #284]	; (8007538 <Sensor_Calibration+0x1a4>)
 800741a:	78db      	ldrb	r3, [r3, #3]
 800741c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800741e:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007420:	4b45      	ldr	r3, [pc, #276]	; (8007538 <Sensor_Calibration+0x1a4>)
 8007422:	791b      	ldrb	r3, [r3, #4]
 8007424:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007426:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007428:	4b43      	ldr	r3, [pc, #268]	; (8007538 <Sensor_Calibration+0x1a4>)
 800742a:	795b      	ldrb	r3, [r3, #5]
 800742c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800742e:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007430:	4b41      	ldr	r3, [pc, #260]	; (8007538 <Sensor_Calibration+0x1a4>)
 8007432:	799b      	ldrb	r3, [r3, #6]
 8007434:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007436:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007438:	4b3f      	ldr	r3, [pc, #252]	; (8007538 <Sensor_Calibration+0x1a4>)
 800743a:	79db      	ldrb	r3, [r3, #7]
 800743c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	9403      	str	r4, [sp, #12]
 8007442:	9002      	str	r0, [sp, #8]
 8007444:	9101      	str	r1, [sp, #4]
 8007446:	9200      	str	r2, [sp, #0]
 8007448:	4663      	mov	r3, ip
 800744a:	4632      	mov	r2, r6
 800744c:	4629      	mov	r1, r5
 800744e:	483d      	ldr	r0, [pc, #244]	; (8007544 <Sensor_Calibration+0x1b0>)
 8007450:	f7fd fa12 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8007454:	f7fd fd40 	bl	8004ed8 <Custom_Switch_Read>
 8007458:	4603      	mov	r3, r0
 800745a:	2b03      	cmp	r3, #3
 800745c:	d1b5      	bne.n	80073ca <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 800745e:	f7fd f926 	bl	80046ae <Custom_OLED_Clear>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8007462:	e044      	b.n	80074ee <Sensor_Calibration+0x15a>
		Custom_OLED_Printf("/0White Max");
 8007464:	4838      	ldr	r0, [pc, #224]	; (8007548 <Sensor_Calibration+0x1b4>)
 8007466:	f7fd fa07 	bl	8004878 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 8; i++) {
 800746a:	2300      	movs	r3, #0
 800746c:	717b      	strb	r3, [r7, #5]
 800746e:	e011      	b.n	8007494 <Sensor_Calibration+0x100>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8007470:	797b      	ldrb	r3, [r7, #5]
 8007472:	4a30      	ldr	r2, [pc, #192]	; (8007534 <Sensor_Calibration+0x1a0>)
 8007474:	5cd3      	ldrb	r3, [r2, r3]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	797a      	ldrb	r2, [r7, #5]
 800747a:	4931      	ldr	r1, [pc, #196]	; (8007540 <Sensor_Calibration+0x1ac>)
 800747c:	5c8a      	ldrb	r2, [r1, r2]
 800747e:	70fa      	strb	r2, [r7, #3]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	429a      	cmp	r2, r3
 8007484:	d903      	bls.n	800748e <Sensor_Calibration+0xfa>
				whiteMaxs[i] = tmp;
 8007486:	797b      	ldrb	r3, [r7, #5]
 8007488:	492a      	ldr	r1, [pc, #168]	; (8007534 <Sensor_Calibration+0x1a0>)
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 8; i++) {
 800748e:	797b      	ldrb	r3, [r7, #5]
 8007490:	3301      	adds	r3, #1
 8007492:	717b      	strb	r3, [r7, #5]
 8007494:	797b      	ldrb	r3, [r7, #5]
 8007496:	2b07      	cmp	r3, #7
 8007498:	d9ea      	bls.n	8007470 <Sensor_Calibration+0xdc>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800749a:	4b26      	ldr	r3, [pc, #152]	; (8007534 <Sensor_Calibration+0x1a0>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074a0:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 80074a2:	4b24      	ldr	r3, [pc, #144]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074a8:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 80074aa:	4b22      	ldr	r3, [pc, #136]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074ac:	789b      	ldrb	r3, [r3, #2]
 80074ae:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074b0:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 80074b2:	4b20      	ldr	r3, [pc, #128]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074b4:	78db      	ldrb	r3, [r3, #3]
 80074b6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074b8:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 80074ba:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074c0:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074c4:	795b      	ldrb	r3, [r3, #5]
 80074c6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074c8:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 80074ca:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074cc:	799b      	ldrb	r3, [r3, #6]
 80074ce:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074d0:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 80074d2:	4b18      	ldr	r3, [pc, #96]	; (8007534 <Sensor_Calibration+0x1a0>)
 80074d4:	79db      	ldrb	r3, [r3, #7]
 80074d6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	9403      	str	r4, [sp, #12]
 80074dc:	9002      	str	r0, [sp, #8]
 80074de:	9101      	str	r1, [sp, #4]
 80074e0:	9200      	str	r2, [sp, #0]
 80074e2:	4663      	mov	r3, ip
 80074e4:	4632      	mov	r2, r6
 80074e6:	4629      	mov	r1, r5
 80074e8:	4816      	ldr	r0, [pc, #88]	; (8007544 <Sensor_Calibration+0x1b0>)
 80074ea:	f7fd f9c5 	bl	8004878 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80074ee:	f7fd fcf3 	bl	8004ed8 <Custom_Switch_Read>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d1b5      	bne.n	8007464 <Sensor_Calibration+0xd0>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < 8; i++) {
 80074f8:	2300      	movs	r3, #0
 80074fa:	713b      	strb	r3, [r7, #4]
 80074fc:	e00f      	b.n	800751e <Sensor_Calibration+0x18a>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 80074fe:	793b      	ldrb	r3, [r7, #4]
 8007500:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <Sensor_Calibration+0x1a0>)
 8007502:	5cd3      	ldrb	r3, [r2, r3]
 8007504:	b2d9      	uxtb	r1, r3
 8007506:	793b      	ldrb	r3, [r7, #4]
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <Sensor_Calibration+0x1a4>)
 800750a:	5cd3      	ldrb	r3, [r2, r3]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	793b      	ldrb	r3, [r7, #4]
 8007510:	1a8a      	subs	r2, r1, r2
 8007512:	b2d1      	uxtb	r1, r2
 8007514:	4a0d      	ldr	r2, [pc, #52]	; (800754c <Sensor_Calibration+0x1b8>)
 8007516:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 8007518:	793b      	ldrb	r3, [r7, #4]
 800751a:	3301      	adds	r3, #1
 800751c:	713b      	strb	r3, [r7, #4]
 800751e:	793b      	ldrb	r3, [r7, #4]
 8007520:	2b07      	cmp	r3, #7
 8007522:	d9ec      	bls.n	80074fe <Sensor_Calibration+0x16a>
	}

	Custom_OLED_Clear();
 8007524:	f7fd f8c3 	bl	80046ae <Custom_OLED_Clear>
	Sensor_Stop();
 8007528:	f7ff ff22 	bl	8007370 <Sensor_Stop>
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	20000128 	.word	0x20000128
 8007538:	2000250c 	.word	0x2000250c
 800753c:	0800a8d4 	.word	0x0800a8d4
 8007540:	200024fc 	.word	0x200024fc
 8007544:	0800a8e0 	.word	0x0800a8e0
 8007548:	0800a90c 	.word	0x0800a90c
 800754c:	20000120 	.word	0x20000120

08007550 <__cvt>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	ec55 4b10 	vmov	r4, r5, d0
 8007558:	2d00      	cmp	r5, #0
 800755a:	460e      	mov	r6, r1
 800755c:	4619      	mov	r1, r3
 800755e:	462b      	mov	r3, r5
 8007560:	bfbb      	ittet	lt
 8007562:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007566:	461d      	movlt	r5, r3
 8007568:	2300      	movge	r3, #0
 800756a:	232d      	movlt	r3, #45	; 0x2d
 800756c:	700b      	strb	r3, [r1, #0]
 800756e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007570:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007574:	4691      	mov	r9, r2
 8007576:	f023 0820 	bic.w	r8, r3, #32
 800757a:	bfbc      	itt	lt
 800757c:	4622      	movlt	r2, r4
 800757e:	4614      	movlt	r4, r2
 8007580:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007584:	d005      	beq.n	8007592 <__cvt+0x42>
 8007586:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800758a:	d100      	bne.n	800758e <__cvt+0x3e>
 800758c:	3601      	adds	r6, #1
 800758e:	2102      	movs	r1, #2
 8007590:	e000      	b.n	8007594 <__cvt+0x44>
 8007592:	2103      	movs	r1, #3
 8007594:	ab03      	add	r3, sp, #12
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	ab02      	add	r3, sp, #8
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	ec45 4b10 	vmov	d0, r4, r5
 80075a0:	4653      	mov	r3, sl
 80075a2:	4632      	mov	r2, r6
 80075a4:	f000 fdd8 	bl	8008158 <_dtoa_r>
 80075a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075ac:	4607      	mov	r7, r0
 80075ae:	d102      	bne.n	80075b6 <__cvt+0x66>
 80075b0:	f019 0f01 	tst.w	r9, #1
 80075b4:	d022      	beq.n	80075fc <__cvt+0xac>
 80075b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075ba:	eb07 0906 	add.w	r9, r7, r6
 80075be:	d110      	bne.n	80075e2 <__cvt+0x92>
 80075c0:	783b      	ldrb	r3, [r7, #0]
 80075c2:	2b30      	cmp	r3, #48	; 0x30
 80075c4:	d10a      	bne.n	80075dc <__cvt+0x8c>
 80075c6:	2200      	movs	r2, #0
 80075c8:	2300      	movs	r3, #0
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f9 fa8d 	bl	8000aec <__aeabi_dcmpeq>
 80075d2:	b918      	cbnz	r0, 80075dc <__cvt+0x8c>
 80075d4:	f1c6 0601 	rsb	r6, r6, #1
 80075d8:	f8ca 6000 	str.w	r6, [sl]
 80075dc:	f8da 3000 	ldr.w	r3, [sl]
 80075e0:	4499      	add	r9, r3
 80075e2:	2200      	movs	r2, #0
 80075e4:	2300      	movs	r3, #0
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f9 fa7f 	bl	8000aec <__aeabi_dcmpeq>
 80075ee:	b108      	cbz	r0, 80075f4 <__cvt+0xa4>
 80075f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80075f4:	2230      	movs	r2, #48	; 0x30
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	454b      	cmp	r3, r9
 80075fa:	d307      	bcc.n	800760c <__cvt+0xbc>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007600:	1bdb      	subs	r3, r3, r7
 8007602:	4638      	mov	r0, r7
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	b004      	add	sp, #16
 8007608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760c:	1c59      	adds	r1, r3, #1
 800760e:	9103      	str	r1, [sp, #12]
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e7f0      	b.n	80075f6 <__cvt+0xa6>

08007614 <__exponent>:
 8007614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007616:	4603      	mov	r3, r0
 8007618:	2900      	cmp	r1, #0
 800761a:	bfb8      	it	lt
 800761c:	4249      	neglt	r1, r1
 800761e:	f803 2b02 	strb.w	r2, [r3], #2
 8007622:	bfb4      	ite	lt
 8007624:	222d      	movlt	r2, #45	; 0x2d
 8007626:	222b      	movge	r2, #43	; 0x2b
 8007628:	2909      	cmp	r1, #9
 800762a:	7042      	strb	r2, [r0, #1]
 800762c:	dd2a      	ble.n	8007684 <__exponent+0x70>
 800762e:	f10d 0207 	add.w	r2, sp, #7
 8007632:	4617      	mov	r7, r2
 8007634:	260a      	movs	r6, #10
 8007636:	4694      	mov	ip, r2
 8007638:	fb91 f5f6 	sdiv	r5, r1, r6
 800763c:	fb06 1415 	mls	r4, r6, r5, r1
 8007640:	3430      	adds	r4, #48	; 0x30
 8007642:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007646:	460c      	mov	r4, r1
 8007648:	2c63      	cmp	r4, #99	; 0x63
 800764a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800764e:	4629      	mov	r1, r5
 8007650:	dcf1      	bgt.n	8007636 <__exponent+0x22>
 8007652:	3130      	adds	r1, #48	; 0x30
 8007654:	f1ac 0402 	sub.w	r4, ip, #2
 8007658:	f802 1c01 	strb.w	r1, [r2, #-1]
 800765c:	1c41      	adds	r1, r0, #1
 800765e:	4622      	mov	r2, r4
 8007660:	42ba      	cmp	r2, r7
 8007662:	d30a      	bcc.n	800767a <__exponent+0x66>
 8007664:	f10d 0209 	add.w	r2, sp, #9
 8007668:	eba2 020c 	sub.w	r2, r2, ip
 800766c:	42bc      	cmp	r4, r7
 800766e:	bf88      	it	hi
 8007670:	2200      	movhi	r2, #0
 8007672:	4413      	add	r3, r2
 8007674:	1a18      	subs	r0, r3, r0
 8007676:	b003      	add	sp, #12
 8007678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800767e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007682:	e7ed      	b.n	8007660 <__exponent+0x4c>
 8007684:	2330      	movs	r3, #48	; 0x30
 8007686:	3130      	adds	r1, #48	; 0x30
 8007688:	7083      	strb	r3, [r0, #2]
 800768a:	70c1      	strb	r1, [r0, #3]
 800768c:	1d03      	adds	r3, r0, #4
 800768e:	e7f1      	b.n	8007674 <__exponent+0x60>

08007690 <_printf_float>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	ed2d 8b02 	vpush	{d8}
 8007698:	b08d      	sub	sp, #52	; 0x34
 800769a:	460c      	mov	r4, r1
 800769c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076a0:	4616      	mov	r6, r2
 80076a2:	461f      	mov	r7, r3
 80076a4:	4605      	mov	r5, r0
 80076a6:	f000 fc91 	bl	8007fcc <_localeconv_r>
 80076aa:	f8d0 a000 	ldr.w	sl, [r0]
 80076ae:	4650      	mov	r0, sl
 80076b0:	f7f8 fde6 	bl	8000280 <strlen>
 80076b4:	2300      	movs	r3, #0
 80076b6:	930a      	str	r3, [sp, #40]	; 0x28
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	f8d8 3000 	ldr.w	r3, [r8]
 80076c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076c4:	3307      	adds	r3, #7
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	f103 0208 	add.w	r2, r3, #8
 80076ce:	f8c8 2000 	str.w	r2, [r8]
 80076d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80076e0:	ee08 0a10 	vmov	s16, r0
 80076e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80076e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ec:	4b9e      	ldr	r3, [pc, #632]	; (8007968 <_printf_float+0x2d8>)
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076f2:	f7f9 fa2d 	bl	8000b50 <__aeabi_dcmpun>
 80076f6:	bb88      	cbnz	r0, 800775c <_printf_float+0xcc>
 80076f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fc:	4b9a      	ldr	r3, [pc, #616]	; (8007968 <_printf_float+0x2d8>)
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007702:	f7f9 fa07 	bl	8000b14 <__aeabi_dcmple>
 8007706:	bb48      	cbnz	r0, 800775c <_printf_float+0xcc>
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f9 f9f6 	bl	8000b00 <__aeabi_dcmplt>
 8007714:	b110      	cbz	r0, 800771c <_printf_float+0x8c>
 8007716:	232d      	movs	r3, #45	; 0x2d
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771c:	4a93      	ldr	r2, [pc, #588]	; (800796c <_printf_float+0x2dc>)
 800771e:	4b94      	ldr	r3, [pc, #592]	; (8007970 <_printf_float+0x2e0>)
 8007720:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007724:	bf94      	ite	ls
 8007726:	4690      	movls	r8, r2
 8007728:	4698      	movhi	r8, r3
 800772a:	2303      	movs	r3, #3
 800772c:	6123      	str	r3, [r4, #16]
 800772e:	9b05      	ldr	r3, [sp, #20]
 8007730:	f023 0304 	bic.w	r3, r3, #4
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	f04f 0900 	mov.w	r9, #0
 800773a:	9700      	str	r7, [sp, #0]
 800773c:	4633      	mov	r3, r6
 800773e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f9da 	bl	8007afc <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	f040 8090 	bne.w	800786e <_printf_float+0x1de>
 800774e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007752:	b00d      	add	sp, #52	; 0x34
 8007754:	ecbd 8b02 	vpop	{d8}
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f9 f9f4 	bl	8000b50 <__aeabi_dcmpun>
 8007768:	b140      	cbz	r0, 800777c <_printf_float+0xec>
 800776a:	464b      	mov	r3, r9
 800776c:	2b00      	cmp	r3, #0
 800776e:	bfbc      	itt	lt
 8007770:	232d      	movlt	r3, #45	; 0x2d
 8007772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007776:	4a7f      	ldr	r2, [pc, #508]	; (8007974 <_printf_float+0x2e4>)
 8007778:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <_printf_float+0x2e8>)
 800777a:	e7d1      	b.n	8007720 <_printf_float+0x90>
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007782:	9206      	str	r2, [sp, #24]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	d13f      	bne.n	8007808 <_printf_float+0x178>
 8007788:	2306      	movs	r3, #6
 800778a:	6063      	str	r3, [r4, #4]
 800778c:	9b05      	ldr	r3, [sp, #20]
 800778e:	6861      	ldr	r1, [r4, #4]
 8007790:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007794:	2300      	movs	r3, #0
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	ab0a      	add	r3, sp, #40	; 0x28
 800779a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800779e:	ab09      	add	r3, sp, #36	; 0x24
 80077a0:	ec49 8b10 	vmov	d0, r8, r9
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7ff fecf 	bl	8007550 <__cvt>
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b6:	2b47      	cmp	r3, #71	; 0x47
 80077b8:	4680      	mov	r8, r0
 80077ba:	d108      	bne.n	80077ce <_printf_float+0x13e>
 80077bc:	1cc8      	adds	r0, r1, #3
 80077be:	db02      	blt.n	80077c6 <_printf_float+0x136>
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	4299      	cmp	r1, r3
 80077c4:	dd41      	ble.n	800784a <_printf_float+0x1ba>
 80077c6:	f1ab 0302 	sub.w	r3, fp, #2
 80077ca:	fa5f fb83 	uxtb.w	fp, r3
 80077ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077d2:	d820      	bhi.n	8007816 <_printf_float+0x186>
 80077d4:	3901      	subs	r1, #1
 80077d6:	465a      	mov	r2, fp
 80077d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077dc:	9109      	str	r1, [sp, #36]	; 0x24
 80077de:	f7ff ff19 	bl	8007614 <__exponent>
 80077e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e4:	1813      	adds	r3, r2, r0
 80077e6:	2a01      	cmp	r2, #1
 80077e8:	4681      	mov	r9, r0
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	dc02      	bgt.n	80077f4 <_printf_float+0x164>
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	07d2      	lsls	r2, r2, #31
 80077f2:	d501      	bpl.n	80077f8 <_printf_float+0x168>
 80077f4:	3301      	adds	r3, #1
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d09c      	beq.n	800773a <_printf_float+0xaa>
 8007800:	232d      	movs	r3, #45	; 0x2d
 8007802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007806:	e798      	b.n	800773a <_printf_float+0xaa>
 8007808:	9a06      	ldr	r2, [sp, #24]
 800780a:	2a47      	cmp	r2, #71	; 0x47
 800780c:	d1be      	bne.n	800778c <_printf_float+0xfc>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1bc      	bne.n	800778c <_printf_float+0xfc>
 8007812:	2301      	movs	r3, #1
 8007814:	e7b9      	b.n	800778a <_printf_float+0xfa>
 8007816:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800781a:	d118      	bne.n	800784e <_printf_float+0x1be>
 800781c:	2900      	cmp	r1, #0
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	dd0b      	ble.n	800783a <_printf_float+0x1aa>
 8007822:	6121      	str	r1, [r4, #16]
 8007824:	b913      	cbnz	r3, 800782c <_printf_float+0x19c>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	07d0      	lsls	r0, r2, #31
 800782a:	d502      	bpl.n	8007832 <_printf_float+0x1a2>
 800782c:	3301      	adds	r3, #1
 800782e:	440b      	add	r3, r1
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	65a1      	str	r1, [r4, #88]	; 0x58
 8007834:	f04f 0900 	mov.w	r9, #0
 8007838:	e7de      	b.n	80077f8 <_printf_float+0x168>
 800783a:	b913      	cbnz	r3, 8007842 <_printf_float+0x1b2>
 800783c:	6822      	ldr	r2, [r4, #0]
 800783e:	07d2      	lsls	r2, r2, #31
 8007840:	d501      	bpl.n	8007846 <_printf_float+0x1b6>
 8007842:	3302      	adds	r3, #2
 8007844:	e7f4      	b.n	8007830 <_printf_float+0x1a0>
 8007846:	2301      	movs	r3, #1
 8007848:	e7f2      	b.n	8007830 <_printf_float+0x1a0>
 800784a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	4299      	cmp	r1, r3
 8007852:	db05      	blt.n	8007860 <_printf_float+0x1d0>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	6121      	str	r1, [r4, #16]
 8007858:	07d8      	lsls	r0, r3, #31
 800785a:	d5ea      	bpl.n	8007832 <_printf_float+0x1a2>
 800785c:	1c4b      	adds	r3, r1, #1
 800785e:	e7e7      	b.n	8007830 <_printf_float+0x1a0>
 8007860:	2900      	cmp	r1, #0
 8007862:	bfd4      	ite	le
 8007864:	f1c1 0202 	rsble	r2, r1, #2
 8007868:	2201      	movgt	r2, #1
 800786a:	4413      	add	r3, r2
 800786c:	e7e0      	b.n	8007830 <_printf_float+0x1a0>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	055a      	lsls	r2, r3, #21
 8007872:	d407      	bmi.n	8007884 <_printf_float+0x1f4>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	4642      	mov	r2, r8
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	d12c      	bne.n	80078dc <_printf_float+0x24c>
 8007882:	e764      	b.n	800774e <_printf_float+0xbe>
 8007884:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007888:	f240 80e0 	bls.w	8007a4c <_printf_float+0x3bc>
 800788c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	f7f9 f92a 	bl	8000aec <__aeabi_dcmpeq>
 8007898:	2800      	cmp	r0, #0
 800789a:	d034      	beq.n	8007906 <_printf_float+0x276>
 800789c:	4a37      	ldr	r2, [pc, #220]	; (800797c <_printf_float+0x2ec>)
 800789e:	2301      	movs	r3, #1
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f af51 	beq.w	800774e <_printf_float+0xbe>
 80078ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b0:	429a      	cmp	r2, r3
 80078b2:	db02      	blt.n	80078ba <_printf_float+0x22a>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	07d8      	lsls	r0, r3, #31
 80078b8:	d510      	bpl.n	80078dc <_printf_float+0x24c>
 80078ba:	ee18 3a10 	vmov	r3, s16
 80078be:	4652      	mov	r2, sl
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af41 	beq.w	800774e <_printf_float+0xbe>
 80078cc:	f04f 0800 	mov.w	r8, #0
 80078d0:	f104 091a 	add.w	r9, r4, #26
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	3b01      	subs	r3, #1
 80078d8:	4543      	cmp	r3, r8
 80078da:	dc09      	bgt.n	80078f0 <_printf_float+0x260>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	079b      	lsls	r3, r3, #30
 80078e0:	f100 8107 	bmi.w	8007af2 <_printf_float+0x462>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e730      	b.n	8007752 <_printf_float+0xc2>
 80078f0:	2301      	movs	r3, #1
 80078f2:	464a      	mov	r2, r9
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af27 	beq.w	800774e <_printf_float+0xbe>
 8007900:	f108 0801 	add.w	r8, r8, #1
 8007904:	e7e6      	b.n	80078d4 <_printf_float+0x244>
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc39      	bgt.n	8007980 <_printf_float+0x2f0>
 800790c:	4a1b      	ldr	r2, [pc, #108]	; (800797c <_printf_float+0x2ec>)
 800790e:	2301      	movs	r3, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af19 	beq.w	800774e <_printf_float+0xbe>
 800791c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007920:	4313      	orrs	r3, r2
 8007922:	d102      	bne.n	800792a <_printf_float+0x29a>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	d5d8      	bpl.n	80078dc <_printf_float+0x24c>
 800792a:	ee18 3a10 	vmov	r3, s16
 800792e:	4652      	mov	r2, sl
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af09 	beq.w	800774e <_printf_float+0xbe>
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	f104 0a1a 	add.w	sl, r4, #26
 8007944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007946:	425b      	negs	r3, r3
 8007948:	454b      	cmp	r3, r9
 800794a:	dc01      	bgt.n	8007950 <_printf_float+0x2c0>
 800794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794e:	e792      	b.n	8007876 <_printf_float+0x1e6>
 8007950:	2301      	movs	r3, #1
 8007952:	4652      	mov	r2, sl
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f aef7 	beq.w	800774e <_printf_float+0xbe>
 8007960:	f109 0901 	add.w	r9, r9, #1
 8007964:	e7ee      	b.n	8007944 <_printf_float+0x2b4>
 8007966:	bf00      	nop
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	0800abb0 	.word	0x0800abb0
 8007970:	0800abb4 	.word	0x0800abb4
 8007974:	0800abb8 	.word	0x0800abb8
 8007978:	0800abbc 	.word	0x0800abbc
 800797c:	0800abc0 	.word	0x0800abc0
 8007980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007984:	429a      	cmp	r2, r3
 8007986:	bfa8      	it	ge
 8007988:	461a      	movge	r2, r3
 800798a:	2a00      	cmp	r2, #0
 800798c:	4691      	mov	r9, r2
 800798e:	dc37      	bgt.n	8007a00 <_printf_float+0x370>
 8007990:	f04f 0b00 	mov.w	fp, #0
 8007994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007998:	f104 021a 	add.w	r2, r4, #26
 800799c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	eba3 0309 	sub.w	r3, r3, r9
 80079a4:	455b      	cmp	r3, fp
 80079a6:	dc33      	bgt.n	8007a10 <_printf_float+0x380>
 80079a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ac:	429a      	cmp	r2, r3
 80079ae:	db3b      	blt.n	8007a28 <_printf_float+0x398>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	07da      	lsls	r2, r3, #31
 80079b4:	d438      	bmi.n	8007a28 <_printf_float+0x398>
 80079b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079ba:	eba2 0903 	sub.w	r9, r2, r3
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	1ad2      	subs	r2, r2, r3
 80079c2:	4591      	cmp	r9, r2
 80079c4:	bfa8      	it	ge
 80079c6:	4691      	movge	r9, r2
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	dc35      	bgt.n	8007a3a <_printf_float+0x3aa>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d6:	f104 0a1a 	add.w	sl, r4, #26
 80079da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	eba3 0309 	sub.w	r3, r3, r9
 80079e4:	4543      	cmp	r3, r8
 80079e6:	f77f af79 	ble.w	80078dc <_printf_float+0x24c>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4652      	mov	r2, sl
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f aeaa 	beq.w	800774e <_printf_float+0xbe>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	e7ec      	b.n	80079da <_printf_float+0x34a>
 8007a00:	4613      	mov	r3, r2
 8007a02:	4631      	mov	r1, r6
 8007a04:	4642      	mov	r2, r8
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b8      	blx	r7
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d1c0      	bne.n	8007990 <_printf_float+0x300>
 8007a0e:	e69e      	b.n	800774e <_printf_float+0xbe>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	9205      	str	r2, [sp, #20]
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f ae97 	beq.w	800774e <_printf_float+0xbe>
 8007a20:	9a05      	ldr	r2, [sp, #20]
 8007a22:	f10b 0b01 	add.w	fp, fp, #1
 8007a26:	e7b9      	b.n	800799c <_printf_float+0x30c>
 8007a28:	ee18 3a10 	vmov	r3, s16
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	d1be      	bne.n	80079b6 <_printf_float+0x326>
 8007a38:	e689      	b.n	800774e <_printf_float+0xbe>
 8007a3a:	9a05      	ldr	r2, [sp, #20]
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	4442      	add	r2, r8
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	d1c1      	bne.n	80079ce <_printf_float+0x33e>
 8007a4a:	e680      	b.n	800774e <_printf_float+0xbe>
 8007a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4e:	2a01      	cmp	r2, #1
 8007a50:	dc01      	bgt.n	8007a56 <_printf_float+0x3c6>
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d53a      	bpl.n	8007acc <_printf_float+0x43c>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4642      	mov	r2, r8
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae74 	beq.w	800774e <_printf_float+0xbe>
 8007a66:	ee18 3a10 	vmov	r3, s16
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f ae6b 	beq.w	800774e <_printf_float+0xbe>
 8007a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a84:	f7f9 f832 	bl	8000aec <__aeabi_dcmpeq>
 8007a88:	b9d8      	cbnz	r0, 8007ac2 <_printf_float+0x432>
 8007a8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007a8e:	f108 0201 	add.w	r2, r8, #1
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d10e      	bne.n	8007aba <_printf_float+0x42a>
 8007a9c:	e657      	b.n	800774e <_printf_float+0xbe>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f ae50 	beq.w	800774e <_printf_float+0xbe>
 8007aae:	f108 0801 	add.w	r8, r8, #1
 8007ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	4543      	cmp	r3, r8
 8007ab8:	dcf1      	bgt.n	8007a9e <_printf_float+0x40e>
 8007aba:	464b      	mov	r3, r9
 8007abc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ac0:	e6da      	b.n	8007878 <_printf_float+0x1e8>
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	f104 0a1a 	add.w	sl, r4, #26
 8007aca:	e7f2      	b.n	8007ab2 <_printf_float+0x422>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4642      	mov	r2, r8
 8007ad0:	e7df      	b.n	8007a92 <_printf_float+0x402>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	464a      	mov	r2, r9
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f ae36 	beq.w	800774e <_printf_float+0xbe>
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aea:	1a5b      	subs	r3, r3, r1
 8007aec:	4543      	cmp	r3, r8
 8007aee:	dcf0      	bgt.n	8007ad2 <_printf_float+0x442>
 8007af0:	e6f8      	b.n	80078e4 <_printf_float+0x254>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	f104 0919 	add.w	r9, r4, #25
 8007afa:	e7f4      	b.n	8007ae6 <_printf_float+0x456>

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4699      	mov	r9, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bfb8      	it	lt
 8007b10:	4613      	movlt	r3, r2
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc26      	bgt.n	8007b92 <_printf_common+0x96>
 8007b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b48:	1e13      	subs	r3, r2, #0
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d42b      	bmi.n	8007bac <_printf_common+0xb0>
 8007b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d01e      	beq.n	8007ba0 <_printf_common+0xa4>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6922      	ldr	r2, [r4, #16]
 8007b66:	f003 0306 	and.w	r3, r3, #6
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf02      	ittt	eq
 8007b6e:	68e5      	ldreq	r5, [r4, #12]
 8007b70:	6833      	ldreq	r3, [r6, #0]
 8007b72:	1aed      	subeq	r5, r5, r3
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	2600      	movs	r6, #0
 8007b88:	341a      	adds	r4, #26
 8007b8a:	42b5      	cmp	r5, r6
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xc8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xa8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4649      	mov	r1, r9
 8007b98:	4638      	mov	r0, r7
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xac>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c6      	b.n	8007b3a <_printf_common+0x3e>
 8007bac:	18e1      	adds	r1, r4, r3
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	2030      	movs	r0, #48	; 0x30
 8007bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb6:	4422      	add	r2, r4
 8007bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7c7      	b.n	8007b54 <_printf_common+0x58>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xa4>
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7d9      	b.n	8007b8a <_printf_common+0x8e>
	...

08007bd8 <_printf_i>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	7e0f      	ldrb	r7, [r1, #24]
 8007bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007be0:	2f78      	cmp	r7, #120	; 0x78
 8007be2:	4691      	mov	r9, r2
 8007be4:	4680      	mov	r8, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	469a      	mov	sl, r3
 8007bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bee:	d807      	bhi.n	8007c00 <_printf_i+0x28>
 8007bf0:	2f62      	cmp	r7, #98	; 0x62
 8007bf2:	d80a      	bhi.n	8007c0a <_printf_i+0x32>
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	f000 80d4 	beq.w	8007da2 <_printf_i+0x1ca>
 8007bfa:	2f58      	cmp	r7, #88	; 0x58
 8007bfc:	f000 80c0 	beq.w	8007d80 <_printf_i+0x1a8>
 8007c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c08:	e03a      	b.n	8007c80 <_printf_i+0xa8>
 8007c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c0e:	2b15      	cmp	r3, #21
 8007c10:	d8f6      	bhi.n	8007c00 <_printf_i+0x28>
 8007c12:	a101      	add	r1, pc, #4	; (adr r1, 8007c18 <_printf_i+0x40>)
 8007c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c85 	.word	0x08007c85
 8007c20:	08007c01 	.word	0x08007c01
 8007c24:	08007c01 	.word	0x08007c01
 8007c28:	08007c01 	.word	0x08007c01
 8007c2c:	08007c01 	.word	0x08007c01
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c01 	.word	0x08007c01
 8007c38:	08007c01 	.word	0x08007c01
 8007c3c:	08007c01 	.word	0x08007c01
 8007c40:	08007c01 	.word	0x08007c01
 8007c44:	08007d89 	.word	0x08007d89
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007d43 	.word	0x08007d43
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007c01 	.word	0x08007c01
 8007c58:	08007dab 	.word	0x08007dab
 8007c5c:	08007c01 	.word	0x08007c01
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007c01 	.word	0x08007c01
 8007c68:	08007c01 	.word	0x08007c01
 8007c6c:	08007d4b 	.word	0x08007d4b
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	602a      	str	r2, [r5, #0]
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e09f      	b.n	8007dc4 <_printf_i+0x1ec>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	0607      	lsls	r7, r0, #24
 8007c8a:	f103 0104 	add.w	r1, r3, #4
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	d501      	bpl.n	8007c96 <_printf_i+0xbe>
 8007c92:	681e      	ldr	r6, [r3, #0]
 8007c94:	e003      	b.n	8007c9e <_printf_i+0xc6>
 8007c96:	0646      	lsls	r6, r0, #25
 8007c98:	d5fb      	bpl.n	8007c92 <_printf_i+0xba>
 8007c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	da03      	bge.n	8007caa <_printf_i+0xd2>
 8007ca2:	232d      	movs	r3, #45	; 0x2d
 8007ca4:	4276      	negs	r6, r6
 8007ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007caa:	485a      	ldr	r0, [pc, #360]	; (8007e14 <_printf_i+0x23c>)
 8007cac:	230a      	movs	r3, #10
 8007cae:	e012      	b.n	8007cd6 <_printf_i+0xfe>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	6820      	ldr	r0, [r4, #0]
 8007cb4:	1d19      	adds	r1, r3, #4
 8007cb6:	6029      	str	r1, [r5, #0]
 8007cb8:	0605      	lsls	r5, r0, #24
 8007cba:	d501      	bpl.n	8007cc0 <_printf_i+0xe8>
 8007cbc:	681e      	ldr	r6, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <_printf_i+0xee>
 8007cc0:	0641      	lsls	r1, r0, #25
 8007cc2:	d5fb      	bpl.n	8007cbc <_printf_i+0xe4>
 8007cc4:	881e      	ldrh	r6, [r3, #0]
 8007cc6:	4853      	ldr	r0, [pc, #332]	; (8007e14 <_printf_i+0x23c>)
 8007cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007cca:	bf0c      	ite	eq
 8007ccc:	2308      	moveq	r3, #8
 8007cce:	230a      	movne	r3, #10
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cd6:	6865      	ldr	r5, [r4, #4]
 8007cd8:	60a5      	str	r5, [r4, #8]
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	bfa2      	ittt	ge
 8007cde:	6821      	ldrge	r1, [r4, #0]
 8007ce0:	f021 0104 	bicge.w	r1, r1, #4
 8007ce4:	6021      	strge	r1, [r4, #0]
 8007ce6:	b90e      	cbnz	r6, 8007cec <_printf_i+0x114>
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	d04b      	beq.n	8007d84 <_printf_i+0x1ac>
 8007cec:	4615      	mov	r5, r2
 8007cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cf6:	5dc7      	ldrb	r7, [r0, r7]
 8007cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cfc:	4637      	mov	r7, r6
 8007cfe:	42bb      	cmp	r3, r7
 8007d00:	460e      	mov	r6, r1
 8007d02:	d9f4      	bls.n	8007cee <_printf_i+0x116>
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d10b      	bne.n	8007d20 <_printf_i+0x148>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	07de      	lsls	r6, r3, #31
 8007d0c:	d508      	bpl.n	8007d20 <_printf_i+0x148>
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	6861      	ldr	r1, [r4, #4]
 8007d12:	4299      	cmp	r1, r3
 8007d14:	bfde      	ittt	le
 8007d16:	2330      	movle	r3, #48	; 0x30
 8007d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d20:	1b52      	subs	r2, r2, r5
 8007d22:	6122      	str	r2, [r4, #16]
 8007d24:	f8cd a000 	str.w	sl, [sp]
 8007d28:	464b      	mov	r3, r9
 8007d2a:	aa03      	add	r2, sp, #12
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f7ff fee4 	bl	8007afc <_printf_common>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d14a      	bne.n	8007dce <_printf_i+0x1f6>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3c:	b004      	add	sp, #16
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f043 0320 	orr.w	r3, r3, #32
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	4833      	ldr	r0, [pc, #204]	; (8007e18 <_printf_i+0x240>)
 8007d4c:	2778      	movs	r7, #120	; 0x78
 8007d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	6829      	ldr	r1, [r5, #0]
 8007d56:	061f      	lsls	r7, r3, #24
 8007d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d5c:	d402      	bmi.n	8007d64 <_printf_i+0x18c>
 8007d5e:	065f      	lsls	r7, r3, #25
 8007d60:	bf48      	it	mi
 8007d62:	b2b6      	uxthmi	r6, r6
 8007d64:	07df      	lsls	r7, r3, #31
 8007d66:	bf48      	it	mi
 8007d68:	f043 0320 	orrmi.w	r3, r3, #32
 8007d6c:	6029      	str	r1, [r5, #0]
 8007d6e:	bf48      	it	mi
 8007d70:	6023      	strmi	r3, [r4, #0]
 8007d72:	b91e      	cbnz	r6, 8007d7c <_printf_i+0x1a4>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	f023 0320 	bic.w	r3, r3, #32
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	e7a7      	b.n	8007cd0 <_printf_i+0xf8>
 8007d80:	4824      	ldr	r0, [pc, #144]	; (8007e14 <_printf_i+0x23c>)
 8007d82:	e7e4      	b.n	8007d4e <_printf_i+0x176>
 8007d84:	4615      	mov	r5, r2
 8007d86:	e7bd      	b.n	8007d04 <_printf_i+0x12c>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	6826      	ldr	r6, [r4, #0]
 8007d8c:	6961      	ldr	r1, [r4, #20]
 8007d8e:	1d18      	adds	r0, r3, #4
 8007d90:	6028      	str	r0, [r5, #0]
 8007d92:	0635      	lsls	r5, r6, #24
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	d501      	bpl.n	8007d9c <_printf_i+0x1c4>
 8007d98:	6019      	str	r1, [r3, #0]
 8007d9a:	e002      	b.n	8007da2 <_printf_i+0x1ca>
 8007d9c:	0670      	lsls	r0, r6, #25
 8007d9e:	d5fb      	bpl.n	8007d98 <_printf_i+0x1c0>
 8007da0:	8019      	strh	r1, [r3, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	6123      	str	r3, [r4, #16]
 8007da6:	4615      	mov	r5, r2
 8007da8:	e7bc      	b.n	8007d24 <_printf_i+0x14c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	602a      	str	r2, [r5, #0]
 8007db0:	681d      	ldr	r5, [r3, #0]
 8007db2:	6862      	ldr	r2, [r4, #4]
 8007db4:	2100      	movs	r1, #0
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7f8 fa12 	bl	80001e0 <memchr>
 8007dbc:	b108      	cbz	r0, 8007dc2 <_printf_i+0x1ea>
 8007dbe:	1b40      	subs	r0, r0, r5
 8007dc0:	6060      	str	r0, [r4, #4]
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	6123      	str	r3, [r4, #16]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dcc:	e7aa      	b.n	8007d24 <_printf_i+0x14c>
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	47d0      	blx	sl
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d0ad      	beq.n	8007d38 <_printf_i+0x160>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	079b      	lsls	r3, r3, #30
 8007de0:	d413      	bmi.n	8007e0a <_printf_i+0x232>
 8007de2:	68e0      	ldr	r0, [r4, #12]
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	4298      	cmp	r0, r3
 8007de8:	bfb8      	it	lt
 8007dea:	4618      	movlt	r0, r3
 8007dec:	e7a6      	b.n	8007d3c <_printf_i+0x164>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4632      	mov	r2, r6
 8007df2:	4649      	mov	r1, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	47d0      	blx	sl
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d09d      	beq.n	8007d38 <_printf_i+0x160>
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	68e3      	ldr	r3, [r4, #12]
 8007e00:	9903      	ldr	r1, [sp, #12]
 8007e02:	1a5b      	subs	r3, r3, r1
 8007e04:	42ab      	cmp	r3, r5
 8007e06:	dcf2      	bgt.n	8007dee <_printf_i+0x216>
 8007e08:	e7eb      	b.n	8007de2 <_printf_i+0x20a>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	f104 0619 	add.w	r6, r4, #25
 8007e10:	e7f5      	b.n	8007dfe <_printf_i+0x226>
 8007e12:	bf00      	nop
 8007e14:	0800abc2 	.word	0x0800abc2
 8007e18:	0800abd3 	.word	0x0800abd3

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f000 f8bf 	bl	8007fbc <memset>
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x38>)
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x3c>)
 8007e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x40>)
 8007e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x44>)
 8007e4c:	6224      	str	r4, [r4, #32]
 8007e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	080099a9 	.word	0x080099a9
 8007e58:	080099cb 	.word	0x080099cb
 8007e5c:	08009a03 	.word	0x08009a03
 8007e60:	08009a27 	.word	0x08009a27

08007e64 <stdio_exit_handler>:
 8007e64:	4a02      	ldr	r2, [pc, #8]	; (8007e70 <stdio_exit_handler+0xc>)
 8007e66:	4903      	ldr	r1, [pc, #12]	; (8007e74 <stdio_exit_handler+0x10>)
 8007e68:	4803      	ldr	r0, [pc, #12]	; (8007e78 <stdio_exit_handler+0x14>)
 8007e6a:	f000 b869 	b.w	8007f40 <_fwalk_sglue>
 8007e6e:	bf00      	nop
 8007e70:	20000134 	.word	0x20000134
 8007e74:	08009249 	.word	0x08009249
 8007e78:	20000140 	.word	0x20000140

08007e7c <cleanup_stdio>:
 8007e7c:	6841      	ldr	r1, [r0, #4]
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <cleanup_stdio+0x34>)
 8007e80:	4299      	cmp	r1, r3
 8007e82:	b510      	push	{r4, lr}
 8007e84:	4604      	mov	r4, r0
 8007e86:	d001      	beq.n	8007e8c <cleanup_stdio+0x10>
 8007e88:	f001 f9de 	bl	8009248 <_fflush_r>
 8007e8c:	68a1      	ldr	r1, [r4, #8]
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <cleanup_stdio+0x38>)
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d002      	beq.n	8007e9a <cleanup_stdio+0x1e>
 8007e94:	4620      	mov	r0, r4
 8007e96:	f001 f9d7 	bl	8009248 <_fflush_r>
 8007e9a:	68e1      	ldr	r1, [r4, #12]
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <cleanup_stdio+0x3c>)
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	d004      	beq.n	8007eac <cleanup_stdio+0x30>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea8:	f001 b9ce 	b.w	8009248 <_fflush_r>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	20002518 	.word	0x20002518
 8007eb4:	20002580 	.word	0x20002580
 8007eb8:	200025e8 	.word	0x200025e8

08007ebc <global_stdio_init.part.0>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <global_stdio_init.part.0+0x30>)
 8007ec0:	4c0b      	ldr	r4, [pc, #44]	; (8007ef0 <global_stdio_init.part.0+0x34>)
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <global_stdio_init.part.0+0x38>)
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	f7ff ffa6 	bl	8007e1c <std>
 8007ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	2109      	movs	r1, #9
 8007ed8:	f7ff ffa0 	bl	8007e1c <std>
 8007edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff bf98 	b.w	8007e1c <std>
 8007eec:	20002650 	.word	0x20002650
 8007ef0:	20002518 	.word	0x20002518
 8007ef4:	08007e65 	.word	0x08007e65

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 b895 	b.w	8008028 <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20002655 	.word	0x20002655

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b890 	b.w	800802a <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20002655 	.word	0x20002655

08007f10 <__sinit>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	4604      	mov	r4, r0
 8007f14:	f7ff fff0 	bl	8007ef8 <__sfp_lock_acquire>
 8007f18:	6a23      	ldr	r3, [r4, #32]
 8007f1a:	b11b      	cbz	r3, 8007f24 <__sinit+0x14>
 8007f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f20:	f7ff bff0 	b.w	8007f04 <__sfp_lock_release>
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <__sinit+0x28>)
 8007f26:	6223      	str	r3, [r4, #32]
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <__sinit+0x2c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f5      	bne.n	8007f1c <__sinit+0xc>
 8007f30:	f7ff ffc4 	bl	8007ebc <global_stdio_init.part.0>
 8007f34:	e7f2      	b.n	8007f1c <__sinit+0xc>
 8007f36:	bf00      	nop
 8007f38:	08007e7d 	.word	0x08007e7d
 8007f3c:	20002650 	.word	0x20002650

08007f40 <_fwalk_sglue>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	4607      	mov	r7, r0
 8007f46:	4688      	mov	r8, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f50:	f1b9 0901 	subs.w	r9, r9, #1
 8007f54:	d505      	bpl.n	8007f62 <_fwalk_sglue+0x22>
 8007f56:	6824      	ldr	r4, [r4, #0]
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d1f7      	bne.n	8007f4c <_fwalk_sglue+0xc>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f62:	89ab      	ldrh	r3, [r5, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d907      	bls.n	8007f78 <_fwalk_sglue+0x38>
 8007f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	d003      	beq.n	8007f78 <_fwalk_sglue+0x38>
 8007f70:	4629      	mov	r1, r5
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	4306      	orrs	r6, r0
 8007f78:	3568      	adds	r5, #104	; 0x68
 8007f7a:	e7e9      	b.n	8007f50 <_fwalk_sglue+0x10>

08007f7c <_vsiprintf_r>:
 8007f7c:	b500      	push	{lr}
 8007f7e:	b09b      	sub	sp, #108	; 0x6c
 8007f80:	9100      	str	r1, [sp, #0]
 8007f82:	9104      	str	r1, [sp, #16]
 8007f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f88:	9105      	str	r1, [sp, #20]
 8007f8a:	9102      	str	r1, [sp, #8]
 8007f8c:	4905      	ldr	r1, [pc, #20]	; (8007fa4 <_vsiprintf_r+0x28>)
 8007f8e:	9103      	str	r1, [sp, #12]
 8007f90:	4669      	mov	r1, sp
 8007f92:	f000 ff2d 	bl	8008df0 <_svfiprintf_r>
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	b01b      	add	sp, #108	; 0x6c
 8007f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fa2:	bf00      	nop
 8007fa4:	ffff0208 	.word	0xffff0208

08007fa8 <vsiprintf>:
 8007fa8:	4613      	mov	r3, r2
 8007faa:	460a      	mov	r2, r1
 8007fac:	4601      	mov	r1, r0
 8007fae:	4802      	ldr	r0, [pc, #8]	; (8007fb8 <vsiprintf+0x10>)
 8007fb0:	6800      	ldr	r0, [r0, #0]
 8007fb2:	f7ff bfe3 	b.w	8007f7c <_vsiprintf_r>
 8007fb6:	bf00      	nop
 8007fb8:	2000018c 	.word	0x2000018c

08007fbc <memset>:
 8007fbc:	4402      	add	r2, r0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d100      	bne.n	8007fc6 <memset+0xa>
 8007fc4:	4770      	bx	lr
 8007fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fca:	e7f9      	b.n	8007fc0 <memset+0x4>

08007fcc <_localeconv_r>:
 8007fcc:	4800      	ldr	r0, [pc, #0]	; (8007fd0 <_localeconv_r+0x4>)
 8007fce:	4770      	bx	lr
 8007fd0:	20000280 	.word	0x20000280

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	2000018c 	.word	0x2000018c

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f002 f91c 	bl	800a230 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	0800af2c 	.word	0x0800af2c
 800801c:	0800af2c 	.word	0x0800af2c
 8008020:	0800af2c 	.word	0x0800af2c
 8008024:	0800af30 	.word	0x0800af30

08008028 <__retarget_lock_acquire_recursive>:
 8008028:	4770      	bx	lr

0800802a <__retarget_lock_release_recursive>:
 800802a:	4770      	bx	lr

0800802c <memcpy>:
 800802c:	440a      	add	r2, r1
 800802e:	4291      	cmp	r1, r2
 8008030:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008034:	d100      	bne.n	8008038 <memcpy+0xc>
 8008036:	4770      	bx	lr
 8008038:	b510      	push	{r4, lr}
 800803a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008042:	4291      	cmp	r1, r2
 8008044:	d1f9      	bne.n	800803a <memcpy+0xe>
 8008046:	bd10      	pop	{r4, pc}

08008048 <quorem>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	690c      	ldr	r4, [r1, #16]
 8008050:	42a3      	cmp	r3, r4
 8008052:	4607      	mov	r7, r0
 8008054:	db7e      	blt.n	8008154 <quorem+0x10c>
 8008056:	3c01      	subs	r4, #1
 8008058:	f101 0814 	add.w	r8, r1, #20
 800805c:	f100 0514 	add.w	r5, r0, #20
 8008060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800806a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800806e:	3301      	adds	r3, #1
 8008070:	429a      	cmp	r2, r3
 8008072:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800807a:	fbb2 f6f3 	udiv	r6, r2, r3
 800807e:	d331      	bcc.n	80080e4 <quorem+0x9c>
 8008080:	f04f 0e00 	mov.w	lr, #0
 8008084:	4640      	mov	r0, r8
 8008086:	46ac      	mov	ip, r5
 8008088:	46f2      	mov	sl, lr
 800808a:	f850 2b04 	ldr.w	r2, [r0], #4
 800808e:	b293      	uxth	r3, r2
 8008090:	fb06 e303 	mla	r3, r6, r3, lr
 8008094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008098:	0c1a      	lsrs	r2, r3, #16
 800809a:	b29b      	uxth	r3, r3
 800809c:	ebaa 0303 	sub.w	r3, sl, r3
 80080a0:	f8dc a000 	ldr.w	sl, [ip]
 80080a4:	fa13 f38a 	uxtah	r3, r3, sl
 80080a8:	fb06 220e 	mla	r2, r6, lr, r2
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	9b00      	ldr	r3, [sp, #0]
 80080b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080b4:	b292      	uxth	r2, r2
 80080b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080be:	f8bd 3000 	ldrh.w	r3, [sp]
 80080c2:	4581      	cmp	r9, r0
 80080c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080c8:	f84c 3b04 	str.w	r3, [ip], #4
 80080cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080d0:	d2db      	bcs.n	800808a <quorem+0x42>
 80080d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80080d6:	b92b      	cbnz	r3, 80080e4 <quorem+0x9c>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	3b04      	subs	r3, #4
 80080dc:	429d      	cmp	r5, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	d32c      	bcc.n	800813c <quorem+0xf4>
 80080e2:	613c      	str	r4, [r7, #16]
 80080e4:	4638      	mov	r0, r7
 80080e6:	f001 fb5f 	bl	80097a8 <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	db22      	blt.n	8008134 <quorem+0xec>
 80080ee:	3601      	adds	r6, #1
 80080f0:	4629      	mov	r1, r5
 80080f2:	2000      	movs	r0, #0
 80080f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80080f8:	f8d1 c000 	ldr.w	ip, [r1]
 80080fc:	b293      	uxth	r3, r2
 80080fe:	1ac3      	subs	r3, r0, r3
 8008100:	0c12      	lsrs	r2, r2, #16
 8008102:	fa13 f38c 	uxtah	r3, r3, ip
 8008106:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800810a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800810e:	b29b      	uxth	r3, r3
 8008110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008114:	45c1      	cmp	r9, r8
 8008116:	f841 3b04 	str.w	r3, [r1], #4
 800811a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800811e:	d2e9      	bcs.n	80080f4 <quorem+0xac>
 8008120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008128:	b922      	cbnz	r2, 8008134 <quorem+0xec>
 800812a:	3b04      	subs	r3, #4
 800812c:	429d      	cmp	r5, r3
 800812e:	461a      	mov	r2, r3
 8008130:	d30a      	bcc.n	8008148 <quorem+0x100>
 8008132:	613c      	str	r4, [r7, #16]
 8008134:	4630      	mov	r0, r6
 8008136:	b003      	add	sp, #12
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	3b04      	subs	r3, #4
 8008140:	2a00      	cmp	r2, #0
 8008142:	d1ce      	bne.n	80080e2 <quorem+0x9a>
 8008144:	3c01      	subs	r4, #1
 8008146:	e7c9      	b.n	80080dc <quorem+0x94>
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	3b04      	subs	r3, #4
 800814c:	2a00      	cmp	r2, #0
 800814e:	d1f0      	bne.n	8008132 <quorem+0xea>
 8008150:	3c01      	subs	r4, #1
 8008152:	e7eb      	b.n	800812c <quorem+0xe4>
 8008154:	2000      	movs	r0, #0
 8008156:	e7ee      	b.n	8008136 <quorem+0xee>

08008158 <_dtoa_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b04 	vpush	{d8-d9}
 8008160:	69c5      	ldr	r5, [r0, #28]
 8008162:	b093      	sub	sp, #76	; 0x4c
 8008164:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008168:	ec57 6b10 	vmov	r6, r7, d0
 800816c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008170:	9107      	str	r1, [sp, #28]
 8008172:	4604      	mov	r4, r0
 8008174:	920a      	str	r2, [sp, #40]	; 0x28
 8008176:	930d      	str	r3, [sp, #52]	; 0x34
 8008178:	b975      	cbnz	r5, 8008198 <_dtoa_r+0x40>
 800817a:	2010      	movs	r0, #16
 800817c:	f000 ff36 	bl	8008fec <malloc>
 8008180:	4602      	mov	r2, r0
 8008182:	61e0      	str	r0, [r4, #28]
 8008184:	b920      	cbnz	r0, 8008190 <_dtoa_r+0x38>
 8008186:	4bae      	ldr	r3, [pc, #696]	; (8008440 <_dtoa_r+0x2e8>)
 8008188:	21ef      	movs	r1, #239	; 0xef
 800818a:	48ae      	ldr	r0, [pc, #696]	; (8008444 <_dtoa_r+0x2ec>)
 800818c:	f001 fcee 	bl	8009b6c <__assert_func>
 8008190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008194:	6005      	str	r5, [r0, #0]
 8008196:	60c5      	str	r5, [r0, #12]
 8008198:	69e3      	ldr	r3, [r4, #28]
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	b151      	cbz	r1, 80081b4 <_dtoa_r+0x5c>
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	604a      	str	r2, [r1, #4]
 80081a2:	2301      	movs	r3, #1
 80081a4:	4093      	lsls	r3, r2
 80081a6:	608b      	str	r3, [r1, #8]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 f8c1 	bl	8009330 <_Bfree>
 80081ae:	69e3      	ldr	r3, [r4, #28]
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	1e3b      	subs	r3, r7, #0
 80081b6:	bfbb      	ittet	lt
 80081b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	9303      	strlt	r3, [sp, #12]
 80081be:	2300      	movge	r3, #0
 80081c0:	2201      	movlt	r2, #1
 80081c2:	bfac      	ite	ge
 80081c4:	f8c8 3000 	strge.w	r3, [r8]
 80081c8:	f8c8 2000 	strlt.w	r2, [r8]
 80081cc:	4b9e      	ldr	r3, [pc, #632]	; (8008448 <_dtoa_r+0x2f0>)
 80081ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081d2:	ea33 0308 	bics.w	r3, r3, r8
 80081d6:	d11b      	bne.n	8008210 <_dtoa_r+0xb8>
 80081d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081da:	f242 730f 	movw	r3, #9999	; 0x270f
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081e4:	4333      	orrs	r3, r6
 80081e6:	f000 8593 	beq.w	8008d10 <_dtoa_r+0xbb8>
 80081ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ec:	b963      	cbnz	r3, 8008208 <_dtoa_r+0xb0>
 80081ee:	4b97      	ldr	r3, [pc, #604]	; (800844c <_dtoa_r+0x2f4>)
 80081f0:	e027      	b.n	8008242 <_dtoa_r+0xea>
 80081f2:	4b97      	ldr	r3, [pc, #604]	; (8008450 <_dtoa_r+0x2f8>)
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	9800      	ldr	r0, [sp, #0]
 80081fe:	b013      	add	sp, #76	; 0x4c
 8008200:	ecbd 8b04 	vpop	{d8-d9}
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008208:	4b90      	ldr	r3, [pc, #576]	; (800844c <_dtoa_r+0x2f4>)
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	3303      	adds	r3, #3
 800820e:	e7f3      	b.n	80081f8 <_dtoa_r+0xa0>
 8008210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	ec51 0b17 	vmov	r0, r1, d7
 800821a:	eeb0 8a47 	vmov.f32	s16, s14
 800821e:	eef0 8a67 	vmov.f32	s17, s15
 8008222:	2300      	movs	r3, #0
 8008224:	f7f8 fc62 	bl	8000aec <__aeabi_dcmpeq>
 8008228:	4681      	mov	r9, r0
 800822a:	b160      	cbz	r0, 8008246 <_dtoa_r+0xee>
 800822c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800822e:	2301      	movs	r3, #1
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8568 	beq.w	8008d0a <_dtoa_r+0xbb2>
 800823a:	4b86      	ldr	r3, [pc, #536]	; (8008454 <_dtoa_r+0x2fc>)
 800823c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	3b01      	subs	r3, #1
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	e7da      	b.n	80081fc <_dtoa_r+0xa4>
 8008246:	aa10      	add	r2, sp, #64	; 0x40
 8008248:	a911      	add	r1, sp, #68	; 0x44
 800824a:	4620      	mov	r0, r4
 800824c:	eeb0 0a48 	vmov.f32	s0, s16
 8008250:	eef0 0a68 	vmov.f32	s1, s17
 8008254:	f001 fb4e 	bl	80098f4 <__d2b>
 8008258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800825c:	4682      	mov	sl, r0
 800825e:	2d00      	cmp	r5, #0
 8008260:	d07f      	beq.n	8008362 <_dtoa_r+0x20a>
 8008262:	ee18 3a90 	vmov	r3, s17
 8008266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800826a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800826e:	ec51 0b18 	vmov	r0, r1, d8
 8008272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800827a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800827e:	4619      	mov	r1, r3
 8008280:	2200      	movs	r2, #0
 8008282:	4b75      	ldr	r3, [pc, #468]	; (8008458 <_dtoa_r+0x300>)
 8008284:	f7f8 f812 	bl	80002ac <__aeabi_dsub>
 8008288:	a367      	add	r3, pc, #412	; (adr r3, 8008428 <_dtoa_r+0x2d0>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f9c5 	bl	800061c <__aeabi_dmul>
 8008292:	a367      	add	r3, pc, #412	; (adr r3, 8008430 <_dtoa_r+0x2d8>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f8 f80a 	bl	80002b0 <__adddf3>
 800829c:	4606      	mov	r6, r0
 800829e:	4628      	mov	r0, r5
 80082a0:	460f      	mov	r7, r1
 80082a2:	f7f8 f951 	bl	8000548 <__aeabi_i2d>
 80082a6:	a364      	add	r3, pc, #400	; (adr r3, 8008438 <_dtoa_r+0x2e0>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f8 f9b6 	bl	800061c <__aeabi_dmul>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f7 fffa 	bl	80002b0 <__adddf3>
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	f7f8 fc5c 	bl	8000b7c <__aeabi_d2iz>
 80082c4:	2200      	movs	r2, #0
 80082c6:	4683      	mov	fp, r0
 80082c8:	2300      	movs	r3, #0
 80082ca:	4630      	mov	r0, r6
 80082cc:	4639      	mov	r1, r7
 80082ce:	f7f8 fc17 	bl	8000b00 <__aeabi_dcmplt>
 80082d2:	b148      	cbz	r0, 80082e8 <_dtoa_r+0x190>
 80082d4:	4658      	mov	r0, fp
 80082d6:	f7f8 f937 	bl	8000548 <__aeabi_i2d>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	f7f8 fc05 	bl	8000aec <__aeabi_dcmpeq>
 80082e2:	b908      	cbnz	r0, 80082e8 <_dtoa_r+0x190>
 80082e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80082e8:	f1bb 0f16 	cmp.w	fp, #22
 80082ec:	d857      	bhi.n	800839e <_dtoa_r+0x246>
 80082ee:	4b5b      	ldr	r3, [pc, #364]	; (800845c <_dtoa_r+0x304>)
 80082f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	ec51 0b18 	vmov	r0, r1, d8
 80082fc:	f7f8 fc00 	bl	8000b00 <__aeabi_dcmplt>
 8008300:	2800      	cmp	r0, #0
 8008302:	d04e      	beq.n	80083a2 <_dtoa_r+0x24a>
 8008304:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008308:	2300      	movs	r3, #0
 800830a:	930c      	str	r3, [sp, #48]	; 0x30
 800830c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800830e:	1b5b      	subs	r3, r3, r5
 8008310:	1e5a      	subs	r2, r3, #1
 8008312:	bf45      	ittet	mi
 8008314:	f1c3 0301 	rsbmi	r3, r3, #1
 8008318:	9305      	strmi	r3, [sp, #20]
 800831a:	2300      	movpl	r3, #0
 800831c:	2300      	movmi	r3, #0
 800831e:	9206      	str	r2, [sp, #24]
 8008320:	bf54      	ite	pl
 8008322:	9305      	strpl	r3, [sp, #20]
 8008324:	9306      	strmi	r3, [sp, #24]
 8008326:	f1bb 0f00 	cmp.w	fp, #0
 800832a:	db3c      	blt.n	80083a6 <_dtoa_r+0x24e>
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008332:	445b      	add	r3, fp
 8008334:	9306      	str	r3, [sp, #24]
 8008336:	2300      	movs	r3, #0
 8008338:	9308      	str	r3, [sp, #32]
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	2b09      	cmp	r3, #9
 800833e:	d868      	bhi.n	8008412 <_dtoa_r+0x2ba>
 8008340:	2b05      	cmp	r3, #5
 8008342:	bfc4      	itt	gt
 8008344:	3b04      	subgt	r3, #4
 8008346:	9307      	strgt	r3, [sp, #28]
 8008348:	9b07      	ldr	r3, [sp, #28]
 800834a:	f1a3 0302 	sub.w	r3, r3, #2
 800834e:	bfcc      	ite	gt
 8008350:	2500      	movgt	r5, #0
 8008352:	2501      	movle	r5, #1
 8008354:	2b03      	cmp	r3, #3
 8008356:	f200 8085 	bhi.w	8008464 <_dtoa_r+0x30c>
 800835a:	e8df f003 	tbb	[pc, r3]
 800835e:	3b2e      	.short	0x3b2e
 8008360:	5839      	.short	0x5839
 8008362:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008366:	441d      	add	r5, r3
 8008368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800836c:	2b20      	cmp	r3, #32
 800836e:	bfc1      	itttt	gt
 8008370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008374:	fa08 f803 	lslgt.w	r8, r8, r3
 8008378:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800837c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008380:	bfd6      	itet	le
 8008382:	f1c3 0320 	rsble	r3, r3, #32
 8008386:	ea48 0003 	orrgt.w	r0, r8, r3
 800838a:	fa06 f003 	lslle.w	r0, r6, r3
 800838e:	f7f8 f8cb 	bl	8000528 <__aeabi_ui2d>
 8008392:	2201      	movs	r2, #1
 8008394:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008398:	3d01      	subs	r5, #1
 800839a:	920e      	str	r2, [sp, #56]	; 0x38
 800839c:	e76f      	b.n	800827e <_dtoa_r+0x126>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7b3      	b.n	800830a <_dtoa_r+0x1b2>
 80083a2:	900c      	str	r0, [sp, #48]	; 0x30
 80083a4:	e7b2      	b.n	800830c <_dtoa_r+0x1b4>
 80083a6:	9b05      	ldr	r3, [sp, #20]
 80083a8:	eba3 030b 	sub.w	r3, r3, fp
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	f1cb 0300 	rsb	r3, fp, #0
 80083b2:	9308      	str	r3, [sp, #32]
 80083b4:	2300      	movs	r3, #0
 80083b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083b8:	e7bf      	b.n	800833a <_dtoa_r+0x1e2>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9309      	str	r3, [sp, #36]	; 0x24
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dc52      	bgt.n	800846a <_dtoa_r+0x312>
 80083c4:	2301      	movs	r3, #1
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	461a      	mov	r2, r3
 80083cc:	920a      	str	r2, [sp, #40]	; 0x28
 80083ce:	e00b      	b.n	80083e8 <_dtoa_r+0x290>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7f3      	b.n	80083bc <_dtoa_r+0x264>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	445b      	add	r3, fp
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	3301      	adds	r3, #1
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	bfb8      	it	lt
 80083e6:	2301      	movlt	r3, #1
 80083e8:	69e0      	ldr	r0, [r4, #28]
 80083ea:	2100      	movs	r1, #0
 80083ec:	2204      	movs	r2, #4
 80083ee:	f102 0614 	add.w	r6, r2, #20
 80083f2:	429e      	cmp	r6, r3
 80083f4:	d93d      	bls.n	8008472 <_dtoa_r+0x31a>
 80083f6:	6041      	str	r1, [r0, #4]
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 ff59 	bl	80092b0 <_Balloc>
 80083fe:	9000      	str	r0, [sp, #0]
 8008400:	2800      	cmp	r0, #0
 8008402:	d139      	bne.n	8008478 <_dtoa_r+0x320>
 8008404:	4b16      	ldr	r3, [pc, #88]	; (8008460 <_dtoa_r+0x308>)
 8008406:	4602      	mov	r2, r0
 8008408:	f240 11af 	movw	r1, #431	; 0x1af
 800840c:	e6bd      	b.n	800818a <_dtoa_r+0x32>
 800840e:	2301      	movs	r3, #1
 8008410:	e7e1      	b.n	80083d6 <_dtoa_r+0x27e>
 8008412:	2501      	movs	r5, #1
 8008414:	2300      	movs	r3, #0
 8008416:	9307      	str	r3, [sp, #28]
 8008418:	9509      	str	r5, [sp, #36]	; 0x24
 800841a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	2200      	movs	r2, #0
 8008424:	2312      	movs	r3, #18
 8008426:	e7d1      	b.n	80083cc <_dtoa_r+0x274>
 8008428:	636f4361 	.word	0x636f4361
 800842c:	3fd287a7 	.word	0x3fd287a7
 8008430:	8b60c8b3 	.word	0x8b60c8b3
 8008434:	3fc68a28 	.word	0x3fc68a28
 8008438:	509f79fb 	.word	0x509f79fb
 800843c:	3fd34413 	.word	0x3fd34413
 8008440:	0800abf1 	.word	0x0800abf1
 8008444:	0800ac08 	.word	0x0800ac08
 8008448:	7ff00000 	.word	0x7ff00000
 800844c:	0800abed 	.word	0x0800abed
 8008450:	0800abe4 	.word	0x0800abe4
 8008454:	0800abc1 	.word	0x0800abc1
 8008458:	3ff80000 	.word	0x3ff80000
 800845c:	0800ad08 	.word	0x0800ad08
 8008460:	0800ac60 	.word	0x0800ac60
 8008464:	2301      	movs	r3, #1
 8008466:	9309      	str	r3, [sp, #36]	; 0x24
 8008468:	e7d7      	b.n	800841a <_dtoa_r+0x2c2>
 800846a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	e7ba      	b.n	80083e8 <_dtoa_r+0x290>
 8008472:	3101      	adds	r1, #1
 8008474:	0052      	lsls	r2, r2, #1
 8008476:	e7ba      	b.n	80083ee <_dtoa_r+0x296>
 8008478:	69e3      	ldr	r3, [r4, #28]
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	2b0e      	cmp	r3, #14
 8008482:	f200 80a8 	bhi.w	80085d6 <_dtoa_r+0x47e>
 8008486:	2d00      	cmp	r5, #0
 8008488:	f000 80a5 	beq.w	80085d6 <_dtoa_r+0x47e>
 800848c:	f1bb 0f00 	cmp.w	fp, #0
 8008490:	dd38      	ble.n	8008504 <_dtoa_r+0x3ac>
 8008492:	4bc0      	ldr	r3, [pc, #768]	; (8008794 <_dtoa_r+0x63c>)
 8008494:	f00b 020f 	and.w	r2, fp, #15
 8008498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800849c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80084a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80084a8:	d019      	beq.n	80084de <_dtoa_r+0x386>
 80084aa:	4bbb      	ldr	r3, [pc, #748]	; (8008798 <_dtoa_r+0x640>)
 80084ac:	ec51 0b18 	vmov	r0, r1, d8
 80084b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084b4:	f7f8 f9dc 	bl	8000870 <__aeabi_ddiv>
 80084b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084bc:	f008 080f 	and.w	r8, r8, #15
 80084c0:	2503      	movs	r5, #3
 80084c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008798 <_dtoa_r+0x640>
 80084c6:	f1b8 0f00 	cmp.w	r8, #0
 80084ca:	d10a      	bne.n	80084e2 <_dtoa_r+0x38a>
 80084cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d0:	4632      	mov	r2, r6
 80084d2:	463b      	mov	r3, r7
 80084d4:	f7f8 f9cc 	bl	8000870 <__aeabi_ddiv>
 80084d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084dc:	e02b      	b.n	8008536 <_dtoa_r+0x3de>
 80084de:	2502      	movs	r5, #2
 80084e0:	e7ef      	b.n	80084c2 <_dtoa_r+0x36a>
 80084e2:	f018 0f01 	tst.w	r8, #1
 80084e6:	d008      	beq.n	80084fa <_dtoa_r+0x3a2>
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80084f0:	f7f8 f894 	bl	800061c <__aeabi_dmul>
 80084f4:	3501      	adds	r5, #1
 80084f6:	4606      	mov	r6, r0
 80084f8:	460f      	mov	r7, r1
 80084fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084fe:	f109 0908 	add.w	r9, r9, #8
 8008502:	e7e0      	b.n	80084c6 <_dtoa_r+0x36e>
 8008504:	f000 809f 	beq.w	8008646 <_dtoa_r+0x4ee>
 8008508:	f1cb 0600 	rsb	r6, fp, #0
 800850c:	4ba1      	ldr	r3, [pc, #644]	; (8008794 <_dtoa_r+0x63c>)
 800850e:	4fa2      	ldr	r7, [pc, #648]	; (8008798 <_dtoa_r+0x640>)
 8008510:	f006 020f 	and.w	r2, r6, #15
 8008514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	ec51 0b18 	vmov	r0, r1, d8
 8008520:	f7f8 f87c 	bl	800061c <__aeabi_dmul>
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	1136      	asrs	r6, r6, #4
 800852a:	2300      	movs	r3, #0
 800852c:	2502      	movs	r5, #2
 800852e:	2e00      	cmp	r6, #0
 8008530:	d17e      	bne.n	8008630 <_dtoa_r+0x4d8>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1d0      	bne.n	80084d8 <_dtoa_r+0x380>
 8008536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008538:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8084 	beq.w	800864a <_dtoa_r+0x4f2>
 8008542:	4b96      	ldr	r3, [pc, #600]	; (800879c <_dtoa_r+0x644>)
 8008544:	2200      	movs	r2, #0
 8008546:	4640      	mov	r0, r8
 8008548:	4649      	mov	r1, r9
 800854a:	f7f8 fad9 	bl	8000b00 <__aeabi_dcmplt>
 800854e:	2800      	cmp	r0, #0
 8008550:	d07b      	beq.n	800864a <_dtoa_r+0x4f2>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d078      	beq.n	800864a <_dtoa_r+0x4f2>
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd39      	ble.n	80085d2 <_dtoa_r+0x47a>
 800855e:	4b90      	ldr	r3, [pc, #576]	; (80087a0 <_dtoa_r+0x648>)
 8008560:	2200      	movs	r2, #0
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f8 f859 	bl	800061c <__aeabi_dmul>
 800856a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856e:	9e01      	ldr	r6, [sp, #4]
 8008570:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008574:	3501      	adds	r5, #1
 8008576:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800857a:	4628      	mov	r0, r5
 800857c:	f7f7 ffe4 	bl	8000548 <__aeabi_i2d>
 8008580:	4642      	mov	r2, r8
 8008582:	464b      	mov	r3, r9
 8008584:	f7f8 f84a 	bl	800061c <__aeabi_dmul>
 8008588:	4b86      	ldr	r3, [pc, #536]	; (80087a4 <_dtoa_r+0x64c>)
 800858a:	2200      	movs	r2, #0
 800858c:	f7f7 fe90 	bl	80002b0 <__adddf3>
 8008590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	2e00      	cmp	r6, #0
 800859c:	d158      	bne.n	8008650 <_dtoa_r+0x4f8>
 800859e:	4b82      	ldr	r3, [pc, #520]	; (80087a8 <_dtoa_r+0x650>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f7 fe81 	bl	80002ac <__aeabi_dsub>
 80085aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ae:	4680      	mov	r8, r0
 80085b0:	4689      	mov	r9, r1
 80085b2:	f7f8 fac3 	bl	8000b3c <__aeabi_dcmpgt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f040 8296 	bne.w	8008ae8 <_dtoa_r+0x990>
 80085bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085c0:	4640      	mov	r0, r8
 80085c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085c6:	4649      	mov	r1, r9
 80085c8:	f7f8 fa9a 	bl	8000b00 <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f040 8289 	bne.w	8008ae4 <_dtoa_r+0x98c>
 80085d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80085d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f2c0 814e 	blt.w	800887a <_dtoa_r+0x722>
 80085de:	f1bb 0f0e 	cmp.w	fp, #14
 80085e2:	f300 814a 	bgt.w	800887a <_dtoa_r+0x722>
 80085e6:	4b6b      	ldr	r3, [pc, #428]	; (8008794 <_dtoa_r+0x63c>)
 80085e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f280 80dc 	bge.w	80087b0 <_dtoa_r+0x658>
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f300 80d8 	bgt.w	80087b0 <_dtoa_r+0x658>
 8008600:	f040 826f 	bne.w	8008ae2 <_dtoa_r+0x98a>
 8008604:	4b68      	ldr	r3, [pc, #416]	; (80087a8 <_dtoa_r+0x650>)
 8008606:	2200      	movs	r2, #0
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f8 f806 	bl	800061c <__aeabi_dmul>
 8008610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008614:	f7f8 fa88 	bl	8000b28 <__aeabi_dcmpge>
 8008618:	9e04      	ldr	r6, [sp, #16]
 800861a:	4637      	mov	r7, r6
 800861c:	2800      	cmp	r0, #0
 800861e:	f040 8245 	bne.w	8008aac <_dtoa_r+0x954>
 8008622:	9d00      	ldr	r5, [sp, #0]
 8008624:	2331      	movs	r3, #49	; 0x31
 8008626:	f805 3b01 	strb.w	r3, [r5], #1
 800862a:	f10b 0b01 	add.w	fp, fp, #1
 800862e:	e241      	b.n	8008ab4 <_dtoa_r+0x95c>
 8008630:	07f2      	lsls	r2, r6, #31
 8008632:	d505      	bpl.n	8008640 <_dtoa_r+0x4e8>
 8008634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008638:	f7f7 fff0 	bl	800061c <__aeabi_dmul>
 800863c:	3501      	adds	r5, #1
 800863e:	2301      	movs	r3, #1
 8008640:	1076      	asrs	r6, r6, #1
 8008642:	3708      	adds	r7, #8
 8008644:	e773      	b.n	800852e <_dtoa_r+0x3d6>
 8008646:	2502      	movs	r5, #2
 8008648:	e775      	b.n	8008536 <_dtoa_r+0x3de>
 800864a:	9e04      	ldr	r6, [sp, #16]
 800864c:	465f      	mov	r7, fp
 800864e:	e792      	b.n	8008576 <_dtoa_r+0x41e>
 8008650:	9900      	ldr	r1, [sp, #0]
 8008652:	4b50      	ldr	r3, [pc, #320]	; (8008794 <_dtoa_r+0x63c>)
 8008654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008658:	4431      	add	r1, r6
 800865a:	9102      	str	r1, [sp, #8]
 800865c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800865e:	eeb0 9a47 	vmov.f32	s18, s14
 8008662:	eef0 9a67 	vmov.f32	s19, s15
 8008666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800866a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800866e:	2900      	cmp	r1, #0
 8008670:	d044      	beq.n	80086fc <_dtoa_r+0x5a4>
 8008672:	494e      	ldr	r1, [pc, #312]	; (80087ac <_dtoa_r+0x654>)
 8008674:	2000      	movs	r0, #0
 8008676:	f7f8 f8fb 	bl	8000870 <__aeabi_ddiv>
 800867a:	ec53 2b19 	vmov	r2, r3, d9
 800867e:	f7f7 fe15 	bl	80002ac <__aeabi_dsub>
 8008682:	9d00      	ldr	r5, [sp, #0]
 8008684:	ec41 0b19 	vmov	d9, r0, r1
 8008688:	4649      	mov	r1, r9
 800868a:	4640      	mov	r0, r8
 800868c:	f7f8 fa76 	bl	8000b7c <__aeabi_d2iz>
 8008690:	4606      	mov	r6, r0
 8008692:	f7f7 ff59 	bl	8000548 <__aeabi_i2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 fe05 	bl	80002ac <__aeabi_dsub>
 80086a2:	3630      	adds	r6, #48	; 0x30
 80086a4:	f805 6b01 	strb.w	r6, [r5], #1
 80086a8:	ec53 2b19 	vmov	r2, r3, d9
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	f7f8 fa26 	bl	8000b00 <__aeabi_dcmplt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d164      	bne.n	8008782 <_dtoa_r+0x62a>
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	4937      	ldr	r1, [pc, #220]	; (800879c <_dtoa_r+0x644>)
 80086be:	2000      	movs	r0, #0
 80086c0:	f7f7 fdf4 	bl	80002ac <__aeabi_dsub>
 80086c4:	ec53 2b19 	vmov	r2, r3, d9
 80086c8:	f7f8 fa1a 	bl	8000b00 <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f040 80b6 	bne.w	800883e <_dtoa_r+0x6e6>
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	429d      	cmp	r5, r3
 80086d6:	f43f af7c 	beq.w	80085d2 <_dtoa_r+0x47a>
 80086da:	4b31      	ldr	r3, [pc, #196]	; (80087a0 <_dtoa_r+0x648>)
 80086dc:	ec51 0b19 	vmov	r0, r1, d9
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 ff9b 	bl	800061c <__aeabi_dmul>
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <_dtoa_r+0x648>)
 80086e8:	ec41 0b19 	vmov	d9, r0, r1
 80086ec:	2200      	movs	r2, #0
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	f7f7 ff93 	bl	800061c <__aeabi_dmul>
 80086f6:	4680      	mov	r8, r0
 80086f8:	4689      	mov	r9, r1
 80086fa:	e7c5      	b.n	8008688 <_dtoa_r+0x530>
 80086fc:	ec51 0b17 	vmov	r0, r1, d7
 8008700:	f7f7 ff8c 	bl	800061c <__aeabi_dmul>
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	9d00      	ldr	r5, [sp, #0]
 8008708:	930f      	str	r3, [sp, #60]	; 0x3c
 800870a:	ec41 0b19 	vmov	d9, r0, r1
 800870e:	4649      	mov	r1, r9
 8008710:	4640      	mov	r0, r8
 8008712:	f7f8 fa33 	bl	8000b7c <__aeabi_d2iz>
 8008716:	4606      	mov	r6, r0
 8008718:	f7f7 ff16 	bl	8000548 <__aeabi_i2d>
 800871c:	3630      	adds	r6, #48	; 0x30
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	f7f7 fdc1 	bl	80002ac <__aeabi_dsub>
 800872a:	f805 6b01 	strb.w	r6, [r5], #1
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	429d      	cmp	r5, r3
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	d124      	bne.n	8008786 <_dtoa_r+0x62e>
 800873c:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <_dtoa_r+0x654>)
 800873e:	ec51 0b19 	vmov	r0, r1, d9
 8008742:	f7f7 fdb5 	bl	80002b0 <__adddf3>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	f7f8 f9f5 	bl	8000b3c <__aeabi_dcmpgt>
 8008752:	2800      	cmp	r0, #0
 8008754:	d173      	bne.n	800883e <_dtoa_r+0x6e6>
 8008756:	ec53 2b19 	vmov	r2, r3, d9
 800875a:	4914      	ldr	r1, [pc, #80]	; (80087ac <_dtoa_r+0x654>)
 800875c:	2000      	movs	r0, #0
 800875e:	f7f7 fda5 	bl	80002ac <__aeabi_dsub>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f8 f9c9 	bl	8000b00 <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af2f 	beq.w	80085d2 <_dtoa_r+0x47a>
 8008774:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008776:	1e6b      	subs	r3, r5, #1
 8008778:	930f      	str	r3, [sp, #60]	; 0x3c
 800877a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	d0f8      	beq.n	8008774 <_dtoa_r+0x61c>
 8008782:	46bb      	mov	fp, r7
 8008784:	e04a      	b.n	800881c <_dtoa_r+0x6c4>
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <_dtoa_r+0x648>)
 8008788:	f7f7 ff48 	bl	800061c <__aeabi_dmul>
 800878c:	4680      	mov	r8, r0
 800878e:	4689      	mov	r9, r1
 8008790:	e7bd      	b.n	800870e <_dtoa_r+0x5b6>
 8008792:	bf00      	nop
 8008794:	0800ad08 	.word	0x0800ad08
 8008798:	0800ace0 	.word	0x0800ace0
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	40240000 	.word	0x40240000
 80087a4:	401c0000 	.word	0x401c0000
 80087a8:	40140000 	.word	0x40140000
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087b4:	9d00      	ldr	r5, [sp, #0]
 80087b6:	4642      	mov	r2, r8
 80087b8:	464b      	mov	r3, r9
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f8 f857 	bl	8000870 <__aeabi_ddiv>
 80087c2:	f7f8 f9db 	bl	8000b7c <__aeabi_d2iz>
 80087c6:	9001      	str	r0, [sp, #4]
 80087c8:	f7f7 febe 	bl	8000548 <__aeabi_i2d>
 80087cc:	4642      	mov	r2, r8
 80087ce:	464b      	mov	r3, r9
 80087d0:	f7f7 ff24 	bl	800061c <__aeabi_dmul>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f7 fd66 	bl	80002ac <__aeabi_dsub>
 80087e0:	9e01      	ldr	r6, [sp, #4]
 80087e2:	9f04      	ldr	r7, [sp, #16]
 80087e4:	3630      	adds	r6, #48	; 0x30
 80087e6:	f805 6b01 	strb.w	r6, [r5], #1
 80087ea:	9e00      	ldr	r6, [sp, #0]
 80087ec:	1bae      	subs	r6, r5, r6
 80087ee:	42b7      	cmp	r7, r6
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	d134      	bne.n	8008860 <_dtoa_r+0x708>
 80087f6:	f7f7 fd5b 	bl	80002b0 <__adddf3>
 80087fa:	4642      	mov	r2, r8
 80087fc:	464b      	mov	r3, r9
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	f7f8 f99b 	bl	8000b3c <__aeabi_dcmpgt>
 8008806:	b9c8      	cbnz	r0, 800883c <_dtoa_r+0x6e4>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f8 f96c 	bl	8000aec <__aeabi_dcmpeq>
 8008814:	b110      	cbz	r0, 800881c <_dtoa_r+0x6c4>
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	07db      	lsls	r3, r3, #31
 800881a:	d40f      	bmi.n	800883c <_dtoa_r+0x6e4>
 800881c:	4651      	mov	r1, sl
 800881e:	4620      	mov	r0, r4
 8008820:	f000 fd86 	bl	8009330 <_Bfree>
 8008824:	2300      	movs	r3, #0
 8008826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008828:	702b      	strb	r3, [r5, #0]
 800882a:	f10b 0301 	add.w	r3, fp, #1
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008832:	2b00      	cmp	r3, #0
 8008834:	f43f ace2 	beq.w	80081fc <_dtoa_r+0xa4>
 8008838:	601d      	str	r5, [r3, #0]
 800883a:	e4df      	b.n	80081fc <_dtoa_r+0xa4>
 800883c:	465f      	mov	r7, fp
 800883e:	462b      	mov	r3, r5
 8008840:	461d      	mov	r5, r3
 8008842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008846:	2a39      	cmp	r2, #57	; 0x39
 8008848:	d106      	bne.n	8008858 <_dtoa_r+0x700>
 800884a:	9a00      	ldr	r2, [sp, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d1f7      	bne.n	8008840 <_dtoa_r+0x6e8>
 8008850:	9900      	ldr	r1, [sp, #0]
 8008852:	2230      	movs	r2, #48	; 0x30
 8008854:	3701      	adds	r7, #1
 8008856:	700a      	strb	r2, [r1, #0]
 8008858:	781a      	ldrb	r2, [r3, #0]
 800885a:	3201      	adds	r2, #1
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	e790      	b.n	8008782 <_dtoa_r+0x62a>
 8008860:	4ba3      	ldr	r3, [pc, #652]	; (8008af0 <_dtoa_r+0x998>)
 8008862:	2200      	movs	r2, #0
 8008864:	f7f7 feda 	bl	800061c <__aeabi_dmul>
 8008868:	2200      	movs	r2, #0
 800886a:	2300      	movs	r3, #0
 800886c:	4606      	mov	r6, r0
 800886e:	460f      	mov	r7, r1
 8008870:	f7f8 f93c 	bl	8000aec <__aeabi_dcmpeq>
 8008874:	2800      	cmp	r0, #0
 8008876:	d09e      	beq.n	80087b6 <_dtoa_r+0x65e>
 8008878:	e7d0      	b.n	800881c <_dtoa_r+0x6c4>
 800887a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887c:	2a00      	cmp	r2, #0
 800887e:	f000 80ca 	beq.w	8008a16 <_dtoa_r+0x8be>
 8008882:	9a07      	ldr	r2, [sp, #28]
 8008884:	2a01      	cmp	r2, #1
 8008886:	f300 80ad 	bgt.w	80089e4 <_dtoa_r+0x88c>
 800888a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800888c:	2a00      	cmp	r2, #0
 800888e:	f000 80a5 	beq.w	80089dc <_dtoa_r+0x884>
 8008892:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008896:	9e08      	ldr	r6, [sp, #32]
 8008898:	9d05      	ldr	r5, [sp, #20]
 800889a:	9a05      	ldr	r2, [sp, #20]
 800889c:	441a      	add	r2, r3
 800889e:	9205      	str	r2, [sp, #20]
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	2101      	movs	r1, #1
 80088a4:	441a      	add	r2, r3
 80088a6:	4620      	mov	r0, r4
 80088a8:	9206      	str	r2, [sp, #24]
 80088aa:	f000 fdf7 	bl	800949c <__i2b>
 80088ae:	4607      	mov	r7, r0
 80088b0:	b165      	cbz	r5, 80088cc <_dtoa_r+0x774>
 80088b2:	9b06      	ldr	r3, [sp, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd09      	ble.n	80088cc <_dtoa_r+0x774>
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	9a05      	ldr	r2, [sp, #20]
 80088bc:	bfa8      	it	ge
 80088be:	462b      	movge	r3, r5
 80088c0:	1ad2      	subs	r2, r2, r3
 80088c2:	9205      	str	r2, [sp, #20]
 80088c4:	9a06      	ldr	r2, [sp, #24]
 80088c6:	1aed      	subs	r5, r5, r3
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	9306      	str	r3, [sp, #24]
 80088cc:	9b08      	ldr	r3, [sp, #32]
 80088ce:	b1f3      	cbz	r3, 800890e <_dtoa_r+0x7b6>
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80a3 	beq.w	8008a1e <_dtoa_r+0x8c6>
 80088d8:	2e00      	cmp	r6, #0
 80088da:	dd10      	ble.n	80088fe <_dtoa_r+0x7a6>
 80088dc:	4639      	mov	r1, r7
 80088de:	4632      	mov	r2, r6
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fe9b 	bl	800961c <__pow5mult>
 80088e6:	4652      	mov	r2, sl
 80088e8:	4601      	mov	r1, r0
 80088ea:	4607      	mov	r7, r0
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fdeb 	bl	80094c8 <__multiply>
 80088f2:	4651      	mov	r1, sl
 80088f4:	4680      	mov	r8, r0
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 fd1a 	bl	8009330 <_Bfree>
 80088fc:	46c2      	mov	sl, r8
 80088fe:	9b08      	ldr	r3, [sp, #32]
 8008900:	1b9a      	subs	r2, r3, r6
 8008902:	d004      	beq.n	800890e <_dtoa_r+0x7b6>
 8008904:	4651      	mov	r1, sl
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fe88 	bl	800961c <__pow5mult>
 800890c:	4682      	mov	sl, r0
 800890e:	2101      	movs	r1, #1
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fdc3 	bl	800949c <__i2b>
 8008916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008918:	2b00      	cmp	r3, #0
 800891a:	4606      	mov	r6, r0
 800891c:	f340 8081 	ble.w	8008a22 <_dtoa_r+0x8ca>
 8008920:	461a      	mov	r2, r3
 8008922:	4601      	mov	r1, r0
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fe79 	bl	800961c <__pow5mult>
 800892a:	9b07      	ldr	r3, [sp, #28]
 800892c:	2b01      	cmp	r3, #1
 800892e:	4606      	mov	r6, r0
 8008930:	dd7a      	ble.n	8008a28 <_dtoa_r+0x8d0>
 8008932:	f04f 0800 	mov.w	r8, #0
 8008936:	6933      	ldr	r3, [r6, #16]
 8008938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800893c:	6918      	ldr	r0, [r3, #16]
 800893e:	f000 fd5f 	bl	8009400 <__hi0bits>
 8008942:	f1c0 0020 	rsb	r0, r0, #32
 8008946:	9b06      	ldr	r3, [sp, #24]
 8008948:	4418      	add	r0, r3
 800894a:	f010 001f 	ands.w	r0, r0, #31
 800894e:	f000 8094 	beq.w	8008a7a <_dtoa_r+0x922>
 8008952:	f1c0 0320 	rsb	r3, r0, #32
 8008956:	2b04      	cmp	r3, #4
 8008958:	f340 8085 	ble.w	8008a66 <_dtoa_r+0x90e>
 800895c:	9b05      	ldr	r3, [sp, #20]
 800895e:	f1c0 001c 	rsb	r0, r0, #28
 8008962:	4403      	add	r3, r0
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	4403      	add	r3, r0
 800896a:	4405      	add	r5, r0
 800896c:	9306      	str	r3, [sp, #24]
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dd05      	ble.n	8008980 <_dtoa_r+0x828>
 8008974:	4651      	mov	r1, sl
 8008976:	461a      	mov	r2, r3
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fea9 	bl	80096d0 <__lshift>
 800897e:	4682      	mov	sl, r0
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	dd05      	ble.n	8008992 <_dtoa_r+0x83a>
 8008986:	4631      	mov	r1, r6
 8008988:	461a      	mov	r2, r3
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fea0 	bl	80096d0 <__lshift>
 8008990:	4606      	mov	r6, r0
 8008992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008994:	2b00      	cmp	r3, #0
 8008996:	d072      	beq.n	8008a7e <_dtoa_r+0x926>
 8008998:	4631      	mov	r1, r6
 800899a:	4650      	mov	r0, sl
 800899c:	f000 ff04 	bl	80097a8 <__mcmp>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	da6c      	bge.n	8008a7e <_dtoa_r+0x926>
 80089a4:	2300      	movs	r3, #0
 80089a6:	4651      	mov	r1, sl
 80089a8:	220a      	movs	r2, #10
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fce2 	bl	8009374 <__multadd>
 80089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80089b6:	4682      	mov	sl, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 81b0 	beq.w	8008d1e <_dtoa_r+0xbc6>
 80089be:	2300      	movs	r3, #0
 80089c0:	4639      	mov	r1, r7
 80089c2:	220a      	movs	r2, #10
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fcd5 	bl	8009374 <__multadd>
 80089ca:	9b01      	ldr	r3, [sp, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	4607      	mov	r7, r0
 80089d0:	f300 8096 	bgt.w	8008b00 <_dtoa_r+0x9a8>
 80089d4:	9b07      	ldr	r3, [sp, #28]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	dc59      	bgt.n	8008a8e <_dtoa_r+0x936>
 80089da:	e091      	b.n	8008b00 <_dtoa_r+0x9a8>
 80089dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089e2:	e758      	b.n	8008896 <_dtoa_r+0x73e>
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	1e5e      	subs	r6, r3, #1
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	42b3      	cmp	r3, r6
 80089ec:	bfbf      	itttt	lt
 80089ee:	9b08      	ldrlt	r3, [sp, #32]
 80089f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80089f2:	9608      	strlt	r6, [sp, #32]
 80089f4:	1af3      	sublt	r3, r6, r3
 80089f6:	bfb4      	ite	lt
 80089f8:	18d2      	addlt	r2, r2, r3
 80089fa:	1b9e      	subge	r6, r3, r6
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	bfbc      	itt	lt
 8008a00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a02:	2600      	movlt	r6, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bfb7      	itett	lt
 8008a08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a10:	1a9d      	sublt	r5, r3, r2
 8008a12:	2300      	movlt	r3, #0
 8008a14:	e741      	b.n	800889a <_dtoa_r+0x742>
 8008a16:	9e08      	ldr	r6, [sp, #32]
 8008a18:	9d05      	ldr	r5, [sp, #20]
 8008a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a1c:	e748      	b.n	80088b0 <_dtoa_r+0x758>
 8008a1e:	9a08      	ldr	r2, [sp, #32]
 8008a20:	e770      	b.n	8008904 <_dtoa_r+0x7ac>
 8008a22:	9b07      	ldr	r3, [sp, #28]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	dc19      	bgt.n	8008a5c <_dtoa_r+0x904>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	b9bb      	cbnz	r3, 8008a5c <_dtoa_r+0x904>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a32:	b99b      	cbnz	r3, 8008a5c <_dtoa_r+0x904>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a3a:	0d1b      	lsrs	r3, r3, #20
 8008a3c:	051b      	lsls	r3, r3, #20
 8008a3e:	b183      	cbz	r3, 8008a62 <_dtoa_r+0x90a>
 8008a40:	9b05      	ldr	r3, [sp, #20]
 8008a42:	3301      	adds	r3, #1
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	9b06      	ldr	r3, [sp, #24]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	f04f 0801 	mov.w	r8, #1
 8008a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f47f af6f 	bne.w	8008936 <_dtoa_r+0x7de>
 8008a58:	2001      	movs	r0, #1
 8008a5a:	e774      	b.n	8008946 <_dtoa_r+0x7ee>
 8008a5c:	f04f 0800 	mov.w	r8, #0
 8008a60:	e7f6      	b.n	8008a50 <_dtoa_r+0x8f8>
 8008a62:	4698      	mov	r8, r3
 8008a64:	e7f4      	b.n	8008a50 <_dtoa_r+0x8f8>
 8008a66:	d082      	beq.n	800896e <_dtoa_r+0x816>
 8008a68:	9a05      	ldr	r2, [sp, #20]
 8008a6a:	331c      	adds	r3, #28
 8008a6c:	441a      	add	r2, r3
 8008a6e:	9205      	str	r2, [sp, #20]
 8008a70:	9a06      	ldr	r2, [sp, #24]
 8008a72:	441a      	add	r2, r3
 8008a74:	441d      	add	r5, r3
 8008a76:	9206      	str	r2, [sp, #24]
 8008a78:	e779      	b.n	800896e <_dtoa_r+0x816>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	e7f4      	b.n	8008a68 <_dtoa_r+0x910>
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dc37      	bgt.n	8008af4 <_dtoa_r+0x99c>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	dd34      	ble.n	8008af4 <_dtoa_r+0x99c>
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	b963      	cbnz	r3, 8008aac <_dtoa_r+0x954>
 8008a92:	4631      	mov	r1, r6
 8008a94:	2205      	movs	r2, #5
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fc6c 	bl	8009374 <__multadd>
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	f000 fe81 	bl	80097a8 <__mcmp>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f73f adbb 	bgt.w	8008622 <_dtoa_r+0x4ca>
 8008aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aae:	9d00      	ldr	r5, [sp, #0]
 8008ab0:	ea6f 0b03 	mvn.w	fp, r3
 8008ab4:	f04f 0800 	mov.w	r8, #0
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 fc38 	bl	8009330 <_Bfree>
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	f43f aeab 	beq.w	800881c <_dtoa_r+0x6c4>
 8008ac6:	f1b8 0f00 	cmp.w	r8, #0
 8008aca:	d005      	beq.n	8008ad8 <_dtoa_r+0x980>
 8008acc:	45b8      	cmp	r8, r7
 8008ace:	d003      	beq.n	8008ad8 <_dtoa_r+0x980>
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc2c 	bl	8009330 <_Bfree>
 8008ad8:	4639      	mov	r1, r7
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fc28 	bl	8009330 <_Bfree>
 8008ae0:	e69c      	b.n	800881c <_dtoa_r+0x6c4>
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	4637      	mov	r7, r6
 8008ae6:	e7e1      	b.n	8008aac <_dtoa_r+0x954>
 8008ae8:	46bb      	mov	fp, r7
 8008aea:	4637      	mov	r7, r6
 8008aec:	e599      	b.n	8008622 <_dtoa_r+0x4ca>
 8008aee:	bf00      	nop
 8008af0:	40240000 	.word	0x40240000
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80c8 	beq.w	8008c8c <_dtoa_r+0xb34>
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	dd05      	ble.n	8008b10 <_dtoa_r+0x9b8>
 8008b04:	4639      	mov	r1, r7
 8008b06:	462a      	mov	r2, r5
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fde1 	bl	80096d0 <__lshift>
 8008b0e:	4607      	mov	r7, r0
 8008b10:	f1b8 0f00 	cmp.w	r8, #0
 8008b14:	d05b      	beq.n	8008bce <_dtoa_r+0xa76>
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fbc9 	bl	80092b0 <_Balloc>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	b928      	cbnz	r0, 8008b2e <_dtoa_r+0x9d6>
 8008b22:	4b83      	ldr	r3, [pc, #524]	; (8008d30 <_dtoa_r+0xbd8>)
 8008b24:	4602      	mov	r2, r0
 8008b26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b2a:	f7ff bb2e 	b.w	800818a <_dtoa_r+0x32>
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	3202      	adds	r2, #2
 8008b32:	0092      	lsls	r2, r2, #2
 8008b34:	f107 010c 	add.w	r1, r7, #12
 8008b38:	300c      	adds	r0, #12
 8008b3a:	f7ff fa77 	bl	800802c <memcpy>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	4629      	mov	r1, r5
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fdc4 	bl	80096d0 <__lshift>
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b52:	4413      	add	r3, r2
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	46b8      	mov	r8, r7
 8008b5e:	9306      	str	r3, [sp, #24]
 8008b60:	4607      	mov	r7, r0
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	4631      	mov	r1, r6
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4650      	mov	r0, sl
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	f7ff fa6c 	bl	8008048 <quorem>
 8008b70:	4641      	mov	r1, r8
 8008b72:	9002      	str	r0, [sp, #8]
 8008b74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b78:	4650      	mov	r0, sl
 8008b7a:	f000 fe15 	bl	80097a8 <__mcmp>
 8008b7e:	463a      	mov	r2, r7
 8008b80:	9005      	str	r0, [sp, #20]
 8008b82:	4631      	mov	r1, r6
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fe2b 	bl	80097e0 <__mdiff>
 8008b8a:	68c2      	ldr	r2, [r0, #12]
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	bb02      	cbnz	r2, 8008bd2 <_dtoa_r+0xa7a>
 8008b90:	4601      	mov	r1, r0
 8008b92:	4650      	mov	r0, sl
 8008b94:	f000 fe08 	bl	80097a8 <__mcmp>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba0:	f000 fbc6 	bl	8009330 <_Bfree>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba8:	9d04      	ldr	r5, [sp, #16]
 8008baa:	ea43 0102 	orr.w	r1, r3, r2
 8008bae:	9b06      	ldr	r3, [sp, #24]
 8008bb0:	4319      	orrs	r1, r3
 8008bb2:	d110      	bne.n	8008bd6 <_dtoa_r+0xa7e>
 8008bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bb8:	d029      	beq.n	8008c0e <_dtoa_r+0xab6>
 8008bba:	9b05      	ldr	r3, [sp, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd02      	ble.n	8008bc6 <_dtoa_r+0xa6e>
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	f883 9000 	strb.w	r9, [r3]
 8008bcc:	e774      	b.n	8008ab8 <_dtoa_r+0x960>
 8008bce:	4638      	mov	r0, r7
 8008bd0:	e7ba      	b.n	8008b48 <_dtoa_r+0x9f0>
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	e7e1      	b.n	8008b9a <_dtoa_r+0xa42>
 8008bd6:	9b05      	ldr	r3, [sp, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	db04      	blt.n	8008be6 <_dtoa_r+0xa8e>
 8008bdc:	9907      	ldr	r1, [sp, #28]
 8008bde:	430b      	orrs	r3, r1
 8008be0:	9906      	ldr	r1, [sp, #24]
 8008be2:	430b      	orrs	r3, r1
 8008be4:	d120      	bne.n	8008c28 <_dtoa_r+0xad0>
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	dded      	ble.n	8008bc6 <_dtoa_r+0xa6e>
 8008bea:	4651      	mov	r1, sl
 8008bec:	2201      	movs	r2, #1
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 fd6e 	bl	80096d0 <__lshift>
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	f000 fdd6 	bl	80097a8 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	dc03      	bgt.n	8008c08 <_dtoa_r+0xab0>
 8008c00:	d1e1      	bne.n	8008bc6 <_dtoa_r+0xa6e>
 8008c02:	f019 0f01 	tst.w	r9, #1
 8008c06:	d0de      	beq.n	8008bc6 <_dtoa_r+0xa6e>
 8008c08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c0c:	d1d8      	bne.n	8008bc0 <_dtoa_r+0xa68>
 8008c0e:	9a01      	ldr	r2, [sp, #4]
 8008c10:	2339      	movs	r3, #57	; 0x39
 8008c12:	7013      	strb	r3, [r2, #0]
 8008c14:	462b      	mov	r3, r5
 8008c16:	461d      	mov	r5, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c1e:	2a39      	cmp	r2, #57	; 0x39
 8008c20:	d06c      	beq.n	8008cfc <_dtoa_r+0xba4>
 8008c22:	3201      	adds	r2, #1
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e747      	b.n	8008ab8 <_dtoa_r+0x960>
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	dd07      	ble.n	8008c3c <_dtoa_r+0xae4>
 8008c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c30:	d0ed      	beq.n	8008c0e <_dtoa_r+0xab6>
 8008c32:	9a01      	ldr	r2, [sp, #4]
 8008c34:	f109 0301 	add.w	r3, r9, #1
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	e73d      	b.n	8008ab8 <_dtoa_r+0x960>
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	9a08      	ldr	r2, [sp, #32]
 8008c40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d043      	beq.n	8008cd0 <_dtoa_r+0xb78>
 8008c48:	4651      	mov	r1, sl
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fb90 	bl	8009374 <__multadd>
 8008c54:	45b8      	cmp	r8, r7
 8008c56:	4682      	mov	sl, r0
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	f04f 020a 	mov.w	r2, #10
 8008c60:	4641      	mov	r1, r8
 8008c62:	4620      	mov	r0, r4
 8008c64:	d107      	bne.n	8008c76 <_dtoa_r+0xb1e>
 8008c66:	f000 fb85 	bl	8009374 <__multadd>
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	3301      	adds	r3, #1
 8008c72:	9304      	str	r3, [sp, #16]
 8008c74:	e775      	b.n	8008b62 <_dtoa_r+0xa0a>
 8008c76:	f000 fb7d 	bl	8009374 <__multadd>
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	2300      	movs	r3, #0
 8008c80:	220a      	movs	r2, #10
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 fb76 	bl	8009374 <__multadd>
 8008c88:	4607      	mov	r7, r0
 8008c8a:	e7f0      	b.n	8008c6e <_dtoa_r+0xb16>
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	9d00      	ldr	r5, [sp, #0]
 8008c92:	4631      	mov	r1, r6
 8008c94:	4650      	mov	r0, sl
 8008c96:	f7ff f9d7 	bl	8008048 <quorem>
 8008c9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	f805 9b01 	strb.w	r9, [r5], #1
 8008ca4:	1aea      	subs	r2, r5, r3
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	dd07      	ble.n	8008cbc <_dtoa_r+0xb64>
 8008cac:	4651      	mov	r1, sl
 8008cae:	2300      	movs	r3, #0
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fb5e 	bl	8009374 <__multadd>
 8008cb8:	4682      	mov	sl, r0
 8008cba:	e7ea      	b.n	8008c92 <_dtoa_r+0xb3a>
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfc8      	it	gt
 8008cc2:	461d      	movgt	r5, r3
 8008cc4:	9b00      	ldr	r3, [sp, #0]
 8008cc6:	bfd8      	it	le
 8008cc8:	2501      	movle	r5, #1
 8008cca:	441d      	add	r5, r3
 8008ccc:	f04f 0800 	mov.w	r8, #0
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fcfb 	bl	80096d0 <__lshift>
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f000 fd63 	bl	80097a8 <__mcmp>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	dc96      	bgt.n	8008c14 <_dtoa_r+0xabc>
 8008ce6:	d102      	bne.n	8008cee <_dtoa_r+0xb96>
 8008ce8:	f019 0f01 	tst.w	r9, #1
 8008cec:	d192      	bne.n	8008c14 <_dtoa_r+0xabc>
 8008cee:	462b      	mov	r3, r5
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf6:	2a30      	cmp	r2, #48	; 0x30
 8008cf8:	d0fa      	beq.n	8008cf0 <_dtoa_r+0xb98>
 8008cfa:	e6dd      	b.n	8008ab8 <_dtoa_r+0x960>
 8008cfc:	9a00      	ldr	r2, [sp, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d189      	bne.n	8008c16 <_dtoa_r+0xabe>
 8008d02:	f10b 0b01 	add.w	fp, fp, #1
 8008d06:	2331      	movs	r3, #49	; 0x31
 8008d08:	e796      	b.n	8008c38 <_dtoa_r+0xae0>
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <_dtoa_r+0xbdc>)
 8008d0c:	f7ff ba99 	b.w	8008242 <_dtoa_r+0xea>
 8008d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f47f aa6d 	bne.w	80081f2 <_dtoa_r+0x9a>
 8008d18:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <_dtoa_r+0xbe0>)
 8008d1a:	f7ff ba92 	b.w	8008242 <_dtoa_r+0xea>
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dcb5      	bgt.n	8008c90 <_dtoa_r+0xb38>
 8008d24:	9b07      	ldr	r3, [sp, #28]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f73f aeb1 	bgt.w	8008a8e <_dtoa_r+0x936>
 8008d2c:	e7b0      	b.n	8008c90 <_dtoa_r+0xb38>
 8008d2e:	bf00      	nop
 8008d30:	0800ac60 	.word	0x0800ac60
 8008d34:	0800abc0 	.word	0x0800abc0
 8008d38:	0800abe4 	.word	0x0800abe4

08008d3c <__ssputs_r>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	688e      	ldr	r6, [r1, #8]
 8008d42:	461f      	mov	r7, r3
 8008d44:	42be      	cmp	r6, r7
 8008d46:	680b      	ldr	r3, [r1, #0]
 8008d48:	4682      	mov	sl, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	4690      	mov	r8, r2
 8008d4e:	d82c      	bhi.n	8008daa <__ssputs_r+0x6e>
 8008d50:	898a      	ldrh	r2, [r1, #12]
 8008d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d56:	d026      	beq.n	8008da6 <__ssputs_r+0x6a>
 8008d58:	6965      	ldr	r5, [r4, #20]
 8008d5a:	6909      	ldr	r1, [r1, #16]
 8008d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d60:	eba3 0901 	sub.w	r9, r3, r1
 8008d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d68:	1c7b      	adds	r3, r7, #1
 8008d6a:	444b      	add	r3, r9
 8008d6c:	106d      	asrs	r5, r5, #1
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	bf38      	it	cc
 8008d72:	461d      	movcc	r5, r3
 8008d74:	0553      	lsls	r3, r2, #21
 8008d76:	d527      	bpl.n	8008dc8 <__ssputs_r+0x8c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f000 f95f 	bl	800903c <_malloc_r>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	b360      	cbz	r0, 8008ddc <__ssputs_r+0xa0>
 8008d82:	6921      	ldr	r1, [r4, #16]
 8008d84:	464a      	mov	r2, r9
 8008d86:	f7ff f951 	bl	800802c <memcpy>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	6126      	str	r6, [r4, #16]
 8008d98:	6165      	str	r5, [r4, #20]
 8008d9a:	444e      	add	r6, r9
 8008d9c:	eba5 0509 	sub.w	r5, r5, r9
 8008da0:	6026      	str	r6, [r4, #0]
 8008da2:	60a5      	str	r5, [r4, #8]
 8008da4:	463e      	mov	r6, r7
 8008da6:	42be      	cmp	r6, r7
 8008da8:	d900      	bls.n	8008dac <__ssputs_r+0x70>
 8008daa:	463e      	mov	r6, r7
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	4632      	mov	r2, r6
 8008db0:	4641      	mov	r1, r8
 8008db2:	f000 fe6b 	bl	8009a8c <memmove>
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	1b9b      	subs	r3, r3, r6
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	4433      	add	r3, r6
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	462a      	mov	r2, r5
 8008dca:	f000 fe30 	bl	8009a2e <_realloc_r>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1e0      	bne.n	8008d96 <__ssputs_r+0x5a>
 8008dd4:	6921      	ldr	r1, [r4, #16]
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f000 fefc 	bl	8009bd4 <_free_r>
 8008ddc:	230c      	movs	r3, #12
 8008dde:	f8ca 3000 	str.w	r3, [sl]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dee:	e7e9      	b.n	8008dc4 <__ssputs_r+0x88>

08008df0 <_svfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	4698      	mov	r8, r3
 8008df6:	898b      	ldrh	r3, [r1, #12]
 8008df8:	061b      	lsls	r3, r3, #24
 8008dfa:	b09d      	sub	sp, #116	; 0x74
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	d50e      	bpl.n	8008e22 <_svfiprintf_r+0x32>
 8008e04:	690b      	ldr	r3, [r1, #16]
 8008e06:	b963      	cbnz	r3, 8008e22 <_svfiprintf_r+0x32>
 8008e08:	2140      	movs	r1, #64	; 0x40
 8008e0a:	f000 f917 	bl	800903c <_malloc_r>
 8008e0e:	6028      	str	r0, [r5, #0]
 8008e10:	6128      	str	r0, [r5, #16]
 8008e12:	b920      	cbnz	r0, 8008e1e <_svfiprintf_r+0x2e>
 8008e14:	230c      	movs	r3, #12
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e1c:	e0d0      	b.n	8008fc0 <_svfiprintf_r+0x1d0>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	616b      	str	r3, [r5, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	2320      	movs	r3, #32
 8008e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e30:	2330      	movs	r3, #48	; 0x30
 8008e32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fd8 <_svfiprintf_r+0x1e8>
 8008e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e3a:	f04f 0901 	mov.w	r9, #1
 8008e3e:	4623      	mov	r3, r4
 8008e40:	469a      	mov	sl, r3
 8008e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e46:	b10a      	cbz	r2, 8008e4c <_svfiprintf_r+0x5c>
 8008e48:	2a25      	cmp	r2, #37	; 0x25
 8008e4a:	d1f9      	bne.n	8008e40 <_svfiprintf_r+0x50>
 8008e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e50:	d00b      	beq.n	8008e6a <_svfiprintf_r+0x7a>
 8008e52:	465b      	mov	r3, fp
 8008e54:	4622      	mov	r2, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff ff6f 	bl	8008d3c <__ssputs_r>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f000 80a9 	beq.w	8008fb6 <_svfiprintf_r+0x1c6>
 8008e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e66:	445a      	add	r2, fp
 8008e68:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80a1 	beq.w	8008fb6 <_svfiprintf_r+0x1c6>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e7e:	f10a 0a01 	add.w	sl, sl, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8c:	4654      	mov	r4, sl
 8008e8e:	2205      	movs	r2, #5
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	4850      	ldr	r0, [pc, #320]	; (8008fd8 <_svfiprintf_r+0x1e8>)
 8008e96:	f7f7 f9a3 	bl	80001e0 <memchr>
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	b9d8      	cbnz	r0, 8008ed6 <_svfiprintf_r+0xe6>
 8008e9e:	06d0      	lsls	r0, r2, #27
 8008ea0:	bf44      	itt	mi
 8008ea2:	2320      	movmi	r3, #32
 8008ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea8:	0711      	lsls	r1, r2, #28
 8008eaa:	bf44      	itt	mi
 8008eac:	232b      	movmi	r3, #43	; 0x2b
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb8:	d015      	beq.n	8008ee6 <_svfiprintf_r+0xf6>
 8008eba:	9a07      	ldr	r2, [sp, #28]
 8008ebc:	4654      	mov	r4, sl
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	d94d      	bls.n	8008f6c <_svfiprintf_r+0x17c>
 8008ed0:	b1b0      	cbz	r0, 8008f00 <_svfiprintf_r+0x110>
 8008ed2:	9207      	str	r2, [sp, #28]
 8008ed4:	e014      	b.n	8008f00 <_svfiprintf_r+0x110>
 8008ed6:	eba0 0308 	sub.w	r3, r0, r8
 8008eda:	fa09 f303 	lsl.w	r3, r9, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	46a2      	mov	sl, r4
 8008ee4:	e7d2      	b.n	8008e8c <_svfiprintf_r+0x9c>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfbb      	ittet	lt
 8008ef2:	425b      	neglt	r3, r3
 8008ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef8:	9307      	strge	r3, [sp, #28]
 8008efa:	9307      	strlt	r3, [sp, #28]
 8008efc:	bfb8      	it	lt
 8008efe:	9204      	strlt	r2, [sp, #16]
 8008f00:	7823      	ldrb	r3, [r4, #0]
 8008f02:	2b2e      	cmp	r3, #46	; 0x2e
 8008f04:	d10c      	bne.n	8008f20 <_svfiprintf_r+0x130>
 8008f06:	7863      	ldrb	r3, [r4, #1]
 8008f08:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0a:	d134      	bne.n	8008f76 <_svfiprintf_r+0x186>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	9203      	str	r2, [sp, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfb8      	it	lt
 8008f18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f1c:	3402      	adds	r4, #2
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008fe8 <_svfiprintf_r+0x1f8>
 8008f24:	7821      	ldrb	r1, [r4, #0]
 8008f26:	2203      	movs	r2, #3
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f7f7 f959 	bl	80001e0 <memchr>
 8008f2e:	b138      	cbz	r0, 8008f40 <_svfiprintf_r+0x150>
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	eba0 000a 	sub.w	r0, r0, sl
 8008f36:	2240      	movs	r2, #64	; 0x40
 8008f38:	4082      	lsls	r2, r0
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	3401      	adds	r4, #1
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	4825      	ldr	r0, [pc, #148]	; (8008fdc <_svfiprintf_r+0x1ec>)
 8008f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f4a:	2206      	movs	r2, #6
 8008f4c:	f7f7 f948 	bl	80001e0 <memchr>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d038      	beq.n	8008fc6 <_svfiprintf_r+0x1d6>
 8008f54:	4b22      	ldr	r3, [pc, #136]	; (8008fe0 <_svfiprintf_r+0x1f0>)
 8008f56:	bb1b      	cbnz	r3, 8008fa0 <_svfiprintf_r+0x1b0>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	3307      	adds	r3, #7
 8008f5c:	f023 0307 	bic.w	r3, r3, #7
 8008f60:	3308      	adds	r3, #8
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	4433      	add	r3, r6
 8008f68:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6a:	e768      	b.n	8008e3e <_svfiprintf_r+0x4e>
 8008f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f70:	460c      	mov	r4, r1
 8008f72:	2001      	movs	r0, #1
 8008f74:	e7a6      	b.n	8008ec4 <_svfiprintf_r+0xd4>
 8008f76:	2300      	movs	r3, #0
 8008f78:	3401      	adds	r4, #1
 8008f7a:	9305      	str	r3, [sp, #20]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f04f 0c0a 	mov.w	ip, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f88:	3a30      	subs	r2, #48	; 0x30
 8008f8a:	2a09      	cmp	r2, #9
 8008f8c:	d903      	bls.n	8008f96 <_svfiprintf_r+0x1a6>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c6      	beq.n	8008f20 <_svfiprintf_r+0x130>
 8008f92:	9105      	str	r1, [sp, #20]
 8008f94:	e7c4      	b.n	8008f20 <_svfiprintf_r+0x130>
 8008f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e7f0      	b.n	8008f82 <_svfiprintf_r+0x192>
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <_svfiprintf_r+0x1f4>)
 8008fa8:	a904      	add	r1, sp, #16
 8008faa:	4638      	mov	r0, r7
 8008fac:	f7fe fb70 	bl	8007690 <_printf_float>
 8008fb0:	1c42      	adds	r2, r0, #1
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	d1d6      	bne.n	8008f64 <_svfiprintf_r+0x174>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	065b      	lsls	r3, r3, #25
 8008fba:	f53f af2d 	bmi.w	8008e18 <_svfiprintf_r+0x28>
 8008fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc0:	b01d      	add	sp, #116	; 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	ab03      	add	r3, sp, #12
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	462a      	mov	r2, r5
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <_svfiprintf_r+0x1f4>)
 8008fce:	a904      	add	r1, sp, #16
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7fe fe01 	bl	8007bd8 <_printf_i>
 8008fd6:	e7eb      	b.n	8008fb0 <_svfiprintf_r+0x1c0>
 8008fd8:	0800ac71 	.word	0x0800ac71
 8008fdc:	0800ac7b 	.word	0x0800ac7b
 8008fe0:	08007691 	.word	0x08007691
 8008fe4:	08008d3d 	.word	0x08008d3d
 8008fe8:	0800ac77 	.word	0x0800ac77

08008fec <malloc>:
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <malloc+0xc>)
 8008fee:	4601      	mov	r1, r0
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	f000 b823 	b.w	800903c <_malloc_r>
 8008ff6:	bf00      	nop
 8008ff8:	2000018c 	.word	0x2000018c

08008ffc <sbrk_aligned>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4e0e      	ldr	r6, [pc, #56]	; (8009038 <sbrk_aligned+0x3c>)
 8009000:	460c      	mov	r4, r1
 8009002:	6831      	ldr	r1, [r6, #0]
 8009004:	4605      	mov	r5, r0
 8009006:	b911      	cbnz	r1, 800900e <sbrk_aligned+0x12>
 8009008:	f000 fd8e 	bl	8009b28 <_sbrk_r>
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	4621      	mov	r1, r4
 8009010:	4628      	mov	r0, r5
 8009012:	f000 fd89 	bl	8009b28 <_sbrk_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d00a      	beq.n	8009030 <sbrk_aligned+0x34>
 800901a:	1cc4      	adds	r4, r0, #3
 800901c:	f024 0403 	bic.w	r4, r4, #3
 8009020:	42a0      	cmp	r0, r4
 8009022:	d007      	beq.n	8009034 <sbrk_aligned+0x38>
 8009024:	1a21      	subs	r1, r4, r0
 8009026:	4628      	mov	r0, r5
 8009028:	f000 fd7e 	bl	8009b28 <_sbrk_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d101      	bne.n	8009034 <sbrk_aligned+0x38>
 8009030:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009034:	4620      	mov	r0, r4
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	2000265c 	.word	0x2000265c

0800903c <_malloc_r>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	1ccd      	adds	r5, r1, #3
 8009042:	f025 0503 	bic.w	r5, r5, #3
 8009046:	3508      	adds	r5, #8
 8009048:	2d0c      	cmp	r5, #12
 800904a:	bf38      	it	cc
 800904c:	250c      	movcc	r5, #12
 800904e:	2d00      	cmp	r5, #0
 8009050:	4607      	mov	r7, r0
 8009052:	db01      	blt.n	8009058 <_malloc_r+0x1c>
 8009054:	42a9      	cmp	r1, r5
 8009056:	d905      	bls.n	8009064 <_malloc_r+0x28>
 8009058:	230c      	movs	r3, #12
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	2600      	movs	r6, #0
 800905e:	4630      	mov	r0, r6
 8009060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009138 <_malloc_r+0xfc>
 8009068:	f000 f916 	bl	8009298 <__malloc_lock>
 800906c:	f8d8 3000 	ldr.w	r3, [r8]
 8009070:	461c      	mov	r4, r3
 8009072:	bb5c      	cbnz	r4, 80090cc <_malloc_r+0x90>
 8009074:	4629      	mov	r1, r5
 8009076:	4638      	mov	r0, r7
 8009078:	f7ff ffc0 	bl	8008ffc <sbrk_aligned>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	4604      	mov	r4, r0
 8009080:	d155      	bne.n	800912e <_malloc_r+0xf2>
 8009082:	f8d8 4000 	ldr.w	r4, [r8]
 8009086:	4626      	mov	r6, r4
 8009088:	2e00      	cmp	r6, #0
 800908a:	d145      	bne.n	8009118 <_malloc_r+0xdc>
 800908c:	2c00      	cmp	r4, #0
 800908e:	d048      	beq.n	8009122 <_malloc_r+0xe6>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	4631      	mov	r1, r6
 8009094:	4638      	mov	r0, r7
 8009096:	eb04 0903 	add.w	r9, r4, r3
 800909a:	f000 fd45 	bl	8009b28 <_sbrk_r>
 800909e:	4581      	cmp	r9, r0
 80090a0:	d13f      	bne.n	8009122 <_malloc_r+0xe6>
 80090a2:	6821      	ldr	r1, [r4, #0]
 80090a4:	1a6d      	subs	r5, r5, r1
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ffa7 	bl	8008ffc <sbrk_aligned>
 80090ae:	3001      	adds	r0, #1
 80090b0:	d037      	beq.n	8009122 <_malloc_r+0xe6>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	442b      	add	r3, r5
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	f8d8 3000 	ldr.w	r3, [r8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d038      	beq.n	8009132 <_malloc_r+0xf6>
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	42a2      	cmp	r2, r4
 80090c4:	d12b      	bne.n	800911e <_malloc_r+0xe2>
 80090c6:	2200      	movs	r2, #0
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	e00f      	b.n	80090ec <_malloc_r+0xb0>
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	1b52      	subs	r2, r2, r5
 80090d0:	d41f      	bmi.n	8009112 <_malloc_r+0xd6>
 80090d2:	2a0b      	cmp	r2, #11
 80090d4:	d917      	bls.n	8009106 <_malloc_r+0xca>
 80090d6:	1961      	adds	r1, r4, r5
 80090d8:	42a3      	cmp	r3, r4
 80090da:	6025      	str	r5, [r4, #0]
 80090dc:	bf18      	it	ne
 80090de:	6059      	strne	r1, [r3, #4]
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	bf08      	it	eq
 80090e4:	f8c8 1000 	streq.w	r1, [r8]
 80090e8:	5162      	str	r2, [r4, r5]
 80090ea:	604b      	str	r3, [r1, #4]
 80090ec:	4638      	mov	r0, r7
 80090ee:	f104 060b 	add.w	r6, r4, #11
 80090f2:	f000 f8d7 	bl	80092a4 <__malloc_unlock>
 80090f6:	f026 0607 	bic.w	r6, r6, #7
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	1af2      	subs	r2, r6, r3
 80090fe:	d0ae      	beq.n	800905e <_malloc_r+0x22>
 8009100:	1b9b      	subs	r3, r3, r6
 8009102:	50a3      	str	r3, [r4, r2]
 8009104:	e7ab      	b.n	800905e <_malloc_r+0x22>
 8009106:	42a3      	cmp	r3, r4
 8009108:	6862      	ldr	r2, [r4, #4]
 800910a:	d1dd      	bne.n	80090c8 <_malloc_r+0x8c>
 800910c:	f8c8 2000 	str.w	r2, [r8]
 8009110:	e7ec      	b.n	80090ec <_malloc_r+0xb0>
 8009112:	4623      	mov	r3, r4
 8009114:	6864      	ldr	r4, [r4, #4]
 8009116:	e7ac      	b.n	8009072 <_malloc_r+0x36>
 8009118:	4634      	mov	r4, r6
 800911a:	6876      	ldr	r6, [r6, #4]
 800911c:	e7b4      	b.n	8009088 <_malloc_r+0x4c>
 800911e:	4613      	mov	r3, r2
 8009120:	e7cc      	b.n	80090bc <_malloc_r+0x80>
 8009122:	230c      	movs	r3, #12
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	4638      	mov	r0, r7
 8009128:	f000 f8bc 	bl	80092a4 <__malloc_unlock>
 800912c:	e797      	b.n	800905e <_malloc_r+0x22>
 800912e:	6025      	str	r5, [r4, #0]
 8009130:	e7dc      	b.n	80090ec <_malloc_r+0xb0>
 8009132:	605b      	str	r3, [r3, #4]
 8009134:	deff      	udf	#255	; 0xff
 8009136:	bf00      	nop
 8009138:	20002658 	.word	0x20002658

0800913c <__sflush_r>:
 800913c:	898a      	ldrh	r2, [r1, #12]
 800913e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	0710      	lsls	r0, r2, #28
 8009146:	460c      	mov	r4, r1
 8009148:	d458      	bmi.n	80091fc <__sflush_r+0xc0>
 800914a:	684b      	ldr	r3, [r1, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc05      	bgt.n	800915c <__sflush_r+0x20>
 8009150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009152:	2b00      	cmp	r3, #0
 8009154:	dc02      	bgt.n	800915c <__sflush_r+0x20>
 8009156:	2000      	movs	r0, #0
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800915e:	2e00      	cmp	r6, #0
 8009160:	d0f9      	beq.n	8009156 <__sflush_r+0x1a>
 8009162:	2300      	movs	r3, #0
 8009164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009168:	682f      	ldr	r7, [r5, #0]
 800916a:	6a21      	ldr	r1, [r4, #32]
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	d032      	beq.n	80091d6 <__sflush_r+0x9a>
 8009170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	075a      	lsls	r2, r3, #29
 8009176:	d505      	bpl.n	8009184 <__sflush_r+0x48>
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	1ac0      	subs	r0, r0, r3
 800917c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800917e:	b10b      	cbz	r3, 8009184 <__sflush_r+0x48>
 8009180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009182:	1ac0      	subs	r0, r0, r3
 8009184:	2300      	movs	r3, #0
 8009186:	4602      	mov	r2, r0
 8009188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918a:	6a21      	ldr	r1, [r4, #32]
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	d106      	bne.n	80091a4 <__sflush_r+0x68>
 8009196:	6829      	ldr	r1, [r5, #0]
 8009198:	291d      	cmp	r1, #29
 800919a:	d82b      	bhi.n	80091f4 <__sflush_r+0xb8>
 800919c:	4a29      	ldr	r2, [pc, #164]	; (8009244 <__sflush_r+0x108>)
 800919e:	410a      	asrs	r2, r1
 80091a0:	07d6      	lsls	r6, r2, #31
 80091a2:	d427      	bmi.n	80091f4 <__sflush_r+0xb8>
 80091a4:	2200      	movs	r2, #0
 80091a6:	6062      	str	r2, [r4, #4]
 80091a8:	04d9      	lsls	r1, r3, #19
 80091aa:	6922      	ldr	r2, [r4, #16]
 80091ac:	6022      	str	r2, [r4, #0]
 80091ae:	d504      	bpl.n	80091ba <__sflush_r+0x7e>
 80091b0:	1c42      	adds	r2, r0, #1
 80091b2:	d101      	bne.n	80091b8 <__sflush_r+0x7c>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b903      	cbnz	r3, 80091ba <__sflush_r+0x7e>
 80091b8:	6560      	str	r0, [r4, #84]	; 0x54
 80091ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091bc:	602f      	str	r7, [r5, #0]
 80091be:	2900      	cmp	r1, #0
 80091c0:	d0c9      	beq.n	8009156 <__sflush_r+0x1a>
 80091c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d002      	beq.n	80091d0 <__sflush_r+0x94>
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 fd02 	bl	8009bd4 <_free_r>
 80091d0:	2000      	movs	r0, #0
 80091d2:	6360      	str	r0, [r4, #52]	; 0x34
 80091d4:	e7c0      	b.n	8009158 <__sflush_r+0x1c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	1c41      	adds	r1, r0, #1
 80091de:	d1c8      	bne.n	8009172 <__sflush_r+0x36>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0c5      	beq.n	8009172 <__sflush_r+0x36>
 80091e6:	2b1d      	cmp	r3, #29
 80091e8:	d001      	beq.n	80091ee <__sflush_r+0xb2>
 80091ea:	2b16      	cmp	r3, #22
 80091ec:	d101      	bne.n	80091f2 <__sflush_r+0xb6>
 80091ee:	602f      	str	r7, [r5, #0]
 80091f0:	e7b1      	b.n	8009156 <__sflush_r+0x1a>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	e7ad      	b.n	8009158 <__sflush_r+0x1c>
 80091fc:	690f      	ldr	r7, [r1, #16]
 80091fe:	2f00      	cmp	r7, #0
 8009200:	d0a9      	beq.n	8009156 <__sflush_r+0x1a>
 8009202:	0793      	lsls	r3, r2, #30
 8009204:	680e      	ldr	r6, [r1, #0]
 8009206:	bf08      	it	eq
 8009208:	694b      	ldreq	r3, [r1, #20]
 800920a:	600f      	str	r7, [r1, #0]
 800920c:	bf18      	it	ne
 800920e:	2300      	movne	r3, #0
 8009210:	eba6 0807 	sub.w	r8, r6, r7
 8009214:	608b      	str	r3, [r1, #8]
 8009216:	f1b8 0f00 	cmp.w	r8, #0
 800921a:	dd9c      	ble.n	8009156 <__sflush_r+0x1a>
 800921c:	6a21      	ldr	r1, [r4, #32]
 800921e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009220:	4643      	mov	r3, r8
 8009222:	463a      	mov	r2, r7
 8009224:	4628      	mov	r0, r5
 8009226:	47b0      	blx	r6
 8009228:	2800      	cmp	r0, #0
 800922a:	dc06      	bgt.n	800923a <__sflush_r+0xfe>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009238:	e78e      	b.n	8009158 <__sflush_r+0x1c>
 800923a:	4407      	add	r7, r0
 800923c:	eba8 0800 	sub.w	r8, r8, r0
 8009240:	e7e9      	b.n	8009216 <__sflush_r+0xda>
 8009242:	bf00      	nop
 8009244:	dfbffffe 	.word	0xdfbffffe

08009248 <_fflush_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	690b      	ldr	r3, [r1, #16]
 800924c:	4605      	mov	r5, r0
 800924e:	460c      	mov	r4, r1
 8009250:	b913      	cbnz	r3, 8009258 <_fflush_r+0x10>
 8009252:	2500      	movs	r5, #0
 8009254:	4628      	mov	r0, r5
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	b118      	cbz	r0, 8009262 <_fflush_r+0x1a>
 800925a:	6a03      	ldr	r3, [r0, #32]
 800925c:	b90b      	cbnz	r3, 8009262 <_fflush_r+0x1a>
 800925e:	f7fe fe57 	bl	8007f10 <__sinit>
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f3      	beq.n	8009252 <_fflush_r+0xa>
 800926a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d404      	bmi.n	800927a <_fflush_r+0x32>
 8009270:	0599      	lsls	r1, r3, #22
 8009272:	d402      	bmi.n	800927a <_fflush_r+0x32>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f7fe fed7 	bl	8008028 <__retarget_lock_acquire_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	4621      	mov	r1, r4
 800927e:	f7ff ff5d 	bl	800913c <__sflush_r>
 8009282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009284:	07da      	lsls	r2, r3, #31
 8009286:	4605      	mov	r5, r0
 8009288:	d4e4      	bmi.n	8009254 <_fflush_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d4e1      	bmi.n	8009254 <_fflush_r+0xc>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f7fe feca 	bl	800802a <__retarget_lock_release_recursive>
 8009296:	e7dd      	b.n	8009254 <_fflush_r+0xc>

08009298 <__malloc_lock>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__malloc_lock+0x8>)
 800929a:	f7fe bec5 	b.w	8008028 <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20002654 	.word	0x20002654

080092a4 <__malloc_unlock>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__malloc_unlock+0x8>)
 80092a6:	f7fe bec0 	b.w	800802a <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20002654 	.word	0x20002654

080092b0 <_Balloc>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	69c6      	ldr	r6, [r0, #28]
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	b976      	cbnz	r6, 80092d8 <_Balloc+0x28>
 80092ba:	2010      	movs	r0, #16
 80092bc:	f7ff fe96 	bl	8008fec <malloc>
 80092c0:	4602      	mov	r2, r0
 80092c2:	61e0      	str	r0, [r4, #28]
 80092c4:	b920      	cbnz	r0, 80092d0 <_Balloc+0x20>
 80092c6:	4b18      	ldr	r3, [pc, #96]	; (8009328 <_Balloc+0x78>)
 80092c8:	4818      	ldr	r0, [pc, #96]	; (800932c <_Balloc+0x7c>)
 80092ca:	216b      	movs	r1, #107	; 0x6b
 80092cc:	f000 fc4e 	bl	8009b6c <__assert_func>
 80092d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d4:	6006      	str	r6, [r0, #0]
 80092d6:	60c6      	str	r6, [r0, #12]
 80092d8:	69e6      	ldr	r6, [r4, #28]
 80092da:	68f3      	ldr	r3, [r6, #12]
 80092dc:	b183      	cbz	r3, 8009300 <_Balloc+0x50>
 80092de:	69e3      	ldr	r3, [r4, #28]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092e6:	b9b8      	cbnz	r0, 8009318 <_Balloc+0x68>
 80092e8:	2101      	movs	r1, #1
 80092ea:	fa01 f605 	lsl.w	r6, r1, r5
 80092ee:	1d72      	adds	r2, r6, #5
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fc58 	bl	8009ba8 <_calloc_r>
 80092f8:	b160      	cbz	r0, 8009314 <_Balloc+0x64>
 80092fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092fe:	e00e      	b.n	800931e <_Balloc+0x6e>
 8009300:	2221      	movs	r2, #33	; 0x21
 8009302:	2104      	movs	r1, #4
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fc4f 	bl	8009ba8 <_calloc_r>
 800930a:	69e3      	ldr	r3, [r4, #28]
 800930c:	60f0      	str	r0, [r6, #12]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e4      	bne.n	80092de <_Balloc+0x2e>
 8009314:	2000      	movs	r0, #0
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	6802      	ldr	r2, [r0, #0]
 800931a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800931e:	2300      	movs	r3, #0
 8009320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009324:	e7f7      	b.n	8009316 <_Balloc+0x66>
 8009326:	bf00      	nop
 8009328:	0800abf1 	.word	0x0800abf1
 800932c:	0800ac82 	.word	0x0800ac82

08009330 <_Bfree>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	69c6      	ldr	r6, [r0, #28]
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	b976      	cbnz	r6, 8009358 <_Bfree+0x28>
 800933a:	2010      	movs	r0, #16
 800933c:	f7ff fe56 	bl	8008fec <malloc>
 8009340:	4602      	mov	r2, r0
 8009342:	61e8      	str	r0, [r5, #28]
 8009344:	b920      	cbnz	r0, 8009350 <_Bfree+0x20>
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_Bfree+0x3c>)
 8009348:	4809      	ldr	r0, [pc, #36]	; (8009370 <_Bfree+0x40>)
 800934a:	218f      	movs	r1, #143	; 0x8f
 800934c:	f000 fc0e 	bl	8009b6c <__assert_func>
 8009350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009354:	6006      	str	r6, [r0, #0]
 8009356:	60c6      	str	r6, [r0, #12]
 8009358:	b13c      	cbz	r4, 800936a <_Bfree+0x3a>
 800935a:	69eb      	ldr	r3, [r5, #28]
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009364:	6021      	str	r1, [r4, #0]
 8009366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	0800abf1 	.word	0x0800abf1
 8009370:	0800ac82 	.word	0x0800ac82

08009374 <__multadd>:
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	690d      	ldr	r5, [r1, #16]
 800937a:	4607      	mov	r7, r0
 800937c:	460c      	mov	r4, r1
 800937e:	461e      	mov	r6, r3
 8009380:	f101 0c14 	add.w	ip, r1, #20
 8009384:	2000      	movs	r0, #0
 8009386:	f8dc 3000 	ldr.w	r3, [ip]
 800938a:	b299      	uxth	r1, r3
 800938c:	fb02 6101 	mla	r1, r2, r1, r6
 8009390:	0c1e      	lsrs	r6, r3, #16
 8009392:	0c0b      	lsrs	r3, r1, #16
 8009394:	fb02 3306 	mla	r3, r2, r6, r3
 8009398:	b289      	uxth	r1, r1
 800939a:	3001      	adds	r0, #1
 800939c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093a0:	4285      	cmp	r5, r0
 80093a2:	f84c 1b04 	str.w	r1, [ip], #4
 80093a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093aa:	dcec      	bgt.n	8009386 <__multadd+0x12>
 80093ac:	b30e      	cbz	r6, 80093f2 <__multadd+0x7e>
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dc19      	bgt.n	80093e8 <__multadd+0x74>
 80093b4:	6861      	ldr	r1, [r4, #4]
 80093b6:	4638      	mov	r0, r7
 80093b8:	3101      	adds	r1, #1
 80093ba:	f7ff ff79 	bl	80092b0 <_Balloc>
 80093be:	4680      	mov	r8, r0
 80093c0:	b928      	cbnz	r0, 80093ce <__multadd+0x5a>
 80093c2:	4602      	mov	r2, r0
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <__multadd+0x84>)
 80093c6:	480d      	ldr	r0, [pc, #52]	; (80093fc <__multadd+0x88>)
 80093c8:	21ba      	movs	r1, #186	; 0xba
 80093ca:	f000 fbcf 	bl	8009b6c <__assert_func>
 80093ce:	6922      	ldr	r2, [r4, #16]
 80093d0:	3202      	adds	r2, #2
 80093d2:	f104 010c 	add.w	r1, r4, #12
 80093d6:	0092      	lsls	r2, r2, #2
 80093d8:	300c      	adds	r0, #12
 80093da:	f7fe fe27 	bl	800802c <memcpy>
 80093de:	4621      	mov	r1, r4
 80093e0:	4638      	mov	r0, r7
 80093e2:	f7ff ffa5 	bl	8009330 <_Bfree>
 80093e6:	4644      	mov	r4, r8
 80093e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093ec:	3501      	adds	r5, #1
 80093ee:	615e      	str	r6, [r3, #20]
 80093f0:	6125      	str	r5, [r4, #16]
 80093f2:	4620      	mov	r0, r4
 80093f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f8:	0800ac60 	.word	0x0800ac60
 80093fc:	0800ac82 	.word	0x0800ac82

08009400 <__hi0bits>:
 8009400:	0c03      	lsrs	r3, r0, #16
 8009402:	041b      	lsls	r3, r3, #16
 8009404:	b9d3      	cbnz	r3, 800943c <__hi0bits+0x3c>
 8009406:	0400      	lsls	r0, r0, #16
 8009408:	2310      	movs	r3, #16
 800940a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800940e:	bf04      	itt	eq
 8009410:	0200      	lsleq	r0, r0, #8
 8009412:	3308      	addeq	r3, #8
 8009414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009418:	bf04      	itt	eq
 800941a:	0100      	lsleq	r0, r0, #4
 800941c:	3304      	addeq	r3, #4
 800941e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009422:	bf04      	itt	eq
 8009424:	0080      	lsleq	r0, r0, #2
 8009426:	3302      	addeq	r3, #2
 8009428:	2800      	cmp	r0, #0
 800942a:	db05      	blt.n	8009438 <__hi0bits+0x38>
 800942c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009430:	f103 0301 	add.w	r3, r3, #1
 8009434:	bf08      	it	eq
 8009436:	2320      	moveq	r3, #32
 8009438:	4618      	mov	r0, r3
 800943a:	4770      	bx	lr
 800943c:	2300      	movs	r3, #0
 800943e:	e7e4      	b.n	800940a <__hi0bits+0xa>

08009440 <__lo0bits>:
 8009440:	6803      	ldr	r3, [r0, #0]
 8009442:	f013 0207 	ands.w	r2, r3, #7
 8009446:	d00c      	beq.n	8009462 <__lo0bits+0x22>
 8009448:	07d9      	lsls	r1, r3, #31
 800944a:	d422      	bmi.n	8009492 <__lo0bits+0x52>
 800944c:	079a      	lsls	r2, r3, #30
 800944e:	bf49      	itett	mi
 8009450:	085b      	lsrmi	r3, r3, #1
 8009452:	089b      	lsrpl	r3, r3, #2
 8009454:	6003      	strmi	r3, [r0, #0]
 8009456:	2201      	movmi	r2, #1
 8009458:	bf5c      	itt	pl
 800945a:	6003      	strpl	r3, [r0, #0]
 800945c:	2202      	movpl	r2, #2
 800945e:	4610      	mov	r0, r2
 8009460:	4770      	bx	lr
 8009462:	b299      	uxth	r1, r3
 8009464:	b909      	cbnz	r1, 800946a <__lo0bits+0x2a>
 8009466:	0c1b      	lsrs	r3, r3, #16
 8009468:	2210      	movs	r2, #16
 800946a:	b2d9      	uxtb	r1, r3
 800946c:	b909      	cbnz	r1, 8009472 <__lo0bits+0x32>
 800946e:	3208      	adds	r2, #8
 8009470:	0a1b      	lsrs	r3, r3, #8
 8009472:	0719      	lsls	r1, r3, #28
 8009474:	bf04      	itt	eq
 8009476:	091b      	lsreq	r3, r3, #4
 8009478:	3204      	addeq	r2, #4
 800947a:	0799      	lsls	r1, r3, #30
 800947c:	bf04      	itt	eq
 800947e:	089b      	lsreq	r3, r3, #2
 8009480:	3202      	addeq	r2, #2
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d403      	bmi.n	800948e <__lo0bits+0x4e>
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	f102 0201 	add.w	r2, r2, #1
 800948c:	d003      	beq.n	8009496 <__lo0bits+0x56>
 800948e:	6003      	str	r3, [r0, #0]
 8009490:	e7e5      	b.n	800945e <__lo0bits+0x1e>
 8009492:	2200      	movs	r2, #0
 8009494:	e7e3      	b.n	800945e <__lo0bits+0x1e>
 8009496:	2220      	movs	r2, #32
 8009498:	e7e1      	b.n	800945e <__lo0bits+0x1e>
	...

0800949c <__i2b>:
 800949c:	b510      	push	{r4, lr}
 800949e:	460c      	mov	r4, r1
 80094a0:	2101      	movs	r1, #1
 80094a2:	f7ff ff05 	bl	80092b0 <_Balloc>
 80094a6:	4602      	mov	r2, r0
 80094a8:	b928      	cbnz	r0, 80094b6 <__i2b+0x1a>
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <__i2b+0x24>)
 80094ac:	4805      	ldr	r0, [pc, #20]	; (80094c4 <__i2b+0x28>)
 80094ae:	f240 1145 	movw	r1, #325	; 0x145
 80094b2:	f000 fb5b 	bl	8009b6c <__assert_func>
 80094b6:	2301      	movs	r3, #1
 80094b8:	6144      	str	r4, [r0, #20]
 80094ba:	6103      	str	r3, [r0, #16]
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	bf00      	nop
 80094c0:	0800ac60 	.word	0x0800ac60
 80094c4:	0800ac82 	.word	0x0800ac82

080094c8 <__multiply>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	4691      	mov	r9, r2
 80094ce:	690a      	ldr	r2, [r1, #16]
 80094d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	bfb8      	it	lt
 80094d8:	460b      	movlt	r3, r1
 80094da:	460c      	mov	r4, r1
 80094dc:	bfbc      	itt	lt
 80094de:	464c      	movlt	r4, r9
 80094e0:	4699      	movlt	r9, r3
 80094e2:	6927      	ldr	r7, [r4, #16]
 80094e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094e8:	68a3      	ldr	r3, [r4, #8]
 80094ea:	6861      	ldr	r1, [r4, #4]
 80094ec:	eb07 060a 	add.w	r6, r7, sl
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	b085      	sub	sp, #20
 80094f4:	bfb8      	it	lt
 80094f6:	3101      	addlt	r1, #1
 80094f8:	f7ff feda 	bl	80092b0 <_Balloc>
 80094fc:	b930      	cbnz	r0, 800950c <__multiply+0x44>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b44      	ldr	r3, [pc, #272]	; (8009614 <__multiply+0x14c>)
 8009502:	4845      	ldr	r0, [pc, #276]	; (8009618 <__multiply+0x150>)
 8009504:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009508:	f000 fb30 	bl	8009b6c <__assert_func>
 800950c:	f100 0514 	add.w	r5, r0, #20
 8009510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009514:	462b      	mov	r3, r5
 8009516:	2200      	movs	r2, #0
 8009518:	4543      	cmp	r3, r8
 800951a:	d321      	bcc.n	8009560 <__multiply+0x98>
 800951c:	f104 0314 	add.w	r3, r4, #20
 8009520:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009524:	f109 0314 	add.w	r3, r9, #20
 8009528:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800952c:	9202      	str	r2, [sp, #8]
 800952e:	1b3a      	subs	r2, r7, r4
 8009530:	3a15      	subs	r2, #21
 8009532:	f022 0203 	bic.w	r2, r2, #3
 8009536:	3204      	adds	r2, #4
 8009538:	f104 0115 	add.w	r1, r4, #21
 800953c:	428f      	cmp	r7, r1
 800953e:	bf38      	it	cc
 8009540:	2204      	movcc	r2, #4
 8009542:	9201      	str	r2, [sp, #4]
 8009544:	9a02      	ldr	r2, [sp, #8]
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	429a      	cmp	r2, r3
 800954a:	d80c      	bhi.n	8009566 <__multiply+0x9e>
 800954c:	2e00      	cmp	r6, #0
 800954e:	dd03      	ble.n	8009558 <__multiply+0x90>
 8009550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009554:	2b00      	cmp	r3, #0
 8009556:	d05b      	beq.n	8009610 <__multiply+0x148>
 8009558:	6106      	str	r6, [r0, #16]
 800955a:	b005      	add	sp, #20
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	f843 2b04 	str.w	r2, [r3], #4
 8009564:	e7d8      	b.n	8009518 <__multiply+0x50>
 8009566:	f8b3 a000 	ldrh.w	sl, [r3]
 800956a:	f1ba 0f00 	cmp.w	sl, #0
 800956e:	d024      	beq.n	80095ba <__multiply+0xf2>
 8009570:	f104 0e14 	add.w	lr, r4, #20
 8009574:	46a9      	mov	r9, r5
 8009576:	f04f 0c00 	mov.w	ip, #0
 800957a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800957e:	f8d9 1000 	ldr.w	r1, [r9]
 8009582:	fa1f fb82 	uxth.w	fp, r2
 8009586:	b289      	uxth	r1, r1
 8009588:	fb0a 110b 	mla	r1, sl, fp, r1
 800958c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009590:	f8d9 2000 	ldr.w	r2, [r9]
 8009594:	4461      	add	r1, ip
 8009596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800959a:	fb0a c20b 	mla	r2, sl, fp, ip
 800959e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095a2:	b289      	uxth	r1, r1
 80095a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095a8:	4577      	cmp	r7, lr
 80095aa:	f849 1b04 	str.w	r1, [r9], #4
 80095ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095b2:	d8e2      	bhi.n	800957a <__multiply+0xb2>
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	f845 c002 	str.w	ip, [r5, r2]
 80095ba:	9a03      	ldr	r2, [sp, #12]
 80095bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095c0:	3304      	adds	r3, #4
 80095c2:	f1b9 0f00 	cmp.w	r9, #0
 80095c6:	d021      	beq.n	800960c <__multiply+0x144>
 80095c8:	6829      	ldr	r1, [r5, #0]
 80095ca:	f104 0c14 	add.w	ip, r4, #20
 80095ce:	46ae      	mov	lr, r5
 80095d0:	f04f 0a00 	mov.w	sl, #0
 80095d4:	f8bc b000 	ldrh.w	fp, [ip]
 80095d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095dc:	fb09 220b 	mla	r2, r9, fp, r2
 80095e0:	4452      	add	r2, sl
 80095e2:	b289      	uxth	r1, r1
 80095e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095e8:	f84e 1b04 	str.w	r1, [lr], #4
 80095ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80095f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095f4:	f8be 1000 	ldrh.w	r1, [lr]
 80095f8:	fb09 110a 	mla	r1, r9, sl, r1
 80095fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009600:	4567      	cmp	r7, ip
 8009602:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009606:	d8e5      	bhi.n	80095d4 <__multiply+0x10c>
 8009608:	9a01      	ldr	r2, [sp, #4]
 800960a:	50a9      	str	r1, [r5, r2]
 800960c:	3504      	adds	r5, #4
 800960e:	e799      	b.n	8009544 <__multiply+0x7c>
 8009610:	3e01      	subs	r6, #1
 8009612:	e79b      	b.n	800954c <__multiply+0x84>
 8009614:	0800ac60 	.word	0x0800ac60
 8009618:	0800ac82 	.word	0x0800ac82

0800961c <__pow5mult>:
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009620:	4615      	mov	r5, r2
 8009622:	f012 0203 	ands.w	r2, r2, #3
 8009626:	4606      	mov	r6, r0
 8009628:	460f      	mov	r7, r1
 800962a:	d007      	beq.n	800963c <__pow5mult+0x20>
 800962c:	4c25      	ldr	r4, [pc, #148]	; (80096c4 <__pow5mult+0xa8>)
 800962e:	3a01      	subs	r2, #1
 8009630:	2300      	movs	r3, #0
 8009632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009636:	f7ff fe9d 	bl	8009374 <__multadd>
 800963a:	4607      	mov	r7, r0
 800963c:	10ad      	asrs	r5, r5, #2
 800963e:	d03d      	beq.n	80096bc <__pow5mult+0xa0>
 8009640:	69f4      	ldr	r4, [r6, #28]
 8009642:	b97c      	cbnz	r4, 8009664 <__pow5mult+0x48>
 8009644:	2010      	movs	r0, #16
 8009646:	f7ff fcd1 	bl	8008fec <malloc>
 800964a:	4602      	mov	r2, r0
 800964c:	61f0      	str	r0, [r6, #28]
 800964e:	b928      	cbnz	r0, 800965c <__pow5mult+0x40>
 8009650:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <__pow5mult+0xac>)
 8009652:	481e      	ldr	r0, [pc, #120]	; (80096cc <__pow5mult+0xb0>)
 8009654:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009658:	f000 fa88 	bl	8009b6c <__assert_func>
 800965c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009660:	6004      	str	r4, [r0, #0]
 8009662:	60c4      	str	r4, [r0, #12]
 8009664:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800966c:	b94c      	cbnz	r4, 8009682 <__pow5mult+0x66>
 800966e:	f240 2171 	movw	r1, #625	; 0x271
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ff12 	bl	800949c <__i2b>
 8009678:	2300      	movs	r3, #0
 800967a:	f8c8 0008 	str.w	r0, [r8, #8]
 800967e:	4604      	mov	r4, r0
 8009680:	6003      	str	r3, [r0, #0]
 8009682:	f04f 0900 	mov.w	r9, #0
 8009686:	07eb      	lsls	r3, r5, #31
 8009688:	d50a      	bpl.n	80096a0 <__pow5mult+0x84>
 800968a:	4639      	mov	r1, r7
 800968c:	4622      	mov	r2, r4
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ff1a 	bl	80094c8 <__multiply>
 8009694:	4639      	mov	r1, r7
 8009696:	4680      	mov	r8, r0
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff fe49 	bl	8009330 <_Bfree>
 800969e:	4647      	mov	r7, r8
 80096a0:	106d      	asrs	r5, r5, #1
 80096a2:	d00b      	beq.n	80096bc <__pow5mult+0xa0>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	b938      	cbnz	r0, 80096b8 <__pow5mult+0x9c>
 80096a8:	4622      	mov	r2, r4
 80096aa:	4621      	mov	r1, r4
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff ff0b 	bl	80094c8 <__multiply>
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	f8c0 9000 	str.w	r9, [r0]
 80096b8:	4604      	mov	r4, r0
 80096ba:	e7e4      	b.n	8009686 <__pow5mult+0x6a>
 80096bc:	4638      	mov	r0, r7
 80096be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c2:	bf00      	nop
 80096c4:	0800add0 	.word	0x0800add0
 80096c8:	0800abf1 	.word	0x0800abf1
 80096cc:	0800ac82 	.word	0x0800ac82

080096d0 <__lshift>:
 80096d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d4:	460c      	mov	r4, r1
 80096d6:	6849      	ldr	r1, [r1, #4]
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	4607      	mov	r7, r0
 80096e2:	4691      	mov	r9, r2
 80096e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096e8:	f108 0601 	add.w	r6, r8, #1
 80096ec:	42b3      	cmp	r3, r6
 80096ee:	db0b      	blt.n	8009708 <__lshift+0x38>
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff fddd 	bl	80092b0 <_Balloc>
 80096f6:	4605      	mov	r5, r0
 80096f8:	b948      	cbnz	r0, 800970e <__lshift+0x3e>
 80096fa:	4602      	mov	r2, r0
 80096fc:	4b28      	ldr	r3, [pc, #160]	; (80097a0 <__lshift+0xd0>)
 80096fe:	4829      	ldr	r0, [pc, #164]	; (80097a4 <__lshift+0xd4>)
 8009700:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009704:	f000 fa32 	bl	8009b6c <__assert_func>
 8009708:	3101      	adds	r1, #1
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	e7ee      	b.n	80096ec <__lshift+0x1c>
 800970e:	2300      	movs	r3, #0
 8009710:	f100 0114 	add.w	r1, r0, #20
 8009714:	f100 0210 	add.w	r2, r0, #16
 8009718:	4618      	mov	r0, r3
 800971a:	4553      	cmp	r3, sl
 800971c:	db33      	blt.n	8009786 <__lshift+0xb6>
 800971e:	6920      	ldr	r0, [r4, #16]
 8009720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009724:	f104 0314 	add.w	r3, r4, #20
 8009728:	f019 091f 	ands.w	r9, r9, #31
 800972c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009734:	d02b      	beq.n	800978e <__lshift+0xbe>
 8009736:	f1c9 0e20 	rsb	lr, r9, #32
 800973a:	468a      	mov	sl, r1
 800973c:	2200      	movs	r2, #0
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	fa00 f009 	lsl.w	r0, r0, r9
 8009744:	4310      	orrs	r0, r2
 8009746:	f84a 0b04 	str.w	r0, [sl], #4
 800974a:	f853 2b04 	ldr.w	r2, [r3], #4
 800974e:	459c      	cmp	ip, r3
 8009750:	fa22 f20e 	lsr.w	r2, r2, lr
 8009754:	d8f3      	bhi.n	800973e <__lshift+0x6e>
 8009756:	ebac 0304 	sub.w	r3, ip, r4
 800975a:	3b15      	subs	r3, #21
 800975c:	f023 0303 	bic.w	r3, r3, #3
 8009760:	3304      	adds	r3, #4
 8009762:	f104 0015 	add.w	r0, r4, #21
 8009766:	4584      	cmp	ip, r0
 8009768:	bf38      	it	cc
 800976a:	2304      	movcc	r3, #4
 800976c:	50ca      	str	r2, [r1, r3]
 800976e:	b10a      	cbz	r2, 8009774 <__lshift+0xa4>
 8009770:	f108 0602 	add.w	r6, r8, #2
 8009774:	3e01      	subs	r6, #1
 8009776:	4638      	mov	r0, r7
 8009778:	612e      	str	r6, [r5, #16]
 800977a:	4621      	mov	r1, r4
 800977c:	f7ff fdd8 	bl	8009330 <_Bfree>
 8009780:	4628      	mov	r0, r5
 8009782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009786:	f842 0f04 	str.w	r0, [r2, #4]!
 800978a:	3301      	adds	r3, #1
 800978c:	e7c5      	b.n	800971a <__lshift+0x4a>
 800978e:	3904      	subs	r1, #4
 8009790:	f853 2b04 	ldr.w	r2, [r3], #4
 8009794:	f841 2f04 	str.w	r2, [r1, #4]!
 8009798:	459c      	cmp	ip, r3
 800979a:	d8f9      	bhi.n	8009790 <__lshift+0xc0>
 800979c:	e7ea      	b.n	8009774 <__lshift+0xa4>
 800979e:	bf00      	nop
 80097a0:	0800ac60 	.word	0x0800ac60
 80097a4:	0800ac82 	.word	0x0800ac82

080097a8 <__mcmp>:
 80097a8:	b530      	push	{r4, r5, lr}
 80097aa:	6902      	ldr	r2, [r0, #16]
 80097ac:	690c      	ldr	r4, [r1, #16]
 80097ae:	1b12      	subs	r2, r2, r4
 80097b0:	d10e      	bne.n	80097d0 <__mcmp+0x28>
 80097b2:	f100 0314 	add.w	r3, r0, #20
 80097b6:	3114      	adds	r1, #20
 80097b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097c8:	42a5      	cmp	r5, r4
 80097ca:	d003      	beq.n	80097d4 <__mcmp+0x2c>
 80097cc:	d305      	bcc.n	80097da <__mcmp+0x32>
 80097ce:	2201      	movs	r2, #1
 80097d0:	4610      	mov	r0, r2
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	4283      	cmp	r3, r0
 80097d6:	d3f3      	bcc.n	80097c0 <__mcmp+0x18>
 80097d8:	e7fa      	b.n	80097d0 <__mcmp+0x28>
 80097da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097de:	e7f7      	b.n	80097d0 <__mcmp+0x28>

080097e0 <__mdiff>:
 80097e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	460c      	mov	r4, r1
 80097e6:	4606      	mov	r6, r0
 80097e8:	4611      	mov	r1, r2
 80097ea:	4620      	mov	r0, r4
 80097ec:	4690      	mov	r8, r2
 80097ee:	f7ff ffdb 	bl	80097a8 <__mcmp>
 80097f2:	1e05      	subs	r5, r0, #0
 80097f4:	d110      	bne.n	8009818 <__mdiff+0x38>
 80097f6:	4629      	mov	r1, r5
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff fd59 	bl	80092b0 <_Balloc>
 80097fe:	b930      	cbnz	r0, 800980e <__mdiff+0x2e>
 8009800:	4b3a      	ldr	r3, [pc, #232]	; (80098ec <__mdiff+0x10c>)
 8009802:	4602      	mov	r2, r0
 8009804:	f240 2137 	movw	r1, #567	; 0x237
 8009808:	4839      	ldr	r0, [pc, #228]	; (80098f0 <__mdiff+0x110>)
 800980a:	f000 f9af 	bl	8009b6c <__assert_func>
 800980e:	2301      	movs	r3, #1
 8009810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	bfa4      	itt	ge
 800981a:	4643      	movge	r3, r8
 800981c:	46a0      	movge	r8, r4
 800981e:	4630      	mov	r0, r6
 8009820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009824:	bfa6      	itte	ge
 8009826:	461c      	movge	r4, r3
 8009828:	2500      	movge	r5, #0
 800982a:	2501      	movlt	r5, #1
 800982c:	f7ff fd40 	bl	80092b0 <_Balloc>
 8009830:	b920      	cbnz	r0, 800983c <__mdiff+0x5c>
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <__mdiff+0x10c>)
 8009834:	4602      	mov	r2, r0
 8009836:	f240 2145 	movw	r1, #581	; 0x245
 800983a:	e7e5      	b.n	8009808 <__mdiff+0x28>
 800983c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009840:	6926      	ldr	r6, [r4, #16]
 8009842:	60c5      	str	r5, [r0, #12]
 8009844:	f104 0914 	add.w	r9, r4, #20
 8009848:	f108 0514 	add.w	r5, r8, #20
 800984c:	f100 0e14 	add.w	lr, r0, #20
 8009850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009858:	f108 0210 	add.w	r2, r8, #16
 800985c:	46f2      	mov	sl, lr
 800985e:	2100      	movs	r1, #0
 8009860:	f859 3b04 	ldr.w	r3, [r9], #4
 8009864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009868:	fa11 f88b 	uxtah	r8, r1, fp
 800986c:	b299      	uxth	r1, r3
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	eba8 0801 	sub.w	r8, r8, r1
 8009874:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009878:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800987c:	fa1f f888 	uxth.w	r8, r8
 8009880:	1419      	asrs	r1, r3, #16
 8009882:	454e      	cmp	r6, r9
 8009884:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009888:	f84a 3b04 	str.w	r3, [sl], #4
 800988c:	d8e8      	bhi.n	8009860 <__mdiff+0x80>
 800988e:	1b33      	subs	r3, r6, r4
 8009890:	3b15      	subs	r3, #21
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	3304      	adds	r3, #4
 8009898:	3415      	adds	r4, #21
 800989a:	42a6      	cmp	r6, r4
 800989c:	bf38      	it	cc
 800989e:	2304      	movcc	r3, #4
 80098a0:	441d      	add	r5, r3
 80098a2:	4473      	add	r3, lr
 80098a4:	469e      	mov	lr, r3
 80098a6:	462e      	mov	r6, r5
 80098a8:	4566      	cmp	r6, ip
 80098aa:	d30e      	bcc.n	80098ca <__mdiff+0xea>
 80098ac:	f10c 0203 	add.w	r2, ip, #3
 80098b0:	1b52      	subs	r2, r2, r5
 80098b2:	f022 0203 	bic.w	r2, r2, #3
 80098b6:	3d03      	subs	r5, #3
 80098b8:	45ac      	cmp	ip, r5
 80098ba:	bf38      	it	cc
 80098bc:	2200      	movcc	r2, #0
 80098be:	4413      	add	r3, r2
 80098c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098c4:	b17a      	cbz	r2, 80098e6 <__mdiff+0x106>
 80098c6:	6107      	str	r7, [r0, #16]
 80098c8:	e7a4      	b.n	8009814 <__mdiff+0x34>
 80098ca:	f856 8b04 	ldr.w	r8, [r6], #4
 80098ce:	fa11 f288 	uxtah	r2, r1, r8
 80098d2:	1414      	asrs	r4, r2, #16
 80098d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098d8:	b292      	uxth	r2, r2
 80098da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098de:	f84e 2b04 	str.w	r2, [lr], #4
 80098e2:	1421      	asrs	r1, r4, #16
 80098e4:	e7e0      	b.n	80098a8 <__mdiff+0xc8>
 80098e6:	3f01      	subs	r7, #1
 80098e8:	e7ea      	b.n	80098c0 <__mdiff+0xe0>
 80098ea:	bf00      	nop
 80098ec:	0800ac60 	.word	0x0800ac60
 80098f0:	0800ac82 	.word	0x0800ac82

080098f4 <__d2b>:
 80098f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	460f      	mov	r7, r1
 80098fa:	2101      	movs	r1, #1
 80098fc:	ec59 8b10 	vmov	r8, r9, d0
 8009900:	4616      	mov	r6, r2
 8009902:	f7ff fcd5 	bl	80092b0 <_Balloc>
 8009906:	4604      	mov	r4, r0
 8009908:	b930      	cbnz	r0, 8009918 <__d2b+0x24>
 800990a:	4602      	mov	r2, r0
 800990c:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <__d2b+0xac>)
 800990e:	4825      	ldr	r0, [pc, #148]	; (80099a4 <__d2b+0xb0>)
 8009910:	f240 310f 	movw	r1, #783	; 0x30f
 8009914:	f000 f92a 	bl	8009b6c <__assert_func>
 8009918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800991c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009920:	bb2d      	cbnz	r5, 800996e <__d2b+0x7a>
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f1b8 0300 	subs.w	r3, r8, #0
 8009928:	d026      	beq.n	8009978 <__d2b+0x84>
 800992a:	4668      	mov	r0, sp
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	f7ff fd87 	bl	8009440 <__lo0bits>
 8009932:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009936:	b1e8      	cbz	r0, 8009974 <__d2b+0x80>
 8009938:	f1c0 0320 	rsb	r3, r0, #32
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	430b      	orrs	r3, r1
 8009942:	40c2      	lsrs	r2, r0
 8009944:	6163      	str	r3, [r4, #20]
 8009946:	9201      	str	r2, [sp, #4]
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	bf14      	ite	ne
 8009950:	2202      	movne	r2, #2
 8009952:	2201      	moveq	r2, #1
 8009954:	6122      	str	r2, [r4, #16]
 8009956:	b1bd      	cbz	r5, 8009988 <__d2b+0x94>
 8009958:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800995c:	4405      	add	r5, r0
 800995e:	603d      	str	r5, [r7, #0]
 8009960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009964:	6030      	str	r0, [r6, #0]
 8009966:	4620      	mov	r0, r4
 8009968:	b003      	add	sp, #12
 800996a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800996e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009972:	e7d6      	b.n	8009922 <__d2b+0x2e>
 8009974:	6161      	str	r1, [r4, #20]
 8009976:	e7e7      	b.n	8009948 <__d2b+0x54>
 8009978:	a801      	add	r0, sp, #4
 800997a:	f7ff fd61 	bl	8009440 <__lo0bits>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	6163      	str	r3, [r4, #20]
 8009982:	3020      	adds	r0, #32
 8009984:	2201      	movs	r2, #1
 8009986:	e7e5      	b.n	8009954 <__d2b+0x60>
 8009988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800998c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009990:	6038      	str	r0, [r7, #0]
 8009992:	6918      	ldr	r0, [r3, #16]
 8009994:	f7ff fd34 	bl	8009400 <__hi0bits>
 8009998:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800999c:	e7e2      	b.n	8009964 <__d2b+0x70>
 800999e:	bf00      	nop
 80099a0:	0800ac60 	.word	0x0800ac60
 80099a4:	0800ac82 	.word	0x0800ac82

080099a8 <__sread>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	f000 f8a8 	bl	8009b04 <_read_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	bfab      	itete	ge
 80099b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ba:	89a3      	ldrhlt	r3, [r4, #12]
 80099bc:	181b      	addge	r3, r3, r0
 80099be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099c2:	bfac      	ite	ge
 80099c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099c6:	81a3      	strhlt	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__swrite>:
 80099ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	461f      	mov	r7, r3
 80099d0:	898b      	ldrh	r3, [r1, #12]
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	d505      	bpl.n	80099e8 <__swrite+0x1e>
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	2302      	movs	r3, #2
 80099e2:	2200      	movs	r2, #0
 80099e4:	f000 f87c 	bl	8009ae0 <_lseek_r>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	f000 b8a3 	b.w	8009b48 <_write_r>

08009a02 <__sseek>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0a:	f000 f869 	bl	8009ae0 <_lseek_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	bf15      	itete	ne
 8009a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a1e:	81a3      	strheq	r3, [r4, #12]
 8009a20:	bf18      	it	ne
 8009a22:	81a3      	strhne	r3, [r4, #12]
 8009a24:	bd10      	pop	{r4, pc}

08009a26 <__sclose>:
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 b849 	b.w	8009ac0 <_close_r>

08009a2e <_realloc_r>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	4680      	mov	r8, r0
 8009a34:	4614      	mov	r4, r2
 8009a36:	460e      	mov	r6, r1
 8009a38:	b921      	cbnz	r1, 8009a44 <_realloc_r+0x16>
 8009a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	4611      	mov	r1, r2
 8009a40:	f7ff bafc 	b.w	800903c <_malloc_r>
 8009a44:	b92a      	cbnz	r2, 8009a52 <_realloc_r+0x24>
 8009a46:	f000 f8c5 	bl	8009bd4 <_free_r>
 8009a4a:	4625      	mov	r5, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a52:	f000 f91d 	bl	8009c90 <_malloc_usable_size_r>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	4607      	mov	r7, r0
 8009a5a:	d802      	bhi.n	8009a62 <_realloc_r+0x34>
 8009a5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a60:	d812      	bhi.n	8009a88 <_realloc_r+0x5a>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4640      	mov	r0, r8
 8009a66:	f7ff fae9 	bl	800903c <_malloc_r>
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d0ed      	beq.n	8009a4c <_realloc_r+0x1e>
 8009a70:	42bc      	cmp	r4, r7
 8009a72:	4622      	mov	r2, r4
 8009a74:	4631      	mov	r1, r6
 8009a76:	bf28      	it	cs
 8009a78:	463a      	movcs	r2, r7
 8009a7a:	f7fe fad7 	bl	800802c <memcpy>
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4640      	mov	r0, r8
 8009a82:	f000 f8a7 	bl	8009bd4 <_free_r>
 8009a86:	e7e1      	b.n	8009a4c <_realloc_r+0x1e>
 8009a88:	4635      	mov	r5, r6
 8009a8a:	e7df      	b.n	8009a4c <_realloc_r+0x1e>

08009a8c <memmove>:
 8009a8c:	4288      	cmp	r0, r1
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	eb01 0402 	add.w	r4, r1, r2
 8009a94:	d902      	bls.n	8009a9c <memmove+0x10>
 8009a96:	4284      	cmp	r4, r0
 8009a98:	4623      	mov	r3, r4
 8009a9a:	d807      	bhi.n	8009aac <memmove+0x20>
 8009a9c:	1e43      	subs	r3, r0, #1
 8009a9e:	42a1      	cmp	r1, r4
 8009aa0:	d008      	beq.n	8009ab4 <memmove+0x28>
 8009aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aaa:	e7f8      	b.n	8009a9e <memmove+0x12>
 8009aac:	4402      	add	r2, r0
 8009aae:	4601      	mov	r1, r0
 8009ab0:	428a      	cmp	r2, r1
 8009ab2:	d100      	bne.n	8009ab6 <memmove+0x2a>
 8009ab4:	bd10      	pop	{r4, pc}
 8009ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009abe:	e7f7      	b.n	8009ab0 <memmove+0x24>

08009ac0 <_close_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d06      	ldr	r5, [pc, #24]	; (8009adc <_close_r+0x1c>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	602b      	str	r3, [r5, #0]
 8009acc:	f7f8 ff31 	bl	8002932 <_close>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_close_r+0x1a>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_close_r+0x1a>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	20002660 	.word	0x20002660

08009ae0 <_lseek_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d07      	ldr	r5, [pc, #28]	; (8009b00 <_lseek_r+0x20>)
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	602a      	str	r2, [r5, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f7f8 ff46 	bl	8002980 <_lseek>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_lseek_r+0x1e>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_lseek_r+0x1e>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20002660 	.word	0x20002660

08009b04 <_read_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d07      	ldr	r5, [pc, #28]	; (8009b24 <_read_r+0x20>)
 8009b08:	4604      	mov	r4, r0
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	2200      	movs	r2, #0
 8009b10:	602a      	str	r2, [r5, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f7f8 fed4 	bl	80028c0 <_read>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_read_r+0x1e>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_read_r+0x1e>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20002660 	.word	0x20002660

08009b28 <_sbrk_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d06      	ldr	r5, [pc, #24]	; (8009b44 <_sbrk_r+0x1c>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	602b      	str	r3, [r5, #0]
 8009b34:	f7f8 ff32 	bl	800299c <_sbrk>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_sbrk_r+0x1a>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_sbrk_r+0x1a>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20002660 	.word	0x20002660

08009b48 <_write_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	; (8009b68 <_write_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7f8 fecf 	bl	80028fa <_write>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_write_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_write_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20002660 	.word	0x20002660

08009b6c <__assert_func>:
 8009b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b6e:	4614      	mov	r4, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <__assert_func+0x2c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4605      	mov	r5, r0
 8009b78:	68d8      	ldr	r0, [r3, #12]
 8009b7a:	b14c      	cbz	r4, 8009b90 <__assert_func+0x24>
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <__assert_func+0x30>)
 8009b7e:	9100      	str	r1, [sp, #0]
 8009b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b84:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <__assert_func+0x34>)
 8009b86:	462b      	mov	r3, r5
 8009b88:	f000 f88a 	bl	8009ca0 <fiprintf>
 8009b8c:	f000 f8a7 	bl	8009cde <abort>
 8009b90:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <__assert_func+0x38>)
 8009b92:	461c      	mov	r4, r3
 8009b94:	e7f3      	b.n	8009b7e <__assert_func+0x12>
 8009b96:	bf00      	nop
 8009b98:	2000018c 	.word	0x2000018c
 8009b9c:	0800aee7 	.word	0x0800aee7
 8009ba0:	0800aef4 	.word	0x0800aef4
 8009ba4:	0800af22 	.word	0x0800af22

08009ba8 <_calloc_r>:
 8009ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009baa:	fba1 2402 	umull	r2, r4, r1, r2
 8009bae:	b94c      	cbnz	r4, 8009bc4 <_calloc_r+0x1c>
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	f7ff fa42 	bl	800903c <_malloc_r>
 8009bb8:	9a01      	ldr	r2, [sp, #4]
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b930      	cbnz	r0, 8009bcc <_calloc_r+0x24>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	b003      	add	sp, #12
 8009bc2:	bd30      	pop	{r4, r5, pc}
 8009bc4:	220c      	movs	r2, #12
 8009bc6:	6002      	str	r2, [r0, #0]
 8009bc8:	2500      	movs	r5, #0
 8009bca:	e7f8      	b.n	8009bbe <_calloc_r+0x16>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	f7fe f9f5 	bl	8007fbc <memset>
 8009bd2:	e7f4      	b.n	8009bbe <_calloc_r+0x16>

08009bd4 <_free_r>:
 8009bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d044      	beq.n	8009c64 <_free_r+0x90>
 8009bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bde:	9001      	str	r0, [sp, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f1a1 0404 	sub.w	r4, r1, #4
 8009be6:	bfb8      	it	lt
 8009be8:	18e4      	addlt	r4, r4, r3
 8009bea:	f7ff fb55 	bl	8009298 <__malloc_lock>
 8009bee:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <_free_r+0x94>)
 8009bf0:	9801      	ldr	r0, [sp, #4]
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	b933      	cbnz	r3, 8009c04 <_free_r+0x30>
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	6014      	str	r4, [r2, #0]
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c00:	f7ff bb50 	b.w	80092a4 <__malloc_unlock>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d908      	bls.n	8009c1a <_free_r+0x46>
 8009c08:	6825      	ldr	r5, [r4, #0]
 8009c0a:	1961      	adds	r1, r4, r5
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf01      	itttt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	1949      	addeq	r1, r1, r5
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	e7ed      	b.n	8009bf6 <_free_r+0x22>
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b10b      	cbz	r3, 8009c24 <_free_r+0x50>
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d9fa      	bls.n	8009c1a <_free_r+0x46>
 8009c24:	6811      	ldr	r1, [r2, #0]
 8009c26:	1855      	adds	r5, r2, r1
 8009c28:	42a5      	cmp	r5, r4
 8009c2a:	d10b      	bne.n	8009c44 <_free_r+0x70>
 8009c2c:	6824      	ldr	r4, [r4, #0]
 8009c2e:	4421      	add	r1, r4
 8009c30:	1854      	adds	r4, r2, r1
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	6011      	str	r1, [r2, #0]
 8009c36:	d1e0      	bne.n	8009bfa <_free_r+0x26>
 8009c38:	681c      	ldr	r4, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	6053      	str	r3, [r2, #4]
 8009c3e:	440c      	add	r4, r1
 8009c40:	6014      	str	r4, [r2, #0]
 8009c42:	e7da      	b.n	8009bfa <_free_r+0x26>
 8009c44:	d902      	bls.n	8009c4c <_free_r+0x78>
 8009c46:	230c      	movs	r3, #12
 8009c48:	6003      	str	r3, [r0, #0]
 8009c4a:	e7d6      	b.n	8009bfa <_free_r+0x26>
 8009c4c:	6825      	ldr	r5, [r4, #0]
 8009c4e:	1961      	adds	r1, r4, r5
 8009c50:	428b      	cmp	r3, r1
 8009c52:	bf04      	itt	eq
 8009c54:	6819      	ldreq	r1, [r3, #0]
 8009c56:	685b      	ldreq	r3, [r3, #4]
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	bf04      	itt	eq
 8009c5c:	1949      	addeq	r1, r1, r5
 8009c5e:	6021      	streq	r1, [r4, #0]
 8009c60:	6054      	str	r4, [r2, #4]
 8009c62:	e7ca      	b.n	8009bfa <_free_r+0x26>
 8009c64:	b003      	add	sp, #12
 8009c66:	bd30      	pop	{r4, r5, pc}
 8009c68:	20002658 	.word	0x20002658

08009c6c <__ascii_mbtowc>:
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	b901      	cbnz	r1, 8009c72 <__ascii_mbtowc+0x6>
 8009c70:	a901      	add	r1, sp, #4
 8009c72:	b142      	cbz	r2, 8009c86 <__ascii_mbtowc+0x1a>
 8009c74:	b14b      	cbz	r3, 8009c8a <__ascii_mbtowc+0x1e>
 8009c76:	7813      	ldrb	r3, [r2, #0]
 8009c78:	600b      	str	r3, [r1, #0]
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	1e10      	subs	r0, r2, #0
 8009c7e:	bf18      	it	ne
 8009c80:	2001      	movne	r0, #1
 8009c82:	b002      	add	sp, #8
 8009c84:	4770      	bx	lr
 8009c86:	4610      	mov	r0, r2
 8009c88:	e7fb      	b.n	8009c82 <__ascii_mbtowc+0x16>
 8009c8a:	f06f 0001 	mvn.w	r0, #1
 8009c8e:	e7f8      	b.n	8009c82 <__ascii_mbtowc+0x16>

08009c90 <_malloc_usable_size_r>:
 8009c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c94:	1f18      	subs	r0, r3, #4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfbc      	itt	lt
 8009c9a:	580b      	ldrlt	r3, [r1, r0]
 8009c9c:	18c0      	addlt	r0, r0, r3
 8009c9e:	4770      	bx	lr

08009ca0 <fiprintf>:
 8009ca0:	b40e      	push	{r1, r2, r3}
 8009ca2:	b503      	push	{r0, r1, lr}
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	ab03      	add	r3, sp, #12
 8009ca8:	4805      	ldr	r0, [pc, #20]	; (8009cc0 <fiprintf+0x20>)
 8009caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cae:	6800      	ldr	r0, [r0, #0]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	f000 f845 	bl	8009d40 <_vfiprintf_r>
 8009cb6:	b002      	add	sp, #8
 8009cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cbc:	b003      	add	sp, #12
 8009cbe:	4770      	bx	lr
 8009cc0:	2000018c 	.word	0x2000018c

08009cc4 <__ascii_wctomb>:
 8009cc4:	b149      	cbz	r1, 8009cda <__ascii_wctomb+0x16>
 8009cc6:	2aff      	cmp	r2, #255	; 0xff
 8009cc8:	bf85      	ittet	hi
 8009cca:	238a      	movhi	r3, #138	; 0x8a
 8009ccc:	6003      	strhi	r3, [r0, #0]
 8009cce:	700a      	strbls	r2, [r1, #0]
 8009cd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cd4:	bf98      	it	ls
 8009cd6:	2001      	movls	r0, #1
 8009cd8:	4770      	bx	lr
 8009cda:	4608      	mov	r0, r1
 8009cdc:	4770      	bx	lr

08009cde <abort>:
 8009cde:	b508      	push	{r3, lr}
 8009ce0:	2006      	movs	r0, #6
 8009ce2:	f000 fa89 	bl	800a1f8 <raise>
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7f8 fde0 	bl	80028ac <_exit>

08009cec <__sfputc_r>:
 8009cec:	6893      	ldr	r3, [r2, #8]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	b410      	push	{r4}
 8009cf4:	6093      	str	r3, [r2, #8]
 8009cf6:	da08      	bge.n	8009d0a <__sfputc_r+0x1e>
 8009cf8:	6994      	ldr	r4, [r2, #24]
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	db01      	blt.n	8009d02 <__sfputc_r+0x16>
 8009cfe:	290a      	cmp	r1, #10
 8009d00:	d103      	bne.n	8009d0a <__sfputc_r+0x1e>
 8009d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d06:	f000 b935 	b.w	8009f74 <__swbuf_r>
 8009d0a:	6813      	ldr	r3, [r2, #0]
 8009d0c:	1c58      	adds	r0, r3, #1
 8009d0e:	6010      	str	r0, [r2, #0]
 8009d10:	7019      	strb	r1, [r3, #0]
 8009d12:	4608      	mov	r0, r1
 8009d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <__sfputs_r>:
 8009d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	460f      	mov	r7, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	18d5      	adds	r5, r2, r3
 8009d24:	42ac      	cmp	r4, r5
 8009d26:	d101      	bne.n	8009d2c <__sfputs_r+0x12>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	e007      	b.n	8009d3c <__sfputs_r+0x22>
 8009d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d30:	463a      	mov	r2, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7ff ffda 	bl	8009cec <__sfputc_r>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d1f3      	bne.n	8009d24 <__sfputs_r+0xa>
 8009d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d40 <_vfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	460d      	mov	r5, r1
 8009d46:	b09d      	sub	sp, #116	; 0x74
 8009d48:	4614      	mov	r4, r2
 8009d4a:	4698      	mov	r8, r3
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	b118      	cbz	r0, 8009d58 <_vfiprintf_r+0x18>
 8009d50:	6a03      	ldr	r3, [r0, #32]
 8009d52:	b90b      	cbnz	r3, 8009d58 <_vfiprintf_r+0x18>
 8009d54:	f7fe f8dc 	bl	8007f10 <__sinit>
 8009d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d66:	f7fe f95f 	bl	8008028 <__retarget_lock_acquire_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	071b      	lsls	r3, r3, #28
 8009d6e:	d501      	bpl.n	8009d74 <_vfiprintf_r+0x34>
 8009d70:	692b      	ldr	r3, [r5, #16]
 8009d72:	b99b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x5c>
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f000 f93a 	bl	8009ff0 <__swsetup_r>
 8009d7c:	b170      	cbz	r0, 8009d9c <_vfiprintf_r+0x5c>
 8009d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d80:	07dc      	lsls	r4, r3, #31
 8009d82:	d504      	bpl.n	8009d8e <_vfiprintf_r+0x4e>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d88:	b01d      	add	sp, #116	; 0x74
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	0598      	lsls	r0, r3, #22
 8009d92:	d4f7      	bmi.n	8009d84 <_vfiprintf_r+0x44>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f7fe f948 	bl	800802a <__retarget_lock_release_recursive>
 8009d9a:	e7f3      	b.n	8009d84 <_vfiprintf_r+0x44>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009da0:	2320      	movs	r3, #32
 8009da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009daa:	2330      	movs	r3, #48	; 0x30
 8009dac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f60 <_vfiprintf_r+0x220>
 8009db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db4:	f04f 0901 	mov.w	r9, #1
 8009db8:	4623      	mov	r3, r4
 8009dba:	469a      	mov	sl, r3
 8009dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_vfiprintf_r+0x86>
 8009dc2:	2a25      	cmp	r2, #37	; 0x25
 8009dc4:	d1f9      	bne.n	8009dba <_vfiprintf_r+0x7a>
 8009dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dca:	d00b      	beq.n	8009de4 <_vfiprintf_r+0xa4>
 8009dcc:	465b      	mov	r3, fp
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ffa1 	bl	8009d1a <__sfputs_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f000 80a9 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de0:	445a      	add	r2, fp
 8009de2:	9209      	str	r2, [sp, #36]	; 0x24
 8009de4:	f89a 3000 	ldrb.w	r3, [sl]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80a1 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e04:	931a      	str	r3, [sp, #104]	; 0x68
 8009e06:	4654      	mov	r4, sl
 8009e08:	2205      	movs	r2, #5
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	4854      	ldr	r0, [pc, #336]	; (8009f60 <_vfiprintf_r+0x220>)
 8009e10:	f7f6 f9e6 	bl	80001e0 <memchr>
 8009e14:	9a04      	ldr	r2, [sp, #16]
 8009e16:	b9d8      	cbnz	r0, 8009e50 <_vfiprintf_r+0x110>
 8009e18:	06d1      	lsls	r1, r2, #27
 8009e1a:	bf44      	itt	mi
 8009e1c:	2320      	movmi	r3, #32
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e22:	0713      	lsls	r3, r2, #28
 8009e24:	bf44      	itt	mi
 8009e26:	232b      	movmi	r3, #43	; 0x2b
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d015      	beq.n	8009e60 <_vfiprintf_r+0x120>
 8009e34:	9a07      	ldr	r2, [sp, #28]
 8009e36:	4654      	mov	r4, sl
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4621      	mov	r1, r4
 8009e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e44:	3b30      	subs	r3, #48	; 0x30
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d94d      	bls.n	8009ee6 <_vfiprintf_r+0x1a6>
 8009e4a:	b1b0      	cbz	r0, 8009e7a <_vfiprintf_r+0x13a>
 8009e4c:	9207      	str	r2, [sp, #28]
 8009e4e:	e014      	b.n	8009e7a <_vfiprintf_r+0x13a>
 8009e50:	eba0 0308 	sub.w	r3, r0, r8
 8009e54:	fa09 f303 	lsl.w	r3, r9, r3
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	46a2      	mov	sl, r4
 8009e5e:	e7d2      	b.n	8009e06 <_vfiprintf_r+0xc6>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	1d19      	adds	r1, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbb      	ittet	lt
 8009e6c:	425b      	neglt	r3, r3
 8009e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e72:	9307      	strge	r3, [sp, #28]
 8009e74:	9307      	strlt	r3, [sp, #28]
 8009e76:	bfb8      	it	lt
 8009e78:	9204      	strlt	r2, [sp, #16]
 8009e7a:	7823      	ldrb	r3, [r4, #0]
 8009e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7e:	d10c      	bne.n	8009e9a <_vfiprintf_r+0x15a>
 8009e80:	7863      	ldrb	r3, [r4, #1]
 8009e82:	2b2a      	cmp	r3, #42	; 0x2a
 8009e84:	d134      	bne.n	8009ef0 <_vfiprintf_r+0x1b0>
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	1d1a      	adds	r2, r3, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	9203      	str	r2, [sp, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfb8      	it	lt
 8009e92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e96:	3402      	adds	r4, #2
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f70 <_vfiprintf_r+0x230>
 8009e9e:	7821      	ldrb	r1, [r4, #0]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f7f6 f99c 	bl	80001e0 <memchr>
 8009ea8:	b138      	cbz	r0, 8009eba <_vfiprintf_r+0x17a>
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	eba0 000a 	sub.w	r0, r0, sl
 8009eb0:	2240      	movs	r2, #64	; 0x40
 8009eb2:	4082      	lsls	r2, r0
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	4829      	ldr	r0, [pc, #164]	; (8009f64 <_vfiprintf_r+0x224>)
 8009ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec4:	2206      	movs	r2, #6
 8009ec6:	f7f6 f98b 	bl	80001e0 <memchr>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d03f      	beq.n	8009f4e <_vfiprintf_r+0x20e>
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <_vfiprintf_r+0x228>)
 8009ed0:	bb1b      	cbnz	r3, 8009f1a <_vfiprintf_r+0x1da>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	3307      	adds	r3, #7
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	3308      	adds	r3, #8
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee0:	443b      	add	r3, r7
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	e768      	b.n	8009db8 <_vfiprintf_r+0x78>
 8009ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eea:	460c      	mov	r4, r1
 8009eec:	2001      	movs	r0, #1
 8009eee:	e7a6      	b.n	8009e3e <_vfiprintf_r+0xfe>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	3401      	adds	r4, #1
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f04f 0c0a 	mov.w	ip, #10
 8009efc:	4620      	mov	r0, r4
 8009efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f02:	3a30      	subs	r2, #48	; 0x30
 8009f04:	2a09      	cmp	r2, #9
 8009f06:	d903      	bls.n	8009f10 <_vfiprintf_r+0x1d0>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0c6      	beq.n	8009e9a <_vfiprintf_r+0x15a>
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	e7c4      	b.n	8009e9a <_vfiprintf_r+0x15a>
 8009f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f14:	4604      	mov	r4, r0
 8009f16:	2301      	movs	r3, #1
 8009f18:	e7f0      	b.n	8009efc <_vfiprintf_r+0x1bc>
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <_vfiprintf_r+0x22c>)
 8009f22:	a904      	add	r1, sp, #16
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7fd fbb3 	bl	8007690 <_printf_float>
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	1c78      	adds	r0, r7, #1
 8009f2e:	d1d6      	bne.n	8009ede <_vfiprintf_r+0x19e>
 8009f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3e:	f7fe f874 	bl	800802a <__retarget_lock_release_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af1d 	bmi.w	8009d84 <_vfiprintf_r+0x44>
 8009f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4c:	e71c      	b.n	8009d88 <_vfiprintf_r+0x48>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <_vfiprintf_r+0x22c>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7fd fe3d 	bl	8007bd8 <_printf_i>
 8009f5e:	e7e4      	b.n	8009f2a <_vfiprintf_r+0x1ea>
 8009f60:	0800ac71 	.word	0x0800ac71
 8009f64:	0800ac7b 	.word	0x0800ac7b
 8009f68:	08007691 	.word	0x08007691
 8009f6c:	08009d1b 	.word	0x08009d1b
 8009f70:	0800ac77 	.word	0x0800ac77

08009f74 <__swbuf_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	460e      	mov	r6, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	b118      	cbz	r0, 8009f86 <__swbuf_r+0x12>
 8009f7e:	6a03      	ldr	r3, [r0, #32]
 8009f80:	b90b      	cbnz	r3, 8009f86 <__swbuf_r+0x12>
 8009f82:	f7fd ffc5 	bl	8007f10 <__sinit>
 8009f86:	69a3      	ldr	r3, [r4, #24]
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	071a      	lsls	r2, r3, #28
 8009f8e:	d525      	bpl.n	8009fdc <__swbuf_r+0x68>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b31b      	cbz	r3, 8009fdc <__swbuf_r+0x68>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	6922      	ldr	r2, [r4, #16]
 8009f98:	1a98      	subs	r0, r3, r2
 8009f9a:	6963      	ldr	r3, [r4, #20]
 8009f9c:	b2f6      	uxtb	r6, r6
 8009f9e:	4283      	cmp	r3, r0
 8009fa0:	4637      	mov	r7, r6
 8009fa2:	dc04      	bgt.n	8009fae <__swbuf_r+0x3a>
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f7ff f94e 	bl	8009248 <_fflush_r>
 8009fac:	b9e0      	cbnz	r0, 8009fe8 <__swbuf_r+0x74>
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	701e      	strb	r6, [r3, #0]
 8009fbc:	6962      	ldr	r2, [r4, #20]
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d004      	beq.n	8009fce <__swbuf_r+0x5a>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	07db      	lsls	r3, r3, #31
 8009fc8:	d506      	bpl.n	8009fd8 <__swbuf_r+0x64>
 8009fca:	2e0a      	cmp	r6, #10
 8009fcc:	d104      	bne.n	8009fd8 <__swbuf_r+0x64>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f7ff f939 	bl	8009248 <_fflush_r>
 8009fd6:	b938      	cbnz	r0, 8009fe8 <__swbuf_r+0x74>
 8009fd8:	4638      	mov	r0, r7
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 f806 	bl	8009ff0 <__swsetup_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d0d5      	beq.n	8009f94 <__swbuf_r+0x20>
 8009fe8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009fec:	e7f4      	b.n	8009fd8 <__swbuf_r+0x64>
	...

08009ff0 <__swsetup_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <__swsetup_r+0xac>)
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	b118      	cbz	r0, 800a004 <__swsetup_r+0x14>
 8009ffc:	6a03      	ldr	r3, [r0, #32]
 8009ffe:	b90b      	cbnz	r3, 800a004 <__swsetup_r+0x14>
 800a000:	f7fd ff86 	bl	8007f10 <__sinit>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00a:	0718      	lsls	r0, r3, #28
 800a00c:	d422      	bmi.n	800a054 <__swsetup_r+0x64>
 800a00e:	06d9      	lsls	r1, r3, #27
 800a010:	d407      	bmi.n	800a022 <__swsetup_r+0x32>
 800a012:	2309      	movs	r3, #9
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a020:	e034      	b.n	800a08c <__swsetup_r+0x9c>
 800a022:	0758      	lsls	r0, r3, #29
 800a024:	d512      	bpl.n	800a04c <__swsetup_r+0x5c>
 800a026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a028:	b141      	cbz	r1, 800a03c <__swsetup_r+0x4c>
 800a02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a02e:	4299      	cmp	r1, r3
 800a030:	d002      	beq.n	800a038 <__swsetup_r+0x48>
 800a032:	4628      	mov	r0, r5
 800a034:	f7ff fdce 	bl	8009bd4 <_free_r>
 800a038:	2300      	movs	r3, #0
 800a03a:	6363      	str	r3, [r4, #52]	; 0x34
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	2300      	movs	r3, #0
 800a046:	6063      	str	r3, [r4, #4]
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f043 0308 	orr.w	r3, r3, #8
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	b94b      	cbnz	r3, 800a06c <__swsetup_r+0x7c>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a062:	d003      	beq.n	800a06c <__swsetup_r+0x7c>
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f840 	bl	800a0ec <__smakebuf_r>
 800a06c:	89a0      	ldrh	r0, [r4, #12]
 800a06e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a072:	f010 0301 	ands.w	r3, r0, #1
 800a076:	d00a      	beq.n	800a08e <__swsetup_r+0x9e>
 800a078:	2300      	movs	r3, #0
 800a07a:	60a3      	str	r3, [r4, #8]
 800a07c:	6963      	ldr	r3, [r4, #20]
 800a07e:	425b      	negs	r3, r3
 800a080:	61a3      	str	r3, [r4, #24]
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	b943      	cbnz	r3, 800a098 <__swsetup_r+0xa8>
 800a086:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a08a:	d1c4      	bne.n	800a016 <__swsetup_r+0x26>
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	0781      	lsls	r1, r0, #30
 800a090:	bf58      	it	pl
 800a092:	6963      	ldrpl	r3, [r4, #20]
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	e7f4      	b.n	800a082 <__swsetup_r+0x92>
 800a098:	2000      	movs	r0, #0
 800a09a:	e7f7      	b.n	800a08c <__swsetup_r+0x9c>
 800a09c:	2000018c 	.word	0x2000018c

0800a0a0 <__swhatbuf_r>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	b096      	sub	sp, #88	; 0x58
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	461e      	mov	r6, r3
 800a0b0:	da0d      	bge.n	800a0ce <__swhatbuf_r+0x2e>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0b8:	f04f 0100 	mov.w	r1, #0
 800a0bc:	bf0c      	ite	eq
 800a0be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0c2:	2340      	movne	r3, #64	; 0x40
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	6031      	str	r1, [r6, #0]
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	b016      	add	sp, #88	; 0x58
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	466a      	mov	r2, sp
 800a0d0:	f000 f848 	bl	800a164 <_fstat_r>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dbec      	blt.n	800a0b2 <__swhatbuf_r+0x12>
 800a0d8:	9901      	ldr	r1, [sp, #4]
 800a0da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a0de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a0e2:	4259      	negs	r1, r3
 800a0e4:	4159      	adcs	r1, r3
 800a0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ea:	e7eb      	b.n	800a0c4 <__swhatbuf_r+0x24>

0800a0ec <__smakebuf_r>:
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0f0:	079d      	lsls	r5, r3, #30
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	d507      	bpl.n	800a108 <__smakebuf_r+0x1c>
 800a0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	2301      	movs	r3, #1
 800a102:	6163      	str	r3, [r4, #20]
 800a104:	b002      	add	sp, #8
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	ab01      	add	r3, sp, #4
 800a10a:	466a      	mov	r2, sp
 800a10c:	f7ff ffc8 	bl	800a0a0 <__swhatbuf_r>
 800a110:	9900      	ldr	r1, [sp, #0]
 800a112:	4605      	mov	r5, r0
 800a114:	4630      	mov	r0, r6
 800a116:	f7fe ff91 	bl	800903c <_malloc_r>
 800a11a:	b948      	cbnz	r0, 800a130 <__smakebuf_r+0x44>
 800a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d4ef      	bmi.n	800a104 <__smakebuf_r+0x18>
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	e7e3      	b.n	800a0f8 <__smakebuf_r+0xc>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	9b00      	ldr	r3, [sp, #0]
 800a13c:	6163      	str	r3, [r4, #20]
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	6120      	str	r0, [r4, #16]
 800a142:	b15b      	cbz	r3, 800a15c <__smakebuf_r+0x70>
 800a144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f81d 	bl	800a188 <_isatty_r>
 800a14e:	b128      	cbz	r0, 800a15c <__smakebuf_r+0x70>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	431d      	orrs	r5, r3
 800a160:	81a5      	strh	r5, [r4, #12]
 800a162:	e7cf      	b.n	800a104 <__smakebuf_r+0x18>

0800a164 <_fstat_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	; (800a184 <_fstat_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f8 fbea 	bl	800294a <_fstat>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_fstat_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_fstat_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	20002660 	.word	0x20002660

0800a188 <_isatty_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d06      	ldr	r5, [pc, #24]	; (800a1a4 <_isatty_r+0x1c>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	4608      	mov	r0, r1
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	f7f8 fbe9 	bl	800296a <_isatty>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_isatty_r+0x1a>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_isatty_r+0x1a>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	20002660 	.word	0x20002660

0800a1a8 <_raise_r>:
 800a1a8:	291f      	cmp	r1, #31
 800a1aa:	b538      	push	{r3, r4, r5, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	d904      	bls.n	800a1bc <_raise_r+0x14>
 800a1b2:	2316      	movs	r3, #22
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1be:	b112      	cbz	r2, 800a1c6 <_raise_r+0x1e>
 800a1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1c4:	b94b      	cbnz	r3, 800a1da <_raise_r+0x32>
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 f830 	bl	800a22c <_getpid_r>
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d6:	f000 b817 	b.w	800a208 <_kill_r>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d00a      	beq.n	800a1f4 <_raise_r+0x4c>
 800a1de:	1c59      	adds	r1, r3, #1
 800a1e0:	d103      	bne.n	800a1ea <_raise_r+0x42>
 800a1e2:	2316      	movs	r3, #22
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	e7e7      	b.n	800a1ba <_raise_r+0x12>
 800a1ea:	2400      	movs	r4, #0
 800a1ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	4798      	blx	r3
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e7e0      	b.n	800a1ba <_raise_r+0x12>

0800a1f8 <raise>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <raise+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f7ff bfd3 	b.w	800a1a8 <_raise_r>
 800a202:	bf00      	nop
 800a204:	2000018c 	.word	0x2000018c

0800a208 <_kill_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d07      	ldr	r5, [pc, #28]	; (800a228 <_kill_r+0x20>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	4611      	mov	r1, r2
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	f7f8 fb39 	bl	800288c <_kill>
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	d102      	bne.n	800a224 <_kill_r+0x1c>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	b103      	cbz	r3, 800a224 <_kill_r+0x1c>
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	bf00      	nop
 800a228:	20002660 	.word	0x20002660

0800a22c <_getpid_r>:
 800a22c:	f7f8 bb26 	b.w	800287c <_getpid>

0800a230 <_init>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	bf00      	nop
 800a234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a236:	bc08      	pop	{r3}
 800a238:	469e      	mov	lr, r3
 800a23a:	4770      	bx	lr

0800a23c <_fini>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr
