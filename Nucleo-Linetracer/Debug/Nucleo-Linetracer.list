
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  080079b0  080079b0  000179b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008264  08008264  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800826c  0800826c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800826c  0800826c  0001826c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08008274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  20000220  08008494  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  08008494  0002130c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad38  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f1  00000000  00000000  0002af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015779  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8ce  00000000  00000000  00044949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074c26  00000000  00000000  00051217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  000c5e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007994 	.word	0x08007994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08007994 	.word	0x08007994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001016:	b480      	push	{r7}
 8001018:	b089      	sub	sp, #36	; 0x24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	332c      	adds	r3, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800102e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001032:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	fa92 f2a2 	rbit	r2, r2
 800103a:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	fab2 f282 	clz	r2, r2
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	40d3      	lsrs	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	211f      	movs	r1, #31
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	401a      	ands	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 011f 	and.w	r1, r3, #31
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	431a      	orrs	r2, r3
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b08d      	sub	sp, #52	; 0x34
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	330c      	adds	r3, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	617a      	str	r2, [r7, #20]
  return result;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010e8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010ec:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	6a39      	ldr	r1, [r7, #32]
 80010f0:	fa91 f1a1 	rbit	r1, r1
 80010f4:	61f9      	str	r1, [r7, #28]
  return result;
 80010f6:	69f9      	ldr	r1, [r7, #28]
 80010f8:	fab1 f181 	clz	r1, r1
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	40cb      	lsrs	r3, r1
 8001100:	2107      	movs	r1, #7
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001110:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001114:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001118:	fa91 f1a1 	rbit	r1, r1
 800111c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800111e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001120:	fab1 f181 	clz	r1, r1
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	40cb      	lsrs	r3, r1
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	431a      	orrs	r2, r3
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001134:	bf00      	nop
 8001136:	3734      	adds	r7, #52	; 0x34
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60da      	str	r2, [r3, #12]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f023 0201 	bic.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_RCC_HSI_Enable+0x1c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <LL_RCC_HSI_Enable+0x1c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <LL_RCC_HSI_IsReady+0x20>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800

0800120c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <LL_RCC_SetSysClkSource+0x24>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 0203 	bic.w	r2, r3, #3
 8001248:	4904      	ldr	r1, [pc, #16]	; (800125c <LL_RCC_SetSysClkSource+0x24>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40023800 	.word	0x40023800

08001260 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_RCC_GetSysClkSource+0x18>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	4904      	ldr	r1, [pc, #16]	; (80012a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023800 	.word	0x40023800

080012a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800

080012cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012dc:	4904      	ldr	r1, [pc, #16]	; (80012f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023800 	.word	0x40023800

080012f4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <LL_RCC_SetTIMPrescaler+0x28>)
 80012fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001302:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001306:	4905      	ldr	r1, [pc, #20]	; (800131c <LL_RCC_SetTIMPrescaler+0x28>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4313      	orrs	r3, r2
 800130c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <LL_RCC_PLL_Enable+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <LL_RCC_PLL_Enable+0x1c>)
 800132a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <LL_RCC_PLL_IsReady+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800137c:	4013      	ands	r3, r2
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4311      	orrs	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	0192      	lsls	r2, r2, #6
 8001388:	430a      	orrs	r2, r1
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40023800 	.word	0x40023800
 80013b0:	ffbf8000 	.word	0xffbf8000

080013b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40023800 	.word	0x40023800

080013e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40023800 	.word	0x40023800

08001414 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <LL_APB2_GRP1_EnableClock+0x2c>)
 800142a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40023800 	.word	0x40023800

08001444 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <LL_SYSCFG_SetEXTISource+0x58>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3302      	adds	r3, #2
 8001456:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	43db      	mvns	r3, r3
 8001460:	ea02 0103 	and.w	r1, r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	0c1b      	lsrs	r3, r3, #16
 8001468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	60bb      	str	r3, [r7, #8]
  return result;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	fa03 f202 	lsl.w	r2, r3, r2
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <LL_SYSCFG_SetEXTISource+0x58>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	430a      	orrs	r2, r1
 800148a:	3302      	adds	r3, #2
 800148c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40013800 	.word	0x40013800

080014a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_FLASH_SetLatency+0x24>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 0207 	bic.w	r2, r3, #7
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <LL_FLASH_SetLatency+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_FLASH_GetLatency+0x18>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80014f4:	4904      	ldr	r1, [pc, #16]	; (8001508 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40007000 	.word	0x40007000

0800150c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40007000 	.word	0x40007000

08001534 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f023 0210 	bic.w	r2, r3, #16
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 0208 	bic.w	r2, r3, #8
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d2:	f023 0307 	bic.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	615a      	str	r2, [r3, #20]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	613b      	str	r3, [r7, #16]
  return result;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2103      	movs	r1, #3
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	61bb      	str	r3, [r7, #24]
  return result;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	601a      	str	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016da:	b480      	push	{r7}
 80016dc:	b089      	sub	sp, #36	; 0x24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	613b      	str	r3, [r7, #16]
  return result;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2103      	movs	r1, #3
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	401a      	ands	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	61bb      	str	r3, [r7, #24]
  return result;
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	60da      	str	r2, [r3, #12]
}
 800172c:	bf00      	nop
 800172e:	3724      	adds	r7, #36	; 0x24
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800175a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800175e:	f7ff fe59 	bl	8001414 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001762:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001766:	f7ff fe3d 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176a:	2007      	movs	r0, #7
 800176c:	f7ff fba6 	bl	8000ebc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f818 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f000 fb26 	bl	8001dc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001778:	f000 f862 	bl	8001840 <MX_ADC1_Init>
  MX_I2C3_Init();
 800177c:	f000 f8de 	bl	800193c <MX_I2C3_Init>
  MX_TIM2_Init();
 8001780:	f000 f99e 	bl	8001ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001784:	f000 f9d4 	bl	8001b30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001788:	f000 fa12 	bl	8001bb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800178c:	f000 fa50 	bl	8001c30 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001790:	f000 fac8 	bl	8001d24 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001794:	f000 fa8c 	bl	8001cb0 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001798:	f000 f93e 	bl	8001a18 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Init();
 800179c:	f002 fc2a 	bl	8003ff4 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80017a0:	e7fe      	b.n	80017a0 <main+0x4a>
	...

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f7ff fe79 	bl	80014a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80017ae:	bf00      	nop
 80017b0:	f7ff fe8a 	bl	80014c8 <LL_FLASH_GetLatency>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d1fa      	bne.n	80017b0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80017ba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80017be:	f7ff fe91 	bl	80014e4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80017c2:	2010      	movs	r0, #16
 80017c4:	f7ff fd22 	bl	800120c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80017c8:	f7ff fcfe 	bl	80011c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017cc:	bf00      	nop
 80017ce:	f7ff fd0b 	bl	80011e8 <LL_RCC_HSI_IsReady>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d1fa      	bne.n	80017ce <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 80017d8:	2300      	movs	r3, #0
 80017da:	2264      	movs	r2, #100	; 0x64
 80017dc:	2108      	movs	r1, #8
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fdc2 	bl	8001368 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80017e4:	f7ff fd9c 	bl	8001320 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80017e8:	bf00      	nop
 80017ea:	f7ff fda9 	bl	8001340 <LL_RCC_PLL_IsReady>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d1fa      	bne.n	80017ea <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80017f4:	bf00      	nop
 80017f6:	f7ff fe89 	bl	800150c <LL_PWR_IsActiveFlag_VOS>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0fa      	beq.n	80017f6 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fd3b 	bl	800127c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001806:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800180a:	f7ff fd4b 	bl	80012a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fd5c 	bl	80012cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff fd0f 	bl	8001238 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800181a:	bf00      	nop
 800181c:	f7ff fd20 	bl	8001260 <LL_RCC_GetSysClkSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b08      	cmp	r3, #8
 8001824:	d1fa      	bne.n	800181c <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <SystemClock_Config+0x98>)
 8001828:	f001 fed2 	bl	80035d0 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <SystemClock_Config+0x98>)
 800182e:	f001 fedd 	bl	80035ec <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fd5e 	bl	80012f4 <LL_RCC_SetTIMPrescaler>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	05f5e100 	.word	0x05f5e100

08001840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	; 0x40
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001876:	f44f 7080 	mov.w	r0, #256	; 0x100
 800187a:	f7ff fdcb 	bl	8001414 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fd98 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001884:	2002      	movs	r0, #2
 8001886:	f7ff fd95 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4823      	ldr	r0, [pc, #140]	; (8001928 <MX_ADC1_Init+0xe8>)
 800189c:	f000 ff96 	bl	80027cc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin|LL_GPIO_PIN_1;
 80018a0:	2303      	movs	r3, #3
 80018a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	481e      	ldr	r0, [pc, #120]	; (800192c <MX_ADC1_Init+0xec>)
 80018b2:	f000 ff8b 	bl	80027cc <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80018c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c6:	4619      	mov	r1, r3
 80018c8:	4819      	ldr	r0, [pc, #100]	; (8001930 <MX_ADC1_Init+0xf0>)
 80018ca:	f000 fcf3 	bl	80022b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	4619      	mov	r1, r3
 80018e8:	4811      	ldr	r0, [pc, #68]	; (8001930 <MX_ADC1_Init+0xf0>)
 80018ea:	f000 fd0f 	bl	800230c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80018ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f2:	480f      	ldr	r0, [pc, #60]	; (8001930 <MX_ADC1_Init+0xf0>)
 80018f4:	f7ff fbc5 	bl	8001082 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <MX_ADC1_Init+0xf4>)
 8001906:	f000 fcb7 	bl	8002278 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <MX_ADC1_Init+0xf8>)
 800190c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_ADC1_Init+0xf0>)
 8001912:	f7ff fb80 	bl	8001016 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001916:	2201      	movs	r2, #1
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <MX_ADC1_Init+0xf8>)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_ADC1_Init+0xf0>)
 800191c:	f7ff fbc4 	bl	80010a8 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3740      	adds	r7, #64	; 0x40
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40012000 	.word	0x40012000
 8001934:	40012300 	.word	0x40012300
 8001938:	03200006 	.word	0x03200006

0800193c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2220      	movs	r2, #32
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f946 	bl	8004bdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001960:	2004      	movs	r0, #4
 8001962:	f7ff fd27 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fd24 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001972:	2302      	movs	r3, #2
 8001974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001982:	2304      	movs	r3, #4
 8001984:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	481f      	ldr	r0, [pc, #124]	; (8001a08 <MX_I2C3_Init+0xcc>)
 800198c:	f000 ff1e 	bl	80027cc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001994:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001996:	2302      	movs	r3, #2
 8001998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800199e:	2301      	movs	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	463b      	mov	r3, r7
 80019ac:	4619      	mov	r1, r3
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <MX_I2C3_Init+0xd0>)
 80019b0:	f000 ff0c 	bl	80027cc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80019b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019b8:	f7ff fd14 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <MX_I2C3_Init+0xd4>)
 80019be:	f7ff fbf2 	bl	80011a6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 80019c2:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_I2C3_Init+0xd4>)
 80019c4:	f7ff fbcc 	bl	8001160 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <MX_I2C3_Init+0xd4>)
 80019ca:	f7ff fbb9 	bl	8001140 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_I2C3_Init+0xd8>)
 80019d4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 80019ea:	f107 0318 	add.w	r3, r7, #24
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MX_I2C3_Init+0xd4>)
 80019f2:	f001 f86b 	bl	8002acc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_I2C3_Init+0xd4>)
 80019fa:	f7ff fbc1 	bl	8001180 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3738      	adds	r7, #56	; 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40005c00 	.word	0x40005c00
 8001a14:	000186a0 	.word	0x000186a0

08001a18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b090      	sub	sp, #64	; 0x40
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	2228      	movs	r2, #40	; 0x28
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f8d8 	bl	8004bdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a40:	f7ff fcd0 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a44:	2002      	movs	r0, #2
 8001a46:	f7ff fcb5 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001a4a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a4e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a50:	2302      	movs	r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a60:	2305      	movs	r3, #5
 8001a62:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_SPI2_Init+0xa0>)
 8001a6a:	f000 feaf 	bl	80027cc <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a72:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a76:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001a96:	230a      	movs	r3, #10
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_SPI2_Init+0xa4>)
 8001aa2:	f001 f9aa 	bl	8002dfa <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_SPI2_Init+0xa4>)
 8001aaa:	f7ff fd43 	bl	8001534 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3740      	adds	r7, #64	; 0x40
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40003800 	.word	0x40003800

08001ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff fc85 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001ada:	2363      	movs	r3, #99	; 0x63
 8001adc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001af4:	f001 fa0e 	bl	8002f14 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001af8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001afc:	f7ff fd50 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b00:	2100      	movs	r1, #0
 8001b02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b06:	f7ff fd5b 	bl	80015c0 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b10:	f7ff fd23 	bl	800155a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001b14:	2100      	movs	r1, #0
 8001b16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b1a:	f7ff fd66 	bl	80015ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001b1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b22:	f7ff fd75 	bl	8001610 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff fc4d 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b4a:	f7ff f9db 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fa2b 	bl	8000fb0 <NVIC_EncodePriority>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	201d      	movs	r0, #29
 8001b60:	f7ff f9fc 	bl	8000f5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001b64:	201d      	movs	r0, #29
 8001b66:	f7ff f9db 	bl	8000f20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001b6a:	2363      	movs	r3, #99	; 0x63
 8001b6c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b76:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <MX_TIM3_Init+0x7c>)
 8001b82:	f001 f9c7 	bl	8002f14 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <MX_TIM3_Init+0x7c>)
 8001b88:	f7ff fcfa 	bl	8001580 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM3_Init+0x7c>)
 8001b90:	f7ff fd16 	bl	80015c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b94:	2100      	movs	r1, #0
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_TIM3_Init+0x7c>)
 8001b98:	f7ff fd27 	bl	80015ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM3_Init+0x7c>)
 8001b9e:	f7ff fd37 	bl	8001610 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400

08001bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff fc0d 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bca:	f7ff f99b 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f9eb 	bl	8000fb0 <NVIC_EncodePriority>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	201e      	movs	r0, #30
 8001be0:	f7ff f9bc 	bl	8000f5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001be4:	201e      	movs	r0, #30
 8001be6:	f7ff f99b 	bl	8000f20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001bea:	2363      	movs	r3, #99	; 0x63
 8001bec:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480a      	ldr	r0, [pc, #40]	; (8001c2c <MX_TIM4_Init+0x7c>)
 8001c02:	f001 f987 	bl	8002f14 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <MX_TIM4_Init+0x7c>)
 8001c08:	f7ff fcba 	bl	8001580 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <MX_TIM4_Init+0x7c>)
 8001c10:	f7ff fcd6 	bl	80015c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001c14:	2100      	movs	r1, #0
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM4_Init+0x7c>)
 8001c18:	f7ff fce7 	bl	80015ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_TIM4_Init+0x7c>)
 8001c1e:	f7ff fcf7 	bl	8001610 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40000800 	.word	0x40000800

08001c30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8001c44:	2008      	movs	r0, #8
 8001c46:	f7ff fbcd 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 8001c4a:	f7ff f95b 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2202      	movs	r2, #2
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f9ab 	bl	8000fb0 <NVIC_EncodePriority>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2032      	movs	r0, #50	; 0x32
 8001c60:	f7ff f97c 	bl	8000f5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f7ff f95b 	bl	8000f20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 8001c72:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c76:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <MX_TIM5_Init+0x7c>)
 8001c82:	f001 f947 	bl	8002f14 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <MX_TIM5_Init+0x7c>)
 8001c88:	f7ff fc8a 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM5_Init+0x7c>)
 8001c90:	f7ff fc96 	bl	80015c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8001c94:	2100      	movs	r1, #0
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_TIM5_Init+0x7c>)
 8001c98:	f7ff fca7 	bl	80015ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM5_Init+0x7c>)
 8001c9e:	f7ff fcb7 	bl	8001610 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8001cc4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cc8:	f7ff fba4 	bl	8001414 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8001ccc:	f7ff f91a 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f96a 	bl	8000fb0 <NVIC_EncodePriority>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	2018      	movs	r0, #24
 8001ce2:	f7ff f93b 	bl	8000f5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ce6:	2018      	movs	r0, #24
 8001ce8:	f7ff f91a 	bl	8000f20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8001cf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001cf8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM9_Init+0x70>)
 8001d04:	f001 f906 	bl	8002f14 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_TIM9_Init+0x70>)
 8001d0a:	f7ff fc49 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM9_Init+0x70>)
 8001d12:	f7ff fc55 	bl	80015c0 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40014000 	.word	0x40014000

08001d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	; 0x38
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
 8001d4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001d4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d52:	f7ff fb47 	bl	80013e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fb2c 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d60:	2302      	movs	r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d70:	2307      	movs	r3, #7
 8001d72:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4810      	ldr	r0, [pc, #64]	; (8001dbc <MX_USART2_UART_Init+0x98>)
 8001d7a:	f000 fd27 	bl	80027cc <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001d7e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d82:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d90:	230c      	movs	r3, #12
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <MX_USART2_UART_Init+0x9c>)
 8001da4:	f001 fb96 	bl	80034d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART2_UART_Init+0x9c>)
 8001daa:	f7ff fc51 	bl	8001650 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001dae:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <MX_USART2_UART_Init+0x9c>)
 8001db0:	f7ff fc3e 	bl	8001630 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40004400 	.word	0x40004400

08001dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001dca:	f107 0318 	add.w	r3, r7, #24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001de4:	2004      	movs	r0, #4
 8001de6:	f7ff fae5 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001dea:	2080      	movs	r0, #128	; 0x80
 8001dec:	f7ff fae2 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fadf 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f7ff fadc 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001dfc:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001e00:	4842      	ldr	r0, [pc, #264]	; (8001f0c <MX_GPIO_Init+0x148>)
 8001e02:	f7ff fc99 	bl	8001738 <LL_GPIO_ResetOutputPin>
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8001e06:	2130      	movs	r1, #48	; 0x30
 8001e08:	4841      	ldr	r0, [pc, #260]	; (8001f10 <MX_GPIO_Init+0x14c>)
 8001e0a:	f7ff fc95 	bl	8001738 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin
 8001e0e:	f247 3104 	movw	r1, #29444	; 0x7304
 8001e12:	4840      	ldr	r0, [pc, #256]	; (8001f14 <MX_GPIO_Init+0x150>)
 8001e14:	f7ff fc90 	bl	8001738 <LL_GPIO_ResetOutputPin>
                          |Motor_L2_Pin|Motor_R2_Pin);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001e18:	493f      	ldr	r1, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x154>)
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fb12 	bl	8001444 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fb42 	bl	80024c0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e42:	4832      	ldr	r0, [pc, #200]	; (8001f0c <MX_GPIO_Init+0x148>)
 8001e44:	f7ff fc49 	bl	80016da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	482f      	ldr	r0, [pc, #188]	; (8001f0c <MX_GPIO_Init+0x148>)
 8001e50:	f7ff fc14 	bl	800167c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001e54:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001e58:	603b      	str	r3, [r7, #0]
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4827      	ldr	r0, [pc, #156]	; (8001f0c <MX_GPIO_Init+0x148>)
 8001e70:	f000 fcac 	bl	80027cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001e74:	2310      	movs	r3, #16
 8001e76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4820      	ldr	r0, [pc, #128]	; (8001f10 <MX_GPIO_Init+0x14c>)
 8001e8e:	f000 fc9d 	bl	80027cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e92:	2320      	movs	r3, #32
 8001e94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4819      	ldr	r0, [pc, #100]	; (8001f10 <MX_GPIO_Init+0x14c>)
 8001eac:	f000 fc8e 	bl	80027cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <MX_GPIO_Init+0x150>)
 8001eca:	f000 fc7f 	bl	80027cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin|Motor_L2_Pin
 8001ece:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8001ed2:	603b      	str	r3, [r7, #0]
                          |Motor_R2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480a      	ldr	r0, [pc, #40]	; (8001f14 <MX_GPIO_Init+0x150>)
 8001eea:	f000 fc6f 	bl	80027cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWL_Pin|SWR_Pin;
 8001eee:	2330      	movs	r3, #48	; 0x30
 8001ef0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4619      	mov	r1, r3
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_GPIO_Init+0x150>)
 8001f00:	f000 fc64 	bl	80027cc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	00f00003 	.word	0x00f00003

08001f1c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f06f 0201 	mvn.w	r2, #1
 8001f2a:	611a      	str	r2, [r3, #16]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	motorPowerOff();
 8001f3c:	f002 f936 	bl	80041ac <motorPowerOff>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x8>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	motorPowerOff();
 8001f46:	f002 f931 	bl	80041ac <motorPowerOff>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <HardFault_Handler+0x8>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	motorPowerOff();
 8001f50:	f002 f92c 	bl	80041ac <motorPowerOff>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x8>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	motorPowerOff();
 8001f5a:	f002 f927 	bl	80041ac <motorPowerOff>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x8>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	motorPowerOff();
 8001f64:	f002 f922 	bl	80041ac <motorPowerOff>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x8>

08001f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  Drive_TIM9_IRQ();
 8001fa8:	f001 ff9a 	bl	8003ee0 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM9);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001fae:	f7ff ffb5 	bl	8001f1c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40014000 	.word	0x40014000

08001fbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Motor_L_TIM3_IRQ();
 8001fc0:	f002 f92e 	bl	8004220 <Motor_L_TIM3_IRQ>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM3_IRQHandler+0x14>)
 8001fc6:	f7ff ffa9 	bl	8001f1c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40000400 	.word	0x40000400

08001fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  Motor_R_TIM4_IRQ();
 8001fd8:	f002 f966 	bl	80042a8 <Motor_R_TIM4_IRQ>
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM4_IRQHandler+0x14>)
 8001fde:	f7ff ff9d 	bl	8001f1c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM4_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40000800 	.word	0x40000800

08001fec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  Sensor_TIM5_IRQ();
 8001ff0:	f002 fb6a 	bl	80046c8 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM5);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM5_IRQHandler+0x14>)
 8001ff6:	f7ff ff91 	bl	8001f1c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40000c00 	.word	0x40000c00

08002004 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_kill>:

int _kill(int pid, int sig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800201e:	f002 fda5 	bl	8004b6c <__errno>
 8002022:	4603      	mov	r3, r0
 8002024:	2216      	movs	r2, #22
 8002026:	601a      	str	r2, [r3, #0]
	return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_exit>:

void _exit (int status)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800203c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffe7 	bl	8002014 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002046:	e7fe      	b.n	8002046 <_exit+0x12>

08002048 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e00a      	b.n	8002070 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800205a:	f3af 8000 	nop.w
 800205e:	4601      	mov	r1, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf0      	blt.n	800205a <_read+0x12>
	}

return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e009      	b.n	80020a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60ba      	str	r2, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f001 ff91 	bl	8003fc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf1      	blt.n	8002094 <_write+0x12>
	}
	return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_close>:

int _close(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return -1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e2:	605a      	str	r2, [r3, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_isatty>:

int _isatty(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	return 1;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f002 fd0a 	bl	8004b6c <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20020000 	.word	0x20020000
 8002184:	00000400 	.word	0x00000400
 8002188:	2000023c 	.word	0x2000023c
 800218c:	20001310 	.word	0x20001310

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d0:	4c0b      	ldr	r4, [pc, #44]	; (8002200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021de:	f7ff ffd7 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f002 fcc9 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e6:	f7ff fab6 	bl	8001756 <main>
  bx  lr    
 80021ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80021f8:	08008274 	.word	0x08008274
  ldr r2, =_sbss
 80021fc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002200:	2000130c 	.word	0x2000130c

08002204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC_IRQHandler>

08002206 <LL_ADC_SetCommonClock>:
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_REG_SetSequencerLength>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	bf0c      	ite	eq
 8002266:	2301      	moveq	r3, #1
 8002268:	2300      	movne	r3, #0
 800226a:	b2db      	uxtb	r3, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <LL_ADC_CommonInit+0x38>)
 8002288:	f7ff ffe3 	bl	8002252 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffb4 	bl	8002206 <LL_ADC_SetCommonClock>
 800229e:	e001      	b.n	80022a4 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40012000 	.word	0x40012000

080022b4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffc5 	bl	8002252 <LL_ADC_IsEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d117      	bne.n	80022fe <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80022d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	6811      	ldr	r1, [r2, #0]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	6892      	ldr	r2, [r2, #8]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e001      	b.n	8002302 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff99 	bl	8002252 <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d12b      	bne.n	800237e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e005      	b.n	800234e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <LL_ADC_REG_Init+0x80>)
 8002354:	4013      	ands	r3, r2
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6912      	ldr	r2, [r2, #16]
 8002368:	430a      	orrs	r2, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff58 	bl	800222c <LL_ADC_REG_SetSequencerLength>
 800237c:	e001      	b.n	8002382 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	c0fffcfd 	.word	0xc0fffcfd

08002390 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40013c00 	.word	0x40013c00

080023dc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40013c00 	.word	0x40013c00

08002400 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <LL_EXTI_DisableEvent_0_31+0x24>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	43db      	mvns	r3, r3
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002412:	4013      	ands	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40013c00 	.word	0x40013c00

08002428 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4904      	ldr	r1, [pc, #16]	; (8002448 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40013c00 	.word	0x40013c00

0800244c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	43db      	mvns	r3, r3
 800245c:	4904      	ldr	r1, [pc, #16]	; (8002470 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800245e:	4013      	ands	r3, r2
 8002460:	608b      	str	r3, [r1, #8]

}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40013c00 	.word	0x40013c00

08002474 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40013c00 	.word	0x40013c00

08002498 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d065      	beq.n	80025a0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d06c      	beq.n	80025b6 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	795b      	ldrb	r3, [r3, #5]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d01c      	beq.n	800251e <LL_EXTI_Init+0x5e>
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	dc25      	bgt.n	8002534 <LL_EXTI_Init+0x74>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <LL_EXTI_Init+0x32>
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d00b      	beq.n	8002508 <LL_EXTI_Init+0x48>
 80024f0:	e020      	b.n	8002534 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff82 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff45 	bl	8002390 <LL_EXTI_EnableIT_0_31>
          break;
 8002506:	e018      	b.n	800253a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff51 	bl	80023b4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff60 	bl	80023dc <LL_EXTI_EnableEvent_0_31>
          break;
 800251c:	e00d      	b.n	800253a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff34 	bl	8002390 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff55 	bl	80023dc <LL_EXTI_EnableEvent_0_31>
          break;
 8002532:	e002      	b.n	800253a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
          break;
 8002538:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	799b      	ldrb	r3, [r3, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d039      	beq.n	80025b6 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d01c      	beq.n	8002584 <LL_EXTI_Init+0xc4>
 800254a:	2b03      	cmp	r3, #3
 800254c:	dc25      	bgt.n	800259a <LL_EXTI_Init+0xda>
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <LL_EXTI_Init+0x98>
 8002552:	2b02      	cmp	r3, #2
 8002554:	d00b      	beq.n	800256e <LL_EXTI_Init+0xae>
 8002556:	e020      	b.n	800259a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff9b 	bl	8002498 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff5e 	bl	8002428 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800256c:	e024      	b.n	80025b8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff6a 	bl	800244c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff79 	bl	8002474 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002582:	e019      	b.n	80025b8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff4d 	bl	8002428 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff6e 	bl	8002474 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002598:	e00e      	b.n	80025b8 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
            break;
 800259e:	e00b      	b.n	80025b8 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff05 	bl	80023b4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff26 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
 80025b4:	e000      	b.n	80025b8 <LL_EXTI_Init+0xf8>
      }
 80025b6:	bf00      	nop
  }
  return status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <LL_GPIO_SetPinMode>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	b089      	sub	sp, #36	; 0x24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	613b      	str	r3, [r7, #16]
  return result;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2103      	movs	r1, #3
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	61bb      	str	r3, [r7, #24]
  return result;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3724      	adds	r7, #36	; 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_GPIO_SetPinOutputType>:
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_GPIO_SetPinSpeed>:
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	613b      	str	r3, [r7, #16]
  return result;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2103      	movs	r1, #3
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61bb      	str	r3, [r7, #24]
  return result;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_GPIO_SetPinPull>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b089      	sub	sp, #36	; 0x24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	613b      	str	r3, [r7, #16]
  return result;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2103      	movs	r1, #3
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	401a      	ands	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3724      	adds	r7, #36	; 0x24
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_GPIO_SetAFPin_0_7>:
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	613b      	str	r3, [r7, #16]
  return result;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	210f      	movs	r1, #15
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	61bb      	str	r3, [r7, #24]
  return result;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_GPIO_SetAFPin_8_15>:
{
 800276a:	b480      	push	{r7}
 800276c:	b089      	sub	sp, #36	; 0x24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	613b      	str	r3, [r7, #16]
  return result;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	210f      	movs	r1, #15
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	61bb      	str	r3, [r7, #24]
  return result;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	431a      	orrs	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027c0:	bf00      	nop
 80027c2:	3724      	adds	r7, #36	; 0x24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	613b      	str	r3, [r7, #16]
  return result;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80027f6:	e050      	b.n	800289a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d042      	beq.n	8002894 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <LL_GPIO_Init+0x52>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d10d      	bne.n	800283a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	461a      	mov	r2, r3
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ff12 	bl	8002650 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	461a      	mov	r2, r3
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fef3 	bl	8002620 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	461a      	mov	r2, r3
 8002840:	69b9      	ldr	r1, [r7, #24]
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff33 	bl	80026ae <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d11a      	bne.n	8002886 <LL_GPIO_Init+0xba>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	60bb      	str	r3, [r7, #8]
  return result;
 800285c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b07      	cmp	r3, #7
 8002866:	d807      	bhi.n	8002878 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	461a      	mov	r2, r3
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff4b 	bl	800270c <LL_GPIO_SetAFPin_0_7>
 8002876:	e006      	b.n	8002886 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	461a      	mov	r2, r3
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff72 	bl	800276a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	69b9      	ldr	r1, [r7, #24]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fe97 	bl	80025c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1a7      	bne.n	80027f8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <LL_I2C_Enable>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_I2C_Disable>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_I2C_ConfigFilters>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f023 021f 	bic.w	r2, r3, #31
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	430b      	orrs	r3, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_I2C_SetOwnAddress1>:
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	430a      	orrs	r2, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <LL_I2C_ConfigSpeed+0x124>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	493a      	ldr	r1, [pc, #232]	; (8002a78 <LL_I2C_ConfigSpeed+0x128>)
 800298e:	428b      	cmp	r3, r1
 8002990:	d802      	bhi.n	8002998 <LL_I2C_ConfigSpeed+0x48>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3301      	adds	r3, #1
 8002996:	e009      	b.n	80029ac <LL_I2C_ConfigSpeed+0x5c>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4936      	ldr	r1, [pc, #216]	; (8002a7c <LL_I2C_ConfigSpeed+0x12c>)
 80029a4:	fba1 1303 	umull	r1, r3, r1, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	3301      	adds	r3, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <LL_I2C_ConfigSpeed+0x128>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d939      	bls.n	8002a2e <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d117      	bne.n	80029f0 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	e01d      	b.n	8002a26 <LL_I2C_ConfigSpeed+0xd6>
 80029ea:	f248 0301 	movw	r3, #32769	; 0x8001
 80029ee:	e01a      	b.n	8002a26 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009a      	lsls	r2, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a20:	e001      	b.n	8002a26 <LL_I2C_ConfigSpeed+0xd6>
 8002a22:	f248 0301 	movw	r3, #32769	; 0x8001
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e011      	b.n	8002a52 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a3c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	e000      	b.n	8002a50 <LL_I2C_ConfigSpeed+0x100>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	61da      	str	r2, [r3, #28]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	431bde83 	.word	0x431bde83
 8002a78:	000186a0 	.word	0x000186a0
 8002a7c:	10624dd3 	.word	0x10624dd3

08002a80 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 021a 	bic.w	r2, r3, #26
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fefb 	bl	80028d2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f89d 	bl	8002c20 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fefe 	bl	80028f2 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002af6:	6939      	ldr	r1, [r7, #16]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff25 	bl	8002950 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6959      	ldr	r1, [r3, #20]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff04 	bl	800291e <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ffaf 	bl	8002a80 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fec5 	bl	80028b2 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffb9 	bl	8002aa6 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <LL_RCC_GetSysClkSource>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <LL_RCC_GetSysClkSource+0x18>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <LL_RCC_GetAHBPrescaler>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <LL_RCC_GetAHBPrescaler+0x18>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <LL_RCC_GetAPB1Prescaler>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800

08002b94 <LL_RCC_GetAPB2Prescaler>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <LL_RCC_GetAPB2Prescaler+0x18>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <LL_RCC_PLL_GetMainSource+0x18>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <LL_RCC_PLL_GetN+0x18>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023800 	.word	0x40023800

08002be8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <LL_RCC_PLL_GetP+0x18>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <LL_RCC_PLL_GetDivider+0x18>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002c28:	f000 f820 	bl	8002c6c <RCC_GetSystemClockFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f840 	bl	8002cbc <RCC_GetHCLKClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f84e 	bl	8002ce8 <RCC_GetPCLK1ClockFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f85a 	bl	8002d10 <RCC_GetPCLK2ClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c76:	f7ff ff63 	bl	8002b40 <LL_RCC_GetSysClkSource>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d00c      	beq.n	8002c9a <RCC_GetSystemClockFreq+0x2e>
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d80f      	bhi.n	8002ca4 <RCC_GetSystemClockFreq+0x38>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <RCC_GetSystemClockFreq+0x22>
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d003      	beq.n	8002c94 <RCC_GetSystemClockFreq+0x28>
 8002c8c:	e00a      	b.n	8002ca4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <RCC_GetSystemClockFreq+0x48>)
 8002c90:	607b      	str	r3, [r7, #4]
      break;
 8002c92:	e00a      	b.n	8002caa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <RCC_GetSystemClockFreq+0x4c>)
 8002c96:	607b      	str	r3, [r7, #4]
      break;
 8002c98:	e007      	b.n	8002caa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002c9a:	2008      	movs	r0, #8
 8002c9c:	f000 f84c 	bl	8002d38 <RCC_PLL_GetFreqDomain_SYS>
 8002ca0:	6078      	str	r0, [r7, #4]
      break;
 8002ca2:	e002      	b.n	8002caa <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <RCC_GetSystemClockFreq+0x48>)
 8002ca6:	607b      	str	r3, [r7, #4]
      break;
 8002ca8:	bf00      	nop
  }

  return frequency;
 8002caa:	687b      	ldr	r3, [r7, #4]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002cc4:	f7ff ff4a 	bl	8002b5c <LL_RCC_GetAHBPrescaler>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <RCC_GetHCLKClockFreq+0x28>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	40d3      	lsrs	r3, r2
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08007bf0 	.word	0x08007bf0

08002ce8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002cf0:	f7ff ff42 	bl	8002b78 <LL_RCC_GetAPB1Prescaler>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <RCC_GetPCLK1ClockFreq+0x24>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	40d3      	lsrs	r3, r2
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08007c00 	.word	0x08007c00

08002d10 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d18:	f7ff ff3c 	bl	8002b94 <LL_RCC_GetAPB2Prescaler>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	40d3      	lsrs	r3, r2
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	08007c00 	.word	0x08007c00

08002d38 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d4c:	f7ff ff30 	bl	8002bb0 <LL_RCC_PLL_GetMainSource>
 8002d50:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5e:	d003      	beq.n	8002d68 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002d60:	e005      	b.n	8002d6e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d64:	617b      	str	r3, [r7, #20]
      break;
 8002d66:	e005      	b.n	8002d74 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002d6a:	617b      	str	r3, [r7, #20]
      break;
 8002d6c:	e002      	b.n	8002d74 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d70:	617b      	str	r3, [r7, #20]
      break;
 8002d72:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d113      	bne.n	8002da2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d7a:	f7ff ff43 	bl	8002c04 <LL_RCC_PLL_GetDivider>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fbb3 f4f2 	udiv	r4, r3, r2
 8002d86:	f7ff ff21 	bl	8002bcc <LL_RCC_PLL_GetN>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	fb03 f404 	mul.w	r4, r3, r4
 8002d90:	f7ff ff2a 	bl	8002be8 <LL_RCC_PLL_GetP>
 8002d94:	4603      	mov	r3, r0
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	3301      	adds	r3, #1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002da0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002da2:	693b      	ldr	r3, [r7, #16]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <LL_SPI_IsEnabled>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d101      	bne.n	8002dcc <LL_SPI_IsEnabled+0x18>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <LL_SPI_IsEnabled+0x1a>
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ffd3 	bl	8002db4 <LL_SPI_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d139      	bne.n	8002e88 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e1c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	6811      	ldr	r1, [r2, #0]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	6852      	ldr	r2, [r2, #4]
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	6892      	ldr	r2, [r2, #8]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68d2      	ldr	r2, [r2, #12]
 8002e34:	4311      	orrs	r1, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6912      	ldr	r2, [r2, #16]
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6952      	ldr	r2, [r2, #20]
 8002e40:	4311      	orrs	r1, r2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6992      	ldr	r2, [r2, #24]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	69d2      	ldr	r2, [r2, #28]
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6a12      	ldr	r2, [r2, #32]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 0204 	bic.w	r2, r3, #4
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	d105      	bne.n	8002e84 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffab 	bl	8002dda <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	61da      	str	r2, [r3, #28]
  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <LL_TIM_SetPrescaler>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_TIM_SetAutoReload>:
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_TIM_SetRepetitionCounter>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	615a      	str	r2, [r3, #20]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a31      	ldr	r2, [pc, #196]	; (8002fec <LL_TIM_Init+0xd8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00f      	beq.n	8002f4c <LL_TIM_Init+0x38>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d00b      	beq.n	8002f4c <LL_TIM_Init+0x38>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a2e      	ldr	r2, [pc, #184]	; (8002ff0 <LL_TIM_Init+0xdc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <LL_TIM_Init+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <LL_TIM_Init+0xe0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <LL_TIM_Init+0x38>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <LL_TIM_Init+0xe4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d106      	bne.n	8002f5a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <LL_TIM_Init+0xd8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01b      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d017      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <LL_TIM_Init+0xdc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <LL_TIM_Init+0xe0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00f      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <LL_TIM_Init+0xe4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <LL_TIM_Init+0xe8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <LL_TIM_Init+0xec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <LL_TIM_Init+0x86>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <LL_TIM_Init+0xf0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d106      	bne.n	8002fa8 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff80 	bl	8002eba <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff6c 	bl	8002e9e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <LL_TIM_Init+0xd8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d105      	bne.n	8002fda <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff7e 	bl	8002ed6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff89 	bl	8002ef2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800

08003008 <LL_USART_IsEnabled>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_USART_SetStopBitsLength>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_USART_SetHWFlowCtrl>:
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	615a      	str	r2, [r3, #20]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_USART_SetBaudRate>:
{
 800307c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003080:	b0c0      	sub	sp, #256	; 0x100
 8003082:	af00      	add	r7, sp, #0
 8003084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003088:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800308c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003090:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	f040 810c 	bne.w	80032b8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80030a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030b2:	4622      	mov	r2, r4
 80030b4:	462b      	mov	r3, r5
 80030b6:	1891      	adds	r1, r2, r2
 80030b8:	6639      	str	r1, [r7, #96]	; 0x60
 80030ba:	415b      	adcs	r3, r3
 80030bc:	667b      	str	r3, [r7, #100]	; 0x64
 80030be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030c2:	4621      	mov	r1, r4
 80030c4:	eb12 0801 	adds.w	r8, r2, r1
 80030c8:	4629      	mov	r1, r5
 80030ca:	eb43 0901 	adc.w	r9, r3, r1
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e2:	4690      	mov	r8, r2
 80030e4:	4699      	mov	r9, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	eb18 0303 	adds.w	r3, r8, r3
 80030ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030f0:	462b      	mov	r3, r5
 80030f2:	eb49 0303 	adc.w	r3, r9, r3
 80030f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030fe:	2200      	movs	r2, #0
 8003100:	469a      	mov	sl, r3
 8003102:	4693      	mov	fp, r2
 8003104:	eb1a 030a 	adds.w	r3, sl, sl
 8003108:	65bb      	str	r3, [r7, #88]	; 0x58
 800310a:	eb4b 030b 	adc.w	r3, fp, fp
 800310e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003110:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003114:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003118:	f7fd fd4e 	bl	8000bb8 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <LL_USART_SetBaudRate+0x238>)
 8003122:	fba3 2302 	umull	r2, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	b29b      	uxth	r3, r3
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	b29c      	uxth	r4, r3
 800312e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003138:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800313c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003140:	4642      	mov	r2, r8
 8003142:	464b      	mov	r3, r9
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6539      	str	r1, [r7, #80]	; 0x50
 8003148:	415b      	adcs	r3, r3
 800314a:	657b      	str	r3, [r7, #84]	; 0x54
 800314c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003150:	4641      	mov	r1, r8
 8003152:	1851      	adds	r1, r2, r1
 8003154:	64b9      	str	r1, [r7, #72]	; 0x48
 8003156:	4649      	mov	r1, r9
 8003158:	414b      	adcs	r3, r1
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003168:	4659      	mov	r1, fp
 800316a:	00cb      	lsls	r3, r1, #3
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003172:	4651      	mov	r1, sl
 8003174:	00ca      	lsls	r2, r1, #3
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	4603      	mov	r3, r0
 800317c:	4642      	mov	r2, r8
 800317e:	189b      	adds	r3, r3, r2
 8003180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003184:	464b      	mov	r3, r9
 8003186:	460a      	mov	r2, r1
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003190:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800319a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800319e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80031a2:	460b      	mov	r3, r1
 80031a4:	18db      	adds	r3, r3, r3
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
 80031a8:	4613      	mov	r3, r2
 80031aa:	eb42 0303 	adc.w	r3, r2, r3
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
 80031b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031b8:	f7fd fcfe 	bl	8000bb8 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4611      	mov	r1, r2
 80031c2:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <LL_USART_SetBaudRate+0x238>)
 80031c4:	fba3 2301 	umull	r2, r3, r3, r1
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2264      	movs	r2, #100	; 0x64
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	1acb      	subs	r3, r1, r3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <LL_USART_SetBaudRate+0x238>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4423      	add	r3, r4
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031fa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031fe:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003202:	4642      	mov	r2, r8
 8003204:	464b      	mov	r3, r9
 8003206:	1891      	adds	r1, r2, r2
 8003208:	63b9      	str	r1, [r7, #56]	; 0x38
 800320a:	415b      	adcs	r3, r3
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003212:	4641      	mov	r1, r8
 8003214:	1851      	adds	r1, r2, r1
 8003216:	6339      	str	r1, [r7, #48]	; 0x30
 8003218:	4649      	mov	r1, r9
 800321a:	414b      	adcs	r3, r1
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800322a:	4659      	mov	r1, fp
 800322c:	00cb      	lsls	r3, r1, #3
 800322e:	4651      	mov	r1, sl
 8003230:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003234:	4651      	mov	r1, sl
 8003236:	00ca      	lsls	r2, r1, #3
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	4603      	mov	r3, r0
 800323e:	4642      	mov	r2, r8
 8003240:	189b      	adds	r3, r3, r2
 8003242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003246:	464b      	mov	r3, r9
 8003248:	460a      	mov	r2, r1
 800324a:	eb42 0303 	adc.w	r3, r2, r3
 800324e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003252:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003260:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003264:	460b      	mov	r3, r1
 8003266:	18db      	adds	r3, r3, r3
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 800326a:	4613      	mov	r3, r2
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003276:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800327a:	f7fd fc9d 	bl	8000bb8 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <LL_USART_SetBaudRate+0x238>)
 8003284:	fba3 1302 	umull	r1, r3, r3, r2
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2164      	movs	r1, #100	; 0x64
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3332      	adds	r3, #50	; 0x32
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <LL_USART_SetBaudRate+0x238>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4423      	add	r3, r4
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b0:	609a      	str	r2, [r3, #8]
}
 80032b2:	e107      	b.n	80034c4 <LL_USART_SetBaudRate+0x448>
 80032b4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032c2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032c6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80032ca:	4642      	mov	r2, r8
 80032cc:	464b      	mov	r3, r9
 80032ce:	1891      	adds	r1, r2, r2
 80032d0:	6239      	str	r1, [r7, #32]
 80032d2:	415b      	adcs	r3, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032da:	4641      	mov	r1, r8
 80032dc:	1854      	adds	r4, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0501 	adc.w	r5, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	00eb      	lsls	r3, r5, #3
 80032ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f2:	00e2      	lsls	r2, r4, #3
 80032f4:	4614      	mov	r4, r2
 80032f6:	461d      	mov	r5, r3
 80032f8:	4643      	mov	r3, r8
 80032fa:	18e3      	adds	r3, r4, r3
 80032fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003300:	464b      	mov	r3, r9
 8003302:	eb45 0303 	adc.w	r3, r5, r3
 8003306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800330a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003314:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003324:	4629      	mov	r1, r5
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	4621      	mov	r1, r4
 800332a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332e:	4621      	mov	r1, r4
 8003330:	008a      	lsls	r2, r1, #2
 8003332:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003336:	f7fd fc3f 	bl	8000bb8 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <LL_USART_SetBaudRate+0x454>)
 8003340:	fba3 2302 	umull	r2, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	b29b      	uxth	r3, r3
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	b29c      	uxth	r4, r3
 800334c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003350:	2200      	movs	r2, #0
 8003352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800335a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800335e:	4642      	mov	r2, r8
 8003360:	464b      	mov	r3, r9
 8003362:	1891      	adds	r1, r2, r2
 8003364:	61b9      	str	r1, [r7, #24]
 8003366:	415b      	adcs	r3, r3
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336e:	4641      	mov	r1, r8
 8003370:	1851      	adds	r1, r2, r1
 8003372:	6139      	str	r1, [r7, #16]
 8003374:	4649      	mov	r1, r9
 8003376:	414b      	adcs	r3, r1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003386:	4659      	mov	r1, fp
 8003388:	00cb      	lsls	r3, r1, #3
 800338a:	4651      	mov	r1, sl
 800338c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003390:	4651      	mov	r1, sl
 8003392:	00ca      	lsls	r2, r1, #3
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	4603      	mov	r3, r0
 800339a:	4642      	mov	r2, r8
 800339c:	189b      	adds	r3, r3, r2
 800339e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033a2:	464b      	mov	r3, r9
 80033a4:	460a      	mov	r2, r1
 80033a6:	eb42 0303 	adc.w	r3, r2, r3
 80033aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80033c8:	4649      	mov	r1, r9
 80033ca:	008b      	lsls	r3, r1, #2
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d2:	4641      	mov	r1, r8
 80033d4:	008a      	lsls	r2, r1, #2
 80033d6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80033da:	f7fd fbed 	bl	8000bb8 <__aeabi_uldivmod>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <LL_USART_SetBaudRate+0x454>)
 80033e4:	fba3 1302 	umull	r1, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	2164      	movs	r1, #100	; 0x64
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	3332      	adds	r3, #50	; 0x32
 80033f6:	4a36      	ldr	r2, [pc, #216]	; (80034d0 <LL_USART_SetBaudRate+0x454>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003404:	b29b      	uxth	r3, r3
 8003406:	4423      	add	r3, r4
 8003408:	b29c      	uxth	r4, r3
 800340a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800340e:	2200      	movs	r2, #0
 8003410:	67bb      	str	r3, [r7, #120]	; 0x78
 8003412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003418:	4642      	mov	r2, r8
 800341a:	464b      	mov	r3, r9
 800341c:	1891      	adds	r1, r2, r2
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	415b      	adcs	r3, r3
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003428:	4641      	mov	r1, r8
 800342a:	1851      	adds	r1, r2, r1
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	4649      	mov	r1, r9
 8003430:	414b      	adcs	r3, r1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003440:	4659      	mov	r1, fp
 8003442:	00cb      	lsls	r3, r1, #3
 8003444:	4651      	mov	r1, sl
 8003446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344a:	4651      	mov	r1, sl
 800344c:	00ca      	lsls	r2, r1, #3
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	4603      	mov	r3, r0
 8003454:	4642      	mov	r2, r8
 8003456:	189b      	adds	r3, r3, r2
 8003458:	673b      	str	r3, [r7, #112]	; 0x70
 800345a:	464b      	mov	r3, r9
 800345c:	460a      	mov	r2, r1
 800345e:	eb42 0303 	adc.w	r3, r2, r3
 8003462:	677b      	str	r3, [r7, #116]	; 0x74
 8003464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003468:	2200      	movs	r2, #0
 800346a:	66bb      	str	r3, [r7, #104]	; 0x68
 800346c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800347a:	4649      	mov	r1, r9
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4641      	mov	r1, r8
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4641      	mov	r1, r8
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800348c:	f7fd fb94 	bl	8000bb8 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <LL_USART_SetBaudRate+0x454>)
 8003496:	fba3 1302 	umull	r1, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2164      	movs	r1, #100	; 0x64
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <LL_USART_SetBaudRate+0x454>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4423      	add	r3, r4
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fd8e 	bl	8003008 <LL_USART_IsEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d149      	bne.n	8003586 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034fa:	f023 030c 	bic.w	r3, r3, #12
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6851      	ldr	r1, [r2, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	4311      	orrs	r1, r2
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	6912      	ldr	r2, [r2, #16]
 800350c:	4311      	orrs	r1, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	6992      	ldr	r2, [r2, #24]
 8003512:	430a      	orrs	r2, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fd85 	bl	8003030 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fd92 	bl	8003056 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003532:	f107 0308 	add.w	r3, r7, #8
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fb72 	bl	8002c20 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <LL_USART_Init+0xbc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d102      	bne.n	800354a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e00c      	b.n	8003564 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a11      	ldr	r2, [pc, #68]	; (8003594 <LL_USART_Init+0xc0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d102      	bne.n	8003558 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e005      	b.n	8003564 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <LL_USART_Init+0xc4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fd7b 	bl	800307c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003586:	7ffb      	ldrb	r3, [r7, #31]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40011000 	.word	0x40011000
 8003594:	40004400 	.word	0x40004400
 8003598:	40011400 	.word	0x40011400

0800359c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4a07      	ldr	r2, [pc, #28]	; (80035cc <LL_InitTick+0x30>)
 80035b0:	3b01      	subs	r3, #1
 80035b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <LL_InitTick+0x30>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <LL_InitTick+0x30>)
 80035bc:	2205      	movs	r2, #5
 80035be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000e010 	.word	0xe000e010

080035d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80035d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffdd 	bl	800359c <LL_InitTick>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <LL_SetSystemCoreClock+0x1c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6013      	str	r3, [r2, #0]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	_file = file;
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <__Custom_Exception_Set_Message+0x2c>)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6013      	str	r3, [r2, #0]
	_line = line;
 800361e:	4a07      	ldr	r2, [pc, #28]	; (800363c <__Custom_Exception_Set_Message+0x30>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6013      	str	r3, [r2, #0]
	_message = message;
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <__Custom_Exception_Set_Message+0x34>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000240 	.word	0x20000240
 800363c:	20000244 	.word	0x20000244
 8003640:	20000248 	.word	0x20000248

08003644 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8003648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364c:	4803      	ldr	r0, [pc, #12]	; (800365c <Custom_FileSystem_Load+0x18>)
 800364e:	f000 f851 	bl	80036f4 <Custom_Flash_Read>
	filesystemLoaded = true;
 8003652:	4b03      	ldr	r3, [pc, #12]	; (8003660 <Custom_FileSystem_Load+0x1c>)
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}
 800365c:	2000024c 	.word	0x2000024c
 8003660:	2000124d 	.word	0x2000124d

08003664 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <Custom_Flash_Check_Error+0x78>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <Custom_Flash_Check_Error+0x24>
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <Custom_Flash_Check_Error+0x7c>)
 800367c:	2113      	movs	r1, #19
 800367e:	4819      	ldr	r0, [pc, #100]	; (80036e4 <Custom_Flash_Check_Error+0x80>)
 8003680:	f7ff ffc4 	bl	800360c <__Custom_Exception_Set_Message>
 8003684:	2300      	movs	r3, #0
 8003686:	e024      	b.n	80036d2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d006      	beq.n	80036a0 <Custom_Flash_Check_Error+0x3c>
 8003692:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <Custom_Flash_Check_Error+0x84>)
 8003694:	2114      	movs	r1, #20
 8003696:	4813      	ldr	r0, [pc, #76]	; (80036e4 <Custom_Flash_Check_Error+0x80>)
 8003698:	f7ff ffb8 	bl	800360c <__Custom_Exception_Set_Message>
 800369c:	2300      	movs	r3, #0
 800369e:	e018      	b.n	80036d2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <Custom_Flash_Check_Error+0x54>
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <Custom_Flash_Check_Error+0x88>)
 80036ac:	2115      	movs	r1, #21
 80036ae:	480d      	ldr	r0, [pc, #52]	; (80036e4 <Custom_Flash_Check_Error+0x80>)
 80036b0:	f7ff ffac 	bl	800360c <__Custom_Exception_Set_Message>
 80036b4:	2300      	movs	r3, #0
 80036b6:	e00c      	b.n	80036d2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <Custom_Flash_Check_Error+0x6c>
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <Custom_Flash_Check_Error+0x8c>)
 80036c4:	2116      	movs	r1, #22
 80036c6:	4807      	ldr	r0, [pc, #28]	; (80036e4 <Custom_Flash_Check_Error+0x80>)
 80036c8:	f7ff ffa0 	bl	800360c <__Custom_Exception_Set_Message>
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <Custom_Flash_Check_Error+0x6e>

	return true;
 80036d0:	2301      	movs	r3, #1
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023c00 	.word	0x40023c00
 80036e0:	080079b0 	.word	0x080079b0
 80036e4:	080079cc 	.word	0x080079cc
 80036e8:	080079f4 	.word	0x080079f4
 80036ec:	08007a14 	.word	0x08007a14
 80036f0:	08007a34 	.word	0x08007a34

080036f4 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003704:	d306      	bcc.n	8003714 <Custom_Flash_Read+0x20>
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <Custom_Flash_Read+0x5c>)
 8003708:	211d      	movs	r1, #29
 800370a:	4812      	ldr	r0, [pc, #72]	; (8003754 <Custom_Flash_Read+0x60>)
 800370c:	f7ff ff7e 	bl	800360c <__Custom_Exception_Set_Message>
 8003710:	2300      	movs	r3, #0
 8003712:	e019      	b.n	8003748 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e00f      	b.n	800373a <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003720:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003724:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	440b      	add	r3, r1
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d8eb      	bhi.n	800371a <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8003742:	f7ff ff8f 	bl	8003664 <Custom_Flash_Check_Error>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08007a4c 	.word	0x08007a4c
 8003754:	080079cc 	.word	0x080079cc

08003758 <LL_SPI_Enable>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_SPI_SetTransferDirection>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d101      	bne.n	80037b6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d101      	bne.n	80037dc <LL_SPI_IsActiveFlag_BSY+0x18>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <LL_SPI_IsActiveFlag_BSY+0x1a>
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	330c      	adds	r3, #12
 80037fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	43db      	mvns	r3, r3
 8003822:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <Custom_GPIO_Set+0x22>
 800382a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800382e:	e000      	b.n	8003832 <Custom_GPIO_Set+0x24>
 8003830:	2100      	movs	r1, #0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	400b      	ands	r3, r1
 8003836:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <Custom_OLED_Set_Mode>:
 *        명령어 모드(OLED_MODE_COMMAND)일 경우에는 값에 따른 명령어가 수행되고,
 *        데이터 모드(OLED_MODE_DATA)일 경우에는 GDDRAM에 값이 직접 쓰여진다.
 * 
 * @param mode OLED_MODE_COMMAND(명령어 모드), OLED_MODE_DATA(데이터 모드)
 */
static inline void Custom_OLED_Set_Mode(int mode) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	// 0 is command mode, 1 is data mode
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, mode);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	2110      	movs	r1, #16
 8003856:	4803      	ldr	r0, [pc, #12]	; (8003864 <Custom_OLED_Set_Mode+0x1c>)
 8003858:	f7ff ffd9 	bl	800380e <Custom_GPIO_Set>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40020000 	.word	0x40020000

08003868 <Custom_OLED_Write_Blocking>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 * 
 * @param data 보낼 값들
 * @param length 보낼 값들의 총 길이
 */
static inline void Custom_OLED_Write_Blocking(const uint8_t *data, size_t length) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2104      	movs	r1, #4
 8003876:	4816      	ldr	r0, [pc, #88]	; (80038d0 <Custom_OLED_Write_Blocking+0x68>)
 8003878:	f7ff ffc9 	bl	800380e <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e018      	b.n	80038b4 <Custom_OLED_Write_Blocking+0x4c>
		while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8003882:	bf00      	nop
 8003884:	4813      	ldr	r0, [pc, #76]	; (80038d4 <Custom_OLED_Write_Blocking+0x6c>)
 8003886:	f7ff ff8a 	bl	800379e <LL_SPI_IsActiveFlag_TXE>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f9      	beq.n	8003884 <Custom_OLED_Write_Blocking+0x1c>
		LL_SPI_TransmitData8(OLED_SPI, data[i]);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	480e      	ldr	r0, [pc, #56]	; (80038d4 <Custom_OLED_Write_Blocking+0x6c>)
 800389c:	f7ff ffa5 	bl	80037ea <LL_SPI_TransmitData8>
		while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 80038a0:	bf00      	nop
 80038a2:	480c      	ldr	r0, [pc, #48]	; (80038d4 <Custom_OLED_Write_Blocking+0x6c>)
 80038a4:	f7ff ff8e 	bl	80037c4 <LL_SPI_IsActiveFlag_BSY>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f9      	bne.n	80038a2 <Custom_OLED_Write_Blocking+0x3a>
	for (int i = 0; i < length; i++) {
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8e2      	bhi.n	8003882 <Custom_OLED_Write_Blocking+0x1a>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 80038bc:	2201      	movs	r2, #1
 80038be:	2104      	movs	r1, #4
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <Custom_OLED_Write_Blocking+0x68>)
 80038c2:	f7ff ffa4 	bl	800380e <Custom_GPIO_Set>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020400 	.word	0x40020400
 80038d4:	40003800 	.word	0x40003800

080038d8 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	4603      	mov	r3, r0
 80038ec:	71bb      	strb	r3, [r7, #6]
 80038ee:	460b      	mov	r3, r1
 80038f0:	717b      	strb	r3, [r7, #5]
 80038f2:	4613      	mov	r3, r2
 80038f4:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 80038f6:	2315      	movs	r3, #21
 80038f8:	723b      	strb	r3, [r7, #8]
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	727b      	strb	r3, [r7, #9]
 80038fe:	797b      	ldrb	r3, [r7, #5]
 8003900:	72bb      	strb	r3, [r7, #10]
 8003902:	2375      	movs	r3, #117	; 0x75
 8003904:	72fb      	strb	r3, [r7, #11]
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	733b      	strb	r3, [r7, #12]
 800390a:	793b      	ldrb	r3, [r7, #4]
 800390c:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Set_Mode(OLED_MODE_COMMAND);
 800390e:	2000      	movs	r0, #0
 8003910:	f7ff ff9a 	bl	8003848 <Custom_OLED_Set_Mode>
	Custom_OLED_Write_Blocking(cmd, sizeof(cmd));
 8003914:	f107 0308 	add.w	r3, r7, #8
 8003918:	2106      	movs	r1, #6
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ffa4 	bl	8003868 <Custom_OLED_Write_Blocking>
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}

08003928 <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 800392e:	2300      	movs	r3, #0
 8003930:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 8003932:	233f      	movs	r3, #63	; 0x3f
 8003934:	225f      	movs	r2, #95	; 0x5f
 8003936:	2100      	movs	r1, #0
 8003938:	2000      	movs	r0, #0
 800393a:	f7ff ffcd 	bl	80038d8 <Custom_OLED_Set_Window>

	Custom_OLED_Set_Mode(OLED_MODE_DATA);
 800393e:	2001      	movs	r0, #1
 8003940:	f7ff ff82 	bl	8003848 <Custom_OLED_Set_Mode>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8003944:	2300      	movs	r3, #0
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e007      	b.n	800395a <Custom_OLED_Clear+0x32>
        Custom_OLED_Write_Blocking((uint8_t *)&data, sizeof(data));
 800394a:	1cbb      	adds	r3, r7, #2
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff8a 	bl	8003868 <Custom_OLED_Write_Blocking>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3301      	adds	r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003960:	dbf3      	blt.n	800394a <Custom_OLED_Clear+0x22>
    }
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <Custom_OLED_Init>:

void Custom_OLED_Init() {
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8003972:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003976:	4810      	ldr	r0, [pc, #64]	; (80039b8 <Custom_OLED_Init+0x4c>)
 8003978:	f7ff fefe 	bl	8003778 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 800397c:	480e      	ldr	r0, [pc, #56]	; (80039b8 <Custom_OLED_Init+0x4c>)
 800397e:	f7ff feeb 	bl	8003758 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <Custom_OLED_Init+0x50>)
 8003984:	463c      	mov	r4, r7
 8003986:	461d      	mov	r5, r3
 8003988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003990:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003994:	6020      	str	r0, [r4, #0]
 8003996:	3404      	adds	r4, #4
 8003998:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Set_Mode(OLED_MODE_COMMAND);
 800399a:	2000      	movs	r0, #0
 800399c:	f7ff ff54 	bl	8003848 <Custom_OLED_Set_Mode>
	Custom_OLED_Write_Blocking(init_cmd, sizeof(init_cmd));
 80039a0:	463b      	mov	r3, r7
 80039a2:	2125      	movs	r1, #37	; 0x25
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5f 	bl	8003868 <Custom_OLED_Write_Blocking>

	Custom_OLED_Clear();
 80039aa:	f7ff ffbd 	bl	8003928 <Custom_OLED_Clear>
}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bdb0      	pop	{r4, r5, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40003800 	.word	0x40003800
 80039bc:	08007a94 	.word	0x08007a94

080039c0 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y) {
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	4603      	mov	r3, r0
 80039d4:	80bb      	strh	r3, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	71bb      	strb	r3, [r7, #6]
 80039da:	4613      	mov	r3, r2
 80039dc:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH - 1;
 80039de:	79bb      	ldrb	r3, [r7, #6]
 80039e0:	3304      	adds	r3, #4
 80039e2:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT - 1;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	3307      	adds	r3, #7
 80039e8:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b5f      	cmp	r3, #95	; 0x5f
 80039ee:	d802      	bhi.n	80039f6 <Custom_OLED_Putchar+0x36>
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	2b3f      	cmp	r3, #63	; 0x3f
 80039f4:	d902      	bls.n	80039fc <Custom_OLED_Putchar+0x3c>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039fa:	e03c      	b.n	8003a76 <Custom_OLED_Putchar+0xb6>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	78f9      	ldrb	r1, [r7, #3]
 8003a02:	79b8      	ldrb	r0, [r7, #6]
 8003a04:	f7ff ff68 	bl	80038d8 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 8003a08:	79fa      	ldrb	r2, [r7, #7]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <Custom_OLED_Putchar+0xc0>)
 8003a12:	4413      	add	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT];

	for (int i = 0; i < FONT_WIDTH; i++) {
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e021      	b.n	8003a60 <Custom_OLED_Putchar+0xa0>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e018      	b.n	8003a54 <Custom_OLED_Putchar+0x94>
			data[FONT_HEIGHT * i + j] = font[i] & (1 << j) ? color : 0x0000;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	fa42 f303 	asr.w	r3, r2, r3
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <Custom_OLED_Putchar+0x7e>
 8003a3a:	88b9      	ldrh	r1, [r7, #4]
 8003a3c:	e000      	b.n	8003a40 <Custom_OLED_Putchar+0x80>
 8003a3e:	2100      	movs	r1, #0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	00da      	lsls	r2, r3, #3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <Custom_OLED_Putchar+0xc4>)
 8003a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3301      	adds	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	dde3      	ble.n	8003a22 <Custom_OLED_Putchar+0x62>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	ddda      	ble.n	8003a1c <Custom_OLED_Putchar+0x5c>
		}
	}

	Custom_OLED_Set_Mode(OLED_MODE_DATA);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7ff feee 	bl	8003848 <Custom_OLED_Set_Mode>
	Custom_OLED_Write_Blocking((uint8_t *)data, sizeof(data));
 8003a6c:	2150      	movs	r1, #80	; 0x50
 8003a6e:	4805      	ldr	r0, [pc, #20]	; (8003a84 <Custom_OLED_Putchar+0xc4>)
 8003a70:	f7ff fefa 	bl	8003868 <Custom_OLED_Write_Blocking>

	return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	08007c08 	.word	0x08007c08
 8003a84:	20001250 	.word	0x20001250

08003a88 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8003a88:	b40f      	push	{r0, r1, r2, r3}
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8003a90:	af00      	add	r7, sp, #0
	char buffer[OLED_BUFFER_SIZE];
	uint8_t pos_x = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t pos_y = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 8003a9e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8003aa2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003aa6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8003aaa:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8003aac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003ab0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8003ab4:	1d38      	adds	r0, r7, #4
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8003abc:	f001 fd16 	bl	80054ec <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	uint16_t color = OLED_COLOR_WHITE;
 8003ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aca:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

	while (buffer[cursor]) {
 8003ace:	e0af      	b.n	8003c30 <Custom_OLED_Printf+0x1a8>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 8003ad0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003ad4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8003ad8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8003ae2:	f040 808b 	bne.w	8003bfc <Custom_OLED_Printf+0x174>
			char nextChar = buffer[cursor + 1];
 8003ae6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003aea:	3301      	adds	r3, #1
 8003aec:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003af0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205

			if (nextChar == '/') {
 8003afa:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8003afe:	2b2f      	cmp	r3, #47	; 0x2f
 8003b00:	d105      	bne.n	8003b0e <Custom_OLED_Printf+0x86>
				cursor += 1;
 8003b02:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b06:	3301      	adds	r3, #1
 8003b08:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8003b0c:	e076      	b.n	8003bfc <Custom_OLED_Printf+0x174>

			} else {
				switch (nextChar) {
 8003b0e:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8003b12:	2b36      	cmp	r3, #54	; 0x36
 8003b14:	dc38      	bgt.n	8003b88 <Custom_OLED_Printf+0x100>
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	da3b      	bge.n	8003b92 <Custom_OLED_Printf+0x10a>
 8003b1a:	e069      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
 8003b1c:	3b62      	subs	r3, #98	; 0x62
 8003b1e:	2b17      	cmp	r3, #23
 8003b20:	d866      	bhi.n	8003bf0 <Custom_OLED_Printf+0x168>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <Custom_OLED_Printf+0xa0>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003bc9 	.word	0x08003bc9
 8003b2c:	08003bdd 	.word	0x08003bdd
 8003b30:	08003bf1 	.word	0x08003bf1
 8003b34:	08003bf1 	.word	0x08003bf1
 8003b38:	08003bf1 	.word	0x08003bf1
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003bf1 	.word	0x08003bf1
 8003b44:	08003bf1 	.word	0x08003bf1
 8003b48:	08003bf1 	.word	0x08003bf1
 8003b4c:	08003bf1 	.word	0x08003bf1
 8003b50:	08003bf1 	.word	0x08003bf1
 8003b54:	08003be7 	.word	0x08003be7
 8003b58:	08003bf1 	.word	0x08003bf1
 8003b5c:	08003bf1 	.word	0x08003bf1
 8003b60:	08003bf1 	.word	0x08003bf1
 8003b64:	08003bf1 	.word	0x08003bf1
 8003b68:	08003bb7 	.word	0x08003bb7
 8003b6c:	08003bf1 	.word	0x08003bf1
 8003b70:	08003bf1 	.word	0x08003bf1
 8003b74:	08003bf1 	.word	0x08003bf1
 8003b78:	08003bf1 	.word	0x08003bf1
 8003b7c:	08003bad 	.word	0x08003bad
 8003b80:	08003bf1 	.word	0x08003bf1
 8003b84:	08003bd3 	.word	0x08003bd3
 8003b88:	2b79      	cmp	r3, #121	; 0x79
 8003b8a:	dc31      	bgt.n	8003bf0 <Custom_OLED_Printf+0x168>
 8003b8c:	2b62      	cmp	r3, #98	; 0x62
 8003b8e:	dac5      	bge.n	8003b1c <Custom_OLED_Printf+0x94>
 8003b90:	e02e      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					pos_x = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
					pos_y = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 8003b98:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 8003b9c:	3b30      	subs	r3, #48	; 0x30
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	00d2      	lsls	r2, r2, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
					break;
 8003baa:	e021      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 8003bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb0:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bb4:	e01c      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'r': color = OLED_COLOR_RED;     break;
 8003bb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bba:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bbe:	e017      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8003bc0:	231f      	movs	r3, #31
 8003bc2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bc6:	e013      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'b': color = OLED_COLOR_BLUE;    break;
 8003bc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bcc:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bd0:	e00e      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 8003bd2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003bd6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bda:	e009      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'c': color = OLED_COLOR_CYAN;    break;
 8003bdc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003be0:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003be4:	e004      	b.n	8003bf0 <Custom_OLED_Printf+0x168>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 8003be6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bea:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8003bee:	bf00      	nop
				}

				cursor += 2;
 8003bf0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				continue;
 8003bfa:	e019      	b.n	8003c30 <Custom_OLED_Printf+0x1a8>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, pos_x, pos_y); // 문자를 화면에 표시한다.
 8003bfc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003c00:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8003c04:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c08:	4413      	add	r3, r2
 8003c0a:	7818      	ldrb	r0, [r3, #0]
 8003c0c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8003c10:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8003c14:	f8b7 1206 	ldrh.w	r1, [r7, #518]	; 0x206
 8003c18:	f7ff fed2 	bl	80039c0 <Custom_OLED_Putchar>
		pos_x += FONT_WIDTH + 1; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 8003c1c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003c20:	3306      	adds	r3, #6
 8003c22:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
		cursor++;
 8003c26:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	while (buffer[cursor]) {
 8003c30:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003c34:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8003c38:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c3c:	4413      	add	r3, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f47f af45 	bne.w	8003ad0 <Custom_OLED_Printf+0x48>
	}
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c54:	b004      	add	sp, #16
 8003c56:	4770      	bx	lr

08003c58 <LL_GPIO_ReadInputPort>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <Custom_Delay_us>:
#include <stdint.h>
#include "stm32f4xx_ll_tim.h"

#define CUSTOM_DELAY_TIM TIM2

__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8003c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8003c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8003c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8003ca2:	bf00      	nop
 8003ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d1f8      	bne.n	8003ca4 <Custom_Delay_us+0x34>
		;
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <Custom_Delay_ms>:

__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ffcc 	bl	8003c70 <Custom_Delay_us>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <Custom_Switch_Init_ButtonState>:
	uint32_t timer;		//
	uint8_t state;		//
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
	State->state = LONG_OFF;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	731a      	strb	r2, [r3, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/**
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 이 함수는 1ms마다 호출됨을 전제로 한다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff9b 	bl	8003c58 <LL_GPIO_ReadInputPort>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]

	switch (State->state) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7b1b      	ldrb	r3, [r3, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	2b07      	cmp	r3, #7
 8003d40:	d860      	bhi.n	8003e04 <Custom_Switch_State_Machine+0xf4>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <Custom_Switch_State_Machine+0x38>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d69 	.word	0x08003d69
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003e05 	.word	0x08003e05
 8003d54:	08003da3 	.word	0x08003da3
 8003d58:	08003e05 	.word	0x08003e05
 8003d5c:	08003e05 	.word	0x08003e05
 8003d60:	08003e05 	.word	0x08003e05
 8003d64:	08003ddd 	.word	0x08003ddd

		case LONG_OFF:
			if (currentPushed) {
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d043      	beq.n	8003df6 <Custom_Switch_State_Machine+0xe6>
				State->state = SHORT_ON;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	731a      	strb	r2, [r3, #12]
				State->timer = TIME_SHROT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	609a      	str	r2, [r3, #8]
			}
			break;
 8003d7a:	e03c      	b.n	8003df6 <Custom_Switch_State_Machine+0xe6>

		case SHORT_ON:
			State->timer--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]
			if (State->timer == 0) {
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d135      	bne.n	8003dfa <Custom_Switch_State_Machine+0xea>
				pushEvent = true;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	731a      	strb	r2, [r3, #12]
				State->timer = TIME_LONG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d9e:	609a      	str	r2, [r3, #8]
			}
			break;
 8003da0:	e02b      	b.n	8003dfa <Custom_Switch_State_Machine+0xea>

		case LONG_ON:
			if (!currentPushed) {
 8003da2:	7bbb      	ldrb	r3, [r7, #14]
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d006      	beq.n	8003dbc <Custom_Switch_State_Machine+0xac>
				State->state = SHORT_OFF;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2208      	movs	r2, #8
 8003db2:	731a      	strb	r2, [r3, #12]
				State->timer = TIME_SHROT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2250      	movs	r2, #80	; 0x50
 8003db8:	609a      	str	r2, [r3, #8]
				break;
 8003dba:	e023      	b.n	8003e04 <Custom_Switch_State_Machine+0xf4>
			}
			State->timer--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
			if (State->timer == 0) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d117      	bne.n	8003dfe <Custom_Switch_State_Machine+0xee>
				pushEvent = true;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dd8:	609a      	str	r2, [r3, #8]
			}
			break;
 8003dda:	e010      	b.n	8003dfe <Custom_Switch_State_Machine+0xee>

		case SHORT_OFF:
			State->timer--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
			if (State->timer == 0) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <Custom_Switch_State_Machine+0xf2>
				State->state = LONG_OFF;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	731a      	strb	r2, [r3, #12]
			}
			break;
 8003df4:	e005      	b.n	8003e02 <Custom_Switch_State_Machine+0xf2>
			break;
 8003df6:	bf00      	nop
 8003df8:	e004      	b.n	8003e04 <Custom_Switch_State_Machine+0xf4>
			break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <Custom_Switch_State_Machine+0xf4>
			break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <Custom_Switch_State_Machine+0xf4>
			break;
 8003e02:	bf00      	nop
	}

	return pushEvent;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop

08003e10 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2;
	if (!isInitialized) {
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <Custom_Switch_Read+0xc0>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	f083 0301 	eor.w	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <Custom_Switch_Read+0x2e>
		isInitialized = true;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <Custom_Switch_Read+0xc0>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4929      	ldr	r1, [pc, #164]	; (8003ed4 <Custom_Switch_Read+0xc4>)
 8003e2e:	482a      	ldr	r0, [pc, #168]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e30:	f7ff ff56 	bl	8003ce0 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 8003e34:	2220      	movs	r2, #32
 8003e36:	4927      	ldr	r1, [pc, #156]	; (8003ed4 <Custom_Switch_Read+0xc4>)
 8003e38:	4828      	ldr	r0, [pc, #160]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e3a:	f7ff ff51 	bl	8003ce0 <Custom_Switch_Init_ButtonState>
	}

	Custom_Delay_ms(1);
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7ff ff3e 	bl	8003cc0 <Custom_Delay_ms>
	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8003e44:	4824      	ldr	r0, [pc, #144]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e46:	f7ff ff63 	bl	8003d10 <Custom_Switch_State_Machine>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8003e4e:	4823      	ldr	r0, [pc, #140]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e50:	f7ff ff5e 	bl	8003d10 <Custom_Switch_State_Machine>
 8003e54:	4603      	mov	r3, r0
 8003e56:	71bb      	strb	r3, [r7, #6]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if ((sw1.state & SHORT_ON) && sw2PushEvent) {
 8003e58:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e5a:	7b1b      	ldrb	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <Custom_Switch_Read+0x6e>
 8003e64:	79bb      	ldrb	r3, [r7, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <Custom_Switch_Read+0x6e>
		sw1PushEvent = true;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	71fb      	strb	r3, [r7, #7]
		sw1.state = sw2.state;
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e70:	7b1a      	ldrb	r2, [r3, #12]
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e74:	731a      	strb	r2, [r3, #12]
		sw1.timer = sw2.timer;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e7c:	6093      	str	r3, [r2, #8]
	}
	if ((sw2.state & SHORT_ON) && sw1PushEvent) {
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e80:	7b1b      	ldrb	r3, [r3, #12]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <Custom_Switch_Read+0x94>
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <Custom_Switch_Read+0x94>
		sw2PushEvent = true;
 8003e90:	2301      	movs	r3, #1
 8003e92:	71bb      	strb	r3, [r7, #6]
		sw2.state = sw1.state;
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e96:	7b1a      	ldrb	r2, [r3, #12]
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003e9a:	731a      	strb	r2, [r3, #12]
		sw2.timer = sw1.timer;
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <Custom_Switch_Read+0xc8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a0e      	ldr	r2, [pc, #56]	; (8003edc <Custom_Switch_Read+0xcc>)
 8003ea2:	6093      	str	r3, [r2, #8]
	}

	uint8_t buttonPushEvent = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	717b      	strb	r3, [r7, #5]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <Custom_Switch_Read+0xa6>
 8003eae:	797b      	ldrb	r3, [r7, #5]
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	717b      	strb	r3, [r7, #5]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8003eb6:	79bb      	ldrb	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <Custom_Switch_Read+0xb4>
 8003ebc:	797b      	ldrb	r3, [r7, #5]
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	717b      	strb	r3, [r7, #5]

	return buttonPushEvent;
 8003ec4:	797b      	ldrb	r3, [r7, #5]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200012a0 	.word	0x200012a0
 8003ed4:	40020400 	.word	0x40020400
 8003ed8:	200012a4 	.word	0x200012a4
 8003edc:	200012b4 	.word	0x200012b4

08003ee0 <Drive_TIM9_IRQ>:




// 500us마다 호출됨.
void Drive_TIM9_IRQ() {
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
	 * while문을 사용하면 특정 시간마다 한 번씩 제어하기가 어려운 반면(불가능한 것은 아님)
	 * 인터럽트를 사용하면 그런 작업이 쉽게 가능하다.
	 * 그러나 인터럽트 함수인 만큼 너무 많은 작업을 하면 안 된다.
	 */
	// --- Write your code ---
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_USART_Enable>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	605a      	str	r2, [r3, #4]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8003f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8003f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8003f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8003f84:	bf00      	nop
 8003f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d1f8      	bne.n	8003f86 <Custom_Delay_us+0x34>
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ffcc 	bl	8003f52 <Custom_Delay_us>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8003fcc:	bf00      	nop
 8003fce:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <__io_putchar+0x2c>)
 8003fd0:	f7ff ff9d 	bl	8003f0e <LL_USART_IsActiveFlag_TXE>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f9      	beq.n	8003fce <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4803      	ldr	r0, [pc, #12]	; (8003ff0 <__io_putchar+0x2c>)
 8003fe2:	f7ff ffa7 	bl	8003f34 <LL_USART_TransmitData8>
	return ch;
 8003fe6:	687b      	ldr	r3, [r7, #4]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40004400 	.word	0x40004400

08003ff4 <Init>:



void Init() {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0ac      	sub	sp, #176	; 0xb0
 8003ff8:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8003ffa:	483b      	ldr	r0, [pc, #236]	; (80040e8 <Init+0xf4>)
 8003ffc:	f7ff ff77 	bl	8003eee <LL_USART_Enable>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8004000:	f7ff fcb4 	bl	800396c <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8004004:	f7ff fb1e 	bl	8003644 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8004008:	f7ff fcb0 	bl	800396c <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 800400c:	4837      	ldr	r0, [pc, #220]	; (80040ec <Init+0xf8>)
 800400e:	f7ff fd3b 	bl	8003a88 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8004012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004016:	f7ff ffc4 	bl	8003fa2 <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 800401a:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <Init+0xfc>)
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	4611      	mov	r1, r2
 8004020:	22a0      	movs	r2, #160	; 0xa0
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fdcc 	bl	8004bc0 <memcpy>
			{ "Test Normalized", Sensor_Test_Normalized },
			{ "Test State", Sensor_Test_State },
			{ "Test Phase", Motor_Test_Phase },
	};

	uint32_t count = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 800402e:	2305      	movs	r3, #5
 8004030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	while(1) {
		Custom_OLED_Clear();
 8004034:	f7ff fc78 	bl	8003928 <Custom_OLED_Clear>
		Custom_OLED_Printf("%s", menus[count].menuName);
 8004038:	1d3a      	adds	r2, r7, #4
 800403a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	4413      	add	r3, r2
 8004042:	4619      	mov	r1, r3
 8004044:	482b      	ldr	r0, [pc, #172]	; (80040f4 <Init+0x100>)
 8004046:	f7ff fd1f 	bl	8003a88 <Custom_OLED_Printf>

		while(1) {
			uint32_t sw;

			while (!(sw = Custom_Switch_Read()));
 800404a:	bf00      	nop
 800404c:	f7ff fee0 	bl	8003e10 <Custom_Switch_Read>
 8004050:	4603      	mov	r3, r0
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f6      	beq.n	800404c <Init+0x58>

			if (sw == CUSTOM_SW_1) {
 800405e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10f      	bne.n	8004086 <Init+0x92>
				if (count == 0)
 8004066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <Init+0x86>
					count = menuCnt - 1;
 800406e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004072:	3b01      	subs	r3, #1
 8004074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004078:	e01e      	b.n	80040b8 <Init+0xc4>
				else
					count--;
 800407a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800407e:	3b01      	subs	r3, #1
 8004080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004084:	e018      	b.n	80040b8 <Init+0xc4>
			}
			else if (sw == CUSTOM_SW_2) {
 8004086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800408a:	2b02      	cmp	r3, #2
 800408c:	d110      	bne.n	80040b0 <Init+0xbc>
				if (count == menuCnt - 1)
 800408e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004092:	3b01      	subs	r3, #1
 8004094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004098:	429a      	cmp	r2, r3
 800409a:	d103      	bne.n	80040a4 <Init+0xb0>
					count = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040a2:	e009      	b.n	80040b8 <Init+0xc4>
				else
					count++;
 80040a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040a8:	3301      	adds	r3, #1
 80040aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040ae:	e003      	b.n	80040b8 <Init+0xc4>
			}
			else if (sw == CUSTOM_SW_BOTH) break;
 80040b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d00b      	beq.n	80040d0 <Init+0xdc>

			Custom_OLED_Clear();
 80040b8:	f7ff fc36 	bl	8003928 <Custom_OLED_Clear>
			Custom_OLED_Printf("%s", menus[count].menuName);
 80040bc:	1d3a      	adds	r2, r7, #4
 80040be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	4413      	add	r3, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	480a      	ldr	r0, [pc, #40]	; (80040f4 <Init+0x100>)
 80040ca:	f7ff fcdd 	bl	8003a88 <Custom_OLED_Printf>
		while(1) {
 80040ce:	e7bc      	b.n	800404a <Init+0x56>
			else if (sw == CUSTOM_SW_BOTH) break;
 80040d0:	bf00      	nop
		}

		Custom_OLED_Clear();
 80040d2:	f7ff fc29 	bl	8003928 <Custom_OLED_Clear>
		menus[count].func();
 80040d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040da:	015b      	lsls	r3, r3, #5
 80040dc:	33b0      	adds	r3, #176	; 0xb0
 80040de:	443b      	add	r3, r7
 80040e0:	3b90      	subs	r3, #144	; 0x90
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4798      	blx	r3
		Custom_OLED_Clear();
 80040e6:	e7a5      	b.n	8004034 <Init+0x40>
 80040e8:	40004400 	.word	0x40004400
 80040ec:	08007abc 	.word	0x08007abc
 80040f0:	08007ad4 	.word	0x08007ad4
 80040f4:	08007ad0 	.word	0x08007ad0

080040f8 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8004100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800410a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 800411a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 800412a:	bf00      	nop
 800412c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d1f8      	bne.n	800412c <Custom_Delay_us+0x34>
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ffcc 	bl	80040f8 <Custom_Delay_us>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <Custom_GPIO_Set_t>:

static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	43db      	mvns	r3, r3
 800417e:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	2a00      	cmp	r2, #0
 800418a:	d002      	beq.n	8004192 <Custom_GPIO_Set_t+0x2a>
 800418c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004190:	e000      	b.n	8004194 <Custom_GPIO_Set_t+0x2c>
 8004192:	2200      	movs	r2, #0
 8004194:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 800419a:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800419c:	615a      	str	r2, [r3, #20]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <motorPowerOff>:





void motorPowerOff() {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	Custom_GPIO_Set_t(motorL + 0, 0);
 80041b0:	2100      	movs	r1, #0
 80041b2:	4813      	ldr	r0, [pc, #76]	; (8004200 <motorPowerOff+0x54>)
 80041b4:	f7ff ffd8 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0);
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <motorPowerOff+0x58>)
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ffd3 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0);
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <motorPowerOff+0x5c>)
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ffce 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0);
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <motorPowerOff+0x60>)
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ffc9 	bl	8004168 <Custom_GPIO_Set_t>

	Custom_GPIO_Set_t(motorR + 0, 0);
 80041d6:	2100      	movs	r1, #0
 80041d8:	480d      	ldr	r0, [pc, #52]	; (8004210 <motorPowerOff+0x64>)
 80041da:	f7ff ffc5 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0);
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <motorPowerOff+0x68>)
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ffc0 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <motorPowerOff+0x6c>)
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ffbb 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <motorPowerOff+0x70>)
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ffb6 	bl	8004168 <Custom_GPIO_Set_t>
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000004 	.word	0x20000004
 8004204:	2000000c 	.word	0x2000000c
 8004208:	20000014 	.word	0x20000014
 800420c:	2000001c 	.word	0x2000001c
 8004210:	20000024 	.word	0x20000024
 8004214:	2000002c 	.word	0x2000002c
 8004218:	20000034 	.word	0x20000034
 800421c:	2000003c 	.word	0x2000003c

08004220 <Motor_L_TIM3_IRQ>:
	motorPowerOff();
}



void Motor_L_TIM3_IRQ() {
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
	// motorL
	Custom_GPIO_Set_t(motorL + 0, 0x01 & phases[phaseL]);
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <Motor_L_TIM3_IRQ+0x74>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	4619      	mov	r1, r3
 8004234:	4818      	ldr	r0, [pc, #96]	; (8004298 <Motor_L_TIM3_IRQ+0x78>)
 8004236:	f7ff ff97 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0x02 & phases[phaseL]);
 800423a:	4818      	ldr	r0, [pc, #96]	; (800429c <Motor_L_TIM3_IRQ+0x7c>)
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <Motor_L_TIM3_IRQ+0x74>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	4619      	mov	r1, r3
 800424c:	f7ff ff8c 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0x04 & phases[phaseL]);
 8004250:	4813      	ldr	r0, [pc, #76]	; (80042a0 <Motor_L_TIM3_IRQ+0x80>)
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <Motor_L_TIM3_IRQ+0x74>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	f7ff ff81 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0x08 & phases[phaseL]);
 8004266:	480f      	ldr	r0, [pc, #60]	; (80042a4 <Motor_L_TIM3_IRQ+0x84>)
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <Motor_L_TIM3_IRQ+0x74>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	4619      	mov	r1, r3
 8004278:	f7ff ff76 	bl	8004168 <Custom_GPIO_Set_t>

	phaseL = (phaseL + 1) & 0x07;
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	4a02      	ldr	r2, [pc, #8]	; (8004290 <Motor_L_TIM3_IRQ+0x70>)
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200012c4 	.word	0x200012c4
 8004294:	20000044 	.word	0x20000044
 8004298:	20000004 	.word	0x20000004
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	20000014 	.word	0x20000014
 80042a4:	2000001c 	.word	0x2000001c

080042a8 <Motor_R_TIM4_IRQ>:



void Motor_R_TIM4_IRQ() {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
	// motorR
	Custom_GPIO_Set_t(motorR + 0, 0x01 & phases[phaseR]);
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	; (800431c <Motor_R_TIM4_IRQ+0x74>)
 80042b2:	5cd3      	ldrb	r3, [r2, r3]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	4619      	mov	r1, r3
 80042bc:	4818      	ldr	r0, [pc, #96]	; (8004320 <Motor_R_TIM4_IRQ+0x78>)
 80042be:	f7ff ff53 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0x02 & phases[phaseR]);
 80042c2:	4818      	ldr	r0, [pc, #96]	; (8004324 <Motor_R_TIM4_IRQ+0x7c>)
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <Motor_R_TIM4_IRQ+0x74>)
 80042ca:	5cd3      	ldrb	r3, [r2, r3]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7ff ff48 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0x04 & phases[phaseR]);
 80042d8:	4813      	ldr	r0, [pc, #76]	; (8004328 <Motor_R_TIM4_IRQ+0x80>)
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <Motor_R_TIM4_IRQ+0x74>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	f7ff ff3d 	bl	8004168 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0x08 & phases[phaseR]);
 80042ee:	480f      	ldr	r0, [pc, #60]	; (800432c <Motor_R_TIM4_IRQ+0x84>)
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <Motor_R_TIM4_IRQ+0x74>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	4619      	mov	r1, r3
 8004300:	f7ff ff32 	bl	8004168 <Custom_GPIO_Set_t>

	phaseR = (phaseR + 1) & 0x07;
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	4a02      	ldr	r2, [pc, #8]	; (8004318 <Motor_R_TIM4_IRQ+0x70>)
 8004310:	6013      	str	r3, [r2, #0]
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200012c8 	.word	0x200012c8
 800431c:	20000044 	.word	0x20000044
 8004320:	20000024 	.word	0x20000024
 8004324:	2000002c 	.word	0x2000002c
 8004328:	20000034 	.word	0x20000034
 800432c:	2000003c 	.word	0x2000003c

08004330 <Motor_Test_Phase>:



void Motor_Test_Phase() {
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
	uint32_t	sw = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
	uint32_t	stateL = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
	uint32_t	stateR = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]

	/*
	 * 모터의 각 상을 잠깐씩 잡아본다.
	 * 모터에 무리를 주지 않기 위해 100ms 동안만 상을 잡은 후 바로 놓는다.
	 */
	Custom_OLED_Clear();
 8004342:	f7ff faf1 	bl	8003928 <Custom_OLED_Clear>

	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004346:	e07a      	b.n	800443e <Motor_Test_Phase+0x10e>

		if (sw == CUSTOM_SW_1) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d13a      	bne.n	80043c4 <Motor_Test_Phase+0x94>
			Custom_GPIO_Set_t(motorL + 0, 0x01 & phases[stateL]);
 800434e:	4a43      	ldr	r2, [pc, #268]	; (800445c <Motor_Test_Phase+0x12c>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	4619      	mov	r1, r3
 800435e:	4840      	ldr	r0, [pc, #256]	; (8004460 <Motor_Test_Phase+0x130>)
 8004360:	f7ff ff02 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 1, 0x02 & phases[stateL]);
 8004364:	483f      	ldr	r0, [pc, #252]	; (8004464 <Motor_Test_Phase+0x134>)
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <Motor_Test_Phase+0x12c>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	4619      	mov	r1, r3
 8004376:	f7ff fef7 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 2, 0x04 & phases[stateL]);
 800437a:	483b      	ldr	r0, [pc, #236]	; (8004468 <Motor_Test_Phase+0x138>)
 800437c:	4a37      	ldr	r2, [pc, #220]	; (800445c <Motor_Test_Phase+0x12c>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	f7ff feec 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorL + 3, 0x08 & phases[stateL]);
 8004390:	4836      	ldr	r0, [pc, #216]	; (800446c <Motor_Test_Phase+0x13c>)
 8004392:	4a32      	ldr	r2, [pc, #200]	; (800445c <Motor_Test_Phase+0x12c>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff fee1 	bl	8004168 <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 80043a6:	2064      	movs	r0, #100	; 0x64
 80043a8:	f7ff fece 	bl	8004148 <Custom_Delay_ms>
			motorPowerOff();
 80043ac:	f7ff fefe 	bl	80041ac <motorPowerOff>

			Custom_OLED_Printf("/0phaseL: %2x", stateL);
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	482f      	ldr	r0, [pc, #188]	; (8004470 <Motor_Test_Phase+0x140>)
 80043b4:	f7ff fb68 	bl	8003a88 <Custom_OLED_Printf>
			stateL = (stateL + 1) & 0x07;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e03c      	b.n	800443e <Motor_Test_Phase+0x10e>
		}

		else if (sw == CUSTOM_SW_2) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d139      	bne.n	800443e <Motor_Test_Phase+0x10e>
			Custom_GPIO_Set_t(motorR + 0, 0x01 & phases[stateR]);
 80043ca:	4a24      	ldr	r2, [pc, #144]	; (800445c <Motor_Test_Phase+0x12c>)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4413      	add	r3, r2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	4619      	mov	r1, r3
 80043da:	4826      	ldr	r0, [pc, #152]	; (8004474 <Motor_Test_Phase+0x144>)
 80043dc:	f7ff fec4 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 1, 0x02 & phases[stateR]);
 80043e0:	4825      	ldr	r0, [pc, #148]	; (8004478 <Motor_Test_Phase+0x148>)
 80043e2:	4a1e      	ldr	r2, [pc, #120]	; (800445c <Motor_Test_Phase+0x12c>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7ff feb9 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 2, 0x04 & phases[stateR]);
 80043f6:	4821      	ldr	r0, [pc, #132]	; (800447c <Motor_Test_Phase+0x14c>)
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <Motor_Test_Phase+0x12c>)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	f7ff feae 	bl	8004168 <Custom_GPIO_Set_t>
			Custom_GPIO_Set_t(motorR + 3, 0x08 & phases[stateR]);
 800440c:	481c      	ldr	r0, [pc, #112]	; (8004480 <Motor_Test_Phase+0x150>)
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <Motor_Test_Phase+0x12c>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	4619      	mov	r1, r3
 800441e:	f7ff fea3 	bl	8004168 <Custom_GPIO_Set_t>

			Custom_Delay_ms(100);
 8004422:	2064      	movs	r0, #100	; 0x64
 8004424:	f7ff fe90 	bl	8004148 <Custom_Delay_ms>
			motorPowerOff();
 8004428:	f7ff fec0 	bl	80041ac <motorPowerOff>

			Custom_OLED_Printf("/1phaseR: %2x", stateR);
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4815      	ldr	r0, [pc, #84]	; (8004484 <Motor_Test_Phase+0x154>)
 8004430:	f7ff fb2a 	bl	8003a88 <Custom_OLED_Printf>
			stateR = (stateR + 1) & 0x07;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60bb      	str	r3, [r7, #8]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800443e:	f7ff fce7 	bl	8003e10 <Custom_Switch_Read>
 8004442:	4603      	mov	r3, r0
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b03      	cmp	r3, #3
 800444a:	f47f af7d 	bne.w	8004348 <Motor_Test_Phase+0x18>
		}
	}

	Custom_OLED_Clear();
 800444e:	f7ff fa6b 	bl	8003928 <Custom_OLED_Clear>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000044 	.word	0x20000044
 8004460:	20000004 	.word	0x20000004
 8004464:	2000000c 	.word	0x2000000c
 8004468:	20000014 	.word	0x20000014
 800446c:	2000001c 	.word	0x2000001c
 8004470:	08007b74 	.word	0x08007b74
 8004474:	20000024 	.word	0x20000024
 8004478:	2000002c 	.word	0x2000002c
 800447c:	20000034 	.word	0x20000034
 8004480:	2000003c 	.word	0x2000003c
 8004484:	08007b84 	.word	0x08007b84

08004488 <LL_ADC_Enable>:
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_Disable>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 0201 	bic.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	b29b      	uxth	r3, r3
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b02      	cmp	r3, #2
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f06f 0202 	mvn.w	r2, #2
 8004536:	601a      	str	r2, [r3, #0]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <LL_TIM_EnableCounter>:
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_TIM_DisableCounter>:
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 0201 	bic.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_TIM_EnableIT_UPDATE>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_TIM_DisableIT_UPDATE>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f023 0201 	bic.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80045cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80045d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80045e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80045f6:	bf00      	nop
 80045f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d1f8      	bne.n	80045f8 <Custom_Delay_us+0x34>
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ffcc 	bl	80045c4 <Custom_Delay_us>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <Sensor_Start>:





void Sensor_Start() {
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 8004638:	4806      	ldr	r0, [pc, #24]	; (8004654 <Sensor_Start+0x20>)
 800463a:	f7ff ff25 	bl	8004488 <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 800463e:	200a      	movs	r0, #10
 8004640:	f7ff ffe8 	bl	8004614 <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 8004644:	4804      	ldr	r0, [pc, #16]	; (8004658 <Sensor_Start+0x24>)
 8004646:	f7ff ff7d 	bl	8004544 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 800464a:	4803      	ldr	r0, [pc, #12]	; (8004658 <Sensor_Start+0x24>)
 800464c:	f7ff ff9a 	bl	8004584 <LL_TIM_EnableIT_UPDATE>
}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40012000 	.word	0x40012000
 8004658:	40000c00 	.word	0x40000c00

0800465c <Sensor_Stop>:



void Sensor_Stop() {
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 8004660:	4805      	ldr	r0, [pc, #20]	; (8004678 <Sensor_Stop+0x1c>)
 8004662:	f7ff ff21 	bl	80044a8 <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <Sensor_Stop+0x20>)
 8004668:	f7ff ff7c 	bl	8004564 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 800466c:	4803      	ldr	r0, [pc, #12]	; (800467c <Sensor_Stop+0x20>)
 800466e:	f7ff ff99 	bl	80045a4 <LL_TIM_DisableIT_UPDATE>
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40012000 	.word	0x40012000
 800467c:	40000c00 	.word	0x40000c00

08004680 <Sensor_ADC_Read>:



__STATIC_INLINE uint16_t Sensor_ADC_Read() {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004686:	b672      	cpsid	i
}
 8004688:	bf00      	nop
	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 800468a:	480e      	ldr	r0, [pc, #56]	; (80046c4 <Sensor_ADC_Read+0x44>)
 800468c:	f7ff ff4c 	bl	8004528 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8004690:	480c      	ldr	r0, [pc, #48]	; (80046c4 <Sensor_ADC_Read+0x44>)
 8004692:	f7ff ff19 	bl	80044c8 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8004696:	bf00      	nop
 8004698:	480a      	ldr	r0, [pc, #40]	; (80046c4 <Sensor_ADC_Read+0x44>)
 800469a:	f7ff ff32 	bl	8004502 <LL_ADC_IsActiveFlag_EOCS>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f9      	beq.n	8004698 <Sensor_ADC_Read+0x18>
	uint32_t adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 80046a4:	4807      	ldr	r0, [pc, #28]	; (80046c4 <Sensor_ADC_Read+0x44>)
 80046a6:	f7ff ff1f 	bl	80044e8 <LL_ADC_REG_ReadConversionData12>
 80046aa:	4603      	mov	r3, r0
 80046ac:	607b      	str	r3, [r7, #4]
	LL_ADC_ClearFlag_EOCS(ADC1);
 80046ae:	4805      	ldr	r0, [pc, #20]	; (80046c4 <Sensor_ADC_Read+0x44>)
 80046b0:	f7ff ff3a 	bl	8004528 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 80046b4:	b662      	cpsie	i
}
 80046b6:	bf00      	nop
	__enable_irq();
	return adcValue;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b29b      	uxth	r3, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40012000 	.word	0x40012000

080046c8 <Sensor_TIM5_IRQ>:



void Sensor_TIM5_IRQ() {
 80046c8:	b598      	push	{r3, r4, r7, lr}
 80046ca:	af00      	add	r7, sp, #0
	static uint32_t	i = 0; // 현재 값을 읽을 센서 인덱스

	//sMux를 사용하여 IR LED 및 수광 센서 선택 및 선택한 IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | i | 0x08;   // 0000 {1}(XXX) == 0000 {LED}(i)
 80046cc:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <Sensor_TIM5_IRQ+0xfc>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <Sensor_TIM5_IRQ+0xfc>)
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= 0x08;
	*/


	// ADC 읽기
	sensorRawVals[i] = Sensor_ADC_Read() >> 4;
 80046e2:	f7ff ffcd 	bl	8004680 <Sensor_ADC_Read>
 80046e6:	4603      	mov	r3, r0
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2d1      	uxtb	r1, r2
 80046f2:	4a36      	ldr	r2, [pc, #216]	; (80047cc <Sensor_TIM5_IRQ+0x104>)
 80046f4:	54d1      	strb	r1, [r2, r3]

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 80046f6:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <Sensor_TIM5_IRQ+0xfc>)
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	4a32      	ldr	r2, [pc, #200]	; (80047c4 <Sensor_TIM5_IRQ+0xfc>)
 80046fc:	f023 0308 	bic.w	r3, r3, #8
 8004700:	6153      	str	r3, [r2, #20]
		sensorNormVals[i] = 255;
	}
	else {
		sensorNormVals[i] = 255 * (sensorRawVals[i] - blackMaxs[i]) / normalizeCoef[i];
	}*/
	sensorNormVals[i] = ( 255 * (sensorRawVals[i] - blackMaxs[i]) / normalizeCoef[i] ) \
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a31      	ldr	r2, [pc, #196]	; (80047cc <Sensor_TIM5_IRQ+0x104>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	4619      	mov	r1, r3
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <Sensor_TIM5_IRQ+0x108>)
 8004712:	5cd3      	ldrb	r3, [r2, r3]
 8004714:	1aca      	subs	r2, r1, r3
 8004716:	4613      	mov	r3, r2
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	492c      	ldr	r1, [pc, #176]	; (80047d4 <Sensor_TIM5_IRQ+0x10c>)
 8004722:	5c8a      	ldrb	r2, [r1, r2]
 8004724:	fb93 f3f2 	sdiv	r3, r3, r2
			& ( ((sensorRawVals[i] < blackMaxs[i]) - 0x01) | ((sensorRawVals[i] < whiteMaxs[i]) - 0x01) );
 8004728:	b25a      	sxtb	r2, r3
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4927      	ldr	r1, [pc, #156]	; (80047cc <Sensor_TIM5_IRQ+0x104>)
 8004730:	5cc9      	ldrb	r1, [r1, r3]
 8004732:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4826      	ldr	r0, [pc, #152]	; (80047d0 <Sensor_TIM5_IRQ+0x108>)
 8004738:	5cc3      	ldrb	r3, [r0, r3]
 800473a:	4299      	cmp	r1, r3
 800473c:	d201      	bcs.n	8004742 <Sensor_TIM5_IRQ+0x7a>
 800473e:	2100      	movs	r1, #0
 8004740:	e001      	b.n	8004746 <Sensor_TIM5_IRQ+0x7e>
 8004742:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4820      	ldr	r0, [pc, #128]	; (80047cc <Sensor_TIM5_IRQ+0x104>)
 800474c:	5cc0      	ldrb	r0, [r0, r3]
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4c21      	ldr	r4, [pc, #132]	; (80047d8 <Sensor_TIM5_IRQ+0x110>)
 8004754:	5ce3      	ldrb	r3, [r4, r3]
 8004756:	4298      	cmp	r0, r3
 8004758:	d201      	bcs.n	800475e <Sensor_TIM5_IRQ+0x96>
 800475a:	2300      	movs	r3, #0
 800475c:	e001      	b.n	8004762 <Sensor_TIM5_IRQ+0x9a>
 800475e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004762:	430b      	orrs	r3, r1
 8004764:	b25b      	sxtb	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	b25a      	sxtb	r2, r3
	sensorNormVals[i] = ( 255 * (sensorRawVals[i] - blackMaxs[i]) / normalizeCoef[i] ) \
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 800476c:	681b      	ldr	r3, [r3, #0]
			& ( ((sensorRawVals[i] < blackMaxs[i]) - 0x01) | ((sensorRawVals[i] < whiteMaxs[i]) - 0x01) );
 800476e:	b2d1      	uxtb	r1, r2
	sensorNormVals[i] = ( 255 * (sensorRawVals[i] - blackMaxs[i]) / normalizeCoef[i] ) \
 8004770:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <Sensor_TIM5_IRQ+0x114>)
 8004772:	54d1      	strb	r1, [r2, r3]

	// sensor state 계산
	state = ( state & ~(0x01 << i) ) | ( (sensorNormVals[i] > threshold) << i );
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <Sensor_TIM5_IRQ+0x118>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	4913      	ldr	r1, [pc, #76]	; (80047dc <Sensor_TIM5_IRQ+0x114>)
 800478e:	5c8a      	ldrb	r2, [r1, r2]
 8004790:	4611      	mov	r1, r2
 8004792:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <Sensor_TIM5_IRQ+0x11c>)
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	4291      	cmp	r1, r2
 8004798:	bf8c      	ite	hi
 800479a:	2201      	movhi	r2, #1
 800479c:	2200      	movls	r2, #0
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	4611      	mov	r1, r2
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	fa01 f202 	lsl.w	r2, r1, r2
 80047aa:	4313      	orrs	r3, r2
 80047ac:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <Sensor_TIM5_IRQ+0x118>)
 80047ae:	6013      	str	r3, [r2, #0]
	//state &= ~(0x01 << i);
	//state |= (sensorNormVals[i] > threshold) << i;

	// 인덱스 증가
	i = (i + 1) & 0x07;
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	4a03      	ldr	r2, [pc, #12]	; (80047c8 <Sensor_TIM5_IRQ+0x100>)
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	bd98      	pop	{r3, r4, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40020800 	.word	0x40020800
 80047c8:	200012f8 	.word	0x200012f8
 80047cc:	200012cc 	.word	0x200012cc
 80047d0:	200012ec 	.word	0x200012ec
 80047d4:	200012dc 	.word	0x200012dc
 80047d8:	200012e4 	.word	0x200012e4
 80047dc:	200012d4 	.word	0x200012d4
 80047e0:	200012f4 	.word	0x200012f4
 80047e4:	2000004c 	.word	0x2000004c

080047e8 <Sensor_Calibration>:



void Sensor_Calibration() {
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af06      	add	r7, sp, #24
	uint32_t	i = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
	uint32_t	tmp = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]

	Sensor_Start();
 80047f6:	f7ff ff1d 	bl	8004634 <Sensor_Start>
	Custom_OLED_Clear();
 80047fa:	f7ff f895 	bl	8003928 <Custom_OLED_Clear>

	// Get whiteMax
	Custom_OLED_Printf("next White Max");
 80047fe:	485f      	ldr	r0, [pc, #380]	; (800497c <Sensor_Calibration+0x194>)
 8004800:	f7ff f942 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) ;
 8004804:	bf00      	nop
 8004806:	f7ff fb03 	bl	8003e10 <Custom_Switch_Read>
 800480a:	4603      	mov	r3, r0
 800480c:	2b03      	cmp	r3, #3
 800480e:	d1fa      	bne.n	8004806 <Sensor_Calibration+0x1e>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8004810:	e03e      	b.n	8004890 <Sensor_Calibration+0xa8>
		for (i = 0; i < 8; i++) {
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	e016      	b.n	8004846 <Sensor_Calibration+0x5e>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8004818:	4a59      	ldr	r2, [pc, #356]	; (8004980 <Sensor_Calibration+0x198>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	4a58      	ldr	r2, [pc, #352]	; (8004984 <Sensor_Calibration+0x19c>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	428b      	cmp	r3, r1
 8004830:	d906      	bls.n	8004840 <Sensor_Calibration+0x58>
				whiteMaxs[i] = tmp;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	b2d9      	uxtb	r1, r3
 8004836:	4a52      	ldr	r2, [pc, #328]	; (8004980 <Sensor_Calibration+0x198>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	460a      	mov	r2, r1
 800483e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b07      	cmp	r3, #7
 800484a:	d9e5      	bls.n	8004818 <Sensor_Calibration+0x30>
			}
		}
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800484c:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <Sensor_Calibration+0x198>)
 800484e:	781b      	ldrb	r3, [r3, #0]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004850:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8004852:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <Sensor_Calibration+0x198>)
 8004854:	785b      	ldrb	r3, [r3, #1]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004856:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8004858:	4b49      	ldr	r3, [pc, #292]	; (8004980 <Sensor_Calibration+0x198>)
 800485a:	789b      	ldrb	r3, [r3, #2]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800485c:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800485e:	4b48      	ldr	r3, [pc, #288]	; (8004980 <Sensor_Calibration+0x198>)
 8004860:	78db      	ldrb	r3, [r3, #3]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004862:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8004864:	4b46      	ldr	r3, [pc, #280]	; (8004980 <Sensor_Calibration+0x198>)
 8004866:	791b      	ldrb	r3, [r3, #4]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004868:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800486a:	4b45      	ldr	r3, [pc, #276]	; (8004980 <Sensor_Calibration+0x198>)
 800486c:	795b      	ldrb	r3, [r3, #5]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800486e:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <Sensor_Calibration+0x198>)
 8004872:	799b      	ldrb	r3, [r3, #6]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004874:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <Sensor_Calibration+0x198>)
 8004878:	79db      	ldrb	r3, [r3, #7]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	9403      	str	r4, [sp, #12]
 800487e:	9002      	str	r0, [sp, #8]
 8004880:	9101      	str	r1, [sp, #4]
 8004882:	9200      	str	r2, [sp, #0]
 8004884:	4663      	mov	r3, ip
 8004886:	4632      	mov	r2, r6
 8004888:	4629      	mov	r1, r5
 800488a:	483f      	ldr	r0, [pc, #252]	; (8004988 <Sensor_Calibration+0x1a0>)
 800488c:	f7ff f8fc 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8004890:	f7ff fabe 	bl	8003e10 <Custom_Switch_Read>
 8004894:	4603      	mov	r3, r0
 8004896:	2b03      	cmp	r3, #3
 8004898:	d1bb      	bne.n	8004812 <Sensor_Calibration+0x2a>
	}

	// Get blackMax
	Custom_OLED_Clear();
 800489a:	f7ff f845 	bl	8003928 <Custom_OLED_Clear>
	Custom_OLED_Printf("next Black Max");
 800489e:	483b      	ldr	r0, [pc, #236]	; (800498c <Sensor_Calibration+0x1a4>)
 80048a0:	f7ff f8f2 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) ;
 80048a4:	bf00      	nop
 80048a6:	f7ff fab3 	bl	8003e10 <Custom_Switch_Read>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d1fa      	bne.n	80048a6 <Sensor_Calibration+0xbe>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80048b0:	e03e      	b.n	8004930 <Sensor_Calibration+0x148>
		for (i = 0; i < 8; i++) {
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	e016      	b.n	80048e6 <Sensor_Calibration+0xfe>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 80048b8:	4a35      	ldr	r2, [pc, #212]	; (8004990 <Sensor_Calibration+0x1a8>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4619      	mov	r1, r3
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <Sensor_Calibration+0x19c>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	428b      	cmp	r3, r1
 80048d0:	d906      	bls.n	80048e0 <Sensor_Calibration+0xf8>
				blackMaxs[i] = tmp;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	b2d9      	uxtb	r1, r3
 80048d6:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <Sensor_Calibration+0x1a8>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	460a      	mov	r2, r1
 80048de:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3301      	adds	r3, #1
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	d9e5      	bls.n	80048b8 <Sensor_Calibration+0xd0>
			}
		}
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <Sensor_Calibration+0x1a8>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80048f0:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80048f2:	4b27      	ldr	r3, [pc, #156]	; (8004990 <Sensor_Calibration+0x1a8>)
 80048f4:	785b      	ldrb	r3, [r3, #1]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80048f6:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <Sensor_Calibration+0x1a8>)
 80048fa:	789b      	ldrb	r3, [r3, #2]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80048fc:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <Sensor_Calibration+0x1a8>)
 8004900:	78db      	ldrb	r3, [r3, #3]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004902:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8004904:	4b22      	ldr	r3, [pc, #136]	; (8004990 <Sensor_Calibration+0x1a8>)
 8004906:	791b      	ldrb	r3, [r3, #4]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004908:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800490a:	4b21      	ldr	r3, [pc, #132]	; (8004990 <Sensor_Calibration+0x1a8>)
 800490c:	795b      	ldrb	r3, [r3, #5]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800490e:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <Sensor_Calibration+0x1a8>)
 8004912:	799b      	ldrb	r3, [r3, #6]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004914:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <Sensor_Calibration+0x1a8>)
 8004918:	79db      	ldrb	r3, [r3, #7]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	9403      	str	r4, [sp, #12]
 800491e:	9002      	str	r0, [sp, #8]
 8004920:	9101      	str	r1, [sp, #4]
 8004922:	9200      	str	r2, [sp, #0]
 8004924:	4663      	mov	r3, ip
 8004926:	4632      	mov	r2, r6
 8004928:	4629      	mov	r1, r5
 800492a:	4817      	ldr	r0, [pc, #92]	; (8004988 <Sensor_Calibration+0x1a0>)
 800492c:	f7ff f8ac 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8004930:	f7ff fa6e 	bl	8003e10 <Custom_Switch_Read>
 8004934:	4603      	mov	r3, r0
 8004936:	2b03      	cmp	r3, #3
 8004938:	d1bb      	bne.n	80048b2 <Sensor_Calibration+0xca>
	}

	// Calculate ADC coefficients
	for (i = 0; i < 8; i++) {
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e011      	b.n	8004964 <Sensor_Calibration+0x17c>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 8004940:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <Sensor_Calibration+0x198>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	4911      	ldr	r1, [pc, #68]	; (8004990 <Sensor_Calibration+0x1a8>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	440b      	add	r3, r1
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	b2d9      	uxtb	r1, r3
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <Sensor_Calibration+0x1ac>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	460a      	mov	r2, r1
 800495c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3301      	adds	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b07      	cmp	r3, #7
 8004968:	d9ea      	bls.n	8004940 <Sensor_Calibration+0x158>
	}

	Custom_OLED_Clear();
 800496a:	f7fe ffdd 	bl	8003928 <Custom_OLED_Clear>
	Sensor_Stop();
 800496e:	f7ff fe75 	bl	800465c <Sensor_Stop>
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497a:	bf00      	nop
 800497c:	08007b94 	.word	0x08007b94
 8004980:	200012e4 	.word	0x200012e4
 8004984:	200012cc 	.word	0x200012cc
 8004988:	08007ba4 	.word	0x08007ba4
 800498c:	08007bd0 	.word	0x08007bd0
 8004990:	200012ec 	.word	0x200012ec
 8004994:	200012dc 	.word	0x200012dc

08004998 <Sensor_Test_Raw>:



void Sensor_Test_Raw() {
 8004998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499a:	b087      	sub	sp, #28
 800499c:	af06      	add	r7, sp, #24
	Sensor_Start();
 800499e:	f7ff fe49 	bl	8004634 <Sensor_Start>
	Custom_OLED_Clear();
 80049a2:	f7fe ffc1 	bl	8003928 <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80049a6:	e021      	b.n	80049ec <Sensor_Test_Raw+0x54>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049ac:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80049ae:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049b0:	785b      	ldrb	r3, [r3, #1]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049b2:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049b6:	789b      	ldrb	r3, [r3, #2]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049b8:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049bc:	78db      	ldrb	r3, [r3, #3]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049be:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049c2:	791b      	ldrb	r3, [r3, #4]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049c4:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049c8:	795b      	ldrb	r3, [r3, #5]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049ca:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049ce:	799b      	ldrb	r3, [r3, #6]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049d0:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <Sensor_Test_Raw+0x70>)
 80049d4:	79db      	ldrb	r3, [r3, #7]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	9403      	str	r4, [sp, #12]
 80049da:	9002      	str	r0, [sp, #8]
 80049dc:	9101      	str	r1, [sp, #4]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	4663      	mov	r3, ip
 80049e2:	4632      	mov	r2, r6
 80049e4:	4629      	mov	r1, r5
 80049e6:	4809      	ldr	r0, [pc, #36]	; (8004a0c <Sensor_Test_Raw+0x74>)
 80049e8:	f7ff f84e 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 80049ec:	f7ff fa10 	bl	8003e10 <Custom_Switch_Read>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d1d8      	bne.n	80049a8 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 80049f6:	f7fe ff97 	bl	8003928 <Custom_OLED_Clear>
	Sensor_Stop();
 80049fa:	f7ff fe2f 	bl	800465c <Sensor_Stop>
}
 80049fe:	bf00      	nop
 8004a00:	3704      	adds	r7, #4
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200012cc 	.word	0x200012cc
 8004a0c:	08007ba4 	.word	0x08007ba4

08004a10 <Sensor_Test_Normalized>:



void Sensor_Test_Normalized() {
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af06      	add	r7, sp, #24
	Sensor_Start();
 8004a16:	f7ff fe0d 	bl	8004634 <Sensor_Start>
	Custom_OLED_Clear();
 8004a1a:	f7fe ff85 	bl	8003928 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8004a1e:	e021      	b.n	8004a64 <Sensor_Test_Normalized+0x54>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a24:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a28:	785b      	ldrb	r3, [r3, #1]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a2a:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a2e:	789b      	ldrb	r3, [r3, #2]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a30:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8004a32:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a34:	78db      	ldrb	r3, [r3, #3]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a36:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a3a:	791b      	ldrb	r3, [r3, #4]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a3c:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a40:	795b      	ldrb	r3, [r3, #5]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a42:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a46:	799b      	ldrb	r3, [r3, #6]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a48:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <Sensor_Test_Normalized+0x70>)
 8004a4c:	79db      	ldrb	r3, [r3, #7]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	9403      	str	r4, [sp, #12]
 8004a52:	9002      	str	r0, [sp, #8]
 8004a54:	9101      	str	r1, [sp, #4]
 8004a56:	9200      	str	r2, [sp, #0]
 8004a58:	4663      	mov	r3, ip
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4809      	ldr	r0, [pc, #36]	; (8004a84 <Sensor_Test_Normalized+0x74>)
 8004a60:	f7ff f812 	bl	8003a88 <Custom_OLED_Printf>
	while (CUSTOM_SW_BOTH != Custom_Switch_Read()) {
 8004a64:	f7ff f9d4 	bl	8003e10 <Custom_Switch_Read>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d1d8      	bne.n	8004a20 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8004a6e:	f7fe ff5b 	bl	8003928 <Custom_OLED_Clear>
	Sensor_Stop();
 8004a72:	f7ff fdf3 	bl	800465c <Sensor_Stop>
}
 8004a76:	bf00      	nop
 8004a78:	3704      	adds	r7, #4
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200012d4 	.word	0x200012d4
 8004a84:	08007ba4 	.word	0x08007ba4

08004a88 <Sensor_Test_State>:



void Sensor_Test_State() {
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af06      	add	r7, sp, #24
	uint32_t sw = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]

	Sensor_Start();
 8004a92:	f7ff fdcf 	bl	8004634 <Sensor_Start>
	Custom_OLED_Clear();
 8004a96:	f7fe ff47 	bl	8003928 <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004a9a:	e050      	b.n	8004b3e <Sensor_Test_State+0xb6>
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004aa0:	f003 0501 	and.w	r5, r3, #1
			(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	085b      	lsrs	r3, r3, #1
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004aaa:	f003 0601 	and.w	r6, r3, #1
			(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8004aae:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	089b      	lsrs	r3, r3, #2
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004ab4:	f003 0c01 	and.w	ip, r3, #1
			(state >> 0) & 1, (state >> 1) & 1, (state >> 2) & 1, (state >> 3) & 1, \
 8004ab8:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	08db      	lsrs	r3, r3, #3
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004abe:	f003 0301 	and.w	r3, r3, #1
			(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	0912      	lsrs	r2, r2, #4
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004ac8:	f002 0201 	and.w	r2, r2, #1
			(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);
 8004acc:	4923      	ldr	r1, [pc, #140]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004ace:	6809      	ldr	r1, [r1, #0]
 8004ad0:	0949      	lsrs	r1, r1, #5
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004ad2:	f001 0101 	and.w	r1, r1, #1
			(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);
 8004ad6:	4821      	ldr	r0, [pc, #132]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004ad8:	6800      	ldr	r0, [r0, #0]
 8004ada:	0980      	lsrs	r0, r0, #6
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004adc:	f000 0001 	and.w	r0, r0, #1
			(state >> 4) & 1, (state >> 5) & 1, (state >> 6) & 1, (state >> 7) & 1);
 8004ae0:	4c1e      	ldr	r4, [pc, #120]	; (8004b5c <Sensor_Test_State+0xd4>)
 8004ae2:	6824      	ldr	r4, [r4, #0]
 8004ae4:	09e4      	lsrs	r4, r4, #7
		Custom_OLED_Printf("%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8004ae6:	f004 0401 	and.w	r4, r4, #1
 8004aea:	9404      	str	r4, [sp, #16]
 8004aec:	9003      	str	r0, [sp, #12]
 8004aee:	9102      	str	r1, [sp, #8]
 8004af0:	9201      	str	r2, [sp, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4663      	mov	r3, ip
 8004af6:	4632      	mov	r2, r6
 8004af8:	4629      	mov	r1, r5
 8004afa:	4819      	ldr	r0, [pc, #100]	; (8004b60 <Sensor_Test_State+0xd8>)
 8004afc:	f7fe ffc4 	bl	8003a88 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1threshold: %d", threshold);
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	4818      	ldr	r0, [pc, #96]	; (8004b68 <Sensor_Test_State+0xe0>)
 8004b08:	f7fe ffbe 	bl	8003a88 <Custom_OLED_Printf>


		if (sw == CUSTOM_SW_1) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d109      	bne.n	8004b26 <Sensor_Test_State+0x9e>
			if (threshold > THRESHOLD_MIN) {
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b19      	cmp	r3, #25
 8004b18:	d911      	bls.n	8004b3e <Sensor_Test_State+0xb6>
				threshold -= THRESHOLD_CHANGE_VAL;
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3b05      	subs	r3, #5
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e00b      	b.n	8004b3e <Sensor_Test_State+0xb6>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d108      	bne.n	8004b3e <Sensor_Test_State+0xb6>
			if (threshold < THRESHOLD_MAX) {
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b7c      	cmp	r3, #124	; 0x7c
 8004b32:	d804      	bhi.n	8004b3e <Sensor_Test_State+0xb6>
				threshold += THRESHOLD_CHANGE_VAL;
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3305      	adds	r3, #5
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <Sensor_Test_State+0xdc>)
 8004b3c:	6013      	str	r3, [r2, #0]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 8004b3e:	f7ff f967 	bl	8003e10 <Custom_Switch_Read>
 8004b42:	4603      	mov	r3, r0
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d1a7      	bne.n	8004a9c <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 8004b4c:	f7fe feec 	bl	8003928 <Custom_OLED_Clear>
	Sensor_Stop();
 8004b50:	f7ff fd84 	bl	800465c <Sensor_Stop>
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	200012f4 	.word	0x200012f4
 8004b60:	08007ba4 	.word	0x08007ba4
 8004b64:	2000004c 	.word	0x2000004c
 8004b68:	08007be0 	.word	0x08007be0

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000050 	.word	0x20000050

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	; (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	; (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f002 ff02 	bl	8007994 <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	0800826c 	.word	0x0800826c
 8004bb4:	0800826c 	.word	0x0800826c
 8004bb8:	0800826c 	.word	0x0800826c
 8004bbc:	08008270 	.word	0x08008270

08004bc0 <memcpy>:
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bc8:	d100      	bne.n	8004bcc <memcpy+0xc>
 8004bca:	4770      	bx	lr
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	d1f9      	bne.n	8004bce <memcpy+0xe>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__cvt>:
 8004bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	ec55 4b10 	vmov	r4, r5, d0
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	bfbb      	ittet	lt
 8004bfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c02:	461d      	movlt	r5, r3
 8004c04:	2300      	movge	r3, #0
 8004c06:	232d      	movlt	r3, #45	; 0x2d
 8004c08:	700b      	strb	r3, [r1, #0]
 8004c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c10:	4691      	mov	r9, r2
 8004c12:	f023 0820 	bic.w	r8, r3, #32
 8004c16:	bfbc      	itt	lt
 8004c18:	4622      	movlt	r2, r4
 8004c1a:	4614      	movlt	r4, r2
 8004c1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c20:	d005      	beq.n	8004c2e <__cvt+0x42>
 8004c22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c26:	d100      	bne.n	8004c2a <__cvt+0x3e>
 8004c28:	3601      	adds	r6, #1
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	e000      	b.n	8004c30 <__cvt+0x44>
 8004c2e:	2103      	movs	r1, #3
 8004c30:	ab03      	add	r3, sp, #12
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	ab02      	add	r3, sp, #8
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	ec45 4b10 	vmov	d0, r4, r5
 8004c3c:	4653      	mov	r3, sl
 8004c3e:	4632      	mov	r2, r6
 8004c40:	f000 fcea 	bl	8005618 <_dtoa_r>
 8004c44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c48:	4607      	mov	r7, r0
 8004c4a:	d102      	bne.n	8004c52 <__cvt+0x66>
 8004c4c:	f019 0f01 	tst.w	r9, #1
 8004c50:	d022      	beq.n	8004c98 <__cvt+0xac>
 8004c52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c56:	eb07 0906 	add.w	r9, r7, r6
 8004c5a:	d110      	bne.n	8004c7e <__cvt+0x92>
 8004c5c:	783b      	ldrb	r3, [r7, #0]
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d10a      	bne.n	8004c78 <__cvt+0x8c>
 8004c62:	2200      	movs	r2, #0
 8004c64:	2300      	movs	r3, #0
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f7fb ff35 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c6e:	b918      	cbnz	r0, 8004c78 <__cvt+0x8c>
 8004c70:	f1c6 0601 	rsb	r6, r6, #1
 8004c74:	f8ca 6000 	str.w	r6, [sl]
 8004c78:	f8da 3000 	ldr.w	r3, [sl]
 8004c7c:	4499      	add	r9, r3
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2300      	movs	r3, #0
 8004c82:	4620      	mov	r0, r4
 8004c84:	4629      	mov	r1, r5
 8004c86:	f7fb ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c8a:	b108      	cbz	r0, 8004c90 <__cvt+0xa4>
 8004c8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c90:	2230      	movs	r2, #48	; 0x30
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	454b      	cmp	r3, r9
 8004c96:	d307      	bcc.n	8004ca8 <__cvt+0xbc>
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c9c:	1bdb      	subs	r3, r3, r7
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	b004      	add	sp, #16
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	9103      	str	r1, [sp, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e7f0      	b.n	8004c92 <__cvt+0xa6>

08004cb0 <__exponent>:
 8004cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	bfb8      	it	lt
 8004cb8:	4249      	neglt	r1, r1
 8004cba:	f803 2b02 	strb.w	r2, [r3], #2
 8004cbe:	bfb4      	ite	lt
 8004cc0:	222d      	movlt	r2, #45	; 0x2d
 8004cc2:	222b      	movge	r2, #43	; 0x2b
 8004cc4:	2909      	cmp	r1, #9
 8004cc6:	7042      	strb	r2, [r0, #1]
 8004cc8:	dd2a      	ble.n	8004d20 <__exponent+0x70>
 8004cca:	f10d 0407 	add.w	r4, sp, #7
 8004cce:	46a4      	mov	ip, r4
 8004cd0:	270a      	movs	r7, #10
 8004cd2:	46a6      	mov	lr, r4
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cda:	fb07 1516 	mls	r5, r7, r6, r1
 8004cde:	3530      	adds	r5, #48	; 0x30
 8004ce0:	2a63      	cmp	r2, #99	; 0x63
 8004ce2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004ce6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cea:	4631      	mov	r1, r6
 8004cec:	dcf1      	bgt.n	8004cd2 <__exponent+0x22>
 8004cee:	3130      	adds	r1, #48	; 0x30
 8004cf0:	f1ae 0502 	sub.w	r5, lr, #2
 8004cf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cf8:	1c44      	adds	r4, r0, #1
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4561      	cmp	r1, ip
 8004cfe:	d30a      	bcc.n	8004d16 <__exponent+0x66>
 8004d00:	f10d 0209 	add.w	r2, sp, #9
 8004d04:	eba2 020e 	sub.w	r2, r2, lr
 8004d08:	4565      	cmp	r5, ip
 8004d0a:	bf88      	it	hi
 8004d0c:	2200      	movhi	r2, #0
 8004d0e:	4413      	add	r3, r2
 8004d10:	1a18      	subs	r0, r3, r0
 8004d12:	b003      	add	sp, #12
 8004d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d1e:	e7ed      	b.n	8004cfc <__exponent+0x4c>
 8004d20:	2330      	movs	r3, #48	; 0x30
 8004d22:	3130      	adds	r1, #48	; 0x30
 8004d24:	7083      	strb	r3, [r0, #2]
 8004d26:	70c1      	strb	r1, [r0, #3]
 8004d28:	1d03      	adds	r3, r0, #4
 8004d2a:	e7f1      	b.n	8004d10 <__exponent+0x60>

08004d2c <_printf_float>:
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	ed2d 8b02 	vpush	{d8}
 8004d34:	b08d      	sub	sp, #52	; 0x34
 8004d36:	460c      	mov	r4, r1
 8004d38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	461f      	mov	r7, r3
 8004d40:	4605      	mov	r5, r0
 8004d42:	f001 fa57 	bl	80061f4 <_localeconv_r>
 8004d46:	f8d0 a000 	ldr.w	sl, [r0]
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f7fb fa48 	bl	80001e0 <strlen>
 8004d50:	2300      	movs	r3, #0
 8004d52:	930a      	str	r3, [sp, #40]	; 0x28
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	f103 0208 	add.w	r2, r3, #8
 8004d6a:	f8c8 2000 	str.w	r2, [r8]
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d7e:	9307      	str	r3, [sp, #28]
 8004d80:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d84:	ee08 0a10 	vmov	s16, r0
 8004d88:	4b9f      	ldr	r3, [pc, #636]	; (8005008 <_printf_float+0x2dc>)
 8004d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d92:	f7fb fed3 	bl	8000b3c <__aeabi_dcmpun>
 8004d96:	bb88      	cbnz	r0, 8004dfc <_printf_float+0xd0>
 8004d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <_printf_float+0x2dc>)
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da2:	f7fb fead 	bl	8000b00 <__aeabi_dcmple>
 8004da6:	bb48      	cbnz	r0, 8004dfc <_printf_float+0xd0>
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	4640      	mov	r0, r8
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb fe9c 	bl	8000aec <__aeabi_dcmplt>
 8004db4:	b110      	cbz	r0, 8004dbc <_printf_float+0x90>
 8004db6:	232d      	movs	r3, #45	; 0x2d
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbc:	4b93      	ldr	r3, [pc, #588]	; (800500c <_printf_float+0x2e0>)
 8004dbe:	4894      	ldr	r0, [pc, #592]	; (8005010 <_printf_float+0x2e4>)
 8004dc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004dc4:	bf94      	ite	ls
 8004dc6:	4698      	movls	r8, r3
 8004dc8:	4680      	movhi	r8, r0
 8004dca:	2303      	movs	r3, #3
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	9b05      	ldr	r3, [sp, #20]
 8004dd0:	f023 0204 	bic.w	r2, r3, #4
 8004dd4:	6022      	str	r2, [r4, #0]
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	9700      	str	r7, [sp, #0]
 8004ddc:	4633      	mov	r3, r6
 8004dde:	aa0b      	add	r2, sp, #44	; 0x2c
 8004de0:	4621      	mov	r1, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 f9d8 	bl	8005198 <_printf_common>
 8004de8:	3001      	adds	r0, #1
 8004dea:	f040 8090 	bne.w	8004f0e <_printf_float+0x1e2>
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df2:	b00d      	add	sp, #52	; 0x34
 8004df4:	ecbd 8b02 	vpop	{d8}
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fe9a 	bl	8000b3c <__aeabi_dcmpun>
 8004e08:	b140      	cbz	r0, 8004e1c <_printf_float+0xf0>
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bfbc      	itt	lt
 8004e10:	232d      	movlt	r3, #45	; 0x2d
 8004e12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e16:	487f      	ldr	r0, [pc, #508]	; (8005014 <_printf_float+0x2e8>)
 8004e18:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <_printf_float+0x2ec>)
 8004e1a:	e7d1      	b.n	8004dc0 <_printf_float+0x94>
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e22:	9206      	str	r2, [sp, #24]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	d13f      	bne.n	8004ea8 <_printf_float+0x17c>
 8004e28:	2306      	movs	r3, #6
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	9b05      	ldr	r3, [sp, #20]
 8004e2e:	6861      	ldr	r1, [r4, #4]
 8004e30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e34:	2300      	movs	r3, #0
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	ab0a      	add	r3, sp, #40	; 0x28
 8004e3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e3e:	ab09      	add	r3, sp, #36	; 0x24
 8004e40:	ec49 8b10 	vmov	d0, r8, r9
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7ff fecd 	bl	8004bec <__cvt>
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e56:	2b47      	cmp	r3, #71	; 0x47
 8004e58:	4680      	mov	r8, r0
 8004e5a:	d108      	bne.n	8004e6e <_printf_float+0x142>
 8004e5c:	1cc8      	adds	r0, r1, #3
 8004e5e:	db02      	blt.n	8004e66 <_printf_float+0x13a>
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	dd41      	ble.n	8004eea <_printf_float+0x1be>
 8004e66:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e6a:	fa5f fb8b 	uxtb.w	fp, fp
 8004e6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e72:	d820      	bhi.n	8004eb6 <_printf_float+0x18a>
 8004e74:	3901      	subs	r1, #1
 8004e76:	465a      	mov	r2, fp
 8004e78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e7c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e7e:	f7ff ff17 	bl	8004cb0 <__exponent>
 8004e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e84:	1813      	adds	r3, r2, r0
 8004e86:	2a01      	cmp	r2, #1
 8004e88:	4681      	mov	r9, r0
 8004e8a:	6123      	str	r3, [r4, #16]
 8004e8c:	dc02      	bgt.n	8004e94 <_printf_float+0x168>
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	07d2      	lsls	r2, r2, #31
 8004e92:	d501      	bpl.n	8004e98 <_printf_float+0x16c>
 8004e94:	3301      	adds	r3, #1
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d09c      	beq.n	8004dda <_printf_float+0xae>
 8004ea0:	232d      	movs	r3, #45	; 0x2d
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea6:	e798      	b.n	8004dda <_printf_float+0xae>
 8004ea8:	9a06      	ldr	r2, [sp, #24]
 8004eaa:	2a47      	cmp	r2, #71	; 0x47
 8004eac:	d1be      	bne.n	8004e2c <_printf_float+0x100>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1bc      	bne.n	8004e2c <_printf_float+0x100>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e7b9      	b.n	8004e2a <_printf_float+0xfe>
 8004eb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004eba:	d118      	bne.n	8004eee <_printf_float+0x1c2>
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	dd0b      	ble.n	8004eda <_printf_float+0x1ae>
 8004ec2:	6121      	str	r1, [r4, #16]
 8004ec4:	b913      	cbnz	r3, 8004ecc <_printf_float+0x1a0>
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	07d0      	lsls	r0, r2, #31
 8004eca:	d502      	bpl.n	8004ed2 <_printf_float+0x1a6>
 8004ecc:	3301      	adds	r3, #1
 8004ece:	440b      	add	r3, r1
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ed4:	f04f 0900 	mov.w	r9, #0
 8004ed8:	e7de      	b.n	8004e98 <_printf_float+0x16c>
 8004eda:	b913      	cbnz	r3, 8004ee2 <_printf_float+0x1b6>
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	07d2      	lsls	r2, r2, #31
 8004ee0:	d501      	bpl.n	8004ee6 <_printf_float+0x1ba>
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	e7f4      	b.n	8004ed0 <_printf_float+0x1a4>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7f2      	b.n	8004ed0 <_printf_float+0x1a4>
 8004eea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	db05      	blt.n	8004f00 <_printf_float+0x1d4>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	6121      	str	r1, [r4, #16]
 8004ef8:	07d8      	lsls	r0, r3, #31
 8004efa:	d5ea      	bpl.n	8004ed2 <_printf_float+0x1a6>
 8004efc:	1c4b      	adds	r3, r1, #1
 8004efe:	e7e7      	b.n	8004ed0 <_printf_float+0x1a4>
 8004f00:	2900      	cmp	r1, #0
 8004f02:	bfd4      	ite	le
 8004f04:	f1c1 0202 	rsble	r2, r1, #2
 8004f08:	2201      	movgt	r2, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	e7e0      	b.n	8004ed0 <_printf_float+0x1a4>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	055a      	lsls	r2, r3, #21
 8004f12:	d407      	bmi.n	8004f24 <_printf_float+0x1f8>
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	4642      	mov	r2, r8
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d12c      	bne.n	8004f7c <_printf_float+0x250>
 8004f22:	e764      	b.n	8004dee <_printf_float+0xc2>
 8004f24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f28:	f240 80e0 	bls.w	80050ec <_printf_float+0x3c0>
 8004f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	f7fb fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d034      	beq.n	8004fa6 <_printf_float+0x27a>
 8004f3c:	4a37      	ldr	r2, [pc, #220]	; (800501c <_printf_float+0x2f0>)
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f af51 	beq.w	8004dee <_printf_float+0xc2>
 8004f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f50:	429a      	cmp	r2, r3
 8004f52:	db02      	blt.n	8004f5a <_printf_float+0x22e>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07d8      	lsls	r0, r3, #31
 8004f58:	d510      	bpl.n	8004f7c <_printf_float+0x250>
 8004f5a:	ee18 3a10 	vmov	r3, s16
 8004f5e:	4652      	mov	r2, sl
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f af41 	beq.w	8004dee <_printf_float+0xc2>
 8004f6c:	f04f 0800 	mov.w	r8, #0
 8004f70:	f104 091a 	add.w	r9, r4, #26
 8004f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f76:	3b01      	subs	r3, #1
 8004f78:	4543      	cmp	r3, r8
 8004f7a:	dc09      	bgt.n	8004f90 <_printf_float+0x264>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	079b      	lsls	r3, r3, #30
 8004f80:	f100 8105 	bmi.w	800518e <_printf_float+0x462>
 8004f84:	68e0      	ldr	r0, [r4, #12]
 8004f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	bfb8      	it	lt
 8004f8c:	4618      	movlt	r0, r3
 8004f8e:	e730      	b.n	8004df2 <_printf_float+0xc6>
 8004f90:	2301      	movs	r3, #1
 8004f92:	464a      	mov	r2, r9
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f43f af27 	beq.w	8004dee <_printf_float+0xc2>
 8004fa0:	f108 0801 	add.w	r8, r8, #1
 8004fa4:	e7e6      	b.n	8004f74 <_printf_float+0x248>
 8004fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dc39      	bgt.n	8005020 <_printf_float+0x2f4>
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <_printf_float+0x2f0>)
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af19 	beq.w	8004dee <_printf_float+0xc2>
 8004fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d102      	bne.n	8004fca <_printf_float+0x29e>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d5d8      	bpl.n	8004f7c <_printf_float+0x250>
 8004fca:	ee18 3a10 	vmov	r3, s16
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af09 	beq.w	8004dee <_printf_float+0xc2>
 8004fdc:	f04f 0900 	mov.w	r9, #0
 8004fe0:	f104 0a1a 	add.w	sl, r4, #26
 8004fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	454b      	cmp	r3, r9
 8004fea:	dc01      	bgt.n	8004ff0 <_printf_float+0x2c4>
 8004fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fee:	e792      	b.n	8004f16 <_printf_float+0x1ea>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	47b8      	blx	r7
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f43f aef7 	beq.w	8004dee <_printf_float+0xc2>
 8005000:	f109 0901 	add.w	r9, r9, #1
 8005004:	e7ee      	b.n	8004fe4 <_printf_float+0x2b8>
 8005006:	bf00      	nop
 8005008:	7fefffff 	.word	0x7fefffff
 800500c:	08007e8c 	.word	0x08007e8c
 8005010:	08007e90 	.word	0x08007e90
 8005014:	08007e98 	.word	0x08007e98
 8005018:	08007e94 	.word	0x08007e94
 800501c:	08007e9c 	.word	0x08007e9c
 8005020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005024:	429a      	cmp	r2, r3
 8005026:	bfa8      	it	ge
 8005028:	461a      	movge	r2, r3
 800502a:	2a00      	cmp	r2, #0
 800502c:	4691      	mov	r9, r2
 800502e:	dc37      	bgt.n	80050a0 <_printf_float+0x374>
 8005030:	f04f 0b00 	mov.w	fp, #0
 8005034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005038:	f104 021a 	add.w	r2, r4, #26
 800503c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	eba3 0309 	sub.w	r3, r3, r9
 8005044:	455b      	cmp	r3, fp
 8005046:	dc33      	bgt.n	80050b0 <_printf_float+0x384>
 8005048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800504c:	429a      	cmp	r2, r3
 800504e:	db3b      	blt.n	80050c8 <_printf_float+0x39c>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07da      	lsls	r2, r3, #31
 8005054:	d438      	bmi.n	80050c8 <_printf_float+0x39c>
 8005056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005058:	9a05      	ldr	r2, [sp, #20]
 800505a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800505c:	1a9a      	subs	r2, r3, r2
 800505e:	eba3 0901 	sub.w	r9, r3, r1
 8005062:	4591      	cmp	r9, r2
 8005064:	bfa8      	it	ge
 8005066:	4691      	movge	r9, r2
 8005068:	f1b9 0f00 	cmp.w	r9, #0
 800506c:	dc35      	bgt.n	80050da <_printf_float+0x3ae>
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005076:	f104 0a1a 	add.w	sl, r4, #26
 800507a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	eba3 0309 	sub.w	r3, r3, r9
 8005084:	4543      	cmp	r3, r8
 8005086:	f77f af79 	ble.w	8004f7c <_printf_float+0x250>
 800508a:	2301      	movs	r3, #1
 800508c:	4652      	mov	r2, sl
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f aeaa 	beq.w	8004dee <_printf_float+0xc2>
 800509a:	f108 0801 	add.w	r8, r8, #1
 800509e:	e7ec      	b.n	800507a <_printf_float+0x34e>
 80050a0:	4613      	mov	r3, r2
 80050a2:	4631      	mov	r1, r6
 80050a4:	4642      	mov	r2, r8
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	d1c0      	bne.n	8005030 <_printf_float+0x304>
 80050ae:	e69e      	b.n	8004dee <_printf_float+0xc2>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	9205      	str	r2, [sp, #20]
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f ae97 	beq.w	8004dee <_printf_float+0xc2>
 80050c0:	9a05      	ldr	r2, [sp, #20]
 80050c2:	f10b 0b01 	add.w	fp, fp, #1
 80050c6:	e7b9      	b.n	800503c <_printf_float+0x310>
 80050c8:	ee18 3a10 	vmov	r3, s16
 80050cc:	4652      	mov	r2, sl
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	d1be      	bne.n	8005056 <_printf_float+0x32a>
 80050d8:	e689      	b.n	8004dee <_printf_float+0xc2>
 80050da:	9a05      	ldr	r2, [sp, #20]
 80050dc:	464b      	mov	r3, r9
 80050de:	4442      	add	r2, r8
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	d1c1      	bne.n	800506e <_printf_float+0x342>
 80050ea:	e680      	b.n	8004dee <_printf_float+0xc2>
 80050ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	dc01      	bgt.n	80050f6 <_printf_float+0x3ca>
 80050f2:	07db      	lsls	r3, r3, #31
 80050f4:	d538      	bpl.n	8005168 <_printf_float+0x43c>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4642      	mov	r2, r8
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae74 	beq.w	8004dee <_printf_float+0xc2>
 8005106:	ee18 3a10 	vmov	r3, s16
 800510a:	4652      	mov	r2, sl
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f ae6b 	beq.w	8004dee <_printf_float+0xc2>
 8005118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800511c:	2200      	movs	r2, #0
 800511e:	2300      	movs	r3, #0
 8005120:	f7fb fcda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005124:	b9d8      	cbnz	r0, 800515e <_printf_float+0x432>
 8005126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005128:	f108 0201 	add.w	r2, r8, #1
 800512c:	3b01      	subs	r3, #1
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	d10e      	bne.n	8005156 <_printf_float+0x42a>
 8005138:	e659      	b.n	8004dee <_printf_float+0xc2>
 800513a:	2301      	movs	r3, #1
 800513c:	4652      	mov	r2, sl
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	f43f ae52 	beq.w	8004dee <_printf_float+0xc2>
 800514a:	f108 0801 	add.w	r8, r8, #1
 800514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	4543      	cmp	r3, r8
 8005154:	dcf1      	bgt.n	800513a <_printf_float+0x40e>
 8005156:	464b      	mov	r3, r9
 8005158:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800515c:	e6dc      	b.n	8004f18 <_printf_float+0x1ec>
 800515e:	f04f 0800 	mov.w	r8, #0
 8005162:	f104 0a1a 	add.w	sl, r4, #26
 8005166:	e7f2      	b.n	800514e <_printf_float+0x422>
 8005168:	2301      	movs	r3, #1
 800516a:	4642      	mov	r2, r8
 800516c:	e7df      	b.n	800512e <_printf_float+0x402>
 800516e:	2301      	movs	r3, #1
 8005170:	464a      	mov	r2, r9
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	f43f ae38 	beq.w	8004dee <_printf_float+0xc2>
 800517e:	f108 0801 	add.w	r8, r8, #1
 8005182:	68e3      	ldr	r3, [r4, #12]
 8005184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005186:	1a5b      	subs	r3, r3, r1
 8005188:	4543      	cmp	r3, r8
 800518a:	dcf0      	bgt.n	800516e <_printf_float+0x442>
 800518c:	e6fa      	b.n	8004f84 <_printf_float+0x258>
 800518e:	f04f 0800 	mov.w	r8, #0
 8005192:	f104 0919 	add.w	r9, r4, #25
 8005196:	e7f4      	b.n	8005182 <_printf_float+0x456>

08005198 <_printf_common>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	4616      	mov	r6, r2
 800519e:	4699      	mov	r9, r3
 80051a0:	688a      	ldr	r2, [r1, #8]
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bfb8      	it	lt
 80051ac:	4613      	movlt	r3, r2
 80051ae:	6033      	str	r3, [r6, #0]
 80051b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051b4:	4607      	mov	r7, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	b10a      	cbz	r2, 80051be <_printf_common+0x26>
 80051ba:	3301      	adds	r3, #1
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	0699      	lsls	r1, r3, #26
 80051c2:	bf42      	ittt	mi
 80051c4:	6833      	ldrmi	r3, [r6, #0]
 80051c6:	3302      	addmi	r3, #2
 80051c8:	6033      	strmi	r3, [r6, #0]
 80051ca:	6825      	ldr	r5, [r4, #0]
 80051cc:	f015 0506 	ands.w	r5, r5, #6
 80051d0:	d106      	bne.n	80051e0 <_printf_common+0x48>
 80051d2:	f104 0a19 	add.w	sl, r4, #25
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	6832      	ldr	r2, [r6, #0]
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dc26      	bgt.n	800522e <_printf_common+0x96>
 80051e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051e4:	1e13      	subs	r3, r2, #0
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	bf18      	it	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	0692      	lsls	r2, r2, #26
 80051ee:	d42b      	bmi.n	8005248 <_printf_common+0xb0>
 80051f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d01e      	beq.n	800523c <_printf_common+0xa4>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	68e5      	ldr	r5, [r4, #12]
 8005202:	6832      	ldr	r2, [r6, #0]
 8005204:	f003 0306 	and.w	r3, r3, #6
 8005208:	2b04      	cmp	r3, #4
 800520a:	bf08      	it	eq
 800520c:	1aad      	subeq	r5, r5, r2
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	6922      	ldr	r2, [r4, #16]
 8005212:	bf0c      	ite	eq
 8005214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005218:	2500      	movne	r5, #0
 800521a:	4293      	cmp	r3, r2
 800521c:	bfc4      	itt	gt
 800521e:	1a9b      	subgt	r3, r3, r2
 8005220:	18ed      	addgt	r5, r5, r3
 8005222:	2600      	movs	r6, #0
 8005224:	341a      	adds	r4, #26
 8005226:	42b5      	cmp	r5, r6
 8005228:	d11a      	bne.n	8005260 <_printf_common+0xc8>
 800522a:	2000      	movs	r0, #0
 800522c:	e008      	b.n	8005240 <_printf_common+0xa8>
 800522e:	2301      	movs	r3, #1
 8005230:	4652      	mov	r2, sl
 8005232:	4649      	mov	r1, r9
 8005234:	4638      	mov	r0, r7
 8005236:	47c0      	blx	r8
 8005238:	3001      	adds	r0, #1
 800523a:	d103      	bne.n	8005244 <_printf_common+0xac>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	3501      	adds	r5, #1
 8005246:	e7c6      	b.n	80051d6 <_printf_common+0x3e>
 8005248:	18e1      	adds	r1, r4, r3
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	2030      	movs	r0, #48	; 0x30
 800524e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005252:	4422      	add	r2, r4
 8005254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800525c:	3302      	adds	r3, #2
 800525e:	e7c7      	b.n	80051f0 <_printf_common+0x58>
 8005260:	2301      	movs	r3, #1
 8005262:	4622      	mov	r2, r4
 8005264:	4649      	mov	r1, r9
 8005266:	4638      	mov	r0, r7
 8005268:	47c0      	blx	r8
 800526a:	3001      	adds	r0, #1
 800526c:	d0e6      	beq.n	800523c <_printf_common+0xa4>
 800526e:	3601      	adds	r6, #1
 8005270:	e7d9      	b.n	8005226 <_printf_common+0x8e>
	...

08005274 <_printf_i>:
 8005274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	7e0f      	ldrb	r7, [r1, #24]
 800527a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800527c:	2f78      	cmp	r7, #120	; 0x78
 800527e:	4691      	mov	r9, r2
 8005280:	4680      	mov	r8, r0
 8005282:	460c      	mov	r4, r1
 8005284:	469a      	mov	sl, r3
 8005286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800528a:	d807      	bhi.n	800529c <_printf_i+0x28>
 800528c:	2f62      	cmp	r7, #98	; 0x62
 800528e:	d80a      	bhi.n	80052a6 <_printf_i+0x32>
 8005290:	2f00      	cmp	r7, #0
 8005292:	f000 80d8 	beq.w	8005446 <_printf_i+0x1d2>
 8005296:	2f58      	cmp	r7, #88	; 0x58
 8005298:	f000 80a3 	beq.w	80053e2 <_printf_i+0x16e>
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052a4:	e03a      	b.n	800531c <_printf_i+0xa8>
 80052a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052aa:	2b15      	cmp	r3, #21
 80052ac:	d8f6      	bhi.n	800529c <_printf_i+0x28>
 80052ae:	a101      	add	r1, pc, #4	; (adr r1, 80052b4 <_printf_i+0x40>)
 80052b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b4:	0800530d 	.word	0x0800530d
 80052b8:	08005321 	.word	0x08005321
 80052bc:	0800529d 	.word	0x0800529d
 80052c0:	0800529d 	.word	0x0800529d
 80052c4:	0800529d 	.word	0x0800529d
 80052c8:	0800529d 	.word	0x0800529d
 80052cc:	08005321 	.word	0x08005321
 80052d0:	0800529d 	.word	0x0800529d
 80052d4:	0800529d 	.word	0x0800529d
 80052d8:	0800529d 	.word	0x0800529d
 80052dc:	0800529d 	.word	0x0800529d
 80052e0:	0800542d 	.word	0x0800542d
 80052e4:	08005351 	.word	0x08005351
 80052e8:	0800540f 	.word	0x0800540f
 80052ec:	0800529d 	.word	0x0800529d
 80052f0:	0800529d 	.word	0x0800529d
 80052f4:	0800544f 	.word	0x0800544f
 80052f8:	0800529d 	.word	0x0800529d
 80052fc:	08005351 	.word	0x08005351
 8005300:	0800529d 	.word	0x0800529d
 8005304:	0800529d 	.word	0x0800529d
 8005308:	08005417 	.word	0x08005417
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	602a      	str	r2, [r5, #0]
 8005314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531c:	2301      	movs	r3, #1
 800531e:	e0a3      	b.n	8005468 <_printf_i+0x1f4>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	6829      	ldr	r1, [r5, #0]
 8005324:	0606      	lsls	r6, r0, #24
 8005326:	f101 0304 	add.w	r3, r1, #4
 800532a:	d50a      	bpl.n	8005342 <_printf_i+0xce>
 800532c:	680e      	ldr	r6, [r1, #0]
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	2e00      	cmp	r6, #0
 8005332:	da03      	bge.n	800533c <_printf_i+0xc8>
 8005334:	232d      	movs	r3, #45	; 0x2d
 8005336:	4276      	negs	r6, r6
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	485e      	ldr	r0, [pc, #376]	; (80054b8 <_printf_i+0x244>)
 800533e:	230a      	movs	r3, #10
 8005340:	e019      	b.n	8005376 <_printf_i+0x102>
 8005342:	680e      	ldr	r6, [r1, #0]
 8005344:	602b      	str	r3, [r5, #0]
 8005346:	f010 0f40 	tst.w	r0, #64	; 0x40
 800534a:	bf18      	it	ne
 800534c:	b236      	sxthne	r6, r6
 800534e:	e7ef      	b.n	8005330 <_printf_i+0xbc>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	6029      	str	r1, [r5, #0]
 8005358:	0601      	lsls	r1, r0, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xec>
 800535c:	681e      	ldr	r6, [r3, #0]
 800535e:	e002      	b.n	8005366 <_printf_i+0xf2>
 8005360:	0646      	lsls	r6, r0, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xe8>
 8005364:	881e      	ldrh	r6, [r3, #0]
 8005366:	4854      	ldr	r0, [pc, #336]	; (80054b8 <_printf_i+0x244>)
 8005368:	2f6f      	cmp	r7, #111	; 0x6f
 800536a:	bf0c      	ite	eq
 800536c:	2308      	moveq	r3, #8
 800536e:	230a      	movne	r3, #10
 8005370:	2100      	movs	r1, #0
 8005372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005376:	6865      	ldr	r5, [r4, #4]
 8005378:	60a5      	str	r5, [r4, #8]
 800537a:	2d00      	cmp	r5, #0
 800537c:	bfa2      	ittt	ge
 800537e:	6821      	ldrge	r1, [r4, #0]
 8005380:	f021 0104 	bicge.w	r1, r1, #4
 8005384:	6021      	strge	r1, [r4, #0]
 8005386:	b90e      	cbnz	r6, 800538c <_printf_i+0x118>
 8005388:	2d00      	cmp	r5, #0
 800538a:	d04d      	beq.n	8005428 <_printf_i+0x1b4>
 800538c:	4615      	mov	r5, r2
 800538e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005392:	fb03 6711 	mls	r7, r3, r1, r6
 8005396:	5dc7      	ldrb	r7, [r0, r7]
 8005398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800539c:	4637      	mov	r7, r6
 800539e:	42bb      	cmp	r3, r7
 80053a0:	460e      	mov	r6, r1
 80053a2:	d9f4      	bls.n	800538e <_printf_i+0x11a>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10b      	bne.n	80053c0 <_printf_i+0x14c>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	07de      	lsls	r6, r3, #31
 80053ac:	d508      	bpl.n	80053c0 <_printf_i+0x14c>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	6861      	ldr	r1, [r4, #4]
 80053b2:	4299      	cmp	r1, r3
 80053b4:	bfde      	ittt	le
 80053b6:	2330      	movle	r3, #48	; 0x30
 80053b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053c0:	1b52      	subs	r2, r2, r5
 80053c2:	6122      	str	r2, [r4, #16]
 80053c4:	f8cd a000 	str.w	sl, [sp]
 80053c8:	464b      	mov	r3, r9
 80053ca:	aa03      	add	r2, sp, #12
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7ff fee2 	bl	8005198 <_printf_common>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d14c      	bne.n	8005472 <_printf_i+0x1fe>
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053dc:	b004      	add	sp, #16
 80053de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e2:	4835      	ldr	r0, [pc, #212]	; (80054b8 <_printf_i+0x244>)
 80053e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053e8:	6829      	ldr	r1, [r5, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80053f0:	6029      	str	r1, [r5, #0]
 80053f2:	061d      	lsls	r5, r3, #24
 80053f4:	d514      	bpl.n	8005420 <_printf_i+0x1ac>
 80053f6:	07df      	lsls	r7, r3, #31
 80053f8:	bf44      	itt	mi
 80053fa:	f043 0320 	orrmi.w	r3, r3, #32
 80053fe:	6023      	strmi	r3, [r4, #0]
 8005400:	b91e      	cbnz	r6, 800540a <_printf_i+0x196>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f023 0320 	bic.w	r3, r3, #32
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2310      	movs	r3, #16
 800540c:	e7b0      	b.n	8005370 <_printf_i+0xfc>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	2378      	movs	r3, #120	; 0x78
 8005418:	4828      	ldr	r0, [pc, #160]	; (80054bc <_printf_i+0x248>)
 800541a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800541e:	e7e3      	b.n	80053e8 <_printf_i+0x174>
 8005420:	0659      	lsls	r1, r3, #25
 8005422:	bf48      	it	mi
 8005424:	b2b6      	uxthmi	r6, r6
 8005426:	e7e6      	b.n	80053f6 <_printf_i+0x182>
 8005428:	4615      	mov	r5, r2
 800542a:	e7bb      	b.n	80053a4 <_printf_i+0x130>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	6826      	ldr	r6, [r4, #0]
 8005430:	6961      	ldr	r1, [r4, #20]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6028      	str	r0, [r5, #0]
 8005436:	0635      	lsls	r5, r6, #24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	d501      	bpl.n	8005440 <_printf_i+0x1cc>
 800543c:	6019      	str	r1, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0x1d2>
 8005440:	0670      	lsls	r0, r6, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0x1c8>
 8005444:	8019      	strh	r1, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	4615      	mov	r5, r2
 800544c:	e7ba      	b.n	80053c4 <_printf_i+0x150>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	602a      	str	r2, [r5, #0]
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	6862      	ldr	r2, [r4, #4]
 8005458:	2100      	movs	r1, #0
 800545a:	4628      	mov	r0, r5
 800545c:	f7fa fec8 	bl	80001f0 <memchr>
 8005460:	b108      	cbz	r0, 8005466 <_printf_i+0x1f2>
 8005462:	1b40      	subs	r0, r0, r5
 8005464:	6060      	str	r0, [r4, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	2300      	movs	r3, #0
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	e7a8      	b.n	80053c4 <_printf_i+0x150>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	462a      	mov	r2, r5
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d0ab      	beq.n	80053d8 <_printf_i+0x164>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	079b      	lsls	r3, r3, #30
 8005484:	d413      	bmi.n	80054ae <_printf_i+0x23a>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e7a4      	b.n	80053dc <_printf_i+0x168>
 8005492:	2301      	movs	r3, #1
 8005494:	4632      	mov	r2, r6
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d09b      	beq.n	80053d8 <_printf_i+0x164>
 80054a0:	3501      	adds	r5, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	9903      	ldr	r1, [sp, #12]
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dcf2      	bgt.n	8005492 <_printf_i+0x21e>
 80054ac:	e7eb      	b.n	8005486 <_printf_i+0x212>
 80054ae:	2500      	movs	r5, #0
 80054b0:	f104 0619 	add.w	r6, r4, #25
 80054b4:	e7f5      	b.n	80054a2 <_printf_i+0x22e>
 80054b6:	bf00      	nop
 80054b8:	08007e9e 	.word	0x08007e9e
 80054bc:	08007eaf 	.word	0x08007eaf

080054c0 <_vsiprintf_r>:
 80054c0:	b500      	push	{lr}
 80054c2:	b09b      	sub	sp, #108	; 0x6c
 80054c4:	9100      	str	r1, [sp, #0]
 80054c6:	9104      	str	r1, [sp, #16]
 80054c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054cc:	9105      	str	r1, [sp, #20]
 80054ce:	9102      	str	r1, [sp, #8]
 80054d0:	4905      	ldr	r1, [pc, #20]	; (80054e8 <_vsiprintf_r+0x28>)
 80054d2:	9103      	str	r1, [sp, #12]
 80054d4:	4669      	mov	r1, sp
 80054d6:	f001 fb6f 	bl	8006bb8 <_svfiprintf_r>
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	b01b      	add	sp, #108	; 0x6c
 80054e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80054e6:	bf00      	nop
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <vsiprintf>:
 80054ec:	4613      	mov	r3, r2
 80054ee:	460a      	mov	r2, r1
 80054f0:	4601      	mov	r1, r0
 80054f2:	4802      	ldr	r0, [pc, #8]	; (80054fc <vsiprintf+0x10>)
 80054f4:	6800      	ldr	r0, [r0, #0]
 80054f6:	f7ff bfe3 	b.w	80054c0 <_vsiprintf_r>
 80054fa:	bf00      	nop
 80054fc:	20000050 	.word	0x20000050

08005500 <quorem>:
 8005500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	6903      	ldr	r3, [r0, #16]
 8005506:	690c      	ldr	r4, [r1, #16]
 8005508:	42a3      	cmp	r3, r4
 800550a:	4607      	mov	r7, r0
 800550c:	f2c0 8081 	blt.w	8005612 <quorem+0x112>
 8005510:	3c01      	subs	r4, #1
 8005512:	f101 0814 	add.w	r8, r1, #20
 8005516:	f100 0514 	add.w	r5, r0, #20
 800551a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005528:	3301      	adds	r3, #1
 800552a:	429a      	cmp	r2, r3
 800552c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005534:	fbb2 f6f3 	udiv	r6, r2, r3
 8005538:	d331      	bcc.n	800559e <quorem+0x9e>
 800553a:	f04f 0e00 	mov.w	lr, #0
 800553e:	4640      	mov	r0, r8
 8005540:	46ac      	mov	ip, r5
 8005542:	46f2      	mov	sl, lr
 8005544:	f850 2b04 	ldr.w	r2, [r0], #4
 8005548:	b293      	uxth	r3, r2
 800554a:	fb06 e303 	mla	r3, r6, r3, lr
 800554e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	ebaa 0303 	sub.w	r3, sl, r3
 8005558:	f8dc a000 	ldr.w	sl, [ip]
 800555c:	0c12      	lsrs	r2, r2, #16
 800555e:	fa13 f38a 	uxtah	r3, r3, sl
 8005562:	fb06 e202 	mla	r2, r6, r2, lr
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	9b00      	ldr	r3, [sp, #0]
 800556a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800556e:	b292      	uxth	r2, r2
 8005570:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005578:	f8bd 3000 	ldrh.w	r3, [sp]
 800557c:	4581      	cmp	r9, r0
 800557e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005582:	f84c 3b04 	str.w	r3, [ip], #4
 8005586:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800558a:	d2db      	bcs.n	8005544 <quorem+0x44>
 800558c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005590:	b92b      	cbnz	r3, 800559e <quorem+0x9e>
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	3b04      	subs	r3, #4
 8005596:	429d      	cmp	r5, r3
 8005598:	461a      	mov	r2, r3
 800559a:	d32e      	bcc.n	80055fa <quorem+0xfa>
 800559c:	613c      	str	r4, [r7, #16]
 800559e:	4638      	mov	r0, r7
 80055a0:	f001 f8b6 	bl	8006710 <__mcmp>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	db24      	blt.n	80055f2 <quorem+0xf2>
 80055a8:	3601      	adds	r6, #1
 80055aa:	4628      	mov	r0, r5
 80055ac:	f04f 0c00 	mov.w	ip, #0
 80055b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055b4:	f8d0 e000 	ldr.w	lr, [r0]
 80055b8:	b293      	uxth	r3, r2
 80055ba:	ebac 0303 	sub.w	r3, ip, r3
 80055be:	0c12      	lsrs	r2, r2, #16
 80055c0:	fa13 f38e 	uxtah	r3, r3, lr
 80055c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055d2:	45c1      	cmp	r9, r8
 80055d4:	f840 3b04 	str.w	r3, [r0], #4
 80055d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055dc:	d2e8      	bcs.n	80055b0 <quorem+0xb0>
 80055de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055e6:	b922      	cbnz	r2, 80055f2 <quorem+0xf2>
 80055e8:	3b04      	subs	r3, #4
 80055ea:	429d      	cmp	r5, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	d30a      	bcc.n	8005606 <quorem+0x106>
 80055f0:	613c      	str	r4, [r7, #16]
 80055f2:	4630      	mov	r0, r6
 80055f4:	b003      	add	sp, #12
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d1cc      	bne.n	800559c <quorem+0x9c>
 8005602:	3c01      	subs	r4, #1
 8005604:	e7c7      	b.n	8005596 <quorem+0x96>
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	3b04      	subs	r3, #4
 800560a:	2a00      	cmp	r2, #0
 800560c:	d1f0      	bne.n	80055f0 <quorem+0xf0>
 800560e:	3c01      	subs	r4, #1
 8005610:	e7eb      	b.n	80055ea <quorem+0xea>
 8005612:	2000      	movs	r0, #0
 8005614:	e7ee      	b.n	80055f4 <quorem+0xf4>
	...

08005618 <_dtoa_r>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	ed2d 8b04 	vpush	{d8-d9}
 8005620:	ec57 6b10 	vmov	r6, r7, d0
 8005624:	b093      	sub	sp, #76	; 0x4c
 8005626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005628:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800562c:	9106      	str	r1, [sp, #24]
 800562e:	ee10 aa10 	vmov	sl, s0
 8005632:	4604      	mov	r4, r0
 8005634:	9209      	str	r2, [sp, #36]	; 0x24
 8005636:	930c      	str	r3, [sp, #48]	; 0x30
 8005638:	46bb      	mov	fp, r7
 800563a:	b975      	cbnz	r5, 800565a <_dtoa_r+0x42>
 800563c:	2010      	movs	r0, #16
 800563e:	f000 fddd 	bl	80061fc <malloc>
 8005642:	4602      	mov	r2, r0
 8005644:	6260      	str	r0, [r4, #36]	; 0x24
 8005646:	b920      	cbnz	r0, 8005652 <_dtoa_r+0x3a>
 8005648:	4ba7      	ldr	r3, [pc, #668]	; (80058e8 <_dtoa_r+0x2d0>)
 800564a:	21ea      	movs	r1, #234	; 0xea
 800564c:	48a7      	ldr	r0, [pc, #668]	; (80058ec <_dtoa_r+0x2d4>)
 800564e:	f001 fbc3 	bl	8006dd8 <__assert_func>
 8005652:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005656:	6005      	str	r5, [r0, #0]
 8005658:	60c5      	str	r5, [r0, #12]
 800565a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800565c:	6819      	ldr	r1, [r3, #0]
 800565e:	b151      	cbz	r1, 8005676 <_dtoa_r+0x5e>
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	604a      	str	r2, [r1, #4]
 8005664:	2301      	movs	r3, #1
 8005666:	4093      	lsls	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fe0e 	bl	800628c <_Bfree>
 8005670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	1e3b      	subs	r3, r7, #0
 8005678:	bfaa      	itet	ge
 800567a:	2300      	movge	r3, #0
 800567c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005680:	f8c8 3000 	strge.w	r3, [r8]
 8005684:	4b9a      	ldr	r3, [pc, #616]	; (80058f0 <_dtoa_r+0x2d8>)
 8005686:	bfbc      	itt	lt
 8005688:	2201      	movlt	r2, #1
 800568a:	f8c8 2000 	strlt.w	r2, [r8]
 800568e:	ea33 030b 	bics.w	r3, r3, fp
 8005692:	d11b      	bne.n	80056cc <_dtoa_r+0xb4>
 8005694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005696:	f242 730f 	movw	r3, #9999	; 0x270f
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056a0:	4333      	orrs	r3, r6
 80056a2:	f000 8592 	beq.w	80061ca <_dtoa_r+0xbb2>
 80056a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056a8:	b963      	cbnz	r3, 80056c4 <_dtoa_r+0xac>
 80056aa:	4b92      	ldr	r3, [pc, #584]	; (80058f4 <_dtoa_r+0x2dc>)
 80056ac:	e022      	b.n	80056f4 <_dtoa_r+0xdc>
 80056ae:	4b92      	ldr	r3, [pc, #584]	; (80058f8 <_dtoa_r+0x2e0>)
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	3308      	adds	r3, #8
 80056b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	9801      	ldr	r0, [sp, #4]
 80056ba:	b013      	add	sp, #76	; 0x4c
 80056bc:	ecbd 8b04 	vpop	{d8-d9}
 80056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	4b8b      	ldr	r3, [pc, #556]	; (80058f4 <_dtoa_r+0x2dc>)
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	3303      	adds	r3, #3
 80056ca:	e7f3      	b.n	80056b4 <_dtoa_r+0x9c>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fb fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d8:	ec4b ab19 	vmov	d9, sl, fp
 80056dc:	4680      	mov	r8, r0
 80056de:	b158      	cbz	r0, 80056f8 <_dtoa_r+0xe0>
 80056e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e2:	2301      	movs	r3, #1
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 856b 	beq.w	80061c4 <_dtoa_r+0xbac>
 80056ee:	4883      	ldr	r0, [pc, #524]	; (80058fc <_dtoa_r+0x2e4>)
 80056f0:	6018      	str	r0, [r3, #0]
 80056f2:	1e43      	subs	r3, r0, #1
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	e7df      	b.n	80056b8 <_dtoa_r+0xa0>
 80056f8:	ec4b ab10 	vmov	d0, sl, fp
 80056fc:	aa10      	add	r2, sp, #64	; 0x40
 80056fe:	a911      	add	r1, sp, #68	; 0x44
 8005700:	4620      	mov	r0, r4
 8005702:	f001 f8ab 	bl	800685c <__d2b>
 8005706:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800570a:	ee08 0a10 	vmov	s16, r0
 800570e:	2d00      	cmp	r5, #0
 8005710:	f000 8084 	beq.w	800581c <_dtoa_r+0x204>
 8005714:	ee19 3a90 	vmov	r3, s19
 8005718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005720:	4656      	mov	r6, sl
 8005722:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800572a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800572e:	4b74      	ldr	r3, [pc, #464]	; (8005900 <_dtoa_r+0x2e8>)
 8005730:	2200      	movs	r2, #0
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fa fdaf 	bl	8000298 <__aeabi_dsub>
 800573a:	a365      	add	r3, pc, #404	; (adr r3, 80058d0 <_dtoa_r+0x2b8>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa ff62 	bl	8000608 <__aeabi_dmul>
 8005744:	a364      	add	r3, pc, #400	; (adr r3, 80058d8 <_dtoa_r+0x2c0>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fda7 	bl	800029c <__adddf3>
 800574e:	4606      	mov	r6, r0
 8005750:	4628      	mov	r0, r5
 8005752:	460f      	mov	r7, r1
 8005754:	f7fa feee 	bl	8000534 <__aeabi_i2d>
 8005758:	a361      	add	r3, pc, #388	; (adr r3, 80058e0 <_dtoa_r+0x2c8>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa ff53 	bl	8000608 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fa fd97 	bl	800029c <__adddf3>
 800576e:	4606      	mov	r6, r0
 8005770:	460f      	mov	r7, r1
 8005772:	f7fb f9f9 	bl	8000b68 <__aeabi_d2iz>
 8005776:	2200      	movs	r2, #0
 8005778:	9000      	str	r0, [sp, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	4630      	mov	r0, r6
 800577e:	4639      	mov	r1, r7
 8005780:	f7fb f9b4 	bl	8000aec <__aeabi_dcmplt>
 8005784:	b150      	cbz	r0, 800579c <_dtoa_r+0x184>
 8005786:	9800      	ldr	r0, [sp, #0]
 8005788:	f7fa fed4 	bl	8000534 <__aeabi_i2d>
 800578c:	4632      	mov	r2, r6
 800578e:	463b      	mov	r3, r7
 8005790:	f7fb f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005794:	b910      	cbnz	r0, 800579c <_dtoa_r+0x184>
 8005796:	9b00      	ldr	r3, [sp, #0]
 8005798:	3b01      	subs	r3, #1
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	9b00      	ldr	r3, [sp, #0]
 800579e:	2b16      	cmp	r3, #22
 80057a0:	d85a      	bhi.n	8005858 <_dtoa_r+0x240>
 80057a2:	9a00      	ldr	r2, [sp, #0]
 80057a4:	4b57      	ldr	r3, [pc, #348]	; (8005904 <_dtoa_r+0x2ec>)
 80057a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	ec51 0b19 	vmov	r0, r1, d9
 80057b2:	f7fb f99b 	bl	8000aec <__aeabi_dcmplt>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d050      	beq.n	800585c <_dtoa_r+0x244>
 80057ba:	9b00      	ldr	r3, [sp, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057c6:	1b5d      	subs	r5, r3, r5
 80057c8:	1e6b      	subs	r3, r5, #1
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	bf45      	ittet	mi
 80057ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80057d2:	9304      	strmi	r3, [sp, #16]
 80057d4:	2300      	movpl	r3, #0
 80057d6:	2300      	movmi	r3, #0
 80057d8:	bf4c      	ite	mi
 80057da:	9305      	strmi	r3, [sp, #20]
 80057dc:	9304      	strpl	r3, [sp, #16]
 80057de:	9b00      	ldr	r3, [sp, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	db3d      	blt.n	8005860 <_dtoa_r+0x248>
 80057e4:	9b05      	ldr	r3, [sp, #20]
 80057e6:	9a00      	ldr	r2, [sp, #0]
 80057e8:	920a      	str	r2, [sp, #40]	; 0x28
 80057ea:	4413      	add	r3, r2
 80057ec:	9305      	str	r3, [sp, #20]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9307      	str	r3, [sp, #28]
 80057f2:	9b06      	ldr	r3, [sp, #24]
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	f200 8089 	bhi.w	800590c <_dtoa_r+0x2f4>
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	bfc4      	itt	gt
 80057fe:	3b04      	subgt	r3, #4
 8005800:	9306      	strgt	r3, [sp, #24]
 8005802:	9b06      	ldr	r3, [sp, #24]
 8005804:	f1a3 0302 	sub.w	r3, r3, #2
 8005808:	bfcc      	ite	gt
 800580a:	2500      	movgt	r5, #0
 800580c:	2501      	movle	r5, #1
 800580e:	2b03      	cmp	r3, #3
 8005810:	f200 8087 	bhi.w	8005922 <_dtoa_r+0x30a>
 8005814:	e8df f003 	tbb	[pc, r3]
 8005818:	59383a2d 	.word	0x59383a2d
 800581c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005820:	441d      	add	r5, r3
 8005822:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005826:	2b20      	cmp	r3, #32
 8005828:	bfc1      	itttt	gt
 800582a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800582e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005832:	fa0b f303 	lslgt.w	r3, fp, r3
 8005836:	fa26 f000 	lsrgt.w	r0, r6, r0
 800583a:	bfda      	itte	le
 800583c:	f1c3 0320 	rsble	r3, r3, #32
 8005840:	fa06 f003 	lslle.w	r0, r6, r3
 8005844:	4318      	orrgt	r0, r3
 8005846:	f7fa fe65 	bl	8000514 <__aeabi_ui2d>
 800584a:	2301      	movs	r3, #1
 800584c:	4606      	mov	r6, r0
 800584e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005852:	3d01      	subs	r5, #1
 8005854:	930e      	str	r3, [sp, #56]	; 0x38
 8005856:	e76a      	b.n	800572e <_dtoa_r+0x116>
 8005858:	2301      	movs	r3, #1
 800585a:	e7b2      	b.n	80057c2 <_dtoa_r+0x1aa>
 800585c:	900b      	str	r0, [sp, #44]	; 0x2c
 800585e:	e7b1      	b.n	80057c4 <_dtoa_r+0x1ac>
 8005860:	9b04      	ldr	r3, [sp, #16]
 8005862:	9a00      	ldr	r2, [sp, #0]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	4253      	negs	r3, r2
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	2300      	movs	r3, #0
 800586e:	930a      	str	r3, [sp, #40]	; 0x28
 8005870:	e7bf      	b.n	80057f2 <_dtoa_r+0x1da>
 8005872:	2300      	movs	r3, #0
 8005874:	9308      	str	r3, [sp, #32]
 8005876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	dc55      	bgt.n	8005928 <_dtoa_r+0x310>
 800587c:	2301      	movs	r3, #1
 800587e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005882:	461a      	mov	r2, r3
 8005884:	9209      	str	r2, [sp, #36]	; 0x24
 8005886:	e00c      	b.n	80058a2 <_dtoa_r+0x28a>
 8005888:	2301      	movs	r3, #1
 800588a:	e7f3      	b.n	8005874 <_dtoa_r+0x25c>
 800588c:	2300      	movs	r3, #0
 800588e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	9b00      	ldr	r3, [sp, #0]
 8005894:	4413      	add	r3, r2
 8005896:	9302      	str	r3, [sp, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	9303      	str	r3, [sp, #12]
 800589e:	bfb8      	it	lt
 80058a0:	2301      	movlt	r3, #1
 80058a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058a4:	2200      	movs	r2, #0
 80058a6:	6042      	str	r2, [r0, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	f102 0614 	add.w	r6, r2, #20
 80058ae:	429e      	cmp	r6, r3
 80058b0:	6841      	ldr	r1, [r0, #4]
 80058b2:	d93d      	bls.n	8005930 <_dtoa_r+0x318>
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 fca9 	bl	800620c <_Balloc>
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2800      	cmp	r0, #0
 80058be:	d13b      	bne.n	8005938 <_dtoa_r+0x320>
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <_dtoa_r+0x2f0>)
 80058c2:	4602      	mov	r2, r0
 80058c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058c8:	e6c0      	b.n	800564c <_dtoa_r+0x34>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e7df      	b.n	800588e <_dtoa_r+0x276>
 80058ce:	bf00      	nop
 80058d0:	636f4361 	.word	0x636f4361
 80058d4:	3fd287a7 	.word	0x3fd287a7
 80058d8:	8b60c8b3 	.word	0x8b60c8b3
 80058dc:	3fc68a28 	.word	0x3fc68a28
 80058e0:	509f79fb 	.word	0x509f79fb
 80058e4:	3fd34413 	.word	0x3fd34413
 80058e8:	08007ecd 	.word	0x08007ecd
 80058ec:	08007ee4 	.word	0x08007ee4
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	08007ec9 	.word	0x08007ec9
 80058f8:	08007ec0 	.word	0x08007ec0
 80058fc:	08007e9d 	.word	0x08007e9d
 8005900:	3ff80000 	.word	0x3ff80000
 8005904:	08007fd8 	.word	0x08007fd8
 8005908:	08007f3f 	.word	0x08007f3f
 800590c:	2501      	movs	r5, #1
 800590e:	2300      	movs	r3, #0
 8005910:	9306      	str	r3, [sp, #24]
 8005912:	9508      	str	r5, [sp, #32]
 8005914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005918:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	2312      	movs	r3, #18
 8005920:	e7b0      	b.n	8005884 <_dtoa_r+0x26c>
 8005922:	2301      	movs	r3, #1
 8005924:	9308      	str	r3, [sp, #32]
 8005926:	e7f5      	b.n	8005914 <_dtoa_r+0x2fc>
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800592e:	e7b8      	b.n	80058a2 <_dtoa_r+0x28a>
 8005930:	3101      	adds	r1, #1
 8005932:	6041      	str	r1, [r0, #4]
 8005934:	0052      	lsls	r2, r2, #1
 8005936:	e7b8      	b.n	80058aa <_dtoa_r+0x292>
 8005938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800593a:	9a01      	ldr	r2, [sp, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	2b0e      	cmp	r3, #14
 8005942:	f200 809d 	bhi.w	8005a80 <_dtoa_r+0x468>
 8005946:	2d00      	cmp	r5, #0
 8005948:	f000 809a 	beq.w	8005a80 <_dtoa_r+0x468>
 800594c:	9b00      	ldr	r3, [sp, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	dd32      	ble.n	80059b8 <_dtoa_r+0x3a0>
 8005952:	4ab7      	ldr	r2, [pc, #732]	; (8005c30 <_dtoa_r+0x618>)
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800595c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005960:	9b00      	ldr	r3, [sp, #0]
 8005962:	05d8      	lsls	r0, r3, #23
 8005964:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005968:	d516      	bpl.n	8005998 <_dtoa_r+0x380>
 800596a:	4bb2      	ldr	r3, [pc, #712]	; (8005c34 <_dtoa_r+0x61c>)
 800596c:	ec51 0b19 	vmov	r0, r1, d9
 8005970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005974:	f7fa ff72 	bl	800085c <__aeabi_ddiv>
 8005978:	f007 070f 	and.w	r7, r7, #15
 800597c:	4682      	mov	sl, r0
 800597e:	468b      	mov	fp, r1
 8005980:	2503      	movs	r5, #3
 8005982:	4eac      	ldr	r6, [pc, #688]	; (8005c34 <_dtoa_r+0x61c>)
 8005984:	b957      	cbnz	r7, 800599c <_dtoa_r+0x384>
 8005986:	4642      	mov	r2, r8
 8005988:	464b      	mov	r3, r9
 800598a:	4650      	mov	r0, sl
 800598c:	4659      	mov	r1, fp
 800598e:	f7fa ff65 	bl	800085c <__aeabi_ddiv>
 8005992:	4682      	mov	sl, r0
 8005994:	468b      	mov	fp, r1
 8005996:	e028      	b.n	80059ea <_dtoa_r+0x3d2>
 8005998:	2502      	movs	r5, #2
 800599a:	e7f2      	b.n	8005982 <_dtoa_r+0x36a>
 800599c:	07f9      	lsls	r1, r7, #31
 800599e:	d508      	bpl.n	80059b2 <_dtoa_r+0x39a>
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059a8:	f7fa fe2e 	bl	8000608 <__aeabi_dmul>
 80059ac:	3501      	adds	r5, #1
 80059ae:	4680      	mov	r8, r0
 80059b0:	4689      	mov	r9, r1
 80059b2:	107f      	asrs	r7, r7, #1
 80059b4:	3608      	adds	r6, #8
 80059b6:	e7e5      	b.n	8005984 <_dtoa_r+0x36c>
 80059b8:	f000 809b 	beq.w	8005af2 <_dtoa_r+0x4da>
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	4f9d      	ldr	r7, [pc, #628]	; (8005c34 <_dtoa_r+0x61c>)
 80059c0:	425e      	negs	r6, r3
 80059c2:	4b9b      	ldr	r3, [pc, #620]	; (8005c30 <_dtoa_r+0x618>)
 80059c4:	f006 020f 	and.w	r2, r6, #15
 80059c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	ec51 0b19 	vmov	r0, r1, d9
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	1136      	asrs	r6, r6, #4
 80059da:	4682      	mov	sl, r0
 80059dc:	468b      	mov	fp, r1
 80059de:	2300      	movs	r3, #0
 80059e0:	2502      	movs	r5, #2
 80059e2:	2e00      	cmp	r6, #0
 80059e4:	d17a      	bne.n	8005adc <_dtoa_r+0x4c4>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1d3      	bne.n	8005992 <_dtoa_r+0x37a>
 80059ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8082 	beq.w	8005af6 <_dtoa_r+0x4de>
 80059f2:	4b91      	ldr	r3, [pc, #580]	; (8005c38 <_dtoa_r+0x620>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	4650      	mov	r0, sl
 80059f8:	4659      	mov	r1, fp
 80059fa:	f7fb f877 	bl	8000aec <__aeabi_dcmplt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d079      	beq.n	8005af6 <_dtoa_r+0x4de>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d076      	beq.n	8005af6 <_dtoa_r+0x4de>
 8005a08:	9b02      	ldr	r3, [sp, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dd36      	ble.n	8005a7c <_dtoa_r+0x464>
 8005a0e:	9b00      	ldr	r3, [sp, #0]
 8005a10:	4650      	mov	r0, sl
 8005a12:	4659      	mov	r1, fp
 8005a14:	1e5f      	subs	r7, r3, #1
 8005a16:	2200      	movs	r2, #0
 8005a18:	4b88      	ldr	r3, [pc, #544]	; (8005c3c <_dtoa_r+0x624>)
 8005a1a:	f7fa fdf5 	bl	8000608 <__aeabi_dmul>
 8005a1e:	9e02      	ldr	r6, [sp, #8]
 8005a20:	4682      	mov	sl, r0
 8005a22:	468b      	mov	fp, r1
 8005a24:	3501      	adds	r5, #1
 8005a26:	4628      	mov	r0, r5
 8005a28:	f7fa fd84 	bl	8000534 <__aeabi_i2d>
 8005a2c:	4652      	mov	r2, sl
 8005a2e:	465b      	mov	r3, fp
 8005a30:	f7fa fdea 	bl	8000608 <__aeabi_dmul>
 8005a34:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <_dtoa_r+0x628>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	f7fa fc30 	bl	800029c <__adddf3>
 8005a3c:	46d0      	mov	r8, sl
 8005a3e:	46d9      	mov	r9, fp
 8005a40:	4682      	mov	sl, r0
 8005a42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d158      	bne.n	8005afc <_dtoa_r+0x4e4>
 8005a4a:	4b7e      	ldr	r3, [pc, #504]	; (8005c44 <_dtoa_r+0x62c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f7fa fc21 	bl	8000298 <__aeabi_dsub>
 8005a56:	4652      	mov	r2, sl
 8005a58:	465b      	mov	r3, fp
 8005a5a:	4680      	mov	r8, r0
 8005a5c:	4689      	mov	r9, r1
 8005a5e:	f7fb f863 	bl	8000b28 <__aeabi_dcmpgt>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 8295 	bne.w	8005f92 <_dtoa_r+0x97a>
 8005a68:	4652      	mov	r2, sl
 8005a6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a6e:	4640      	mov	r0, r8
 8005a70:	4649      	mov	r1, r9
 8005a72:	f7fb f83b 	bl	8000aec <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f040 8289 	bne.w	8005f8e <_dtoa_r+0x976>
 8005a7c:	ec5b ab19 	vmov	sl, fp, d9
 8005a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f2c0 8148 	blt.w	8005d18 <_dtoa_r+0x700>
 8005a88:	9a00      	ldr	r2, [sp, #0]
 8005a8a:	2a0e      	cmp	r2, #14
 8005a8c:	f300 8144 	bgt.w	8005d18 <_dtoa_r+0x700>
 8005a90:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <_dtoa_r+0x618>)
 8005a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f280 80d5 	bge.w	8005c4c <_dtoa_r+0x634>
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f300 80d1 	bgt.w	8005c4c <_dtoa_r+0x634>
 8005aaa:	f040 826f 	bne.w	8005f8c <_dtoa_r+0x974>
 8005aae:	4b65      	ldr	r3, [pc, #404]	; (8005c44 <_dtoa_r+0x62c>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f7fa fda7 	bl	8000608 <__aeabi_dmul>
 8005aba:	4652      	mov	r2, sl
 8005abc:	465b      	mov	r3, fp
 8005abe:	f7fb f829 	bl	8000b14 <__aeabi_dcmpge>
 8005ac2:	9e03      	ldr	r6, [sp, #12]
 8005ac4:	4637      	mov	r7, r6
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f040 8245 	bne.w	8005f56 <_dtoa_r+0x93e>
 8005acc:	9d01      	ldr	r5, [sp, #4]
 8005ace:	2331      	movs	r3, #49	; 0x31
 8005ad0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	e240      	b.n	8005f5e <_dtoa_r+0x946>
 8005adc:	07f2      	lsls	r2, r6, #31
 8005ade:	d505      	bpl.n	8005aec <_dtoa_r+0x4d4>
 8005ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae4:	f7fa fd90 	bl	8000608 <__aeabi_dmul>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	2301      	movs	r3, #1
 8005aec:	1076      	asrs	r6, r6, #1
 8005aee:	3708      	adds	r7, #8
 8005af0:	e777      	b.n	80059e2 <_dtoa_r+0x3ca>
 8005af2:	2502      	movs	r5, #2
 8005af4:	e779      	b.n	80059ea <_dtoa_r+0x3d2>
 8005af6:	9f00      	ldr	r7, [sp, #0]
 8005af8:	9e03      	ldr	r6, [sp, #12]
 8005afa:	e794      	b.n	8005a26 <_dtoa_r+0x40e>
 8005afc:	9901      	ldr	r1, [sp, #4]
 8005afe:	4b4c      	ldr	r3, [pc, #304]	; (8005c30 <_dtoa_r+0x618>)
 8005b00:	4431      	add	r1, r6
 8005b02:	910d      	str	r1, [sp, #52]	; 0x34
 8005b04:	9908      	ldr	r1, [sp, #32]
 8005b06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	d043      	beq.n	8005b9a <_dtoa_r+0x582>
 8005b12:	494d      	ldr	r1, [pc, #308]	; (8005c48 <_dtoa_r+0x630>)
 8005b14:	2000      	movs	r0, #0
 8005b16:	f7fa fea1 	bl	800085c <__aeabi_ddiv>
 8005b1a:	4652      	mov	r2, sl
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	f7fa fbbb 	bl	8000298 <__aeabi_dsub>
 8005b22:	9d01      	ldr	r5, [sp, #4]
 8005b24:	4682      	mov	sl, r0
 8005b26:	468b      	mov	fp, r1
 8005b28:	4649      	mov	r1, r9
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7fb f81c 	bl	8000b68 <__aeabi_d2iz>
 8005b30:	4606      	mov	r6, r0
 8005b32:	f7fa fcff 	bl	8000534 <__aeabi_i2d>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fbab 	bl	8000298 <__aeabi_dsub>
 8005b42:	3630      	adds	r6, #48	; 0x30
 8005b44:	f805 6b01 	strb.w	r6, [r5], #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	465b      	mov	r3, fp
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4689      	mov	r9, r1
 8005b50:	f7fa ffcc 	bl	8000aec <__aeabi_dcmplt>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d163      	bne.n	8005c20 <_dtoa_r+0x608>
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	4936      	ldr	r1, [pc, #216]	; (8005c38 <_dtoa_r+0x620>)
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f7fa fb9a 	bl	8000298 <__aeabi_dsub>
 8005b64:	4652      	mov	r2, sl
 8005b66:	465b      	mov	r3, fp
 8005b68:	f7fa ffc0 	bl	8000aec <__aeabi_dcmplt>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	f040 80b5 	bne.w	8005cdc <_dtoa_r+0x6c4>
 8005b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b74:	429d      	cmp	r5, r3
 8005b76:	d081      	beq.n	8005a7c <_dtoa_r+0x464>
 8005b78:	4b30      	ldr	r3, [pc, #192]	; (8005c3c <_dtoa_r+0x624>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f7fa fd42 	bl	8000608 <__aeabi_dmul>
 8005b84:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <_dtoa_r+0x624>)
 8005b86:	4682      	mov	sl, r0
 8005b88:	468b      	mov	fp, r1
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f7fa fd3a 	bl	8000608 <__aeabi_dmul>
 8005b94:	4680      	mov	r8, r0
 8005b96:	4689      	mov	r9, r1
 8005b98:	e7c6      	b.n	8005b28 <_dtoa_r+0x510>
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	f7fa fd33 	bl	8000608 <__aeabi_dmul>
 8005ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba4:	9d01      	ldr	r5, [sp, #4]
 8005ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ba8:	4682      	mov	sl, r0
 8005baa:	468b      	mov	fp, r1
 8005bac:	4649      	mov	r1, r9
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f7fa ffda 	bl	8000b68 <__aeabi_d2iz>
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	f7fa fcbd 	bl	8000534 <__aeabi_i2d>
 8005bba:	3630      	adds	r6, #48	; 0x30
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	f7fa fb68 	bl	8000298 <__aeabi_dsub>
 8005bc8:	f805 6b01 	strb.w	r6, [r5], #1
 8005bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	4689      	mov	r9, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	d124      	bne.n	8005c24 <_dtoa_r+0x60c>
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <_dtoa_r+0x630>)
 8005bdc:	4650      	mov	r0, sl
 8005bde:	4659      	mov	r1, fp
 8005be0:	f7fa fb5c 	bl	800029c <__adddf3>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa ff9c 	bl	8000b28 <__aeabi_dcmpgt>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d173      	bne.n	8005cdc <_dtoa_r+0x6c4>
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	465b      	mov	r3, fp
 8005bf8:	4913      	ldr	r1, [pc, #76]	; (8005c48 <_dtoa_r+0x630>)
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f7fa fb4c 	bl	8000298 <__aeabi_dsub>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4640      	mov	r0, r8
 8005c06:	4649      	mov	r1, r9
 8005c08:	f7fa ff70 	bl	8000aec <__aeabi_dcmplt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f43f af35 	beq.w	8005a7c <_dtoa_r+0x464>
 8005c12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c14:	1e6b      	subs	r3, r5, #1
 8005c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d0f8      	beq.n	8005c12 <_dtoa_r+0x5fa>
 8005c20:	9700      	str	r7, [sp, #0]
 8005c22:	e049      	b.n	8005cb8 <_dtoa_r+0x6a0>
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <_dtoa_r+0x624>)
 8005c26:	f7fa fcef 	bl	8000608 <__aeabi_dmul>
 8005c2a:	4680      	mov	r8, r0
 8005c2c:	4689      	mov	r9, r1
 8005c2e:	e7bd      	b.n	8005bac <_dtoa_r+0x594>
 8005c30:	08007fd8 	.word	0x08007fd8
 8005c34:	08007fb0 	.word	0x08007fb0
 8005c38:	3ff00000 	.word	0x3ff00000
 8005c3c:	40240000 	.word	0x40240000
 8005c40:	401c0000 	.word	0x401c0000
 8005c44:	40140000 	.word	0x40140000
 8005c48:	3fe00000 	.word	0x3fe00000
 8005c4c:	9d01      	ldr	r5, [sp, #4]
 8005c4e:	4656      	mov	r6, sl
 8005c50:	465f      	mov	r7, fp
 8005c52:	4642      	mov	r2, r8
 8005c54:	464b      	mov	r3, r9
 8005c56:	4630      	mov	r0, r6
 8005c58:	4639      	mov	r1, r7
 8005c5a:	f7fa fdff 	bl	800085c <__aeabi_ddiv>
 8005c5e:	f7fa ff83 	bl	8000b68 <__aeabi_d2iz>
 8005c62:	4682      	mov	sl, r0
 8005c64:	f7fa fc66 	bl	8000534 <__aeabi_i2d>
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	f7fa fccc 	bl	8000608 <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4630      	mov	r0, r6
 8005c76:	4639      	mov	r1, r7
 8005c78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c7c:	f7fa fb0c 	bl	8000298 <__aeabi_dsub>
 8005c80:	f805 6b01 	strb.w	r6, [r5], #1
 8005c84:	9e01      	ldr	r6, [sp, #4]
 8005c86:	9f03      	ldr	r7, [sp, #12]
 8005c88:	1bae      	subs	r6, r5, r6
 8005c8a:	42b7      	cmp	r7, r6
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	d135      	bne.n	8005cfe <_dtoa_r+0x6e6>
 8005c92:	f7fa fb03 	bl	800029c <__adddf3>
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	f7fa ff43 	bl	8000b28 <__aeabi_dcmpgt>
 8005ca2:	b9d0      	cbnz	r0, 8005cda <_dtoa_r+0x6c2>
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa ff14 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cb0:	b110      	cbz	r0, 8005cb8 <_dtoa_r+0x6a0>
 8005cb2:	f01a 0f01 	tst.w	sl, #1
 8005cb6:	d110      	bne.n	8005cda <_dtoa_r+0x6c2>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	ee18 1a10 	vmov	r1, s16
 8005cbe:	f000 fae5 	bl	800628c <_Bfree>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9800      	ldr	r0, [sp, #0]
 8005cc6:	702b      	strb	r3, [r5, #0]
 8005cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cca:	3001      	adds	r0, #1
 8005ccc:	6018      	str	r0, [r3, #0]
 8005cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f43f acf1 	beq.w	80056b8 <_dtoa_r+0xa0>
 8005cd6:	601d      	str	r5, [r3, #0]
 8005cd8:	e4ee      	b.n	80056b8 <_dtoa_r+0xa0>
 8005cda:	9f00      	ldr	r7, [sp, #0]
 8005cdc:	462b      	mov	r3, r5
 8005cde:	461d      	mov	r5, r3
 8005ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ce4:	2a39      	cmp	r2, #57	; 0x39
 8005ce6:	d106      	bne.n	8005cf6 <_dtoa_r+0x6de>
 8005ce8:	9a01      	ldr	r2, [sp, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d1f7      	bne.n	8005cde <_dtoa_r+0x6c6>
 8005cee:	9901      	ldr	r1, [sp, #4]
 8005cf0:	2230      	movs	r2, #48	; 0x30
 8005cf2:	3701      	adds	r7, #1
 8005cf4:	700a      	strb	r2, [r1, #0]
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	3201      	adds	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e790      	b.n	8005c20 <_dtoa_r+0x608>
 8005cfe:	4ba6      	ldr	r3, [pc, #664]	; (8005f98 <_dtoa_r+0x980>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	f7fa fc81 	bl	8000608 <__aeabi_dmul>
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	f7fa fee3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d09d      	beq.n	8005c52 <_dtoa_r+0x63a>
 8005d16:	e7cf      	b.n	8005cb8 <_dtoa_r+0x6a0>
 8005d18:	9a08      	ldr	r2, [sp, #32]
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	f000 80d7 	beq.w	8005ece <_dtoa_r+0x8b6>
 8005d20:	9a06      	ldr	r2, [sp, #24]
 8005d22:	2a01      	cmp	r2, #1
 8005d24:	f300 80ba 	bgt.w	8005e9c <_dtoa_r+0x884>
 8005d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	f000 80b2 	beq.w	8005e94 <_dtoa_r+0x87c>
 8005d30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d34:	9e07      	ldr	r6, [sp, #28]
 8005d36:	9d04      	ldr	r5, [sp, #16]
 8005d38:	9a04      	ldr	r2, [sp, #16]
 8005d3a:	441a      	add	r2, r3
 8005d3c:	9204      	str	r2, [sp, #16]
 8005d3e:	9a05      	ldr	r2, [sp, #20]
 8005d40:	2101      	movs	r1, #1
 8005d42:	441a      	add	r2, r3
 8005d44:	4620      	mov	r0, r4
 8005d46:	9205      	str	r2, [sp, #20]
 8005d48:	f000 fb58 	bl	80063fc <__i2b>
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	dd0c      	ble.n	8005d6c <_dtoa_r+0x754>
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dd09      	ble.n	8005d6c <_dtoa_r+0x754>
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	9a04      	ldr	r2, [sp, #16]
 8005d5c:	bfa8      	it	ge
 8005d5e:	462b      	movge	r3, r5
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	9204      	str	r2, [sp, #16]
 8005d64:	9a05      	ldr	r2, [sp, #20]
 8005d66:	1aed      	subs	r5, r5, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	b31b      	cbz	r3, 8005db8 <_dtoa_r+0x7a0>
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80af 	beq.w	8005ed6 <_dtoa_r+0x8be>
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	dd13      	ble.n	8005da4 <_dtoa_r+0x78c>
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4632      	mov	r2, r6
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fbfb 	bl	800657c <__pow5mult>
 8005d86:	ee18 2a10 	vmov	r2, s16
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fb4a 	bl	8006428 <__multiply>
 8005d94:	ee18 1a10 	vmov	r1, s16
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fa76 	bl	800628c <_Bfree>
 8005da0:	ee08 8a10 	vmov	s16, r8
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	1b9a      	subs	r2, r3, r6
 8005da8:	d006      	beq.n	8005db8 <_dtoa_r+0x7a0>
 8005daa:	ee18 1a10 	vmov	r1, s16
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fbe4 	bl	800657c <__pow5mult>
 8005db4:	ee08 0a10 	vmov	s16, r0
 8005db8:	2101      	movs	r1, #1
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fb1e 	bl	80063fc <__i2b>
 8005dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	f340 8088 	ble.w	8005eda <_dtoa_r+0x8c2>
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4601      	mov	r1, r0
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 fbd4 	bl	800657c <__pow5mult>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	4606      	mov	r6, r0
 8005dda:	f340 8081 	ble.w	8005ee0 <_dtoa_r+0x8c8>
 8005dde:	f04f 0800 	mov.w	r8, #0
 8005de2:	6933      	ldr	r3, [r6, #16]
 8005de4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005de8:	6918      	ldr	r0, [r3, #16]
 8005dea:	f000 fab7 	bl	800635c <__hi0bits>
 8005dee:	f1c0 0020 	rsb	r0, r0, #32
 8005df2:	9b05      	ldr	r3, [sp, #20]
 8005df4:	4418      	add	r0, r3
 8005df6:	f010 001f 	ands.w	r0, r0, #31
 8005dfa:	f000 8092 	beq.w	8005f22 <_dtoa_r+0x90a>
 8005dfe:	f1c0 0320 	rsb	r3, r0, #32
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	f340 808a 	ble.w	8005f1c <_dtoa_r+0x904>
 8005e08:	f1c0 001c 	rsb	r0, r0, #28
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	4403      	add	r3, r0
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	9b05      	ldr	r3, [sp, #20]
 8005e14:	4403      	add	r3, r0
 8005e16:	4405      	add	r5, r0
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	9b04      	ldr	r3, [sp, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dd07      	ble.n	8005e30 <_dtoa_r+0x818>
 8005e20:	ee18 1a10 	vmov	r1, s16
 8005e24:	461a      	mov	r2, r3
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fc02 	bl	8006630 <__lshift>
 8005e2c:	ee08 0a10 	vmov	s16, r0
 8005e30:	9b05      	ldr	r3, [sp, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd05      	ble.n	8005e42 <_dtoa_r+0x82a>
 8005e36:	4631      	mov	r1, r6
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fbf8 	bl	8006630 <__lshift>
 8005e40:	4606      	mov	r6, r0
 8005e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d06e      	beq.n	8005f26 <_dtoa_r+0x90e>
 8005e48:	ee18 0a10 	vmov	r0, s16
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	f000 fc5f 	bl	8006710 <__mcmp>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	da67      	bge.n	8005f26 <_dtoa_r+0x90e>
 8005e56:	9b00      	ldr	r3, [sp, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	ee18 1a10 	vmov	r1, s16
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	220a      	movs	r2, #10
 8005e62:	2300      	movs	r3, #0
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fa33 	bl	80062d0 <__multadd>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	ee08 0a10 	vmov	s16, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 81b1 	beq.w	80061d8 <_dtoa_r+0xbc0>
 8005e76:	2300      	movs	r3, #0
 8005e78:	4639      	mov	r1, r7
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 fa27 	bl	80062d0 <__multadd>
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	4607      	mov	r7, r0
 8005e88:	f300 808e 	bgt.w	8005fa8 <_dtoa_r+0x990>
 8005e8c:	9b06      	ldr	r3, [sp, #24]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dc51      	bgt.n	8005f36 <_dtoa_r+0x91e>
 8005e92:	e089      	b.n	8005fa8 <_dtoa_r+0x990>
 8005e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e9a:	e74b      	b.n	8005d34 <_dtoa_r+0x71c>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1e5e      	subs	r6, r3, #1
 8005ea0:	9b07      	ldr	r3, [sp, #28]
 8005ea2:	42b3      	cmp	r3, r6
 8005ea4:	bfbf      	itttt	lt
 8005ea6:	9b07      	ldrlt	r3, [sp, #28]
 8005ea8:	9607      	strlt	r6, [sp, #28]
 8005eaa:	1af2      	sublt	r2, r6, r3
 8005eac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005eae:	bfb6      	itet	lt
 8005eb0:	189b      	addlt	r3, r3, r2
 8005eb2:	1b9e      	subge	r6, r3, r6
 8005eb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	bfb8      	it	lt
 8005eba:	2600      	movlt	r6, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfb7      	itett	lt
 8005ec0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ec4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ec8:	1a9d      	sublt	r5, r3, r2
 8005eca:	2300      	movlt	r3, #0
 8005ecc:	e734      	b.n	8005d38 <_dtoa_r+0x720>
 8005ece:	9e07      	ldr	r6, [sp, #28]
 8005ed0:	9d04      	ldr	r5, [sp, #16]
 8005ed2:	9f08      	ldr	r7, [sp, #32]
 8005ed4:	e73b      	b.n	8005d4e <_dtoa_r+0x736>
 8005ed6:	9a07      	ldr	r2, [sp, #28]
 8005ed8:	e767      	b.n	8005daa <_dtoa_r+0x792>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	dc18      	bgt.n	8005f12 <_dtoa_r+0x8fa>
 8005ee0:	f1ba 0f00 	cmp.w	sl, #0
 8005ee4:	d115      	bne.n	8005f12 <_dtoa_r+0x8fa>
 8005ee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005eea:	b993      	cbnz	r3, 8005f12 <_dtoa_r+0x8fa>
 8005eec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ef0:	0d1b      	lsrs	r3, r3, #20
 8005ef2:	051b      	lsls	r3, r3, #20
 8005ef4:	b183      	cbz	r3, 8005f18 <_dtoa_r+0x900>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	9304      	str	r3, [sp, #16]
 8005efc:	9b05      	ldr	r3, [sp, #20]
 8005efe:	3301      	adds	r3, #1
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	f04f 0801 	mov.w	r8, #1
 8005f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af6a 	bne.w	8005de2 <_dtoa_r+0x7ca>
 8005f0e:	2001      	movs	r0, #1
 8005f10:	e76f      	b.n	8005df2 <_dtoa_r+0x7da>
 8005f12:	f04f 0800 	mov.w	r8, #0
 8005f16:	e7f6      	b.n	8005f06 <_dtoa_r+0x8ee>
 8005f18:	4698      	mov	r8, r3
 8005f1a:	e7f4      	b.n	8005f06 <_dtoa_r+0x8ee>
 8005f1c:	f43f af7d 	beq.w	8005e1a <_dtoa_r+0x802>
 8005f20:	4618      	mov	r0, r3
 8005f22:	301c      	adds	r0, #28
 8005f24:	e772      	b.n	8005e0c <_dtoa_r+0x7f4>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc37      	bgt.n	8005f9c <_dtoa_r+0x984>
 8005f2c:	9b06      	ldr	r3, [sp, #24]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dd34      	ble.n	8005f9c <_dtoa_r+0x984>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	b96b      	cbnz	r3, 8005f56 <_dtoa_r+0x93e>
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	2205      	movs	r2, #5
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 f9c6 	bl	80062d0 <__multadd>
 8005f44:	4601      	mov	r1, r0
 8005f46:	4606      	mov	r6, r0
 8005f48:	ee18 0a10 	vmov	r0, s16
 8005f4c:	f000 fbe0 	bl	8006710 <__mcmp>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f73f adbb 	bgt.w	8005acc <_dtoa_r+0x4b4>
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	9d01      	ldr	r5, [sp, #4]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 0800 	mov.w	r8, #0
 8005f62:	4631      	mov	r1, r6
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f991 	bl	800628c <_Bfree>
 8005f6a:	2f00      	cmp	r7, #0
 8005f6c:	f43f aea4 	beq.w	8005cb8 <_dtoa_r+0x6a0>
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	d005      	beq.n	8005f82 <_dtoa_r+0x96a>
 8005f76:	45b8      	cmp	r8, r7
 8005f78:	d003      	beq.n	8005f82 <_dtoa_r+0x96a>
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 f985 	bl	800628c <_Bfree>
 8005f82:	4639      	mov	r1, r7
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 f981 	bl	800628c <_Bfree>
 8005f8a:	e695      	b.n	8005cb8 <_dtoa_r+0x6a0>
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	4637      	mov	r7, r6
 8005f90:	e7e1      	b.n	8005f56 <_dtoa_r+0x93e>
 8005f92:	9700      	str	r7, [sp, #0]
 8005f94:	4637      	mov	r7, r6
 8005f96:	e599      	b.n	8005acc <_dtoa_r+0x4b4>
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	9b08      	ldr	r3, [sp, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ca 	beq.w	8006138 <_dtoa_r+0xb20>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	9302      	str	r3, [sp, #8]
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	dd05      	ble.n	8005fb8 <_dtoa_r+0x9a0>
 8005fac:	4639      	mov	r1, r7
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fb3d 	bl	8006630 <__lshift>
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	f1b8 0f00 	cmp.w	r8, #0
 8005fbc:	d05b      	beq.n	8006076 <_dtoa_r+0xa5e>
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f923 	bl	800620c <_Balloc>
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	b928      	cbnz	r0, 8005fd6 <_dtoa_r+0x9be>
 8005fca:	4b87      	ldr	r3, [pc, #540]	; (80061e8 <_dtoa_r+0xbd0>)
 8005fcc:	4602      	mov	r2, r0
 8005fce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fd2:	f7ff bb3b 	b.w	800564c <_dtoa_r+0x34>
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	3202      	adds	r2, #2
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	f107 010c 	add.w	r1, r7, #12
 8005fe0:	300c      	adds	r0, #12
 8005fe2:	f7fe fded 	bl	8004bc0 <memcpy>
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fb20 	bl	8006630 <__lshift>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	f103 0901 	add.w	r9, r3, #1
 8005ff6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	f00a 0301 	and.w	r3, sl, #1
 8006002:	46b8      	mov	r8, r7
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	4607      	mov	r7, r0
 8006008:	4631      	mov	r1, r6
 800600a:	ee18 0a10 	vmov	r0, s16
 800600e:	f7ff fa77 	bl	8005500 <quorem>
 8006012:	4641      	mov	r1, r8
 8006014:	9002      	str	r0, [sp, #8]
 8006016:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800601a:	ee18 0a10 	vmov	r0, s16
 800601e:	f000 fb77 	bl	8006710 <__mcmp>
 8006022:	463a      	mov	r2, r7
 8006024:	9003      	str	r0, [sp, #12]
 8006026:	4631      	mov	r1, r6
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fb8d 	bl	8006748 <__mdiff>
 800602e:	68c2      	ldr	r2, [r0, #12]
 8006030:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006034:	4605      	mov	r5, r0
 8006036:	bb02      	cbnz	r2, 800607a <_dtoa_r+0xa62>
 8006038:	4601      	mov	r1, r0
 800603a:	ee18 0a10 	vmov	r0, s16
 800603e:	f000 fb67 	bl	8006710 <__mcmp>
 8006042:	4602      	mov	r2, r0
 8006044:	4629      	mov	r1, r5
 8006046:	4620      	mov	r0, r4
 8006048:	9207      	str	r2, [sp, #28]
 800604a:	f000 f91f 	bl	800628c <_Bfree>
 800604e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006052:	ea43 0102 	orr.w	r1, r3, r2
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	430b      	orrs	r3, r1
 800605a:	464d      	mov	r5, r9
 800605c:	d10f      	bne.n	800607e <_dtoa_r+0xa66>
 800605e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006062:	d02a      	beq.n	80060ba <_dtoa_r+0xaa2>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd02      	ble.n	8006070 <_dtoa_r+0xa58>
 800606a:	9b02      	ldr	r3, [sp, #8]
 800606c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006070:	f88b a000 	strb.w	sl, [fp]
 8006074:	e775      	b.n	8005f62 <_dtoa_r+0x94a>
 8006076:	4638      	mov	r0, r7
 8006078:	e7ba      	b.n	8005ff0 <_dtoa_r+0x9d8>
 800607a:	2201      	movs	r2, #1
 800607c:	e7e2      	b.n	8006044 <_dtoa_r+0xa2c>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	db04      	blt.n	800608e <_dtoa_r+0xa76>
 8006084:	9906      	ldr	r1, [sp, #24]
 8006086:	430b      	orrs	r3, r1
 8006088:	9904      	ldr	r1, [sp, #16]
 800608a:	430b      	orrs	r3, r1
 800608c:	d122      	bne.n	80060d4 <_dtoa_r+0xabc>
 800608e:	2a00      	cmp	r2, #0
 8006090:	ddee      	ble.n	8006070 <_dtoa_r+0xa58>
 8006092:	ee18 1a10 	vmov	r1, s16
 8006096:	2201      	movs	r2, #1
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fac9 	bl	8006630 <__lshift>
 800609e:	4631      	mov	r1, r6
 80060a0:	ee08 0a10 	vmov	s16, r0
 80060a4:	f000 fb34 	bl	8006710 <__mcmp>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	dc03      	bgt.n	80060b4 <_dtoa_r+0xa9c>
 80060ac:	d1e0      	bne.n	8006070 <_dtoa_r+0xa58>
 80060ae:	f01a 0f01 	tst.w	sl, #1
 80060b2:	d0dd      	beq.n	8006070 <_dtoa_r+0xa58>
 80060b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060b8:	d1d7      	bne.n	800606a <_dtoa_r+0xa52>
 80060ba:	2339      	movs	r3, #57	; 0x39
 80060bc:	f88b 3000 	strb.w	r3, [fp]
 80060c0:	462b      	mov	r3, r5
 80060c2:	461d      	mov	r5, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060ca:	2a39      	cmp	r2, #57	; 0x39
 80060cc:	d071      	beq.n	80061b2 <_dtoa_r+0xb9a>
 80060ce:	3201      	adds	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e746      	b.n	8005f62 <_dtoa_r+0x94a>
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	dd07      	ble.n	80060e8 <_dtoa_r+0xad0>
 80060d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060dc:	d0ed      	beq.n	80060ba <_dtoa_r+0xaa2>
 80060de:	f10a 0301 	add.w	r3, sl, #1
 80060e2:	f88b 3000 	strb.w	r3, [fp]
 80060e6:	e73c      	b.n	8005f62 <_dtoa_r+0x94a>
 80060e8:	9b05      	ldr	r3, [sp, #20]
 80060ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80060ee:	4599      	cmp	r9, r3
 80060f0:	d047      	beq.n	8006182 <_dtoa_r+0xb6a>
 80060f2:	ee18 1a10 	vmov	r1, s16
 80060f6:	2300      	movs	r3, #0
 80060f8:	220a      	movs	r2, #10
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f8e8 	bl	80062d0 <__multadd>
 8006100:	45b8      	cmp	r8, r7
 8006102:	ee08 0a10 	vmov	s16, r0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	f04f 020a 	mov.w	r2, #10
 800610e:	4641      	mov	r1, r8
 8006110:	4620      	mov	r0, r4
 8006112:	d106      	bne.n	8006122 <_dtoa_r+0xb0a>
 8006114:	f000 f8dc 	bl	80062d0 <__multadd>
 8006118:	4680      	mov	r8, r0
 800611a:	4607      	mov	r7, r0
 800611c:	f109 0901 	add.w	r9, r9, #1
 8006120:	e772      	b.n	8006008 <_dtoa_r+0x9f0>
 8006122:	f000 f8d5 	bl	80062d0 <__multadd>
 8006126:	4639      	mov	r1, r7
 8006128:	4680      	mov	r8, r0
 800612a:	2300      	movs	r3, #0
 800612c:	220a      	movs	r2, #10
 800612e:	4620      	mov	r0, r4
 8006130:	f000 f8ce 	bl	80062d0 <__multadd>
 8006134:	4607      	mov	r7, r0
 8006136:	e7f1      	b.n	800611c <_dtoa_r+0xb04>
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	9302      	str	r3, [sp, #8]
 800613c:	9d01      	ldr	r5, [sp, #4]
 800613e:	ee18 0a10 	vmov	r0, s16
 8006142:	4631      	mov	r1, r6
 8006144:	f7ff f9dc 	bl	8005500 <quorem>
 8006148:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	f805 ab01 	strb.w	sl, [r5], #1
 8006152:	1aea      	subs	r2, r5, r3
 8006154:	9b02      	ldr	r3, [sp, #8]
 8006156:	4293      	cmp	r3, r2
 8006158:	dd09      	ble.n	800616e <_dtoa_r+0xb56>
 800615a:	ee18 1a10 	vmov	r1, s16
 800615e:	2300      	movs	r3, #0
 8006160:	220a      	movs	r2, #10
 8006162:	4620      	mov	r0, r4
 8006164:	f000 f8b4 	bl	80062d0 <__multadd>
 8006168:	ee08 0a10 	vmov	s16, r0
 800616c:	e7e7      	b.n	800613e <_dtoa_r+0xb26>
 800616e:	9b02      	ldr	r3, [sp, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	bfc8      	it	gt
 8006174:	461d      	movgt	r5, r3
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	bfd8      	it	le
 800617a:	2501      	movle	r5, #1
 800617c:	441d      	add	r5, r3
 800617e:	f04f 0800 	mov.w	r8, #0
 8006182:	ee18 1a10 	vmov	r1, s16
 8006186:	2201      	movs	r2, #1
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fa51 	bl	8006630 <__lshift>
 800618e:	4631      	mov	r1, r6
 8006190:	ee08 0a10 	vmov	s16, r0
 8006194:	f000 fabc 	bl	8006710 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	dc91      	bgt.n	80060c0 <_dtoa_r+0xaa8>
 800619c:	d102      	bne.n	80061a4 <_dtoa_r+0xb8c>
 800619e:	f01a 0f01 	tst.w	sl, #1
 80061a2:	d18d      	bne.n	80060c0 <_dtoa_r+0xaa8>
 80061a4:	462b      	mov	r3, r5
 80061a6:	461d      	mov	r5, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a30      	cmp	r2, #48	; 0x30
 80061ae:	d0fa      	beq.n	80061a6 <_dtoa_r+0xb8e>
 80061b0:	e6d7      	b.n	8005f62 <_dtoa_r+0x94a>
 80061b2:	9a01      	ldr	r2, [sp, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d184      	bne.n	80060c2 <_dtoa_r+0xaaa>
 80061b8:	9b00      	ldr	r3, [sp, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	2331      	movs	r3, #49	; 0x31
 80061c0:	7013      	strb	r3, [r2, #0]
 80061c2:	e6ce      	b.n	8005f62 <_dtoa_r+0x94a>
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <_dtoa_r+0xbd4>)
 80061c6:	f7ff ba95 	b.w	80056f4 <_dtoa_r+0xdc>
 80061ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f47f aa6e 	bne.w	80056ae <_dtoa_r+0x96>
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <_dtoa_r+0xbd8>)
 80061d4:	f7ff ba8e 	b.w	80056f4 <_dtoa_r+0xdc>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dcae      	bgt.n	800613c <_dtoa_r+0xb24>
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	f73f aea8 	bgt.w	8005f36 <_dtoa_r+0x91e>
 80061e6:	e7a9      	b.n	800613c <_dtoa_r+0xb24>
 80061e8:	08007f3f 	.word	0x08007f3f
 80061ec:	08007e9c 	.word	0x08007e9c
 80061f0:	08007ec0 	.word	0x08007ec0

080061f4 <_localeconv_r>:
 80061f4:	4800      	ldr	r0, [pc, #0]	; (80061f8 <_localeconv_r+0x4>)
 80061f6:	4770      	bx	lr
 80061f8:	200001a4 	.word	0x200001a4

080061fc <malloc>:
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <malloc+0xc>)
 80061fe:	4601      	mov	r1, r0
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f000 bc09 	b.w	8006a18 <_malloc_r>
 8006206:	bf00      	nop
 8006208:	20000050 	.word	0x20000050

0800620c <_Balloc>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006210:	4604      	mov	r4, r0
 8006212:	460d      	mov	r5, r1
 8006214:	b976      	cbnz	r6, 8006234 <_Balloc+0x28>
 8006216:	2010      	movs	r0, #16
 8006218:	f7ff fff0 	bl	80061fc <malloc>
 800621c:	4602      	mov	r2, r0
 800621e:	6260      	str	r0, [r4, #36]	; 0x24
 8006220:	b920      	cbnz	r0, 800622c <_Balloc+0x20>
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <_Balloc+0x78>)
 8006224:	4818      	ldr	r0, [pc, #96]	; (8006288 <_Balloc+0x7c>)
 8006226:	2166      	movs	r1, #102	; 0x66
 8006228:	f000 fdd6 	bl	8006dd8 <__assert_func>
 800622c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006230:	6006      	str	r6, [r0, #0]
 8006232:	60c6      	str	r6, [r0, #12]
 8006234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006236:	68f3      	ldr	r3, [r6, #12]
 8006238:	b183      	cbz	r3, 800625c <_Balloc+0x50>
 800623a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006242:	b9b8      	cbnz	r0, 8006274 <_Balloc+0x68>
 8006244:	2101      	movs	r1, #1
 8006246:	fa01 f605 	lsl.w	r6, r1, r5
 800624a:	1d72      	adds	r2, r6, #5
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fb60 	bl	8006914 <_calloc_r>
 8006254:	b160      	cbz	r0, 8006270 <_Balloc+0x64>
 8006256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800625a:	e00e      	b.n	800627a <_Balloc+0x6e>
 800625c:	2221      	movs	r2, #33	; 0x21
 800625e:	2104      	movs	r1, #4
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fb57 	bl	8006914 <_calloc_r>
 8006266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006268:	60f0      	str	r0, [r6, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e4      	bne.n	800623a <_Balloc+0x2e>
 8006270:	2000      	movs	r0, #0
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	6802      	ldr	r2, [r0, #0]
 8006276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800627a:	2300      	movs	r3, #0
 800627c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006280:	e7f7      	b.n	8006272 <_Balloc+0x66>
 8006282:	bf00      	nop
 8006284:	08007ecd 	.word	0x08007ecd
 8006288:	08007f50 	.word	0x08007f50

0800628c <_Bfree>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	b976      	cbnz	r6, 80062b4 <_Bfree+0x28>
 8006296:	2010      	movs	r0, #16
 8006298:	f7ff ffb0 	bl	80061fc <malloc>
 800629c:	4602      	mov	r2, r0
 800629e:	6268      	str	r0, [r5, #36]	; 0x24
 80062a0:	b920      	cbnz	r0, 80062ac <_Bfree+0x20>
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <_Bfree+0x3c>)
 80062a4:	4809      	ldr	r0, [pc, #36]	; (80062cc <_Bfree+0x40>)
 80062a6:	218a      	movs	r1, #138	; 0x8a
 80062a8:	f000 fd96 	bl	8006dd8 <__assert_func>
 80062ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062b0:	6006      	str	r6, [r0, #0]
 80062b2:	60c6      	str	r6, [r0, #12]
 80062b4:	b13c      	cbz	r4, 80062c6 <_Bfree+0x3a>
 80062b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b8:	6862      	ldr	r2, [r4, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062c0:	6021      	str	r1, [r4, #0]
 80062c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	08007ecd 	.word	0x08007ecd
 80062cc:	08007f50 	.word	0x08007f50

080062d0 <__multadd>:
 80062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d4:	690d      	ldr	r5, [r1, #16]
 80062d6:	4607      	mov	r7, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	461e      	mov	r6, r3
 80062dc:	f101 0c14 	add.w	ip, r1, #20
 80062e0:	2000      	movs	r0, #0
 80062e2:	f8dc 3000 	ldr.w	r3, [ip]
 80062e6:	b299      	uxth	r1, r3
 80062e8:	fb02 6101 	mla	r1, r2, r1, r6
 80062ec:	0c1e      	lsrs	r6, r3, #16
 80062ee:	0c0b      	lsrs	r3, r1, #16
 80062f0:	fb02 3306 	mla	r3, r2, r6, r3
 80062f4:	b289      	uxth	r1, r1
 80062f6:	3001      	adds	r0, #1
 80062f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062fc:	4285      	cmp	r5, r0
 80062fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006306:	dcec      	bgt.n	80062e2 <__multadd+0x12>
 8006308:	b30e      	cbz	r6, 800634e <__multadd+0x7e>
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	42ab      	cmp	r3, r5
 800630e:	dc19      	bgt.n	8006344 <__multadd+0x74>
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	4638      	mov	r0, r7
 8006314:	3101      	adds	r1, #1
 8006316:	f7ff ff79 	bl	800620c <_Balloc>
 800631a:	4680      	mov	r8, r0
 800631c:	b928      	cbnz	r0, 800632a <__multadd+0x5a>
 800631e:	4602      	mov	r2, r0
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <__multadd+0x84>)
 8006322:	480d      	ldr	r0, [pc, #52]	; (8006358 <__multadd+0x88>)
 8006324:	21b5      	movs	r1, #181	; 0xb5
 8006326:	f000 fd57 	bl	8006dd8 <__assert_func>
 800632a:	6922      	ldr	r2, [r4, #16]
 800632c:	3202      	adds	r2, #2
 800632e:	f104 010c 	add.w	r1, r4, #12
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	300c      	adds	r0, #12
 8006336:	f7fe fc43 	bl	8004bc0 <memcpy>
 800633a:	4621      	mov	r1, r4
 800633c:	4638      	mov	r0, r7
 800633e:	f7ff ffa5 	bl	800628c <_Bfree>
 8006342:	4644      	mov	r4, r8
 8006344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006348:	3501      	adds	r5, #1
 800634a:	615e      	str	r6, [r3, #20]
 800634c:	6125      	str	r5, [r4, #16]
 800634e:	4620      	mov	r0, r4
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006354:	08007f3f 	.word	0x08007f3f
 8006358:	08007f50 	.word	0x08007f50

0800635c <__hi0bits>:
 800635c:	0c03      	lsrs	r3, r0, #16
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	b9d3      	cbnz	r3, 8006398 <__hi0bits+0x3c>
 8006362:	0400      	lsls	r0, r0, #16
 8006364:	2310      	movs	r3, #16
 8006366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800636a:	bf04      	itt	eq
 800636c:	0200      	lsleq	r0, r0, #8
 800636e:	3308      	addeq	r3, #8
 8006370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006374:	bf04      	itt	eq
 8006376:	0100      	lsleq	r0, r0, #4
 8006378:	3304      	addeq	r3, #4
 800637a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800637e:	bf04      	itt	eq
 8006380:	0080      	lsleq	r0, r0, #2
 8006382:	3302      	addeq	r3, #2
 8006384:	2800      	cmp	r0, #0
 8006386:	db05      	blt.n	8006394 <__hi0bits+0x38>
 8006388:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800638c:	f103 0301 	add.w	r3, r3, #1
 8006390:	bf08      	it	eq
 8006392:	2320      	moveq	r3, #32
 8006394:	4618      	mov	r0, r3
 8006396:	4770      	bx	lr
 8006398:	2300      	movs	r3, #0
 800639a:	e7e4      	b.n	8006366 <__hi0bits+0xa>

0800639c <__lo0bits>:
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	f013 0207 	ands.w	r2, r3, #7
 80063a2:	4601      	mov	r1, r0
 80063a4:	d00b      	beq.n	80063be <__lo0bits+0x22>
 80063a6:	07da      	lsls	r2, r3, #31
 80063a8:	d423      	bmi.n	80063f2 <__lo0bits+0x56>
 80063aa:	0798      	lsls	r0, r3, #30
 80063ac:	bf49      	itett	mi
 80063ae:	085b      	lsrmi	r3, r3, #1
 80063b0:	089b      	lsrpl	r3, r3, #2
 80063b2:	2001      	movmi	r0, #1
 80063b4:	600b      	strmi	r3, [r1, #0]
 80063b6:	bf5c      	itt	pl
 80063b8:	600b      	strpl	r3, [r1, #0]
 80063ba:	2002      	movpl	r0, #2
 80063bc:	4770      	bx	lr
 80063be:	b298      	uxth	r0, r3
 80063c0:	b9a8      	cbnz	r0, 80063ee <__lo0bits+0x52>
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	2010      	movs	r0, #16
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	b90a      	cbnz	r2, 80063ce <__lo0bits+0x32>
 80063ca:	3008      	adds	r0, #8
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	071a      	lsls	r2, r3, #28
 80063d0:	bf04      	itt	eq
 80063d2:	091b      	lsreq	r3, r3, #4
 80063d4:	3004      	addeq	r0, #4
 80063d6:	079a      	lsls	r2, r3, #30
 80063d8:	bf04      	itt	eq
 80063da:	089b      	lsreq	r3, r3, #2
 80063dc:	3002      	addeq	r0, #2
 80063de:	07da      	lsls	r2, r3, #31
 80063e0:	d403      	bmi.n	80063ea <__lo0bits+0x4e>
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f100 0001 	add.w	r0, r0, #1
 80063e8:	d005      	beq.n	80063f6 <__lo0bits+0x5a>
 80063ea:	600b      	str	r3, [r1, #0]
 80063ec:	4770      	bx	lr
 80063ee:	4610      	mov	r0, r2
 80063f0:	e7e9      	b.n	80063c6 <__lo0bits+0x2a>
 80063f2:	2000      	movs	r0, #0
 80063f4:	4770      	bx	lr
 80063f6:	2020      	movs	r0, #32
 80063f8:	4770      	bx	lr
	...

080063fc <__i2b>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	460c      	mov	r4, r1
 8006400:	2101      	movs	r1, #1
 8006402:	f7ff ff03 	bl	800620c <_Balloc>
 8006406:	4602      	mov	r2, r0
 8006408:	b928      	cbnz	r0, 8006416 <__i2b+0x1a>
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <__i2b+0x24>)
 800640c:	4805      	ldr	r0, [pc, #20]	; (8006424 <__i2b+0x28>)
 800640e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006412:	f000 fce1 	bl	8006dd8 <__assert_func>
 8006416:	2301      	movs	r3, #1
 8006418:	6144      	str	r4, [r0, #20]
 800641a:	6103      	str	r3, [r0, #16]
 800641c:	bd10      	pop	{r4, pc}
 800641e:	bf00      	nop
 8006420:	08007f3f 	.word	0x08007f3f
 8006424:	08007f50 	.word	0x08007f50

08006428 <__multiply>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4691      	mov	r9, r2
 800642e:	690a      	ldr	r2, [r1, #16]
 8006430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	bfb8      	it	lt
 8006438:	460b      	movlt	r3, r1
 800643a:	460c      	mov	r4, r1
 800643c:	bfbc      	itt	lt
 800643e:	464c      	movlt	r4, r9
 8006440:	4699      	movlt	r9, r3
 8006442:	6927      	ldr	r7, [r4, #16]
 8006444:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006448:	68a3      	ldr	r3, [r4, #8]
 800644a:	6861      	ldr	r1, [r4, #4]
 800644c:	eb07 060a 	add.w	r6, r7, sl
 8006450:	42b3      	cmp	r3, r6
 8006452:	b085      	sub	sp, #20
 8006454:	bfb8      	it	lt
 8006456:	3101      	addlt	r1, #1
 8006458:	f7ff fed8 	bl	800620c <_Balloc>
 800645c:	b930      	cbnz	r0, 800646c <__multiply+0x44>
 800645e:	4602      	mov	r2, r0
 8006460:	4b44      	ldr	r3, [pc, #272]	; (8006574 <__multiply+0x14c>)
 8006462:	4845      	ldr	r0, [pc, #276]	; (8006578 <__multiply+0x150>)
 8006464:	f240 115d 	movw	r1, #349	; 0x15d
 8006468:	f000 fcb6 	bl	8006dd8 <__assert_func>
 800646c:	f100 0514 	add.w	r5, r0, #20
 8006470:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006474:	462b      	mov	r3, r5
 8006476:	2200      	movs	r2, #0
 8006478:	4543      	cmp	r3, r8
 800647a:	d321      	bcc.n	80064c0 <__multiply+0x98>
 800647c:	f104 0314 	add.w	r3, r4, #20
 8006480:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006484:	f109 0314 	add.w	r3, r9, #20
 8006488:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	1b3a      	subs	r2, r7, r4
 8006490:	3a15      	subs	r2, #21
 8006492:	f022 0203 	bic.w	r2, r2, #3
 8006496:	3204      	adds	r2, #4
 8006498:	f104 0115 	add.w	r1, r4, #21
 800649c:	428f      	cmp	r7, r1
 800649e:	bf38      	it	cc
 80064a0:	2204      	movcc	r2, #4
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	9a02      	ldr	r2, [sp, #8]
 80064a6:	9303      	str	r3, [sp, #12]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d80c      	bhi.n	80064c6 <__multiply+0x9e>
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	dd03      	ble.n	80064b8 <__multiply+0x90>
 80064b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05a      	beq.n	800656e <__multiply+0x146>
 80064b8:	6106      	str	r6, [r0, #16]
 80064ba:	b005      	add	sp, #20
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	f843 2b04 	str.w	r2, [r3], #4
 80064c4:	e7d8      	b.n	8006478 <__multiply+0x50>
 80064c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80064ca:	f1ba 0f00 	cmp.w	sl, #0
 80064ce:	d024      	beq.n	800651a <__multiply+0xf2>
 80064d0:	f104 0e14 	add.w	lr, r4, #20
 80064d4:	46a9      	mov	r9, r5
 80064d6:	f04f 0c00 	mov.w	ip, #0
 80064da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064de:	f8d9 1000 	ldr.w	r1, [r9]
 80064e2:	fa1f fb82 	uxth.w	fp, r2
 80064e6:	b289      	uxth	r1, r1
 80064e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80064ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80064f0:	f8d9 2000 	ldr.w	r2, [r9]
 80064f4:	4461      	add	r1, ip
 80064f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80064fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006502:	b289      	uxth	r1, r1
 8006504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006508:	4577      	cmp	r7, lr
 800650a:	f849 1b04 	str.w	r1, [r9], #4
 800650e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006512:	d8e2      	bhi.n	80064da <__multiply+0xb2>
 8006514:	9a01      	ldr	r2, [sp, #4]
 8006516:	f845 c002 	str.w	ip, [r5, r2]
 800651a:	9a03      	ldr	r2, [sp, #12]
 800651c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006520:	3304      	adds	r3, #4
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d020      	beq.n	800656a <__multiply+0x142>
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	f104 0c14 	add.w	ip, r4, #20
 800652e:	46ae      	mov	lr, r5
 8006530:	f04f 0a00 	mov.w	sl, #0
 8006534:	f8bc b000 	ldrh.w	fp, [ip]
 8006538:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800653c:	fb09 220b 	mla	r2, r9, fp, r2
 8006540:	4492      	add	sl, r2
 8006542:	b289      	uxth	r1, r1
 8006544:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006548:	f84e 1b04 	str.w	r1, [lr], #4
 800654c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006550:	f8be 1000 	ldrh.w	r1, [lr]
 8006554:	0c12      	lsrs	r2, r2, #16
 8006556:	fb09 1102 	mla	r1, r9, r2, r1
 800655a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800655e:	4567      	cmp	r7, ip
 8006560:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006564:	d8e6      	bhi.n	8006534 <__multiply+0x10c>
 8006566:	9a01      	ldr	r2, [sp, #4]
 8006568:	50a9      	str	r1, [r5, r2]
 800656a:	3504      	adds	r5, #4
 800656c:	e79a      	b.n	80064a4 <__multiply+0x7c>
 800656e:	3e01      	subs	r6, #1
 8006570:	e79c      	b.n	80064ac <__multiply+0x84>
 8006572:	bf00      	nop
 8006574:	08007f3f 	.word	0x08007f3f
 8006578:	08007f50 	.word	0x08007f50

0800657c <__pow5mult>:
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006580:	4615      	mov	r5, r2
 8006582:	f012 0203 	ands.w	r2, r2, #3
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	d007      	beq.n	800659c <__pow5mult+0x20>
 800658c:	4c25      	ldr	r4, [pc, #148]	; (8006624 <__pow5mult+0xa8>)
 800658e:	3a01      	subs	r2, #1
 8006590:	2300      	movs	r3, #0
 8006592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006596:	f7ff fe9b 	bl	80062d0 <__multadd>
 800659a:	4607      	mov	r7, r0
 800659c:	10ad      	asrs	r5, r5, #2
 800659e:	d03d      	beq.n	800661c <__pow5mult+0xa0>
 80065a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065a2:	b97c      	cbnz	r4, 80065c4 <__pow5mult+0x48>
 80065a4:	2010      	movs	r0, #16
 80065a6:	f7ff fe29 	bl	80061fc <malloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6270      	str	r0, [r6, #36]	; 0x24
 80065ae:	b928      	cbnz	r0, 80065bc <__pow5mult+0x40>
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <__pow5mult+0xac>)
 80065b2:	481e      	ldr	r0, [pc, #120]	; (800662c <__pow5mult+0xb0>)
 80065b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065b8:	f000 fc0e 	bl	8006dd8 <__assert_func>
 80065bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065c0:	6004      	str	r4, [r0, #0]
 80065c2:	60c4      	str	r4, [r0, #12]
 80065c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065cc:	b94c      	cbnz	r4, 80065e2 <__pow5mult+0x66>
 80065ce:	f240 2171 	movw	r1, #625	; 0x271
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff ff12 	bl	80063fc <__i2b>
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c8 0008 	str.w	r0, [r8, #8]
 80065de:	4604      	mov	r4, r0
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	07eb      	lsls	r3, r5, #31
 80065e8:	d50a      	bpl.n	8006600 <__pow5mult+0x84>
 80065ea:	4639      	mov	r1, r7
 80065ec:	4622      	mov	r2, r4
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff ff1a 	bl	8006428 <__multiply>
 80065f4:	4639      	mov	r1, r7
 80065f6:	4680      	mov	r8, r0
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7ff fe47 	bl	800628c <_Bfree>
 80065fe:	4647      	mov	r7, r8
 8006600:	106d      	asrs	r5, r5, #1
 8006602:	d00b      	beq.n	800661c <__pow5mult+0xa0>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	b938      	cbnz	r0, 8006618 <__pow5mult+0x9c>
 8006608:	4622      	mov	r2, r4
 800660a:	4621      	mov	r1, r4
 800660c:	4630      	mov	r0, r6
 800660e:	f7ff ff0b 	bl	8006428 <__multiply>
 8006612:	6020      	str	r0, [r4, #0]
 8006614:	f8c0 9000 	str.w	r9, [r0]
 8006618:	4604      	mov	r4, r0
 800661a:	e7e4      	b.n	80065e6 <__pow5mult+0x6a>
 800661c:	4638      	mov	r0, r7
 800661e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006622:	bf00      	nop
 8006624:	080080a0 	.word	0x080080a0
 8006628:	08007ecd 	.word	0x08007ecd
 800662c:	08007f50 	.word	0x08007f50

08006630 <__lshift>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	6849      	ldr	r1, [r1, #4]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	4607      	mov	r7, r0
 8006642:	4691      	mov	r9, r2
 8006644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006648:	f108 0601 	add.w	r6, r8, #1
 800664c:	42b3      	cmp	r3, r6
 800664e:	db0b      	blt.n	8006668 <__lshift+0x38>
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff fddb 	bl	800620c <_Balloc>
 8006656:	4605      	mov	r5, r0
 8006658:	b948      	cbnz	r0, 800666e <__lshift+0x3e>
 800665a:	4602      	mov	r2, r0
 800665c:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <__lshift+0xd8>)
 800665e:	482b      	ldr	r0, [pc, #172]	; (800670c <__lshift+0xdc>)
 8006660:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006664:	f000 fbb8 	bl	8006dd8 <__assert_func>
 8006668:	3101      	adds	r1, #1
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	e7ee      	b.n	800664c <__lshift+0x1c>
 800666e:	2300      	movs	r3, #0
 8006670:	f100 0114 	add.w	r1, r0, #20
 8006674:	f100 0210 	add.w	r2, r0, #16
 8006678:	4618      	mov	r0, r3
 800667a:	4553      	cmp	r3, sl
 800667c:	db37      	blt.n	80066ee <__lshift+0xbe>
 800667e:	6920      	ldr	r0, [r4, #16]
 8006680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006684:	f104 0314 	add.w	r3, r4, #20
 8006688:	f019 091f 	ands.w	r9, r9, #31
 800668c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006690:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006694:	d02f      	beq.n	80066f6 <__lshift+0xc6>
 8006696:	f1c9 0e20 	rsb	lr, r9, #32
 800669a:	468a      	mov	sl, r1
 800669c:	f04f 0c00 	mov.w	ip, #0
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	fa02 f209 	lsl.w	r2, r2, r9
 80066a6:	ea42 020c 	orr.w	r2, r2, ip
 80066aa:	f84a 2b04 	str.w	r2, [sl], #4
 80066ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b2:	4298      	cmp	r0, r3
 80066b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b8:	d8f2      	bhi.n	80066a0 <__lshift+0x70>
 80066ba:	1b03      	subs	r3, r0, r4
 80066bc:	3b15      	subs	r3, #21
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	3304      	adds	r3, #4
 80066c4:	f104 0215 	add.w	r2, r4, #21
 80066c8:	4290      	cmp	r0, r2
 80066ca:	bf38      	it	cc
 80066cc:	2304      	movcc	r3, #4
 80066ce:	f841 c003 	str.w	ip, [r1, r3]
 80066d2:	f1bc 0f00 	cmp.w	ip, #0
 80066d6:	d001      	beq.n	80066dc <__lshift+0xac>
 80066d8:	f108 0602 	add.w	r6, r8, #2
 80066dc:	3e01      	subs	r6, #1
 80066de:	4638      	mov	r0, r7
 80066e0:	612e      	str	r6, [r5, #16]
 80066e2:	4621      	mov	r1, r4
 80066e4:	f7ff fdd2 	bl	800628c <_Bfree>
 80066e8:	4628      	mov	r0, r5
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80066f2:	3301      	adds	r3, #1
 80066f4:	e7c1      	b.n	800667a <__lshift+0x4a>
 80066f6:	3904      	subs	r1, #4
 80066f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006700:	4298      	cmp	r0, r3
 8006702:	d8f9      	bhi.n	80066f8 <__lshift+0xc8>
 8006704:	e7ea      	b.n	80066dc <__lshift+0xac>
 8006706:	bf00      	nop
 8006708:	08007f3f 	.word	0x08007f3f
 800670c:	08007f50 	.word	0x08007f50

08006710 <__mcmp>:
 8006710:	b530      	push	{r4, r5, lr}
 8006712:	6902      	ldr	r2, [r0, #16]
 8006714:	690c      	ldr	r4, [r1, #16]
 8006716:	1b12      	subs	r2, r2, r4
 8006718:	d10e      	bne.n	8006738 <__mcmp+0x28>
 800671a:	f100 0314 	add.w	r3, r0, #20
 800671e:	3114      	adds	r1, #20
 8006720:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006724:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006728:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800672c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006730:	42a5      	cmp	r5, r4
 8006732:	d003      	beq.n	800673c <__mcmp+0x2c>
 8006734:	d305      	bcc.n	8006742 <__mcmp+0x32>
 8006736:	2201      	movs	r2, #1
 8006738:	4610      	mov	r0, r2
 800673a:	bd30      	pop	{r4, r5, pc}
 800673c:	4283      	cmp	r3, r0
 800673e:	d3f3      	bcc.n	8006728 <__mcmp+0x18>
 8006740:	e7fa      	b.n	8006738 <__mcmp+0x28>
 8006742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006746:	e7f7      	b.n	8006738 <__mcmp+0x28>

08006748 <__mdiff>:
 8006748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	460c      	mov	r4, r1
 800674e:	4606      	mov	r6, r0
 8006750:	4611      	mov	r1, r2
 8006752:	4620      	mov	r0, r4
 8006754:	4690      	mov	r8, r2
 8006756:	f7ff ffdb 	bl	8006710 <__mcmp>
 800675a:	1e05      	subs	r5, r0, #0
 800675c:	d110      	bne.n	8006780 <__mdiff+0x38>
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff fd53 	bl	800620c <_Balloc>
 8006766:	b930      	cbnz	r0, 8006776 <__mdiff+0x2e>
 8006768:	4b3a      	ldr	r3, [pc, #232]	; (8006854 <__mdiff+0x10c>)
 800676a:	4602      	mov	r2, r0
 800676c:	f240 2132 	movw	r1, #562	; 0x232
 8006770:	4839      	ldr	r0, [pc, #228]	; (8006858 <__mdiff+0x110>)
 8006772:	f000 fb31 	bl	8006dd8 <__assert_func>
 8006776:	2301      	movs	r3, #1
 8006778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800677c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	bfa4      	itt	ge
 8006782:	4643      	movge	r3, r8
 8006784:	46a0      	movge	r8, r4
 8006786:	4630      	mov	r0, r6
 8006788:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800678c:	bfa6      	itte	ge
 800678e:	461c      	movge	r4, r3
 8006790:	2500      	movge	r5, #0
 8006792:	2501      	movlt	r5, #1
 8006794:	f7ff fd3a 	bl	800620c <_Balloc>
 8006798:	b920      	cbnz	r0, 80067a4 <__mdiff+0x5c>
 800679a:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <__mdiff+0x10c>)
 800679c:	4602      	mov	r2, r0
 800679e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067a2:	e7e5      	b.n	8006770 <__mdiff+0x28>
 80067a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067a8:	6926      	ldr	r6, [r4, #16]
 80067aa:	60c5      	str	r5, [r0, #12]
 80067ac:	f104 0914 	add.w	r9, r4, #20
 80067b0:	f108 0514 	add.w	r5, r8, #20
 80067b4:	f100 0e14 	add.w	lr, r0, #20
 80067b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80067bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067c0:	f108 0210 	add.w	r2, r8, #16
 80067c4:	46f2      	mov	sl, lr
 80067c6:	2100      	movs	r1, #0
 80067c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80067cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067d0:	fa1f f883 	uxth.w	r8, r3
 80067d4:	fa11 f18b 	uxtah	r1, r1, fp
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	eba1 0808 	sub.w	r8, r1, r8
 80067de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067e6:	fa1f f888 	uxth.w	r8, r8
 80067ea:	1419      	asrs	r1, r3, #16
 80067ec:	454e      	cmp	r6, r9
 80067ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067f2:	f84a 3b04 	str.w	r3, [sl], #4
 80067f6:	d8e7      	bhi.n	80067c8 <__mdiff+0x80>
 80067f8:	1b33      	subs	r3, r6, r4
 80067fa:	3b15      	subs	r3, #21
 80067fc:	f023 0303 	bic.w	r3, r3, #3
 8006800:	3304      	adds	r3, #4
 8006802:	3415      	adds	r4, #21
 8006804:	42a6      	cmp	r6, r4
 8006806:	bf38      	it	cc
 8006808:	2304      	movcc	r3, #4
 800680a:	441d      	add	r5, r3
 800680c:	4473      	add	r3, lr
 800680e:	469e      	mov	lr, r3
 8006810:	462e      	mov	r6, r5
 8006812:	4566      	cmp	r6, ip
 8006814:	d30e      	bcc.n	8006834 <__mdiff+0xec>
 8006816:	f10c 0203 	add.w	r2, ip, #3
 800681a:	1b52      	subs	r2, r2, r5
 800681c:	f022 0203 	bic.w	r2, r2, #3
 8006820:	3d03      	subs	r5, #3
 8006822:	45ac      	cmp	ip, r5
 8006824:	bf38      	it	cc
 8006826:	2200      	movcc	r2, #0
 8006828:	441a      	add	r2, r3
 800682a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800682e:	b17b      	cbz	r3, 8006850 <__mdiff+0x108>
 8006830:	6107      	str	r7, [r0, #16]
 8006832:	e7a3      	b.n	800677c <__mdiff+0x34>
 8006834:	f856 8b04 	ldr.w	r8, [r6], #4
 8006838:	fa11 f288 	uxtah	r2, r1, r8
 800683c:	1414      	asrs	r4, r2, #16
 800683e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006842:	b292      	uxth	r2, r2
 8006844:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006848:	f84e 2b04 	str.w	r2, [lr], #4
 800684c:	1421      	asrs	r1, r4, #16
 800684e:	e7e0      	b.n	8006812 <__mdiff+0xca>
 8006850:	3f01      	subs	r7, #1
 8006852:	e7ea      	b.n	800682a <__mdiff+0xe2>
 8006854:	08007f3f 	.word	0x08007f3f
 8006858:	08007f50 	.word	0x08007f50

0800685c <__d2b>:
 800685c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4689      	mov	r9, r1
 8006862:	2101      	movs	r1, #1
 8006864:	ec57 6b10 	vmov	r6, r7, d0
 8006868:	4690      	mov	r8, r2
 800686a:	f7ff fccf 	bl	800620c <_Balloc>
 800686e:	4604      	mov	r4, r0
 8006870:	b930      	cbnz	r0, 8006880 <__d2b+0x24>
 8006872:	4602      	mov	r2, r0
 8006874:	4b25      	ldr	r3, [pc, #148]	; (800690c <__d2b+0xb0>)
 8006876:	4826      	ldr	r0, [pc, #152]	; (8006910 <__d2b+0xb4>)
 8006878:	f240 310a 	movw	r1, #778	; 0x30a
 800687c:	f000 faac 	bl	8006dd8 <__assert_func>
 8006880:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006884:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006888:	bb35      	cbnz	r5, 80068d8 <__d2b+0x7c>
 800688a:	2e00      	cmp	r6, #0
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	d028      	beq.n	80068e2 <__d2b+0x86>
 8006890:	4668      	mov	r0, sp
 8006892:	9600      	str	r6, [sp, #0]
 8006894:	f7ff fd82 	bl	800639c <__lo0bits>
 8006898:	9900      	ldr	r1, [sp, #0]
 800689a:	b300      	cbz	r0, 80068de <__d2b+0x82>
 800689c:	9a01      	ldr	r2, [sp, #4]
 800689e:	f1c0 0320 	rsb	r3, r0, #32
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	430b      	orrs	r3, r1
 80068a8:	40c2      	lsrs	r2, r0
 80068aa:	6163      	str	r3, [r4, #20]
 80068ac:	9201      	str	r2, [sp, #4]
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	61a3      	str	r3, [r4, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf14      	ite	ne
 80068b6:	2202      	movne	r2, #2
 80068b8:	2201      	moveq	r2, #1
 80068ba:	6122      	str	r2, [r4, #16]
 80068bc:	b1d5      	cbz	r5, 80068f4 <__d2b+0x98>
 80068be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068c2:	4405      	add	r5, r0
 80068c4:	f8c9 5000 	str.w	r5, [r9]
 80068c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068cc:	f8c8 0000 	str.w	r0, [r8]
 80068d0:	4620      	mov	r0, r4
 80068d2:	b003      	add	sp, #12
 80068d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068dc:	e7d5      	b.n	800688a <__d2b+0x2e>
 80068de:	6161      	str	r1, [r4, #20]
 80068e0:	e7e5      	b.n	80068ae <__d2b+0x52>
 80068e2:	a801      	add	r0, sp, #4
 80068e4:	f7ff fd5a 	bl	800639c <__lo0bits>
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	6163      	str	r3, [r4, #20]
 80068ec:	2201      	movs	r2, #1
 80068ee:	6122      	str	r2, [r4, #16]
 80068f0:	3020      	adds	r0, #32
 80068f2:	e7e3      	b.n	80068bc <__d2b+0x60>
 80068f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068fc:	f8c9 0000 	str.w	r0, [r9]
 8006900:	6918      	ldr	r0, [r3, #16]
 8006902:	f7ff fd2b 	bl	800635c <__hi0bits>
 8006906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800690a:	e7df      	b.n	80068cc <__d2b+0x70>
 800690c:	08007f3f 	.word	0x08007f3f
 8006910:	08007f50 	.word	0x08007f50

08006914 <_calloc_r>:
 8006914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006916:	fba1 2402 	umull	r2, r4, r1, r2
 800691a:	b94c      	cbnz	r4, 8006930 <_calloc_r+0x1c>
 800691c:	4611      	mov	r1, r2
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	f000 f87a 	bl	8006a18 <_malloc_r>
 8006924:	9a01      	ldr	r2, [sp, #4]
 8006926:	4605      	mov	r5, r0
 8006928:	b930      	cbnz	r0, 8006938 <_calloc_r+0x24>
 800692a:	4628      	mov	r0, r5
 800692c:	b003      	add	sp, #12
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	220c      	movs	r2, #12
 8006932:	6002      	str	r2, [r0, #0]
 8006934:	2500      	movs	r5, #0
 8006936:	e7f8      	b.n	800692a <_calloc_r+0x16>
 8006938:	4621      	mov	r1, r4
 800693a:	f7fe f94f 	bl	8004bdc <memset>
 800693e:	e7f4      	b.n	800692a <_calloc_r+0x16>

08006940 <_free_r>:
 8006940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006942:	2900      	cmp	r1, #0
 8006944:	d044      	beq.n	80069d0 <_free_r+0x90>
 8006946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694a:	9001      	str	r0, [sp, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f1a1 0404 	sub.w	r4, r1, #4
 8006952:	bfb8      	it	lt
 8006954:	18e4      	addlt	r4, r4, r3
 8006956:	f000 fa9b 	bl	8006e90 <__malloc_lock>
 800695a:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <_free_r+0x94>)
 800695c:	9801      	ldr	r0, [sp, #4]
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	b933      	cbnz	r3, 8006970 <_free_r+0x30>
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	6014      	str	r4, [r2, #0]
 8006966:	b003      	add	sp, #12
 8006968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800696c:	f000 ba96 	b.w	8006e9c <__malloc_unlock>
 8006970:	42a3      	cmp	r3, r4
 8006972:	d908      	bls.n	8006986 <_free_r+0x46>
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	1961      	adds	r1, r4, r5
 8006978:	428b      	cmp	r3, r1
 800697a:	bf01      	itttt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	1949      	addeq	r1, r1, r5
 8006982:	6021      	streq	r1, [r4, #0]
 8006984:	e7ed      	b.n	8006962 <_free_r+0x22>
 8006986:	461a      	mov	r2, r3
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b10b      	cbz	r3, 8006990 <_free_r+0x50>
 800698c:	42a3      	cmp	r3, r4
 800698e:	d9fa      	bls.n	8006986 <_free_r+0x46>
 8006990:	6811      	ldr	r1, [r2, #0]
 8006992:	1855      	adds	r5, r2, r1
 8006994:	42a5      	cmp	r5, r4
 8006996:	d10b      	bne.n	80069b0 <_free_r+0x70>
 8006998:	6824      	ldr	r4, [r4, #0]
 800699a:	4421      	add	r1, r4
 800699c:	1854      	adds	r4, r2, r1
 800699e:	42a3      	cmp	r3, r4
 80069a0:	6011      	str	r1, [r2, #0]
 80069a2:	d1e0      	bne.n	8006966 <_free_r+0x26>
 80069a4:	681c      	ldr	r4, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	6053      	str	r3, [r2, #4]
 80069aa:	4421      	add	r1, r4
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	e7da      	b.n	8006966 <_free_r+0x26>
 80069b0:	d902      	bls.n	80069b8 <_free_r+0x78>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	e7d6      	b.n	8006966 <_free_r+0x26>
 80069b8:	6825      	ldr	r5, [r4, #0]
 80069ba:	1961      	adds	r1, r4, r5
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf04      	itt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	bf04      	itt	eq
 80069c8:	1949      	addeq	r1, r1, r5
 80069ca:	6021      	streq	r1, [r4, #0]
 80069cc:	6054      	str	r4, [r2, #4]
 80069ce:	e7ca      	b.n	8006966 <_free_r+0x26>
 80069d0:	b003      	add	sp, #12
 80069d2:	bd30      	pop	{r4, r5, pc}
 80069d4:	200012fc 	.word	0x200012fc

080069d8 <sbrk_aligned>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	4e0e      	ldr	r6, [pc, #56]	; (8006a14 <sbrk_aligned+0x3c>)
 80069dc:	460c      	mov	r4, r1
 80069de:	6831      	ldr	r1, [r6, #0]
 80069e0:	4605      	mov	r5, r0
 80069e2:	b911      	cbnz	r1, 80069ea <sbrk_aligned+0x12>
 80069e4:	f000 f9e8 	bl	8006db8 <_sbrk_r>
 80069e8:	6030      	str	r0, [r6, #0]
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f9e3 	bl	8006db8 <_sbrk_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d00a      	beq.n	8006a0c <sbrk_aligned+0x34>
 80069f6:	1cc4      	adds	r4, r0, #3
 80069f8:	f024 0403 	bic.w	r4, r4, #3
 80069fc:	42a0      	cmp	r0, r4
 80069fe:	d007      	beq.n	8006a10 <sbrk_aligned+0x38>
 8006a00:	1a21      	subs	r1, r4, r0
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 f9d8 	bl	8006db8 <_sbrk_r>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d101      	bne.n	8006a10 <sbrk_aligned+0x38>
 8006a0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a10:	4620      	mov	r0, r4
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	20001300 	.word	0x20001300

08006a18 <_malloc_r>:
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	1ccd      	adds	r5, r1, #3
 8006a1e:	f025 0503 	bic.w	r5, r5, #3
 8006a22:	3508      	adds	r5, #8
 8006a24:	2d0c      	cmp	r5, #12
 8006a26:	bf38      	it	cc
 8006a28:	250c      	movcc	r5, #12
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	db01      	blt.n	8006a34 <_malloc_r+0x1c>
 8006a30:	42a9      	cmp	r1, r5
 8006a32:	d905      	bls.n	8006a40 <_malloc_r+0x28>
 8006a34:	230c      	movs	r3, #12
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	2600      	movs	r6, #0
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	4e2e      	ldr	r6, [pc, #184]	; (8006afc <_malloc_r+0xe4>)
 8006a42:	f000 fa25 	bl	8006e90 <__malloc_lock>
 8006a46:	6833      	ldr	r3, [r6, #0]
 8006a48:	461c      	mov	r4, r3
 8006a4a:	bb34      	cbnz	r4, 8006a9a <_malloc_r+0x82>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7ff ffc2 	bl	80069d8 <sbrk_aligned>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	4604      	mov	r4, r0
 8006a58:	d14d      	bne.n	8006af6 <_malloc_r+0xde>
 8006a5a:	6834      	ldr	r4, [r6, #0]
 8006a5c:	4626      	mov	r6, r4
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d140      	bne.n	8006ae4 <_malloc_r+0xcc>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	4631      	mov	r1, r6
 8006a66:	4638      	mov	r0, r7
 8006a68:	eb04 0803 	add.w	r8, r4, r3
 8006a6c:	f000 f9a4 	bl	8006db8 <_sbrk_r>
 8006a70:	4580      	cmp	r8, r0
 8006a72:	d13a      	bne.n	8006aea <_malloc_r+0xd2>
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	3503      	adds	r5, #3
 8006a78:	1a6d      	subs	r5, r5, r1
 8006a7a:	f025 0503 	bic.w	r5, r5, #3
 8006a7e:	3508      	adds	r5, #8
 8006a80:	2d0c      	cmp	r5, #12
 8006a82:	bf38      	it	cc
 8006a84:	250c      	movcc	r5, #12
 8006a86:	4629      	mov	r1, r5
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff ffa5 	bl	80069d8 <sbrk_aligned>
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d02b      	beq.n	8006aea <_malloc_r+0xd2>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	442b      	add	r3, r5
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	e00e      	b.n	8006ab8 <_malloc_r+0xa0>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	1b52      	subs	r2, r2, r5
 8006a9e:	d41e      	bmi.n	8006ade <_malloc_r+0xc6>
 8006aa0:	2a0b      	cmp	r2, #11
 8006aa2:	d916      	bls.n	8006ad2 <_malloc_r+0xba>
 8006aa4:	1961      	adds	r1, r4, r5
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	6025      	str	r5, [r4, #0]
 8006aaa:	bf18      	it	ne
 8006aac:	6059      	strne	r1, [r3, #4]
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	bf08      	it	eq
 8006ab2:	6031      	streq	r1, [r6, #0]
 8006ab4:	5162      	str	r2, [r4, r5]
 8006ab6:	604b      	str	r3, [r1, #4]
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f104 060b 	add.w	r6, r4, #11
 8006abe:	f000 f9ed 	bl	8006e9c <__malloc_unlock>
 8006ac2:	f026 0607 	bic.w	r6, r6, #7
 8006ac6:	1d23      	adds	r3, r4, #4
 8006ac8:	1af2      	subs	r2, r6, r3
 8006aca:	d0b6      	beq.n	8006a3a <_malloc_r+0x22>
 8006acc:	1b9b      	subs	r3, r3, r6
 8006ace:	50a3      	str	r3, [r4, r2]
 8006ad0:	e7b3      	b.n	8006a3a <_malloc_r+0x22>
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	bf0c      	ite	eq
 8006ad8:	6032      	streq	r2, [r6, #0]
 8006ada:	605a      	strne	r2, [r3, #4]
 8006adc:	e7ec      	b.n	8006ab8 <_malloc_r+0xa0>
 8006ade:	4623      	mov	r3, r4
 8006ae0:	6864      	ldr	r4, [r4, #4]
 8006ae2:	e7b2      	b.n	8006a4a <_malloc_r+0x32>
 8006ae4:	4634      	mov	r4, r6
 8006ae6:	6876      	ldr	r6, [r6, #4]
 8006ae8:	e7b9      	b.n	8006a5e <_malloc_r+0x46>
 8006aea:	230c      	movs	r3, #12
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f9d4 	bl	8006e9c <__malloc_unlock>
 8006af4:	e7a1      	b.n	8006a3a <_malloc_r+0x22>
 8006af6:	6025      	str	r5, [r4, #0]
 8006af8:	e7de      	b.n	8006ab8 <_malloc_r+0xa0>
 8006afa:	bf00      	nop
 8006afc:	200012fc 	.word	0x200012fc

08006b00 <__ssputs_r>:
 8006b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	688e      	ldr	r6, [r1, #8]
 8006b06:	429e      	cmp	r6, r3
 8006b08:	4682      	mov	sl, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4690      	mov	r8, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	d838      	bhi.n	8006b84 <__ssputs_r+0x84>
 8006b12:	898a      	ldrh	r2, [r1, #12]
 8006b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b18:	d032      	beq.n	8006b80 <__ssputs_r+0x80>
 8006b1a:	6825      	ldr	r5, [r4, #0]
 8006b1c:	6909      	ldr	r1, [r1, #16]
 8006b1e:	eba5 0901 	sub.w	r9, r5, r1
 8006b22:	6965      	ldr	r5, [r4, #20]
 8006b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	444b      	add	r3, r9
 8006b30:	106d      	asrs	r5, r5, #1
 8006b32:	429d      	cmp	r5, r3
 8006b34:	bf38      	it	cc
 8006b36:	461d      	movcc	r5, r3
 8006b38:	0553      	lsls	r3, r2, #21
 8006b3a:	d531      	bpl.n	8006ba0 <__ssputs_r+0xa0>
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7ff ff6b 	bl	8006a18 <_malloc_r>
 8006b42:	4606      	mov	r6, r0
 8006b44:	b950      	cbnz	r0, 8006b5c <__ssputs_r+0x5c>
 8006b46:	230c      	movs	r3, #12
 8006b48:	f8ca 3000 	str.w	r3, [sl]
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5c:	6921      	ldr	r1, [r4, #16]
 8006b5e:	464a      	mov	r2, r9
 8006b60:	f7fe f82e 	bl	8004bc0 <memcpy>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	6126      	str	r6, [r4, #16]
 8006b72:	6165      	str	r5, [r4, #20]
 8006b74:	444e      	add	r6, r9
 8006b76:	eba5 0509 	sub.w	r5, r5, r9
 8006b7a:	6026      	str	r6, [r4, #0]
 8006b7c:	60a5      	str	r5, [r4, #8]
 8006b7e:	463e      	mov	r6, r7
 8006b80:	42be      	cmp	r6, r7
 8006b82:	d900      	bls.n	8006b86 <__ssputs_r+0x86>
 8006b84:	463e      	mov	r6, r7
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	f000 f966 	bl	8006e5c <memmove>
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	1b9b      	subs	r3, r3, r6
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	4433      	add	r3, r6
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7db      	b.n	8006b58 <__ssputs_r+0x58>
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	f000 f981 	bl	8006ea8 <_realloc_r>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1e1      	bne.n	8006b70 <__ssputs_r+0x70>
 8006bac:	6921      	ldr	r1, [r4, #16]
 8006bae:	4650      	mov	r0, sl
 8006bb0:	f7ff fec6 	bl	8006940 <_free_r>
 8006bb4:	e7c7      	b.n	8006b46 <__ssputs_r+0x46>
	...

08006bb8 <_svfiprintf_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	4698      	mov	r8, r3
 8006bbe:	898b      	ldrh	r3, [r1, #12]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	b09d      	sub	sp, #116	; 0x74
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	d50e      	bpl.n	8006bea <_svfiprintf_r+0x32>
 8006bcc:	690b      	ldr	r3, [r1, #16]
 8006bce:	b963      	cbnz	r3, 8006bea <_svfiprintf_r+0x32>
 8006bd0:	2140      	movs	r1, #64	; 0x40
 8006bd2:	f7ff ff21 	bl	8006a18 <_malloc_r>
 8006bd6:	6028      	str	r0, [r5, #0]
 8006bd8:	6128      	str	r0, [r5, #16]
 8006bda:	b920      	cbnz	r0, 8006be6 <_svfiprintf_r+0x2e>
 8006bdc:	230c      	movs	r3, #12
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be4:	e0d1      	b.n	8006d8a <_svfiprintf_r+0x1d2>
 8006be6:	2340      	movs	r3, #64	; 0x40
 8006be8:	616b      	str	r3, [r5, #20]
 8006bea:	2300      	movs	r3, #0
 8006bec:	9309      	str	r3, [sp, #36]	; 0x24
 8006bee:	2320      	movs	r3, #32
 8006bf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf8:	2330      	movs	r3, #48	; 0x30
 8006bfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006da4 <_svfiprintf_r+0x1ec>
 8006bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c02:	f04f 0901 	mov.w	r9, #1
 8006c06:	4623      	mov	r3, r4
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0e:	b10a      	cbz	r2, 8006c14 <_svfiprintf_r+0x5c>
 8006c10:	2a25      	cmp	r2, #37	; 0x25
 8006c12:	d1f9      	bne.n	8006c08 <_svfiprintf_r+0x50>
 8006c14:	ebba 0b04 	subs.w	fp, sl, r4
 8006c18:	d00b      	beq.n	8006c32 <_svfiprintf_r+0x7a>
 8006c1a:	465b      	mov	r3, fp
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ff6d 	bl	8006b00 <__ssputs_r>
 8006c26:	3001      	adds	r0, #1
 8006c28:	f000 80aa 	beq.w	8006d80 <_svfiprintf_r+0x1c8>
 8006c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2e:	445a      	add	r2, fp
 8006c30:	9209      	str	r2, [sp, #36]	; 0x24
 8006c32:	f89a 3000 	ldrb.w	r3, [sl]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80a2 	beq.w	8006d80 <_svfiprintf_r+0x1c8>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c46:	f10a 0a01 	add.w	sl, sl, #1
 8006c4a:	9304      	str	r3, [sp, #16]
 8006c4c:	9307      	str	r3, [sp, #28]
 8006c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c52:	931a      	str	r3, [sp, #104]	; 0x68
 8006c54:	4654      	mov	r4, sl
 8006c56:	2205      	movs	r2, #5
 8006c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5c:	4851      	ldr	r0, [pc, #324]	; (8006da4 <_svfiprintf_r+0x1ec>)
 8006c5e:	f7f9 fac7 	bl	80001f0 <memchr>
 8006c62:	9a04      	ldr	r2, [sp, #16]
 8006c64:	b9d8      	cbnz	r0, 8006c9e <_svfiprintf_r+0xe6>
 8006c66:	06d0      	lsls	r0, r2, #27
 8006c68:	bf44      	itt	mi
 8006c6a:	2320      	movmi	r3, #32
 8006c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c70:	0711      	lsls	r1, r2, #28
 8006c72:	bf44      	itt	mi
 8006c74:	232b      	movmi	r3, #43	; 0x2b
 8006c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c80:	d015      	beq.n	8006cae <_svfiprintf_r+0xf6>
 8006c82:	9a07      	ldr	r2, [sp, #28]
 8006c84:	4654      	mov	r4, sl
 8006c86:	2000      	movs	r0, #0
 8006c88:	f04f 0c0a 	mov.w	ip, #10
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c92:	3b30      	subs	r3, #48	; 0x30
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d94e      	bls.n	8006d36 <_svfiprintf_r+0x17e>
 8006c98:	b1b0      	cbz	r0, 8006cc8 <_svfiprintf_r+0x110>
 8006c9a:	9207      	str	r2, [sp, #28]
 8006c9c:	e014      	b.n	8006cc8 <_svfiprintf_r+0x110>
 8006c9e:	eba0 0308 	sub.w	r3, r0, r8
 8006ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	46a2      	mov	sl, r4
 8006cac:	e7d2      	b.n	8006c54 <_svfiprintf_r+0x9c>
 8006cae:	9b03      	ldr	r3, [sp, #12]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	9103      	str	r1, [sp, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfbb      	ittet	lt
 8006cba:	425b      	neglt	r3, r3
 8006cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006cc0:	9307      	strge	r3, [sp, #28]
 8006cc2:	9307      	strlt	r3, [sp, #28]
 8006cc4:	bfb8      	it	lt
 8006cc6:	9204      	strlt	r2, [sp, #16]
 8006cc8:	7823      	ldrb	r3, [r4, #0]
 8006cca:	2b2e      	cmp	r3, #46	; 0x2e
 8006ccc:	d10c      	bne.n	8006ce8 <_svfiprintf_r+0x130>
 8006cce:	7863      	ldrb	r3, [r4, #1]
 8006cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd2:	d135      	bne.n	8006d40 <_svfiprintf_r+0x188>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	9203      	str	r2, [sp, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfb8      	it	lt
 8006ce0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ce4:	3402      	adds	r4, #2
 8006ce6:	9305      	str	r3, [sp, #20]
 8006ce8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006db4 <_svfiprintf_r+0x1fc>
 8006cec:	7821      	ldrb	r1, [r4, #0]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	f7f9 fa7d 	bl	80001f0 <memchr>
 8006cf6:	b140      	cbz	r0, 8006d0a <_svfiprintf_r+0x152>
 8006cf8:	2340      	movs	r3, #64	; 0x40
 8006cfa:	eba0 000a 	sub.w	r0, r0, sl
 8006cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	4303      	orrs	r3, r0
 8006d06:	3401      	adds	r4, #1
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0e:	4826      	ldr	r0, [pc, #152]	; (8006da8 <_svfiprintf_r+0x1f0>)
 8006d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d14:	2206      	movs	r2, #6
 8006d16:	f7f9 fa6b 	bl	80001f0 <memchr>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d038      	beq.n	8006d90 <_svfiprintf_r+0x1d8>
 8006d1e:	4b23      	ldr	r3, [pc, #140]	; (8006dac <_svfiprintf_r+0x1f4>)
 8006d20:	bb1b      	cbnz	r3, 8006d6a <_svfiprintf_r+0x1b2>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	3307      	adds	r3, #7
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	4433      	add	r3, r6
 8006d32:	9309      	str	r3, [sp, #36]	; 0x24
 8006d34:	e767      	b.n	8006c06 <_svfiprintf_r+0x4e>
 8006d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	e7a5      	b.n	8006c8c <_svfiprintf_r+0xd4>
 8006d40:	2300      	movs	r3, #0
 8006d42:	3401      	adds	r4, #1
 8006d44:	9305      	str	r3, [sp, #20]
 8006d46:	4619      	mov	r1, r3
 8006d48:	f04f 0c0a 	mov.w	ip, #10
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d52:	3a30      	subs	r2, #48	; 0x30
 8006d54:	2a09      	cmp	r2, #9
 8006d56:	d903      	bls.n	8006d60 <_svfiprintf_r+0x1a8>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0c5      	beq.n	8006ce8 <_svfiprintf_r+0x130>
 8006d5c:	9105      	str	r1, [sp, #20]
 8006d5e:	e7c3      	b.n	8006ce8 <_svfiprintf_r+0x130>
 8006d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d64:	4604      	mov	r4, r0
 8006d66:	2301      	movs	r3, #1
 8006d68:	e7f0      	b.n	8006d4c <_svfiprintf_r+0x194>
 8006d6a:	ab03      	add	r3, sp, #12
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	462a      	mov	r2, r5
 8006d70:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <_svfiprintf_r+0x1f8>)
 8006d72:	a904      	add	r1, sp, #16
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7fd ffd9 	bl	8004d2c <_printf_float>
 8006d7a:	1c42      	adds	r2, r0, #1
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	d1d6      	bne.n	8006d2e <_svfiprintf_r+0x176>
 8006d80:	89ab      	ldrh	r3, [r5, #12]
 8006d82:	065b      	lsls	r3, r3, #25
 8006d84:	f53f af2c 	bmi.w	8006be0 <_svfiprintf_r+0x28>
 8006d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d8a:	b01d      	add	sp, #116	; 0x74
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d90:	ab03      	add	r3, sp, #12
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	462a      	mov	r2, r5
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <_svfiprintf_r+0x1f8>)
 8006d98:	a904      	add	r1, sp, #16
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f7fe fa6a 	bl	8005274 <_printf_i>
 8006da0:	e7eb      	b.n	8006d7a <_svfiprintf_r+0x1c2>
 8006da2:	bf00      	nop
 8006da4:	080080ac 	.word	0x080080ac
 8006da8:	080080b6 	.word	0x080080b6
 8006dac:	08004d2d 	.word	0x08004d2d
 8006db0:	08006b01 	.word	0x08006b01
 8006db4:	080080b2 	.word	0x080080b2

08006db8 <_sbrk_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d06      	ldr	r5, [pc, #24]	; (8006dd4 <_sbrk_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fb f9ae 	bl	8002124 <_sbrk>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_sbrk_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_sbrk_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20001304 	.word	0x20001304

08006dd8 <__assert_func>:
 8006dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <__assert_func+0x2c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4605      	mov	r5, r0
 8006de4:	68d8      	ldr	r0, [r3, #12]
 8006de6:	b14c      	cbz	r4, 8006dfc <__assert_func+0x24>
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <__assert_func+0x30>)
 8006dea:	9100      	str	r1, [sp, #0]
 8006dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006df0:	4906      	ldr	r1, [pc, #24]	; (8006e0c <__assert_func+0x34>)
 8006df2:	462b      	mov	r3, r5
 8006df4:	f000 f80e 	bl	8006e14 <fiprintf>
 8006df8:	f000 faac 	bl	8007354 <abort>
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <__assert_func+0x38>)
 8006dfe:	461c      	mov	r4, r3
 8006e00:	e7f3      	b.n	8006dea <__assert_func+0x12>
 8006e02:	bf00      	nop
 8006e04:	20000050 	.word	0x20000050
 8006e08:	080080bd 	.word	0x080080bd
 8006e0c:	080080ca 	.word	0x080080ca
 8006e10:	080080f8 	.word	0x080080f8

08006e14 <fiprintf>:
 8006e14:	b40e      	push	{r1, r2, r3}
 8006e16:	b503      	push	{r0, r1, lr}
 8006e18:	4601      	mov	r1, r0
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	4805      	ldr	r0, [pc, #20]	; (8006e34 <fiprintf+0x20>)
 8006e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f000 f897 	bl	8006f58 <_vfiprintf_r>
 8006e2a:	b002      	add	sp, #8
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	20000050 	.word	0x20000050

08006e38 <__ascii_mbtowc>:
 8006e38:	b082      	sub	sp, #8
 8006e3a:	b901      	cbnz	r1, 8006e3e <__ascii_mbtowc+0x6>
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	b142      	cbz	r2, 8006e52 <__ascii_mbtowc+0x1a>
 8006e40:	b14b      	cbz	r3, 8006e56 <__ascii_mbtowc+0x1e>
 8006e42:	7813      	ldrb	r3, [r2, #0]
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	1e10      	subs	r0, r2, #0
 8006e4a:	bf18      	it	ne
 8006e4c:	2001      	movne	r0, #1
 8006e4e:	b002      	add	sp, #8
 8006e50:	4770      	bx	lr
 8006e52:	4610      	mov	r0, r2
 8006e54:	e7fb      	b.n	8006e4e <__ascii_mbtowc+0x16>
 8006e56:	f06f 0001 	mvn.w	r0, #1
 8006e5a:	e7f8      	b.n	8006e4e <__ascii_mbtowc+0x16>

08006e5c <memmove>:
 8006e5c:	4288      	cmp	r0, r1
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	eb01 0402 	add.w	r4, r1, r2
 8006e64:	d902      	bls.n	8006e6c <memmove+0x10>
 8006e66:	4284      	cmp	r4, r0
 8006e68:	4623      	mov	r3, r4
 8006e6a:	d807      	bhi.n	8006e7c <memmove+0x20>
 8006e6c:	1e43      	subs	r3, r0, #1
 8006e6e:	42a1      	cmp	r1, r4
 8006e70:	d008      	beq.n	8006e84 <memmove+0x28>
 8006e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e7a:	e7f8      	b.n	8006e6e <memmove+0x12>
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4601      	mov	r1, r0
 8006e80:	428a      	cmp	r2, r1
 8006e82:	d100      	bne.n	8006e86 <memmove+0x2a>
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e8e:	e7f7      	b.n	8006e80 <memmove+0x24>

08006e90 <__malloc_lock>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__malloc_lock+0x8>)
 8006e92:	f000 bc1f 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	20001308 	.word	0x20001308

08006e9c <__malloc_unlock>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__malloc_unlock+0x8>)
 8006e9e:	f000 bc1a 	b.w	80076d6 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20001308 	.word	0x20001308

08006ea8 <_realloc_r>:
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	4680      	mov	r8, r0
 8006eae:	4614      	mov	r4, r2
 8006eb0:	460e      	mov	r6, r1
 8006eb2:	b921      	cbnz	r1, 8006ebe <_realloc_r+0x16>
 8006eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb8:	4611      	mov	r1, r2
 8006eba:	f7ff bdad 	b.w	8006a18 <_malloc_r>
 8006ebe:	b92a      	cbnz	r2, 8006ecc <_realloc_r+0x24>
 8006ec0:	f7ff fd3e 	bl	8006940 <_free_r>
 8006ec4:	4625      	mov	r5, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ecc:	f000 fc6a 	bl	80077a4 <_malloc_usable_size_r>
 8006ed0:	4284      	cmp	r4, r0
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	d802      	bhi.n	8006edc <_realloc_r+0x34>
 8006ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eda:	d812      	bhi.n	8006f02 <_realloc_r+0x5a>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fd9a 	bl	8006a18 <_malloc_r>
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d0ed      	beq.n	8006ec6 <_realloc_r+0x1e>
 8006eea:	42bc      	cmp	r4, r7
 8006eec:	4622      	mov	r2, r4
 8006eee:	4631      	mov	r1, r6
 8006ef0:	bf28      	it	cs
 8006ef2:	463a      	movcs	r2, r7
 8006ef4:	f7fd fe64 	bl	8004bc0 <memcpy>
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7ff fd20 	bl	8006940 <_free_r>
 8006f00:	e7e1      	b.n	8006ec6 <_realloc_r+0x1e>
 8006f02:	4635      	mov	r5, r6
 8006f04:	e7df      	b.n	8006ec6 <_realloc_r+0x1e>

08006f06 <__sfputc_r>:
 8006f06:	6893      	ldr	r3, [r2, #8]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	b410      	push	{r4}
 8006f0e:	6093      	str	r3, [r2, #8]
 8006f10:	da08      	bge.n	8006f24 <__sfputc_r+0x1e>
 8006f12:	6994      	ldr	r4, [r2, #24]
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	db01      	blt.n	8006f1c <__sfputc_r+0x16>
 8006f18:	290a      	cmp	r1, #10
 8006f1a:	d103      	bne.n	8006f24 <__sfputc_r+0x1e>
 8006f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f20:	f000 b94a 	b.w	80071b8 <__swbuf_r>
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	1c58      	adds	r0, r3, #1
 8006f28:	6010      	str	r0, [r2, #0]
 8006f2a:	7019      	strb	r1, [r3, #0]
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <__sfputs_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	18d5      	adds	r5, r2, r3
 8006f3e:	42ac      	cmp	r4, r5
 8006f40:	d101      	bne.n	8006f46 <__sfputs_r+0x12>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e007      	b.n	8006f56 <__sfputs_r+0x22>
 8006f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff ffda 	bl	8006f06 <__sfputc_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d1f3      	bne.n	8006f3e <__sfputs_r+0xa>
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f58 <_vfiprintf_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	b09d      	sub	sp, #116	; 0x74
 8006f60:	4614      	mov	r4, r2
 8006f62:	4698      	mov	r8, r3
 8006f64:	4606      	mov	r6, r0
 8006f66:	b118      	cbz	r0, 8006f70 <_vfiprintf_r+0x18>
 8006f68:	6983      	ldr	r3, [r0, #24]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <_vfiprintf_r+0x18>
 8006f6c:	f000 fb14 	bl	8007598 <__sinit>
 8006f70:	4b89      	ldr	r3, [pc, #548]	; (8007198 <_vfiprintf_r+0x240>)
 8006f72:	429d      	cmp	r5, r3
 8006f74:	d11b      	bne.n	8006fae <_vfiprintf_r+0x56>
 8006f76:	6875      	ldr	r5, [r6, #4]
 8006f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	059a      	lsls	r2, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f86:	f000 fba5 	bl	80076d4 <__retarget_lock_acquire_recursive>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	071b      	lsls	r3, r3, #28
 8006f8e:	d501      	bpl.n	8006f94 <_vfiprintf_r+0x3c>
 8006f90:	692b      	ldr	r3, [r5, #16]
 8006f92:	b9eb      	cbnz	r3, 8006fd0 <_vfiprintf_r+0x78>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f000 f96e 	bl	8007278 <__swsetup_r>
 8006f9c:	b1c0      	cbz	r0, 8006fd0 <_vfiprintf_r+0x78>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa0:	07dc      	lsls	r4, r3, #31
 8006fa2:	d50e      	bpl.n	8006fc2 <_vfiprintf_r+0x6a>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa8:	b01d      	add	sp, #116	; 0x74
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	4b7b      	ldr	r3, [pc, #492]	; (800719c <_vfiprintf_r+0x244>)
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	d101      	bne.n	8006fb8 <_vfiprintf_r+0x60>
 8006fb4:	68b5      	ldr	r5, [r6, #8]
 8006fb6:	e7df      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fb8:	4b79      	ldr	r3, [pc, #484]	; (80071a0 <_vfiprintf_r+0x248>)
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	bf08      	it	eq
 8006fbe:	68f5      	ldreq	r5, [r6, #12]
 8006fc0:	e7da      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	0598      	lsls	r0, r3, #22
 8006fc6:	d4ed      	bmi.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fca:	f000 fb84 	bl	80076d6 <__retarget_lock_release_recursive>
 8006fce:	e7e9      	b.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fde:	2330      	movs	r3, #48	; 0x30
 8006fe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071a4 <_vfiprintf_r+0x24c>
 8006fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe8:	f04f 0901 	mov.w	r9, #1
 8006fec:	4623      	mov	r3, r4
 8006fee:	469a      	mov	sl, r3
 8006ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_vfiprintf_r+0xa2>
 8006ff6:	2a25      	cmp	r2, #37	; 0x25
 8006ff8:	d1f9      	bne.n	8006fee <_vfiprintf_r+0x96>
 8006ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffe:	d00b      	beq.n	8007018 <_vfiprintf_r+0xc0>
 8007000:	465b      	mov	r3, fp
 8007002:	4622      	mov	r2, r4
 8007004:	4629      	mov	r1, r5
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff94 	bl	8006f34 <__sfputs_r>
 800700c:	3001      	adds	r0, #1
 800700e:	f000 80aa 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007014:	445a      	add	r2, fp
 8007016:	9209      	str	r2, [sp, #36]	; 0x24
 8007018:	f89a 3000 	ldrb.w	r3, [sl]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a2 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007022:	2300      	movs	r3, #0
 8007024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800702c:	f10a 0a01 	add.w	sl, sl, #1
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007038:	931a      	str	r3, [sp, #104]	; 0x68
 800703a:	4654      	mov	r4, sl
 800703c:	2205      	movs	r2, #5
 800703e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007042:	4858      	ldr	r0, [pc, #352]	; (80071a4 <_vfiprintf_r+0x24c>)
 8007044:	f7f9 f8d4 	bl	80001f0 <memchr>
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	b9d8      	cbnz	r0, 8007084 <_vfiprintf_r+0x12c>
 800704c:	06d1      	lsls	r1, r2, #27
 800704e:	bf44      	itt	mi
 8007050:	2320      	movmi	r3, #32
 8007052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007056:	0713      	lsls	r3, r2, #28
 8007058:	bf44      	itt	mi
 800705a:	232b      	movmi	r3, #43	; 0x2b
 800705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007060:	f89a 3000 	ldrb.w	r3, [sl]
 8007064:	2b2a      	cmp	r3, #42	; 0x2a
 8007066:	d015      	beq.n	8007094 <_vfiprintf_r+0x13c>
 8007068:	9a07      	ldr	r2, [sp, #28]
 800706a:	4654      	mov	r4, sl
 800706c:	2000      	movs	r0, #0
 800706e:	f04f 0c0a 	mov.w	ip, #10
 8007072:	4621      	mov	r1, r4
 8007074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007078:	3b30      	subs	r3, #48	; 0x30
 800707a:	2b09      	cmp	r3, #9
 800707c:	d94e      	bls.n	800711c <_vfiprintf_r+0x1c4>
 800707e:	b1b0      	cbz	r0, 80070ae <_vfiprintf_r+0x156>
 8007080:	9207      	str	r2, [sp, #28]
 8007082:	e014      	b.n	80070ae <_vfiprintf_r+0x156>
 8007084:	eba0 0308 	sub.w	r3, r0, r8
 8007088:	fa09 f303 	lsl.w	r3, r9, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	46a2      	mov	sl, r4
 8007092:	e7d2      	b.n	800703a <_vfiprintf_r+0xe2>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	1d19      	adds	r1, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	9103      	str	r1, [sp, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfbb      	ittet	lt
 80070a0:	425b      	neglt	r3, r3
 80070a2:	f042 0202 	orrlt.w	r2, r2, #2
 80070a6:	9307      	strge	r3, [sp, #28]
 80070a8:	9307      	strlt	r3, [sp, #28]
 80070aa:	bfb8      	it	lt
 80070ac:	9204      	strlt	r2, [sp, #16]
 80070ae:	7823      	ldrb	r3, [r4, #0]
 80070b0:	2b2e      	cmp	r3, #46	; 0x2e
 80070b2:	d10c      	bne.n	80070ce <_vfiprintf_r+0x176>
 80070b4:	7863      	ldrb	r3, [r4, #1]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d135      	bne.n	8007126 <_vfiprintf_r+0x1ce>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	1d1a      	adds	r2, r3, #4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	9203      	str	r2, [sp, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bfb8      	it	lt
 80070c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070ca:	3402      	adds	r4, #2
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071b4 <_vfiprintf_r+0x25c>
 80070d2:	7821      	ldrb	r1, [r4, #0]
 80070d4:	2203      	movs	r2, #3
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7f9 f88a 	bl	80001f0 <memchr>
 80070dc:	b140      	cbz	r0, 80070f0 <_vfiprintf_r+0x198>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	eba0 000a 	sub.w	r0, r0, sl
 80070e4:	fa03 f000 	lsl.w	r0, r3, r0
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	4303      	orrs	r3, r0
 80070ec:	3401      	adds	r4, #1
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	482c      	ldr	r0, [pc, #176]	; (80071a8 <_vfiprintf_r+0x250>)
 80070f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070fa:	2206      	movs	r2, #6
 80070fc:	f7f9 f878 	bl	80001f0 <memchr>
 8007100:	2800      	cmp	r0, #0
 8007102:	d03f      	beq.n	8007184 <_vfiprintf_r+0x22c>
 8007104:	4b29      	ldr	r3, [pc, #164]	; (80071ac <_vfiprintf_r+0x254>)
 8007106:	bb1b      	cbnz	r3, 8007150 <_vfiprintf_r+0x1f8>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	3307      	adds	r3, #7
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007116:	443b      	add	r3, r7
 8007118:	9309      	str	r3, [sp, #36]	; 0x24
 800711a:	e767      	b.n	8006fec <_vfiprintf_r+0x94>
 800711c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007120:	460c      	mov	r4, r1
 8007122:	2001      	movs	r0, #1
 8007124:	e7a5      	b.n	8007072 <_vfiprintf_r+0x11a>
 8007126:	2300      	movs	r3, #0
 8007128:	3401      	adds	r4, #1
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	4619      	mov	r1, r3
 800712e:	f04f 0c0a 	mov.w	ip, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007138:	3a30      	subs	r2, #48	; 0x30
 800713a:	2a09      	cmp	r2, #9
 800713c:	d903      	bls.n	8007146 <_vfiprintf_r+0x1ee>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0c5      	beq.n	80070ce <_vfiprintf_r+0x176>
 8007142:	9105      	str	r1, [sp, #20]
 8007144:	e7c3      	b.n	80070ce <_vfiprintf_r+0x176>
 8007146:	fb0c 2101 	mla	r1, ip, r1, r2
 800714a:	4604      	mov	r4, r0
 800714c:	2301      	movs	r3, #1
 800714e:	e7f0      	b.n	8007132 <_vfiprintf_r+0x1da>
 8007150:	ab03      	add	r3, sp, #12
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	462a      	mov	r2, r5
 8007156:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <_vfiprintf_r+0x258>)
 8007158:	a904      	add	r1, sp, #16
 800715a:	4630      	mov	r0, r6
 800715c:	f7fd fde6 	bl	8004d2c <_printf_float>
 8007160:	4607      	mov	r7, r0
 8007162:	1c78      	adds	r0, r7, #1
 8007164:	d1d6      	bne.n	8007114 <_vfiprintf_r+0x1bc>
 8007166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007168:	07d9      	lsls	r1, r3, #31
 800716a:	d405      	bmi.n	8007178 <_vfiprintf_r+0x220>
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	059a      	lsls	r2, r3, #22
 8007170:	d402      	bmi.n	8007178 <_vfiprintf_r+0x220>
 8007172:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007174:	f000 faaf 	bl	80076d6 <__retarget_lock_release_recursive>
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	065b      	lsls	r3, r3, #25
 800717c:	f53f af12 	bmi.w	8006fa4 <_vfiprintf_r+0x4c>
 8007180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007182:	e711      	b.n	8006fa8 <_vfiprintf_r+0x50>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <_vfiprintf_r+0x258>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4630      	mov	r0, r6
 8007190:	f7fe f870 	bl	8005274 <_printf_i>
 8007194:	e7e4      	b.n	8007160 <_vfiprintf_r+0x208>
 8007196:	bf00      	nop
 8007198:	08008224 	.word	0x08008224
 800719c:	08008244 	.word	0x08008244
 80071a0:	08008204 	.word	0x08008204
 80071a4:	080080ac 	.word	0x080080ac
 80071a8:	080080b6 	.word	0x080080b6
 80071ac:	08004d2d 	.word	0x08004d2d
 80071b0:	08006f35 	.word	0x08006f35
 80071b4:	080080b2 	.word	0x080080b2

080071b8 <__swbuf_r>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	460e      	mov	r6, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	4605      	mov	r5, r0
 80071c0:	b118      	cbz	r0, 80071ca <__swbuf_r+0x12>
 80071c2:	6983      	ldr	r3, [r0, #24]
 80071c4:	b90b      	cbnz	r3, 80071ca <__swbuf_r+0x12>
 80071c6:	f000 f9e7 	bl	8007598 <__sinit>
 80071ca:	4b21      	ldr	r3, [pc, #132]	; (8007250 <__swbuf_r+0x98>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d12b      	bne.n	8007228 <__swbuf_r+0x70>
 80071d0:	686c      	ldr	r4, [r5, #4]
 80071d2:	69a3      	ldr	r3, [r4, #24]
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	071a      	lsls	r2, r3, #28
 80071da:	d52f      	bpl.n	800723c <__swbuf_r+0x84>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b36b      	cbz	r3, 800723c <__swbuf_r+0x84>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1ac0      	subs	r0, r0, r3
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	b2f6      	uxtb	r6, r6
 80071ea:	4283      	cmp	r3, r0
 80071ec:	4637      	mov	r7, r6
 80071ee:	dc04      	bgt.n	80071fa <__swbuf_r+0x42>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f93c 	bl	8007470 <_fflush_r>
 80071f8:	bb30      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	701e      	strb	r6, [r3, #0]
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	3001      	adds	r0, #1
 800720c:	4283      	cmp	r3, r0
 800720e:	d004      	beq.n	800721a <__swbuf_r+0x62>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	07db      	lsls	r3, r3, #31
 8007214:	d506      	bpl.n	8007224 <__swbuf_r+0x6c>
 8007216:	2e0a      	cmp	r6, #10
 8007218:	d104      	bne.n	8007224 <__swbuf_r+0x6c>
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 f927 	bl	8007470 <_fflush_r>
 8007222:	b988      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 8007224:	4638      	mov	r0, r7
 8007226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <__swbuf_r+0x9c>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <__swbuf_r+0x7a>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7cf      	b.n	80071d2 <__swbuf_r+0x1a>
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <__swbuf_r+0xa0>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7ca      	b.n	80071d2 <__swbuf_r+0x1a>
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f81a 	bl	8007278 <__swsetup_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	d0cb      	beq.n	80071e0 <__swbuf_r+0x28>
 8007248:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800724c:	e7ea      	b.n	8007224 <__swbuf_r+0x6c>
 800724e:	bf00      	nop
 8007250:	08008224 	.word	0x08008224
 8007254:	08008244 	.word	0x08008244
 8007258:	08008204 	.word	0x08008204

0800725c <__ascii_wctomb>:
 800725c:	b149      	cbz	r1, 8007272 <__ascii_wctomb+0x16>
 800725e:	2aff      	cmp	r2, #255	; 0xff
 8007260:	bf85      	ittet	hi
 8007262:	238a      	movhi	r3, #138	; 0x8a
 8007264:	6003      	strhi	r3, [r0, #0]
 8007266:	700a      	strbls	r2, [r1, #0]
 8007268:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800726c:	bf98      	it	ls
 800726e:	2001      	movls	r0, #1
 8007270:	4770      	bx	lr
 8007272:	4608      	mov	r0, r1
 8007274:	4770      	bx	lr
	...

08007278 <__swsetup_r>:
 8007278:	4b32      	ldr	r3, [pc, #200]	; (8007344 <__swsetup_r+0xcc>)
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	681d      	ldr	r5, [r3, #0]
 800727e:	4606      	mov	r6, r0
 8007280:	460c      	mov	r4, r1
 8007282:	b125      	cbz	r5, 800728e <__swsetup_r+0x16>
 8007284:	69ab      	ldr	r3, [r5, #24]
 8007286:	b913      	cbnz	r3, 800728e <__swsetup_r+0x16>
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f985 	bl	8007598 <__sinit>
 800728e:	4b2e      	ldr	r3, [pc, #184]	; (8007348 <__swsetup_r+0xd0>)
 8007290:	429c      	cmp	r4, r3
 8007292:	d10f      	bne.n	80072b4 <__swsetup_r+0x3c>
 8007294:	686c      	ldr	r4, [r5, #4]
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d42c      	bmi.n	80072fa <__swsetup_r+0x82>
 80072a0:	06dd      	lsls	r5, r3, #27
 80072a2:	d411      	bmi.n	80072c8 <__swsetup_r+0x50>
 80072a4:	2309      	movs	r3, #9
 80072a6:	6033      	str	r3, [r6, #0]
 80072a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b2:	e03e      	b.n	8007332 <__swsetup_r+0xba>
 80072b4:	4b25      	ldr	r3, [pc, #148]	; (800734c <__swsetup_r+0xd4>)
 80072b6:	429c      	cmp	r4, r3
 80072b8:	d101      	bne.n	80072be <__swsetup_r+0x46>
 80072ba:	68ac      	ldr	r4, [r5, #8]
 80072bc:	e7eb      	b.n	8007296 <__swsetup_r+0x1e>
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <__swsetup_r+0xd8>)
 80072c0:	429c      	cmp	r4, r3
 80072c2:	bf08      	it	eq
 80072c4:	68ec      	ldreq	r4, [r5, #12]
 80072c6:	e7e6      	b.n	8007296 <__swsetup_r+0x1e>
 80072c8:	0758      	lsls	r0, r3, #29
 80072ca:	d512      	bpl.n	80072f2 <__swsetup_r+0x7a>
 80072cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ce:	b141      	cbz	r1, 80072e2 <__swsetup_r+0x6a>
 80072d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072d4:	4299      	cmp	r1, r3
 80072d6:	d002      	beq.n	80072de <__swsetup_r+0x66>
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff fb31 	bl	8006940 <_free_r>
 80072de:	2300      	movs	r3, #0
 80072e0:	6363      	str	r3, [r4, #52]	; 0x34
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	2300      	movs	r3, #0
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f043 0308 	orr.w	r3, r3, #8
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	6923      	ldr	r3, [r4, #16]
 80072fc:	b94b      	cbnz	r3, 8007312 <__swsetup_r+0x9a>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007308:	d003      	beq.n	8007312 <__swsetup_r+0x9a>
 800730a:	4621      	mov	r1, r4
 800730c:	4630      	mov	r0, r6
 800730e:	f000 fa09 	bl	8007724 <__smakebuf_r>
 8007312:	89a0      	ldrh	r0, [r4, #12]
 8007314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007318:	f010 0301 	ands.w	r3, r0, #1
 800731c:	d00a      	beq.n	8007334 <__swsetup_r+0xbc>
 800731e:	2300      	movs	r3, #0
 8007320:	60a3      	str	r3, [r4, #8]
 8007322:	6963      	ldr	r3, [r4, #20]
 8007324:	425b      	negs	r3, r3
 8007326:	61a3      	str	r3, [r4, #24]
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	b943      	cbnz	r3, 800733e <__swsetup_r+0xc6>
 800732c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007330:	d1ba      	bne.n	80072a8 <__swsetup_r+0x30>
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	0781      	lsls	r1, r0, #30
 8007336:	bf58      	it	pl
 8007338:	6963      	ldrpl	r3, [r4, #20]
 800733a:	60a3      	str	r3, [r4, #8]
 800733c:	e7f4      	b.n	8007328 <__swsetup_r+0xb0>
 800733e:	2000      	movs	r0, #0
 8007340:	e7f7      	b.n	8007332 <__swsetup_r+0xba>
 8007342:	bf00      	nop
 8007344:	20000050 	.word	0x20000050
 8007348:	08008224 	.word	0x08008224
 800734c:	08008244 	.word	0x08008244
 8007350:	08008204 	.word	0x08008204

08007354 <abort>:
 8007354:	b508      	push	{r3, lr}
 8007356:	2006      	movs	r0, #6
 8007358:	f000 fa54 	bl	8007804 <raise>
 800735c:	2001      	movs	r0, #1
 800735e:	f7fa fe69 	bl	8002034 <_exit>
	...

08007364 <__sflush_r>:
 8007364:	898a      	ldrh	r2, [r1, #12]
 8007366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	4605      	mov	r5, r0
 800736c:	0710      	lsls	r0, r2, #28
 800736e:	460c      	mov	r4, r1
 8007370:	d458      	bmi.n	8007424 <__sflush_r+0xc0>
 8007372:	684b      	ldr	r3, [r1, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dc05      	bgt.n	8007384 <__sflush_r+0x20>
 8007378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc02      	bgt.n	8007384 <__sflush_r+0x20>
 800737e:	2000      	movs	r0, #0
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007386:	2e00      	cmp	r6, #0
 8007388:	d0f9      	beq.n	800737e <__sflush_r+0x1a>
 800738a:	2300      	movs	r3, #0
 800738c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007390:	682f      	ldr	r7, [r5, #0]
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	d032      	beq.n	80073fc <__sflush_r+0x98>
 8007396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	075a      	lsls	r2, r3, #29
 800739c:	d505      	bpl.n	80073aa <__sflush_r+0x46>
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	1ac0      	subs	r0, r0, r3
 80073a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073a4:	b10b      	cbz	r3, 80073aa <__sflush_r+0x46>
 80073a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a8:	1ac0      	subs	r0, r0, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	4602      	mov	r2, r0
 80073ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073b0:	6a21      	ldr	r1, [r4, #32]
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b0      	blx	r6
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	d106      	bne.n	80073ca <__sflush_r+0x66>
 80073bc:	6829      	ldr	r1, [r5, #0]
 80073be:	291d      	cmp	r1, #29
 80073c0:	d82c      	bhi.n	800741c <__sflush_r+0xb8>
 80073c2:	4a2a      	ldr	r2, [pc, #168]	; (800746c <__sflush_r+0x108>)
 80073c4:	40ca      	lsrs	r2, r1
 80073c6:	07d6      	lsls	r6, r2, #31
 80073c8:	d528      	bpl.n	800741c <__sflush_r+0xb8>
 80073ca:	2200      	movs	r2, #0
 80073cc:	6062      	str	r2, [r4, #4]
 80073ce:	04d9      	lsls	r1, r3, #19
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	6022      	str	r2, [r4, #0]
 80073d4:	d504      	bpl.n	80073e0 <__sflush_r+0x7c>
 80073d6:	1c42      	adds	r2, r0, #1
 80073d8:	d101      	bne.n	80073de <__sflush_r+0x7a>
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	b903      	cbnz	r3, 80073e0 <__sflush_r+0x7c>
 80073de:	6560      	str	r0, [r4, #84]	; 0x54
 80073e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e2:	602f      	str	r7, [r5, #0]
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d0ca      	beq.n	800737e <__sflush_r+0x1a>
 80073e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d002      	beq.n	80073f6 <__sflush_r+0x92>
 80073f0:	4628      	mov	r0, r5
 80073f2:	f7ff faa5 	bl	8006940 <_free_r>
 80073f6:	2000      	movs	r0, #0
 80073f8:	6360      	str	r0, [r4, #52]	; 0x34
 80073fa:	e7c1      	b.n	8007380 <__sflush_r+0x1c>
 80073fc:	6a21      	ldr	r1, [r4, #32]
 80073fe:	2301      	movs	r3, #1
 8007400:	4628      	mov	r0, r5
 8007402:	47b0      	blx	r6
 8007404:	1c41      	adds	r1, r0, #1
 8007406:	d1c7      	bne.n	8007398 <__sflush_r+0x34>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0c4      	beq.n	8007398 <__sflush_r+0x34>
 800740e:	2b1d      	cmp	r3, #29
 8007410:	d001      	beq.n	8007416 <__sflush_r+0xb2>
 8007412:	2b16      	cmp	r3, #22
 8007414:	d101      	bne.n	800741a <__sflush_r+0xb6>
 8007416:	602f      	str	r7, [r5, #0]
 8007418:	e7b1      	b.n	800737e <__sflush_r+0x1a>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	e7ad      	b.n	8007380 <__sflush_r+0x1c>
 8007424:	690f      	ldr	r7, [r1, #16]
 8007426:	2f00      	cmp	r7, #0
 8007428:	d0a9      	beq.n	800737e <__sflush_r+0x1a>
 800742a:	0793      	lsls	r3, r2, #30
 800742c:	680e      	ldr	r6, [r1, #0]
 800742e:	bf08      	it	eq
 8007430:	694b      	ldreq	r3, [r1, #20]
 8007432:	600f      	str	r7, [r1, #0]
 8007434:	bf18      	it	ne
 8007436:	2300      	movne	r3, #0
 8007438:	eba6 0807 	sub.w	r8, r6, r7
 800743c:	608b      	str	r3, [r1, #8]
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	dd9c      	ble.n	800737e <__sflush_r+0x1a>
 8007444:	6a21      	ldr	r1, [r4, #32]
 8007446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007448:	4643      	mov	r3, r8
 800744a:	463a      	mov	r2, r7
 800744c:	4628      	mov	r0, r5
 800744e:	47b0      	blx	r6
 8007450:	2800      	cmp	r0, #0
 8007452:	dc06      	bgt.n	8007462 <__sflush_r+0xfe>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007460:	e78e      	b.n	8007380 <__sflush_r+0x1c>
 8007462:	4407      	add	r7, r0
 8007464:	eba8 0800 	sub.w	r8, r8, r0
 8007468:	e7e9      	b.n	800743e <__sflush_r+0xda>
 800746a:	bf00      	nop
 800746c:	20400001 	.word	0x20400001

08007470 <_fflush_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	690b      	ldr	r3, [r1, #16]
 8007474:	4605      	mov	r5, r0
 8007476:	460c      	mov	r4, r1
 8007478:	b913      	cbnz	r3, 8007480 <_fflush_r+0x10>
 800747a:	2500      	movs	r5, #0
 800747c:	4628      	mov	r0, r5
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	b118      	cbz	r0, 800748a <_fflush_r+0x1a>
 8007482:	6983      	ldr	r3, [r0, #24]
 8007484:	b90b      	cbnz	r3, 800748a <_fflush_r+0x1a>
 8007486:	f000 f887 	bl	8007598 <__sinit>
 800748a:	4b14      	ldr	r3, [pc, #80]	; (80074dc <_fflush_r+0x6c>)
 800748c:	429c      	cmp	r4, r3
 800748e:	d11b      	bne.n	80074c8 <_fflush_r+0x58>
 8007490:	686c      	ldr	r4, [r5, #4]
 8007492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0ef      	beq.n	800747a <_fflush_r+0xa>
 800749a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800749c:	07d0      	lsls	r0, r2, #31
 800749e:	d404      	bmi.n	80074aa <_fflush_r+0x3a>
 80074a0:	0599      	lsls	r1, r3, #22
 80074a2:	d402      	bmi.n	80074aa <_fflush_r+0x3a>
 80074a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a6:	f000 f915 	bl	80076d4 <__retarget_lock_acquire_recursive>
 80074aa:	4628      	mov	r0, r5
 80074ac:	4621      	mov	r1, r4
 80074ae:	f7ff ff59 	bl	8007364 <__sflush_r>
 80074b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074b4:	07da      	lsls	r2, r3, #31
 80074b6:	4605      	mov	r5, r0
 80074b8:	d4e0      	bmi.n	800747c <_fflush_r+0xc>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	d4dd      	bmi.n	800747c <_fflush_r+0xc>
 80074c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c2:	f000 f908 	bl	80076d6 <__retarget_lock_release_recursive>
 80074c6:	e7d9      	b.n	800747c <_fflush_r+0xc>
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <_fflush_r+0x70>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	d101      	bne.n	80074d2 <_fflush_r+0x62>
 80074ce:	68ac      	ldr	r4, [r5, #8]
 80074d0:	e7df      	b.n	8007492 <_fflush_r+0x22>
 80074d2:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <_fflush_r+0x74>)
 80074d4:	429c      	cmp	r4, r3
 80074d6:	bf08      	it	eq
 80074d8:	68ec      	ldreq	r4, [r5, #12]
 80074da:	e7da      	b.n	8007492 <_fflush_r+0x22>
 80074dc:	08008224 	.word	0x08008224
 80074e0:	08008244 	.word	0x08008244
 80074e4:	08008204 	.word	0x08008204

080074e8 <std>:
 80074e8:	2300      	movs	r3, #0
 80074ea:	b510      	push	{r4, lr}
 80074ec:	4604      	mov	r4, r0
 80074ee:	e9c0 3300 	strd	r3, r3, [r0]
 80074f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074f6:	6083      	str	r3, [r0, #8]
 80074f8:	8181      	strh	r1, [r0, #12]
 80074fa:	6643      	str	r3, [r0, #100]	; 0x64
 80074fc:	81c2      	strh	r2, [r0, #14]
 80074fe:	6183      	str	r3, [r0, #24]
 8007500:	4619      	mov	r1, r3
 8007502:	2208      	movs	r2, #8
 8007504:	305c      	adds	r0, #92	; 0x5c
 8007506:	f7fd fb69 	bl	8004bdc <memset>
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <std+0x38>)
 800750c:	6263      	str	r3, [r4, #36]	; 0x24
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <std+0x3c>)
 8007510:	62a3      	str	r3, [r4, #40]	; 0x28
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <std+0x40>)
 8007514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <std+0x44>)
 8007518:	6224      	str	r4, [r4, #32]
 800751a:	6323      	str	r3, [r4, #48]	; 0x30
 800751c:	bd10      	pop	{r4, pc}
 800751e:	bf00      	nop
 8007520:	0800783d 	.word	0x0800783d
 8007524:	0800785f 	.word	0x0800785f
 8007528:	08007897 	.word	0x08007897
 800752c:	080078bb 	.word	0x080078bb

08007530 <_cleanup_r>:
 8007530:	4901      	ldr	r1, [pc, #4]	; (8007538 <_cleanup_r+0x8>)
 8007532:	f000 b8af 	b.w	8007694 <_fwalk_reent>
 8007536:	bf00      	nop
 8007538:	08007471 	.word	0x08007471

0800753c <__sfmoreglue>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	2268      	movs	r2, #104	; 0x68
 8007540:	1e4d      	subs	r5, r1, #1
 8007542:	4355      	muls	r5, r2
 8007544:	460e      	mov	r6, r1
 8007546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800754a:	f7ff fa65 	bl	8006a18 <_malloc_r>
 800754e:	4604      	mov	r4, r0
 8007550:	b140      	cbz	r0, 8007564 <__sfmoreglue+0x28>
 8007552:	2100      	movs	r1, #0
 8007554:	e9c0 1600 	strd	r1, r6, [r0]
 8007558:	300c      	adds	r0, #12
 800755a:	60a0      	str	r0, [r4, #8]
 800755c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007560:	f7fd fb3c 	bl	8004bdc <memset>
 8007564:	4620      	mov	r0, r4
 8007566:	bd70      	pop	{r4, r5, r6, pc}

08007568 <__sfp_lock_acquire>:
 8007568:	4801      	ldr	r0, [pc, #4]	; (8007570 <__sfp_lock_acquire+0x8>)
 800756a:	f000 b8b3 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	20001309 	.word	0x20001309

08007574 <__sfp_lock_release>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__sfp_lock_release+0x8>)
 8007576:	f000 b8ae 	b.w	80076d6 <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	20001309 	.word	0x20001309

08007580 <__sinit_lock_acquire>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__sinit_lock_acquire+0x8>)
 8007582:	f000 b8a7 	b.w	80076d4 <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	2000130a 	.word	0x2000130a

0800758c <__sinit_lock_release>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sinit_lock_release+0x8>)
 800758e:	f000 b8a2 	b.w	80076d6 <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	2000130a 	.word	0x2000130a

08007598 <__sinit>:
 8007598:	b510      	push	{r4, lr}
 800759a:	4604      	mov	r4, r0
 800759c:	f7ff fff0 	bl	8007580 <__sinit_lock_acquire>
 80075a0:	69a3      	ldr	r3, [r4, #24]
 80075a2:	b11b      	cbz	r3, 80075ac <__sinit+0x14>
 80075a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a8:	f7ff bff0 	b.w	800758c <__sinit_lock_release>
 80075ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075b0:	6523      	str	r3, [r4, #80]	; 0x50
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <__sinit+0x68>)
 80075b4:	4a13      	ldr	r2, [pc, #76]	; (8007604 <__sinit+0x6c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	bf04      	itt	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	61a3      	streq	r3, [r4, #24]
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 f820 	bl	8007608 <__sfp>
 80075c8:	6060      	str	r0, [r4, #4]
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 f81c 	bl	8007608 <__sfp>
 80075d0:	60a0      	str	r0, [r4, #8]
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f818 	bl	8007608 <__sfp>
 80075d8:	2200      	movs	r2, #0
 80075da:	60e0      	str	r0, [r4, #12]
 80075dc:	2104      	movs	r1, #4
 80075de:	6860      	ldr	r0, [r4, #4]
 80075e0:	f7ff ff82 	bl	80074e8 <std>
 80075e4:	68a0      	ldr	r0, [r4, #8]
 80075e6:	2201      	movs	r2, #1
 80075e8:	2109      	movs	r1, #9
 80075ea:	f7ff ff7d 	bl	80074e8 <std>
 80075ee:	68e0      	ldr	r0, [r4, #12]
 80075f0:	2202      	movs	r2, #2
 80075f2:	2112      	movs	r1, #18
 80075f4:	f7ff ff78 	bl	80074e8 <std>
 80075f8:	2301      	movs	r3, #1
 80075fa:	61a3      	str	r3, [r4, #24]
 80075fc:	e7d2      	b.n	80075a4 <__sinit+0xc>
 80075fe:	bf00      	nop
 8007600:	08007e88 	.word	0x08007e88
 8007604:	08007531 	.word	0x08007531

08007608 <__sfp>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	4607      	mov	r7, r0
 800760c:	f7ff ffac 	bl	8007568 <__sfp_lock_acquire>
 8007610:	4b1e      	ldr	r3, [pc, #120]	; (800768c <__sfp+0x84>)
 8007612:	681e      	ldr	r6, [r3, #0]
 8007614:	69b3      	ldr	r3, [r6, #24]
 8007616:	b913      	cbnz	r3, 800761e <__sfp+0x16>
 8007618:	4630      	mov	r0, r6
 800761a:	f7ff ffbd 	bl	8007598 <__sinit>
 800761e:	3648      	adds	r6, #72	; 0x48
 8007620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	d503      	bpl.n	8007630 <__sfp+0x28>
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	b30b      	cbz	r3, 8007670 <__sfp+0x68>
 800762c:	6836      	ldr	r6, [r6, #0]
 800762e:	e7f7      	b.n	8007620 <__sfp+0x18>
 8007630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007634:	b9d5      	cbnz	r5, 800766c <__sfp+0x64>
 8007636:	4b16      	ldr	r3, [pc, #88]	; (8007690 <__sfp+0x88>)
 8007638:	60e3      	str	r3, [r4, #12]
 800763a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800763e:	6665      	str	r5, [r4, #100]	; 0x64
 8007640:	f000 f847 	bl	80076d2 <__retarget_lock_init_recursive>
 8007644:	f7ff ff96 	bl	8007574 <__sfp_lock_release>
 8007648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800764c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007650:	6025      	str	r5, [r4, #0]
 8007652:	61a5      	str	r5, [r4, #24]
 8007654:	2208      	movs	r2, #8
 8007656:	4629      	mov	r1, r5
 8007658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800765c:	f7fd fabe 	bl	8004bdc <memset>
 8007660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007668:	4620      	mov	r0, r4
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	3468      	adds	r4, #104	; 0x68
 800766e:	e7d9      	b.n	8007624 <__sfp+0x1c>
 8007670:	2104      	movs	r1, #4
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff ff62 	bl	800753c <__sfmoreglue>
 8007678:	4604      	mov	r4, r0
 800767a:	6030      	str	r0, [r6, #0]
 800767c:	2800      	cmp	r0, #0
 800767e:	d1d5      	bne.n	800762c <__sfp+0x24>
 8007680:	f7ff ff78 	bl	8007574 <__sfp_lock_release>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	e7ee      	b.n	8007668 <__sfp+0x60>
 800768a:	bf00      	nop
 800768c:	08007e88 	.word	0x08007e88
 8007690:	ffff0001 	.word	0xffff0001

08007694 <_fwalk_reent>:
 8007694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007698:	4606      	mov	r6, r0
 800769a:	4688      	mov	r8, r1
 800769c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076a0:	2700      	movs	r7, #0
 80076a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a6:	f1b9 0901 	subs.w	r9, r9, #1
 80076aa:	d505      	bpl.n	80076b8 <_fwalk_reent+0x24>
 80076ac:	6824      	ldr	r4, [r4, #0]
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	d1f7      	bne.n	80076a2 <_fwalk_reent+0xe>
 80076b2:	4638      	mov	r0, r7
 80076b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b8:	89ab      	ldrh	r3, [r5, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d907      	bls.n	80076ce <_fwalk_reent+0x3a>
 80076be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c2:	3301      	adds	r3, #1
 80076c4:	d003      	beq.n	80076ce <_fwalk_reent+0x3a>
 80076c6:	4629      	mov	r1, r5
 80076c8:	4630      	mov	r0, r6
 80076ca:	47c0      	blx	r8
 80076cc:	4307      	orrs	r7, r0
 80076ce:	3568      	adds	r5, #104	; 0x68
 80076d0:	e7e9      	b.n	80076a6 <_fwalk_reent+0x12>

080076d2 <__retarget_lock_init_recursive>:
 80076d2:	4770      	bx	lr

080076d4 <__retarget_lock_acquire_recursive>:
 80076d4:	4770      	bx	lr

080076d6 <__retarget_lock_release_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__swhatbuf_r>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	460e      	mov	r6, r1
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	2900      	cmp	r1, #0
 80076e2:	b096      	sub	sp, #88	; 0x58
 80076e4:	4614      	mov	r4, r2
 80076e6:	461d      	mov	r5, r3
 80076e8:	da08      	bge.n	80076fc <__swhatbuf_r+0x24>
 80076ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	061a      	lsls	r2, r3, #24
 80076f4:	d410      	bmi.n	8007718 <__swhatbuf_r+0x40>
 80076f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fa:	e00e      	b.n	800771a <__swhatbuf_r+0x42>
 80076fc:	466a      	mov	r2, sp
 80076fe:	f000 f903 	bl	8007908 <_fstat_r>
 8007702:	2800      	cmp	r0, #0
 8007704:	dbf1      	blt.n	80076ea <__swhatbuf_r+0x12>
 8007706:	9a01      	ldr	r2, [sp, #4]
 8007708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800770c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007710:	425a      	negs	r2, r3
 8007712:	415a      	adcs	r2, r3
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	e7ee      	b.n	80076f6 <__swhatbuf_r+0x1e>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	2000      	movs	r0, #0
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	b016      	add	sp, #88	; 0x58
 8007720:	bd70      	pop	{r4, r5, r6, pc}
	...

08007724 <__smakebuf_r>:
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007728:	079d      	lsls	r5, r3, #30
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	d507      	bpl.n	8007740 <__smakebuf_r+0x1c>
 8007730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2301      	movs	r3, #1
 800773a:	6163      	str	r3, [r4, #20]
 800773c:	b002      	add	sp, #8
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	ab01      	add	r3, sp, #4
 8007742:	466a      	mov	r2, sp
 8007744:	f7ff ffc8 	bl	80076d8 <__swhatbuf_r>
 8007748:	9900      	ldr	r1, [sp, #0]
 800774a:	4605      	mov	r5, r0
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff f963 	bl	8006a18 <_malloc_r>
 8007752:	b948      	cbnz	r0, 8007768 <__smakebuf_r+0x44>
 8007754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d4ef      	bmi.n	800773c <__smakebuf_r+0x18>
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7e3      	b.n	8007730 <__smakebuf_r+0xc>
 8007768:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <__smakebuf_r+0x7c>)
 800776a:	62b3      	str	r3, [r6, #40]	; 0x28
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	6163      	str	r3, [r4, #20]
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	6120      	str	r0, [r4, #16]
 800777e:	b15b      	cbz	r3, 8007798 <__smakebuf_r+0x74>
 8007780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 f8d1 	bl	800792c <_isatty_r>
 800778a:	b128      	cbz	r0, 8007798 <__smakebuf_r+0x74>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	89a0      	ldrh	r0, [r4, #12]
 800779a:	4305      	orrs	r5, r0
 800779c:	81a5      	strh	r5, [r4, #12]
 800779e:	e7cd      	b.n	800773c <__smakebuf_r+0x18>
 80077a0:	08007531 	.word	0x08007531

080077a4 <_malloc_usable_size_r>:
 80077a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a8:	1f18      	subs	r0, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbc      	itt	lt
 80077ae:	580b      	ldrlt	r3, [r1, r0]
 80077b0:	18c0      	addlt	r0, r0, r3
 80077b2:	4770      	bx	lr

080077b4 <_raise_r>:
 80077b4:	291f      	cmp	r1, #31
 80077b6:	b538      	push	{r3, r4, r5, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	d904      	bls.n	80077c8 <_raise_r+0x14>
 80077be:	2316      	movs	r3, #22
 80077c0:	6003      	str	r3, [r0, #0]
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077ca:	b112      	cbz	r2, 80077d2 <_raise_r+0x1e>
 80077cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077d0:	b94b      	cbnz	r3, 80077e6 <_raise_r+0x32>
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 f830 	bl	8007838 <_getpid_r>
 80077d8:	462a      	mov	r2, r5
 80077da:	4601      	mov	r1, r0
 80077dc:	4620      	mov	r0, r4
 80077de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077e2:	f000 b817 	b.w	8007814 <_kill_r>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d00a      	beq.n	8007800 <_raise_r+0x4c>
 80077ea:	1c59      	adds	r1, r3, #1
 80077ec:	d103      	bne.n	80077f6 <_raise_r+0x42>
 80077ee:	2316      	movs	r3, #22
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	2001      	movs	r0, #1
 80077f4:	e7e7      	b.n	80077c6 <_raise_r+0x12>
 80077f6:	2400      	movs	r4, #0
 80077f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077fc:	4628      	mov	r0, r5
 80077fe:	4798      	blx	r3
 8007800:	2000      	movs	r0, #0
 8007802:	e7e0      	b.n	80077c6 <_raise_r+0x12>

08007804 <raise>:
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <raise+0xc>)
 8007806:	4601      	mov	r1, r0
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	f7ff bfd3 	b.w	80077b4 <_raise_r>
 800780e:	bf00      	nop
 8007810:	20000050 	.word	0x20000050

08007814 <_kill_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d07      	ldr	r5, [pc, #28]	; (8007834 <_kill_r+0x20>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f7fa fbf7 	bl	8002014 <_kill>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d102      	bne.n	8007830 <_kill_r+0x1c>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	b103      	cbz	r3, 8007830 <_kill_r+0x1c>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	20001304 	.word	0x20001304

08007838 <_getpid_r>:
 8007838:	f7fa bbe4 	b.w	8002004 <_getpid>

0800783c <__sread>:
 800783c:	b510      	push	{r4, lr}
 800783e:	460c      	mov	r4, r1
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	f000 f894 	bl	8007970 <_read_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	bfab      	itete	ge
 800784c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800784e:	89a3      	ldrhlt	r3, [r4, #12]
 8007850:	181b      	addge	r3, r3, r0
 8007852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007856:	bfac      	ite	ge
 8007858:	6563      	strge	r3, [r4, #84]	; 0x54
 800785a:	81a3      	strhlt	r3, [r4, #12]
 800785c:	bd10      	pop	{r4, pc}

0800785e <__swrite>:
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	461f      	mov	r7, r3
 8007864:	898b      	ldrh	r3, [r1, #12]
 8007866:	05db      	lsls	r3, r3, #23
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4616      	mov	r6, r2
 800786e:	d505      	bpl.n	800787c <__swrite+0x1e>
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	2302      	movs	r3, #2
 8007876:	2200      	movs	r2, #0
 8007878:	f000 f868 	bl	800794c <_lseek_r>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	4632      	mov	r2, r6
 800788a:	463b      	mov	r3, r7
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	f000 b817 	b.w	80078c4 <_write_r>

08007896 <__sseek>:
 8007896:	b510      	push	{r4, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789e:	f000 f855 	bl	800794c <_lseek_r>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	bf15      	itete	ne
 80078a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078b2:	81a3      	strheq	r3, [r4, #12]
 80078b4:	bf18      	it	ne
 80078b6:	81a3      	strhne	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__sclose>:
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 b813 	b.w	80078e8 <_close_r>
	...

080078c4 <_write_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	; (80078e4 <_write_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7fa fbd5 	bl	8002082 <_write>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_write_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_write_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20001304 	.word	0x20001304

080078e8 <_close_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_close_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7fa fbe1 	bl	80020ba <_close>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_close_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_close_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20001304 	.word	0x20001304

08007908 <_fstat_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	; (8007928 <_fstat_r+0x20>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	f7fa fbdc 	bl	80020d2 <_fstat>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d102      	bne.n	8007924 <_fstat_r+0x1c>
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	b103      	cbz	r3, 8007924 <_fstat_r+0x1c>
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	bd38      	pop	{r3, r4, r5, pc}
 8007926:	bf00      	nop
 8007928:	20001304 	.word	0x20001304

0800792c <_isatty_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	; (8007948 <_isatty_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7fa fbdb 	bl	80020f2 <_isatty>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_isatty_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_isatty_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20001304 	.word	0x20001304

0800794c <_lseek_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	; (800796c <_lseek_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7fa fbd4 	bl	8002108 <_lseek>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_lseek_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_lseek_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20001304 	.word	0x20001304

08007970 <_read_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_read_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7fa fb62 	bl	8002048 <_read>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_read_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_read_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20001304 	.word	0x20001304

08007994 <_init>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr

080079a0 <_fini>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	bf00      	nop
 80079a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a6:	bc08      	pop	{r3}
 80079a8:	469e      	mov	lr, r3
 80079aa:	4770      	bx	lr
